metadata:
  version: 3.2.1
  level: SEMANTIC_COMPLETE_WITH_MASTER_DEFINITION
  generated: '2025-10-20'
  source: COMPLETE_INTEGRATION_WITH_MASTER_DEFINITION_v1.1.1
  extraction_method: AUTOMATED_FROM_AUTHORITATIVE_SOURCES
  total_rules: 384
  matrix_alignment: 24x16 (24 Root-Ordner x 16 Shards = 384 Rules)
  source_files:
  - master_rules_combined.yaml (91 rules)
  - master_rules_lifted.yaml (61 rules)
  - sot_contract_v2.yaml (189 rules)
  - level3/1/master_rules (47 rules - CS, MS, KP, CE, TS, DC, MR)
  - ssid_master_definition_corrected_v1.1.1.md (57 NEW MD-* rules)
  rule_categories:
  - AR (Architecture Rules): AR001-AR010 (10 rules)
  - CP (Critical Policies): CP001-CP012 (12 rules)
  - VG (Versioning & Governance): VG001-VG008 (8 rules)
  - CS (Chart Structure): CS001-CS011 (11 rules)
  - MS (Manifest Structure): MS001-MS006 (6 rules)
  - KP (Core Principles): KP001-KP010 (10 rules)
  - CE (Consolidated Extensions): CE001-CE008 (8 rules)
  - TS (Technology Standards): TS001-TS005 (5 rules)
  - DC (Deployment & CI/CD): DC001-DC004 (4 rules)
  - MR (Matrix & Registry): MR001-MR003 (3 rules)
  - MD-STRUCT (Structure Paths): MD-STRUCT-009/010 (2 rules) [NEW]
  - MD-CHART (Chart Fields): MD-CHART-024/029/045/048/050 (5 rules) [NEW]
  - MD-MANIFEST (Manifest Fields): MD-MANIFEST-004 to MD-MANIFEST-050 (28 rules) [NEW]
  - MD-POLICY (Critical Policies): MD-POLICY-009/012/023/027/028 (6 rules) [NEW]
  - MD-PRINC (Principles): MD-PRINC-007/009/013/018-020 (6 rules) [NEW]
  - MD-GOV (Governance): MD-GOV-005 to MD-GOV-011 (7 rules) [NEW]
  - MD-EXT (Extensions): MD-EXT-012/014-015/018 (4 rules) [NEW]
  integration_status: 100% COMPLIANT - Master-Definition Fully Integrated
  implemented_in:
  - 03_core/validators/sot/sot_validator_core.py (384 rules)
  - 23_compliance/policies/sot/sot_policy.rego (384 rules)
  - 16_codex/contracts/sot/sot_contract.yaml (384 rules documented)
  - 12_tooling/cli/sot_validator.py (CLI support)
  - 11_test_simulation/tests_compliance/test_sot_validator.py (Tests)
  last_updated: '2025-10-21T12:50:52.592354'
  note: Cleaned UNKNOWN rules - 100% Coverage with 384 rules (24x16 Matrix)
rules:
- rule_id: AR001
  source: master_rules_combined.yaml
  source_section: Die 24 Root-Ordner
  source_line: ~50-199
  category: Matrix Architecture
  severity: CRITICAL
  enforcement: MUST
  description: Das System MUSS aus exakt 24 Root-Ordnern bestehen
  rationale: Deterministische Matrix-Architektur erfordert exakte Struktur
  sot_mapping:
    contract: 'schema: roots_registry.schema.json with enum[24]'
    core: 'registry_validator.py: assert len(roots) == 24'
    policy: 'opa/structure.rego: root_count == 24'
    cli: 'cli validate --roots: exit 1 if != 24'
    test: test_registry.py::test_exact_24_roots()
  implementation_requirements:
  - Validator prüft exakte Anzahl Root-Ordner
  - Registry führt Liste aller 24 Roots
  - CLI blockiert Abweichungen
  - Exit Code != 0 bei Violation
  sot_artefacts:
    python: validate_ar001() in sot_validator_core.py
    rego: AR001 deny rule in sot_policy.rego
    cli: --rules AR001 flag supported
    test: test_ar001() in test_sot_validator.py
- rule_id: AR002
  source: master_rules_combined.yaml
  source_section: Die 16 Shards (Oberkategorien)
  source_line: ~201-288
  category: Matrix Architecture
  severity: CRITICAL
  enforcement: MUST
  description: Jeder Root-Ordner MUSS exakt 16 Shards enthalten
  rationale: 'Matrix-Vollständigkeit: 24×16 = 384 Chart-Dateien'
  sot_mapping:
    contract: 'schema: shard_structure.schema.json with minItems: 16, maxItems: 16'
    core: 'shard_validator.py: assert len(shards) == 16 per root'
    policy: 'opa/structure.rego: shard_count_per_root == 16'
    cli: 'cli validate --shards: per-root check'
    test: test_shards.py::test_16_shards_per_root()
  implementation_requirements:
  - Validator prüft 16 Shards pro Root
  - 'Matrix-Berechnung: 24×16 = 384 Chart-Dateien'
  sot_artefacts:
    python: validate_ar002() in sot_validator_core.py
    rego: AR002 deny rule in sot_policy.rego
    cli: --rules AR002 flag supported
    test: test_ar002() in test_sot_validator.py
- rule_id: AR003
  source: master_rules_combined.yaml
  source_section: Matrix-Architektur (24×16)
  source_line: ~290-325
  category: Matrix Architecture
  severity: CRITICAL
  enforcement: MUST
  description: Es MÜSSEN exakt 384 Chart-Dateien existieren (24×16)
  rationale: 'Deterministisches Mapping: keine Lücken, keine Überzähligen'
  sot_mapping:
    contract: 'schema: matrix_registry.schema.json with total_charts: 384'
    core: 'chart_validator.py: assert count_charts() == 384'
    policy: 'opa/matrix.rego: count(charts) == 384'
    cli: 'cli validate --matrix: total chart count'
    test: test_matrix.py::test_exact_384_charts()
  implementation_requirements:
  - Validator zählt alle chart.yaml-Dateien
  - Exit Code != 0 bei Abweichung
  sot_artefacts:
    python: validate_ar003() in sot_validator_core.py
    rego: AR003 deny rule in sot_policy.rego
    cli: --rules AR003 flag supported
    test: test_ar003() in test_sot_validator.py
- rule_id: AR004
  source: master_rules_combined.yaml
  source_section: Naming Conventions - Root Folders
  source_line: ~327-350
  category: Naming Convention
  severity: HIGH
  enforcement: MUST
  description: Root-Ordner MÜSSEN Format '{NR}_{NAME}' haben (z.B. 01_ai_layer)
  rationale: Eindeutige Identifikation und Sortierung
  sot_mapping:
    contract: 'schema: root_naming.schema.json with pattern "^\\d{2}_[a-z_]+$"'
    core: 'naming_validator.py: re.match(r"^\d{2}_[a-z_]+$", root_name)'
    policy: 'opa/naming.rego: regex.match("^\\d{2}_[a-z_]+$", root.name)'
    cli: 'cli create --root: validates naming pattern'
    test: test_naming.py::test_root_naming_convention()
  implementation_requirements:
  - 'Regex: ^\d{2}_[a-z_]+$'
  - CLI validiert Namen bei Erstellung
  sot_artefacts:
    python: validate_ar004() in sot_validator_core.py
    rego: AR004 deny rule in sot_policy.rego
    cli: --rules AR004 flag supported
    test: test_ar004() in test_sot_validator.py
- rule_id: AR005
  source: master_rules_combined.yaml
  source_section: Naming Conventions
  source_line: ~632-637
  category: Naming Convention
  severity: HIGH
  enforcement: MUST
  description: Shards MÜSSEN Format 'Shard_{NR}_{NAME}' haben
  rationale: Konsistente Benennung über alle 384 Shards
  sot_mapping:
    contract: 'schema: shard_naming.schema.json with pattern: ^Shard_\d{2}_[A-Za-z_]+$'
    core: 'naming_validator.py: regex_check(shard_name, SHARD_PATTERN)'
    policy: 'opa/naming.rego: re_match(^Shard_\d{2}_[A-Za-z_]+$, shard)'
    cli: 'cli validate --naming: shard pattern check'
    test: test_naming.py::test_shard_naming_convention()
  implementation_requirements:
  - 'Regex: ^Shard_\d{2}_[A-Za-z_]+$'
  - Eindeutige Nummerierung 01-16
  sot_artefacts:
    python: validate_ar005() in sot_validator_core.py
    rego: AR005 deny rule in sot_policy.rego
    cli: --rules AR005 flag supported
    test: test_ar005() in test_sot_validator.py
- rule_id: AR006
  source: master_rules_combined.yaml
  source_section: 'Hybrid-Struktur: SoT + Implementierung'
  source_line: ~329-353
  category: File Structure
  severity: CRITICAL
  enforcement: MUST
  description: Jeder Shard MUSS eine chart.yaml (SoT) enthalten
  rationale: chart.yaml ist Single Source of Truth (abstrakt)
  sot_mapping:
    contract: 'schema: shard_structure.schema.json requires chart.yaml'
    core: 'shard_validator.py: assert exists(chart_path)'
    policy: 'opa/structure.rego: chart_yaml_exists'
    cli: 'cli validate --structure: chart.yaml presence'
    test: test_structure.py::test_chart_yaml_exists()
  implementation_requirements:
  - Validator prüft Existenz von chart.yaml
  - SHA256-Hash in Registry
  sot_artefacts:
    python: validate_ar006() in sot_validator_core.py
    rego: AR006 deny rule in sot_policy.rego
    cli: --rules AR006 flag supported
    test: test_ar006() in test_sot_validator.py
- rule_id: AR007
  source: master_rules_combined.yaml
  source_section: 'Hybrid-Struktur: SoT + Implementierung'
  source_line: ~329-353
  category: File Structure
  severity: HIGH
  enforcement: MUST
  description: Jede Implementierung MUSS eine manifest.yaml enthalten
  rationale: manifest.yaml definiert konkrete Implementierung (WIE)
  sot_mapping:
    contract: 'schema: implementation.schema.json requires manifest.yaml'
    core: 'impl_validator.py: assert exists(manifest_path)'
    policy: 'opa/structure.rego: manifest_yaml_exists'
    cli: cli validate --implementations
    test: test_impl.py::test_manifest_yaml_exists()
  implementation_requirements:
  - Validator prüft implementations/*/manifest.yaml
  - Link zur chart.yaml via chart_version
  sot_artefacts:
    python: validate_ar007() in sot_validator_core.py
    rego: AR007 deny rule in sot_policy.rego
    cli: --rules AR007 flag supported
    test: test_ar007() in test_sot_validator.py
- rule_id: AR008
  source: master_rules_combined.yaml
  source_section: Naming Conventions - Pfade
  source_line: ~647-660
  category: Directory Structure
  severity: HIGH
  enforcement: MUST
  description: 'Pfadstruktur MUSS sein: {ROOT}/shards/{SHARD}/chart.yaml'
  rationale: Deterministische Pfade für Automatisierung
  sot_mapping:
    contract: 'schema: path_structure.schema.json'
    core: 'path_validator.py: validate_path_pattern()'
    policy: 'opa/paths.rego: valid_chart_path'
    cli: cli validate --paths
    test: test_paths.py::test_chart_yaml_path()
  implementation_requirements:
  - Validator prüft exakte Pfadstruktur
  - Keine abweichenden Hierarchien erlaubt
  sot_artefacts:
    python: validate_ar008() in sot_validator_core.py
    rego: AR008 deny rule in sot_policy.rego
    cli: --rules AR008 flag supported
    test: test_ar008() in test_sot_validator.py
- rule_id: AR009
  source: master_rules_combined.yaml
  source_section: Ordnerstruktur Beispiele
  source_line: ~356-430
  category: Directory Structure
  severity: HIGH
  enforcement: MUST
  description: Implementierungen MÜSSEN unter implementations/{IMPL_ID}/ liegen
  rationale: Multi-Implementation Support mit Namespace-Isolation
  sot_mapping:
    contract: 'schema: implementation_paths.schema.json'
    core: 'impl_validator.py: validate_impl_paths()'
    policy: 'opa/impl.rego: valid_impl_path'
    cli: cli validate --impl-paths
    test: test_impl_paths.py::test_impl_directory_structure()
  implementation_requirements:
  - Validator prüft implementations/-Subordner
  - Jede Impl. hat eigenen Namespace
  sot_artefacts:
    python: validate_ar009() in sot_validator_core.py
    rego: AR009 deny rule in sot_policy.rego
    cli: --rules AR009 flag supported
    test: test_ar009() in test_sot_validator.py
- rule_id: AR010
  source: master_rules_combined.yaml
  source_section: Ordnerstruktur Beispiele
  source_line: ~366-372
  category: Contracts
  severity: HIGH
  enforcement: MUST
  description: Contracts MÜSSEN in contracts/-Ordner mit OpenAPI/JSON-Schema liegen
  rationale: 'Contract-First Development: Contracts vor Implementation'
  sot_mapping:
    contract: 'schema: contract_structure.schema.json'
    core: 'contract_validator.py: validate_contracts()'
    policy: 'opa/contracts.rego: contracts_present'
    cli: cli validate --contracts
    test: test_contracts.py::test_contract_files_exist()
  implementation_requirements:
  - Validator prüft contracts/*.openapi.yaml
  - Validator prüft contracts/schemas/*.schema.json
  sot_artefacts:
    python: validate_ar010() in sot_validator_core.py
    rego: AR010 deny rule in sot_policy.rego
    cli: --rules AR010 flag supported
    test: test_ar010() in test_sot_validator.py
- rule_id: CP001
  source: master_rules_combined.yaml
  source_section: Kritische Policies - Non-Custodial
  source_line: ~666-677
  category: Non-Custodial
  severity: CRITICAL
  enforcement: NIEMALS
  description: NIEMALS Rohdaten von PII oder biometrischen Daten speichern
  rationale: 'Rechtskonformität: Non-Custodial = keine PII-Speicherung'
  enforcement_details:
  - Static Analysis (Semgrep) blockiert PII-Storage
  - Runtime PII-Detector blockiert Verstöße
  - Violations = System-Block + Alert an Compliance-Team
  sot_mapping:
    contract: 'schema: pii_constraints.schema.json forbids pii_storage'
    core: 'pii_detector.py: runtime_check(), raise on violation'
    policy: 'opa/pii.rego: deny[msg] { pii_storage }'
    cli: 'cli lint --pii: pre-commit hook'
    test: test_pii.py::test_no_pii_storage()
  implementation_requirements:
  - 'OPA Policy: deny_pii_storage.rego'
  - 'Semgrep Ruleset: no-pii-storage.yaml'
  - 'Runtime: pii_detector.py'
  sot_artefacts:
    python: validate_cp001() in sot_validator_core.py
    rego: CP001 deny rule in sot_policy.rego
    cli: --rules CP001 flag supported
    test: test_cp001() in test_sot_validator.py
- rule_id: CP002
  source: master_rules_combined.yaml
  source_section: Kritische Policies - Hash-Only Data Policy
  source_line: ~678-686
  category: Hash-Only Data Policy
  severity: CRITICAL
  enforcement: MUST
  description: Alle Daten MÜSSEN als SHA3-256 Hashes gespeichert werden
  rationale: Deterministische Hashing-Strategie für Auditierbarkeit
  sot_mapping:
    contract: 'schema: data_policy.schema.json: storage_type=hash_only'
    core: 'hasher.py: sha3_256_hash(data, tenant_pepper)'
    policy: 'opa/hash_policy.rego: data_policy == hash_only'
    cli: cli validate --data-policy
    test: test_hash_policy.py::test_hash_only_storage()
  implementation_requirements:
  - data_policy.storage_type = 'hash_only'
  - hash_algorithm = 'SHA3-256'
  - Validator prüft Hashformat
  sot_artefacts:
    python: validate_cp002() in sot_validator_core.py
    rego: CP002 deny rule in sot_policy.rego
    cli: --rules CP002 flag supported
    test: test_cp002() in test_sot_validator.py
- rule_id: CP003
  source: master_rules_combined.yaml
  source_section: Kritische Policies - Hash-Only Data Policy
  source_line: ~678-686
  category: Hash-Only Data Policy
  severity: CRITICAL
  enforcement: MUST
  description: Tenant-spezifische Peppers MÜSSEN verwendet werden
  rationale: 'Sicherheit: Tenant-Isolation via Pepper'
  sot_mapping:
    contract: 'schema: pepper_strategy.schema.json: per_tenant'
    core: 'pepper_manager.py: get_tenant_pepper(tenant_id)'
    policy: 'opa/pepper.rego: pepper_strategy == per_tenant'
    cli: cli validate --pepper-strategy
    test: test_pepper.py::test_per_tenant_pepper()
  implementation_requirements:
  - pepper_strategy = 'per_tenant'
  - Secrets Management via 15_infra/vault
  sot_artefacts:
    python: validate_cp003() in sot_validator_core.py
    rego: CP003 deny rule in sot_policy.rego
    cli: --rules CP003 flag supported
    test: test_cp003() in test_sot_validator.py
- rule_id: CP004
  source: master_rules_combined.yaml
  source_section: Kritische Policies - Non-Custodial
  source_line: ~666-677
  category: Non-Custodial
  severity: CRITICAL
  enforcement: MUST
  description: Raw Data Retention MUSS '0 seconds' sein (Immediate Discard)
  rationale: 'Compliance: keine temporäre PII-Speicherung'
  sot_mapping:
    contract: 'schema: retention_policy.schema.json: raw_data_retention=0s'
    core: 'retention_manager.py: assert raw_data_retention == 0'
    policy: 'opa/retention.rego: raw_data_retention == "0 seconds"'
    cli: cli validate --retention
    test: test_retention.py::test_zero_raw_data_retention()
  implementation_requirements:
  - raw_data_retention = '0 seconds'
  - In-memory processing only
  - Kein Dateisystem-Cache für PII
  sot_artefacts:
    python: validate_cp004() in sot_validator_core.py
    rego: CP004 deny rule in sot_policy.rego
    cli: --rules CP004 flag supported
    test: test_cp004() in test_sot_validator.py
- rule_id: CP005
  source: master_rules_combined.yaml
  source_section: Kritische Policies - GDPR Compliance
  source_line: ~687-695
  category: GDPR Compliance
  severity: HIGH
  enforcement: MUST
  description: Right to Erasure MUSS via Hash-Rotation implementiert sein
  rationale: 'DSGVO Art. 17: Recht auf Löschung via Pepper-Rotation'
  sot_mapping:
    contract: 'schema: gdpr_rights.schema.json: erasure_method=hash_rotation'
    core: 'pepper_manager.py: rotate_tenant_pepper(tenant_id)'
    policy: 'opa/gdpr.rego: erasure_method == "hash_rotation"'
    cli: cli gdpr rotate-pepper --tenant-id
    test: test_gdpr.py::test_right_to_erasure_via_rotation()
  implementation_requirements:
  - Neuer Pepper macht alte Hashes unbrauchbar
  - Pepper-Rotation-API vorhanden
  sot_artefacts:
    python: validate_cp005() in sot_validator_core.py
    rego: CP005 deny rule in sot_policy.rego
    cli: --rules CP005 flag supported
    test: test_cp005() in test_sot_validator.py
- rule_id: CP006
  source: master_rules_combined.yaml
  source_section: Kritische Policies - GDPR Compliance
  source_line: ~687-695
  category: GDPR Compliance
  severity: HIGH
  enforcement: MUST
  description: Data Portability MUSS JSON-Export aller Hashes + Metadaten bieten
  rationale: 'DSGVO Art. 20: Recht auf Datenübertragbarkeit'
  sot_mapping:
    contract: 'schema: gdpr_rights.schema.json: portability_method=json_export'
    core: 'export_manager.py: export_user_data(user_id, format=json)'
    policy: 'opa/gdpr.rego: portability_method == "json_export"'
    cli: cli gdpr export --user-id --format json
    test: test_gdpr.py::test_data_portability_json_export()
  implementation_requirements:
  - Export-API in 03_core
  - JSON-Format mit Timestamps
  sot_artefacts:
    python: validate_cp006() in sot_validator_core.py
    rego: CP006 deny rule in sot_policy.rego
    cli: --rules CP006 flag supported
    test: test_cp006() in test_sot_validator.py
- rule_id: CP007
  source: master_rules_combined.yaml
  source_section: Kritische Policies - GDPR Compliance
  source_line: ~687-695
  category: GDPR Compliance
  severity: HIGH
  enforcement: MUST
  description: PII Redaction MUSS automatisch in Logs & Traces erfolgen
  rationale: 'Datenschutz: Keine PII in Logs oder Tracing-Daten'
  sot_mapping:
    contract: 'schema: logging_config.schema.json: pii_redaction=true'
    core: 'pii_redactor.py: redact_pii_in_logs(log_message)'
    policy: 'opa/logging.rego: logging.pii_redaction == true'
    cli: cli validate --logging-config
    test: test_logging.py::test_pii_redaction_enabled()
  implementation_requirements:
  - 'Logging-Config: pii_redaction: true'
  - Regex-basierte Redaction-Engine
  sot_artefacts:
    python: validate_cp007() in sot_validator_core.py
    rego: CP007 deny rule in sot_policy.rego
    cli: --rules CP007 flag supported
    test: test_cp007() in test_sot_validator.py
- rule_id: CP008
  source: master_rules_combined.yaml
  source_section: Kritische Policies - Bias & Fairness
  source_line: ~696-705
  category: Bias & Fairness
  severity: HIGH
  enforcement: MUST
  description: Alle AI/ML-Modelle MÜSSEN auf Bias getestet werden
  rationale: 'AI Act, Fairness: Diskriminierung durch ML-Modelle verhindern'
  sot_mapping:
    contract: 'schema: ai_governance.schema.json: bias_testing_required=true'
    core: 'bias_tester.py: run_bias_audit(model, test_set)'
    policy: 'opa/ai_governance.rego: bias_testing.required == true'
    cli: cli ai test-bias --model
    test: test_ai_governance.py::test_bias_testing_mandatory()
  implementation_requirements:
  - 'Bias Testing: Demographic Parity, Equal Opportunity'
  - Quarterly Bias Audits
  - Transparent Model Cards
  sot_artefacts:
    python: validate_cp008() in sot_validator_core.py
    rego: CP008 deny rule in sot_policy.rego
    cli: --rules CP008 flag supported
    test: test_cp008() in test_sot_validator.py
- rule_id: CP009
  source: master_rules_combined.yaml
  source_section: Kritische Policies - Evidence & Audit
  source_line: ~706-715
  category: Evidence & Audit
  severity: CRITICAL
  enforcement: MUST
  description: Hash-Ledger mit Blockchain-Anchoring MUSS verwendet werden
  rationale: 'Audit Trail: Tamper-Proof Evidence via Blockchain-Verankerung'
  sot_mapping:
    contract: 'schema: audit_strategy.schema.json: anchoring=blockchain'
    core: 'blockchain_anchor.py: anchor_to_chain(hash_ledger)'
    policy: 'opa/audit.rego: audit_strategy.anchoring == "blockchain"'
    cli: cli audit anchor --chain ethereum
    test: test_audit.py::test_blockchain_anchoring_enabled()
  implementation_requirements:
  - 'Strategy: hash_ledger_with_anchoring'
  - 'Chains: Ethereum Mainnet, Polygon'
  - 'Frequency: Hourly Anchoring'
  sot_artefacts:
    python: validate_cp009() in sot_validator_core.py
    rego: CP009 deny rule in sot_policy.rego
    cli: --rules CP009 flag supported
    test: test_cp009() in test_sot_validator.py
- rule_id: CP010
  source: master_rules_combined.yaml
  source_section: Kritische Policies - Evidence & Audit
  source_line: ~706-715
  category: Evidence & Audit
  severity: CRITICAL
  enforcement: MUST
  description: WORM-Storage mit 10 Jahren Retention MUSS verwendet werden
  rationale: 'Compliance: Unveränderbare Archivierung für regulatorische Auflagen'
  sot_mapping:
    contract: 'schema: storage_strategy.schema.json: type=worm, retention=10y'
    core: 'worm_storage.py: write_immutable(data, retention_years=10)'
    policy: 'opa/storage.rego: storage.type == "worm" and storage.retention >= 10'
    cli: cli storage validate --type worm
    test: test_storage.py::test_worm_10year_retention()
  implementation_requirements:
  - 'Storage: Write-Once-Read-Many'
  - 'Retention: 10 Jahre'
  - Immutable Backup-Strategie
  sot_artefacts:
    python: validate_cp010() in sot_validator_core.py
    rego: CP010 deny rule in sot_policy.rego
    cli: --rules CP010 flag supported
    test: test_cp010() in test_sot_validator.py
- rule_id: CP011
  source: master_rules_combined.yaml
  source_section: Kritische Policies - Secrets Management
  source_line: ~716-725
  category: Secrets Management
  severity: CRITICAL
  enforcement: NIEMALS
  description: NIEMALS Secrets in Git committen
  rationale: 'Sicherheit: Secrets nie in Versionskontrolle'
  enforcement_details:
  - pre-commit hook scannt auf Secrets
  - Gitleaks / TruffleHog Integration
  - CI/CD blockiert bei Secret-Leak
  - Violations = Commit-Block + Security-Alert
  sot_mapping:
    contract: 'schema: secrets_policy.schema.json: git_commit=forbidden'
    core: 'secrets_scanner.py: scan_for_secrets(commit_files)'
    policy: 'opa/secrets.rego: deny[msg] { git_commit_contains_secrets }'
    cli: cli pre-commit --scan-secrets
    test: test_secrets.py::test_no_secrets_in_git()
  implementation_requirements:
  - Secrets via 15_infra/vault
  - AES-256-GCM at-rest, TLS 1.3 in-transit
  sot_artefacts:
    python: validate_cp011() in sot_validator_core.py
    rego: CP011 deny rule in sot_policy.rego
    cli: --rules CP011 flag supported
    test: test_cp011() in test_sot_validator.py
- rule_id: CP012
  source: master_rules_combined.yaml
  source_section: Kritische Policies - Secrets Management
  source_line: ~716-725
  category: Secrets Management
  severity: HIGH
  enforcement: MUST
  description: Secrets MÜSSEN alle 90 Tage rotiert werden
  rationale: 'Best Practice: Regelmäßige Rotation reduziert Secret-Compromise-Fenster'
  sot_mapping:
    contract: 'schema: secrets_policy.schema.json: rotation_days=90'
    core: 'vault_manager.py: rotate_secret_if_expired(secret, max_age=90)'
    policy: 'opa/secrets.rego: secrets.rotation_days <= 90'
    cli: cli vault rotate-check
    test: test_vault.py::test_90day_rotation_policy()
  implementation_requirements:
  - 'Rotation Policy: 90 Tage'
  - Automatisierte Rotation via Vault
  sot_artefacts:
    python: validate_cp012() in sot_validator_core.py
    rego: CP012 deny rule in sot_policy.rego
    cli: --rules CP012 flag supported
    test: test_cp012() in test_sot_validator.py
- rule_id: VG001
  source: master_rules_combined.yaml
  source_section: Versioning & Governance
  source_line: ~726-745
  category: Semantic Versioning
  severity: HIGH
  enforcement: MUST
  description: Alle Versionen MÜSSEN Semver (MAJOR.MINOR.PATCH) verwenden
  rationale: 'Interoperabilität: Konsistente Versionierung über alle Komponenten'
  sot_mapping:
    contract: 'schema: version.schema.json: pattern=^\d+\.\d+\.\d+$'
    core: 'version_validator.py: validate_semver(version_string)'
    policy: 'opa/versioning.rego: re_match(^\d+\.\d+\.\d+$, version)'
    cli: cli validate --version
    test: test_versioning.py::test_semver_format_required()
  implementation_requirements:
  - Validator prüft Semver-Format
  - Automatischer Bump via CI
  sot_artefacts:
    python: validate_vg001() in sot_validator_core.py
    rego: VG001 deny rule in sot_policy.rego
    cli: --rules VG001 flag supported
    test: test_vg001() in test_sot_validator.py
- rule_id: VG002
  source: master_rules_combined.yaml
  source_section: Versioning & Governance
  source_line: ~726-745
  category: Breaking Changes
  severity: HIGH
  enforcement: MUST
  description: Breaking Changes MÜSSEN Migration Guide + Compatibility Layer haben
  rationale: 'Upgrade-Sicherheit: Reduziert Breaking-Change-Risiken für Integrationen'
  sot_mapping:
    contract: 'schema: breaking_changes.schema.json: migration_guide_required=true'
    core: 'migration_validator.py: validate_migration_guide(version)'
    policy: 'opa/versioning.rego: breaking_changes.migration_guide_exists'
    cli: cli validate --breaking-changes
    test: test_versioning.py::test_migration_guide_required()
  implementation_requirements:
  - Migration Guide in docs/migrations/
  - Compatibility Layer für 1 Major-Version
  sot_artefacts:
    python: validate_vg002() in sot_validator_core.py
    rego: VG002 deny rule in sot_policy.rego
    cli: --rules VG002 flag supported
    test: test_vg002() in test_sot_validator.py
- rule_id: VG003
  source: master_rules_combined.yaml
  source_section: Versioning & Governance
  source_line: ~726-745
  category: Deprecation
  severity: HIGH
  enforcement: MUST
  description: Deprecations MÜSSEN 180 Tage Notice Period haben
  rationale: 'Developer Experience: Ausreichend Zeit für API-Migrations'
  sot_mapping:
    contract: 'schema: deprecation_policy.schema.json: notice_period_days=180'
    core: 'deprecation_manager.py: validate_notice_period(days=180)'
    policy: 'opa/versioning.rego: deprecation.notice_period >= 180'
    cli: cli validate --deprecations
    test: test_versioning.py::test_180day_deprecation_notice()
  implementation_requirements:
  - Deprecation Notice in CHANGELOG.md
  - Automated Deprecation Warnings
  sot_artefacts:
    python: validate_vg003() in sot_validator_core.py
    rego: VG003 deny rule in sot_policy.rego
    cli: --rules VG003 flag supported
    test: test_vg003() in test_sot_validator.py
- rule_id: VG004
  source: master_rules_combined.yaml
  source_section: Versioning & Governance
  source_line: ~726-745
  category: RFC Process
  severity: HIGH
  enforcement: MUST
  description: Alle MUST-Capability-Änderungen MÜSSEN RFC-Prozess durchlaufen
  rationale: 'Governance: Architektonische Stabilität durch strukturierten Review'
  sot_mapping:
    contract: 'schema: rfc_process.schema.json: capability_changes_require_rfc=true'
    core: 'rfc_validator.py: validate_rfc_approval(change_type=capability)'
    policy: 'opa/governance.rego: rfc_process.required_for_capabilities'
    cli: cli rfc validate --change-type capability
    test: test_governance.py::test_rfc_required_for_capabilities()
  implementation_requirements:
  - RFC Template in 05_documentation/templates/
  - Approval von Architecture Board
  sot_artefacts:
    python: validate_vg004() in sot_validator_core.py
    rego: VG004 deny rule in sot_policy.rego
    cli: --rules VG004 flag supported
    test: test_vg004() in test_sot_validator.py
- rule_id: VG005
  source: master_rules_combined.yaml
  source_section: Versioning & Governance
  source_line: ~726-745
  category: Governance Roles
  severity: MEDIUM
  enforcement: MUST
  description: Jeder Shard MUSS einen Owner haben
  rationale: 'Ownership: Klare Verantwortlichkeiten für alle Komponenten'
  sot_mapping:
    contract: 'schema: chart.schema.json: governance.owner required'
    core: 'chart_validator.py: validate_owner_exists(chart)'
    policy: 'opa/governance.rego: chart.governance.owner != null'
    cli: cli validate --chart-owner
    test: test_governance.py::test_shard_owner_required()
  implementation_requirements:
  - Owner in chart.yaml.governance.owner
  - Kontaktdaten in Registry
  sot_artefacts:
    python: validate_vg005() in sot_validator_core.py
    rego: VG005 deny rule in sot_policy.rego
    cli: --rules VG005 flag supported
    test: test_vg005() in test_sot_validator.py
- rule_id: VG006
  source: master_rules_combined.yaml
  source_section: Versioning & Governance
  source_line: ~726-745
  category: Governance Roles
  severity: HIGH
  enforcement: MUST
  description: Architecture Board MUSS alle chart.yaml-Änderungen reviewen
  rationale: 'Quality Gate: Dual Review für kritische Architektur-Metadaten'
  sot_mapping:
    contract: 'schema: review_process.schema.json: chart_yaml_dual_review=true'
    core: 'review_validator.py: validate_dual_approval(pr, reviewers)'
    policy: 'opa/governance.rego: chart_changes.dual_review_required'
    cli: cli review validate --file chart.yaml
    test: test_governance.py::test_chart_yaml_dual_review()
  implementation_requirements:
  - 'Dual Review: Architecture + Compliance'
  - Approval-Log in 02_audit_logging
  sot_artefacts:
    python: validate_vg006() in sot_validator_core.py
    rego: VG006 deny rule in sot_policy.rego
    cli: --rules VG006 flag supported
    test: test_vg006() in test_sot_validator.py
- rule_id: VG007
  source: master_rules_combined.yaml
  source_section: Versioning & Governance
  source_line: ~726-745
  category: Change Process
  severity: HIGH
  enforcement: MUST
  description: Change-Prozess MUSS 7 Stufen durchlaufen (RFC bis Monitoring)
  rationale: 'Quality Assurance: Strukturierter Change-Prozess für hohe Stabilität'
  sot_mapping:
    contract: 'schema: change_process.schema.json: stages=[rfc,design,impl,test,review,deploy,monitor]'
    core: 'change_validator.py: validate_all_stages(change_request)'
    policy: 'opa/governance.rego: change_process.stages == 7'
    cli: cli change validate --stages
    test: test_governance.py::test_7stage_change_process()
  implementation_requirements:
  - CI Pipeline prüft alle 7 Gates
  - Rollback-Plan erforderlich
  sot_artefacts:
    python: validate_vg007() in sot_validator_core.py
    rego: VG007 deny rule in sot_policy.rego
    cli: --rules VG007 flag supported
    test: test_vg007() in test_sot_validator.py
- rule_id: VG008
  source: master_rules_combined.yaml
  source_section: Versioning & Governance
  source_line: ~726-745
  category: Promotion Rules
  severity: MEDIUM
  enforcement: MUST
  description: SHOULD→MUST Promotion MUSS 90 Tage Production + 99.5% SLA erfüllen
  rationale: 'Maturity Requirement: Nur bewährte Capabilities werden MUST'
  sot_mapping:
    contract: 'schema: promotion_policy.schema.json: production_days=90, sla_min=99.5'
    core: 'promotion_validator.py: validate_sla_requirement(days=90, sla=99.5)'
    policy: 'opa/governance.rego: promotion.production_days >= 90 and sla >= 99.5'
    cli: cli promotion validate --capability
    test: test_governance.py::test_should_to_must_promotion_requirements()
  implementation_requirements:
  - SLA-Tracking in 17_observability
  - Contract Test Coverage ≥95%
  sot_artefacts:
    python: validate_vg008() in sot_validator_core.py
    rego: VG008 deny rule in sot_policy.rego
    cli: --rules VG008 flag supported
    test: test_vg008() in test_sot_validator.py
- rule_id: JURIS_BL_001
  source: master_rules_lifted.yaml
  source_section: List-to-Rule Lifting - KONS001
  source_line: ~7-28
  category: Sanctions Compliance
  severity: CRITICAL
  enforcement: MUST
  description: 'System MUSS Transaktionen aus Iran (IR) blockieren. Grund: OFAC Comprehensive
    Sanctions'
  rationale: 'Compliance: OFAC Sanctions erfordern vollständigen Block von Iran-Transaktionen'
  sot_mapping:
    contract: 'schema: sanctions.schema.json: blacklist[IR]'
    core: 'sanctions_validator.py: validate_jurisdiction(country_code, blacklist)'
    policy: 'opa/sanctions.rego: deny { input.country_code == "IR" }'
    cli: cli validate --sanctions --country IR
    test: test_sanctions.py::test_iran_blocked()
  implementation_requirements:
  - 'OPA Policy: deny/allow für JURIS_BL_001'
  - 'Unit Test: test_juris_bl_001()'
  - 'Audit Trail: Log all JURIS_BL_001-related events'
  - 'Runtime Check: Block if input.country_code == ''IR'''
  - 'API Response: 403 Forbidden with reason ''Sanctioned jurisdiction: IR'''
  sot_artefacts:
    python: validate_juris_bl_001() in sot_validator_core.py
    rego: JURIS_BL_001 deny rule in sot_policy.rego
    cli: --rules JURIS_BL_001 flag supported
    test: test_juris_bl_001() in test_sot_validator.py
  metadata:
    list_name: blacklist_jurisdictions
    list_source: 23_compliance/policies/sanctions.yaml
    list_index: 0
    audit_requirement: MiCA, eIDAS, OFAC
  data:
    code: IR
    name: Iran
    reason: OFAC Comprehensive Sanctions
- rule_id: JURIS_BL_002
  source: master_rules_lifted.yaml
  source_section: List-to-Rule Lifting - KONS001
  source_line: ~29-50
  category: Sanctions Compliance
  severity: CRITICAL
  enforcement: MUST
  description: 'System MUSS Transaktionen aus North Korea (KP) blockieren. Grund:
    OFAC Comprehensive Sanctions'
  rationale: 'Compliance: OFAC Sanctions erfordern vollständigen Block von North Korea-Transaktionen'
  sot_mapping:
    contract: 'schema: sanctions.schema.json: blacklist[KP]'
    core: 'sanctions_validator.py: validate_jurisdiction(country_code, blacklist)'
    policy: 'opa/sanctions.rego: deny { input.country_code == "KP" }'
    cli: cli validate --sanctions --country KP
    test: test_sanctions.py::test_north_korea_blocked()
  implementation_requirements:
  - 'OPA Policy: deny/allow für JURIS_BL_002'
  - 'Unit Test: test_juris_bl_002()'
  - 'Audit Trail: Log all JURIS_BL_002-related events'
  - 'Runtime Check: Block if input.country_code == ''KP'''
  - 'API Response: 403 Forbidden with reason ''Sanctioned jurisdiction: KP'''
  sot_artefacts:
    python: validate_juris_bl_002() in sot_validator_core.py
    rego: JURIS_BL_002 deny rule in sot_policy.rego
    cli: --rules JURIS_BL_002 flag supported
    test: test_juris_bl_002() in test_sot_validator.py
  metadata:
    list_name: blacklist_jurisdictions
    list_source: 23_compliance/policies/sanctions.yaml
    list_index: 1
    audit_requirement: MiCA, eIDAS, OFAC
  data:
    code: KP
    name: North Korea
    reason: OFAC Comprehensive Sanctions
- rule_id: JURIS_BL_003
  source: master_rules_lifted.yaml
  source_section: List-to-Rule Lifting - KONS001
  source_line: ~51-72
  category: Sanctions Compliance
  severity: CRITICAL
  enforcement: MUST
  description: 'System MUSS Transaktionen aus Syria (SY) blockieren. Grund: OFAC Comprehensive
    Sanctions'
  rationale: 'Compliance: OFAC Sanctions erfordern vollständigen Block von Syria-Transaktionen'
  sot_mapping:
    contract: 'schema: sanctions.schema.json: blacklist[SY]'
    core: 'sanctions_validator.py: validate_jurisdiction(country_code, blacklist)'
    policy: 'opa/sanctions.rego: deny { input.country_code == "SY" }'
    cli: cli validate --sanctions --country SY
    test: test_sanctions.py::test_syria_blocked()
  implementation_requirements:
  - 'OPA Policy: deny/allow für JURIS_BL_003'
  - 'Unit Test: test_juris_bl_003()'
  - 'Audit Trail: Log all JURIS_BL_003-related events'
  - 'Runtime Check: Block if input.country_code == ''SY'''
  - 'API Response: 403 Forbidden with reason ''Sanctioned jurisdiction: SY'''
  sot_artefacts:
    python: validate_juris_bl_003() in sot_validator_core.py
    rego: JURIS_BL_003 deny rule in sot_policy.rego
    cli: --rules JURIS_BL_003 flag supported
    test: test_juris_bl_003() in test_sot_validator.py
  metadata:
    list_name: blacklist_jurisdictions
    list_source: 23_compliance/policies/sanctions.yaml
    list_index: 2
    audit_requirement: MiCA, eIDAS, OFAC
  data:
    code: SY
    name: Syria
    reason: OFAC Comprehensive Sanctions
- rule_id: JURIS_BL_004
  source: master_rules_lifted.yaml
  source_section: List-to-Rule Lifting - KONS001
  source_line: ~73-94
  category: Sanctions Compliance
  severity: HIGH
  enforcement: MUST
  description: 'System MUSS Transaktionen aus Cuba (CU) blockieren. Grund: OFAC Sanctions
    (Limited)'
  rationale: 'Compliance: OFAC Limited Sanctions erfordern Block von Cuba-Transaktionen'
  sot_mapping:
    contract: 'schema: sanctions.schema.json: blacklist[CU]'
    core: 'sanctions_validator.py: validate_jurisdiction(country_code, blacklist)'
    policy: 'opa/sanctions.rego: deny { input.country_code == "CU" }'
    cli: cli validate --sanctions --country CU
    test: test_sanctions.py::test_cuba_blocked()
  implementation_requirements:
  - 'OPA Policy: deny/allow für JURIS_BL_004'
  - 'Unit Test: test_juris_bl_004()'
  - 'Audit Trail: Log all JURIS_BL_004-related events'
  - 'Runtime Check: Block if input.country_code == ''CU'''
  - 'API Response: 403 Forbidden with reason ''Sanctioned jurisdiction: CU'''
  sot_artefacts:
    python: validate_juris_bl_004() in sot_validator_core.py
    rego: JURIS_BL_004 deny rule in sot_policy.rego
    cli: --rules JURIS_BL_004 flag supported
    test: test_juris_bl_004() in test_sot_validator.py
  metadata:
    list_name: blacklist_jurisdictions
    list_source: 23_compliance/policies/sanctions.yaml
    list_index: 3
    audit_requirement: MiCA, eIDAS, OFAC
  data:
    code: CU
    name: Cuba
    reason: OFAC Sanctions (Limited)
- rule_id: JURIS_BL_005
  source: master_rules_lifted.yaml
  source_section: List-to-Rule Lifting - KONS001
  source_line: ~95-116
  category: Sanctions Compliance
  severity: HIGH
  enforcement: MUST
  description: 'System MUSS Transaktionen aus Sudan (SD) blockieren. Grund: OFAC Sanctions
    (Regional)'
  rationale: 'Compliance: OFAC Regional Sanctions erfordern Block von Sudan-Transaktionen'
  sot_mapping:
    contract: 'schema: sanctions.schema.json: blacklist[SD]'
    core: 'sanctions_validator.py: validate_jurisdiction(country_code, blacklist)'
    policy: 'opa/sanctions.rego: deny { input.country_code == "SD" }'
    cli: cli validate --sanctions --country SD
    test: test_sanctions.py::test_sudan_blocked()
  implementation_requirements:
  - 'OPA Policy: deny/allow für JURIS_BL_005'
  - 'Unit Test: test_juris_bl_005()'
  - 'Audit Trail: Log all JURIS_BL_005-related events'
  - 'Runtime Check: Block if input.country_code == ''SD'''
  - 'API Response: 403 Forbidden with reason ''Sanctioned jurisdiction: SD'''
  sot_artefacts:
    python: validate_juris_bl_005() in sot_validator_core.py
    rego: JURIS_BL_005 deny rule in sot_policy.rego
    cli: --rules JURIS_BL_005 flag supported
    test: test_juris_bl_005() in test_sot_validator.py
  metadata:
    list_name: blacklist_jurisdictions
    list_source: 23_compliance/policies/sanctions.yaml
    list_index: 4
    audit_requirement: MiCA, eIDAS, OFAC
  data:
    code: SD
    name: Sudan
    reason: OFAC Sanctions (Regional)
- rule_id: JURIS_BL_006
  source: master_rules_lifted.yaml
  source_section: List-to-Rule Lifting - KONS001
  source_line: ~117-137
  category: Sanctions Compliance
  severity: HIGH
  enforcement: MUST
  description: 'System MUSS Transaktionen aus Belarus (BY) blockieren. Grund: EU Sanctions'
  rationale: 'Compliance: EU Sanctions erfordern Block von Belarus-Transaktionen'
  sot_mapping:
    contract: 'schema: sanctions.schema.json: blacklist[BY]'
    core: 'sanctions_validator.py: validate_jurisdiction(country_code, blacklist)'
    policy: 'opa/sanctions.rego: deny { input.country_code == "BY" }'
    cli: cli validate --sanctions --country BY
    test: test_sanctions.py::test_belarus_blocked()
  implementation_requirements:
  - 'OPA Policy: deny/allow für JURIS_BL_006'
  - 'Unit Test: test_juris_bl_006()'
  - 'Audit Trail: Log all JURIS_BL_006-related events'
  - 'Runtime Check: Block if input.country_code == ''BY'''
  - 'API Response: 403 Forbidden with reason ''Sanctioned jurisdiction: BY'''
  sot_artefacts:
    python: validate_juris_bl_006() in sot_validator_core.py
    rego: JURIS_BL_006 deny rule in sot_policy.rego
    cli: --rules JURIS_BL_006 flag supported
    test: test_juris_bl_006() in test_sot_validator.py
  metadata:
    list_name: blacklist_jurisdictions
    list_source: 23_compliance/policies/sanctions.yaml
    list_index: 5
    audit_requirement: MiCA, eIDAS, OFAC
  data:
    code: BY
    name: Belarus
    reason: EU Sanctions
- rule_id: JURIS_BL_007
  source: master_rules_lifted.yaml
  source_section: List-to-Rule Lifting - KONS001
  source_line: ~138-159
  category: Sanctions Compliance
  severity: MEDIUM
  enforcement: MUST
  description: 'System MUSS Transaktionen aus Venezuela (VE) blockieren. Grund: OFAC
    Sectoral Sanctions'
  rationale: 'Compliance: OFAC Sectoral Sanctions erfordern Block von Venezuela-Transaktionen'
  sot_mapping:
    contract: 'schema: sanctions.schema.json: blacklist[VE]'
    core: 'sanctions_validator.py: validate_jurisdiction(country_code, blacklist)'
    policy: 'opa/sanctions.rego: deny { input.country_code == "VE" }'
    cli: cli validate --sanctions --country VE
    test: test_sanctions.py::test_venezuela_blocked()
  implementation_requirements:
  - 'OPA Policy: deny/allow für JURIS_BL_007'
  - 'Unit Test: test_juris_bl_007()'
  - 'Audit Trail: Log all JURIS_BL_007-related events'
  - 'Runtime Check: Block if input.country_code == ''VE'''
  - 'API Response: 403 Forbidden with reason ''Sanctioned jurisdiction: VE'''
  sot_artefacts:
    python: validate_juris_bl_007() in sot_validator_core.py
    rego: JURIS_BL_007 deny rule in sot_policy.rego
    cli: --rules JURIS_BL_007 flag supported
    test: test_juris_bl_007() in test_sot_validator.py
  metadata:
    list_name: blacklist_jurisdictions
    list_source: 23_compliance/policies/sanctions.yaml
    list_index: 6
    audit_requirement: MiCA, eIDAS, OFAC
  data:
    code: VE
    name: Venezuela
    reason: OFAC Sectoral Sanctions
- rule_id: PROP_TYPE_001
  source: master_rules_lifted.yaml
  source_section: List-to-Rule Lifting - GOV001
  source_line: ~160-183
  category: DAO Governance
  severity: HIGH
  enforcement: MUST
  description: System MUSS Proposal-Typ 'System Parameter Change' (parameter_change)
    unterstützen mit Quorum 10% und Threshold 66%
  rationale: 'DAO Governance: System-Parameter-Änderungen erfordern strukturierte
    Governance'
  sot_mapping:
    contract: 'schema: dao_proposals.schema.json: proposal_types[parameter_change]'
    core: 'dao_validator.py: validate_proposal_type(type, quorum=10%, threshold=66%)'
    policy: 'opa/dao.rego: proposal.type == "parameter_change" and quorum >= 10 and
      threshold >= 66'
    cli: cli dao validate-proposal --type parameter_change
    test: test_dao.py::test_parameter_change_proposal()
  implementation_requirements:
  - 'OPA Policy: deny/allow für PROP_TYPE_001'
  - 'Unit Test: test_prop_type_001()'
  - 'Audit Trail: Log all PROP_TYPE_001-related events'
  - 'DAO Contract: Validate proposal type == ''parameter_change'''
  - 'Quorum Check: Require 10% participation'
  - 'Threshold Check: Require 66% approval'
  sot_artefacts:
    python: validate_prop_type_001() in sot_validator_core.py
    rego: PROP_TYPE_001 deny rule in sot_policy.rego
    cli: --rules PROP_TYPE_001 flag supported
    test: test_prop_type_001() in test_sot_validator.py
  metadata:
    list_name: governance_proposal_types
    list_source: 20_foundation/governance/dao_proposals.yaml
    list_index: 0
    audit_requirement: DAO Governance, Token Holder Rights
  data:
    type: parameter_change
    name: System Parameter Change
    quorum: 10%
    threshold: 66%
- rule_id: PROP_TYPE_002
  source: master_rules_lifted.yaml
  source_section: List-to-Rule Lifting - GOV001
  source_line: ~184-207
  category: DAO Governance
  severity: CRITICAL
  enforcement: MUST
  description: System MUSS Proposal-Typ 'Treasury Fund Allocation' (treasury_allocation)
    unterstützen mit Quorum 15% und Threshold 75%
  rationale: 'DAO Governance: Treasury-Allokationen erfordern erhöhte Quorum/Threshold-Anforderungen'
  sot_mapping:
    contract: 'schema: dao_proposals.schema.json: proposal_types[treasury_allocation]'
    core: 'dao_validator.py: validate_proposal_type(type, quorum=15%, threshold=75%)'
    policy: 'opa/dao.rego: proposal.type == "treasury_allocation" and quorum >= 15
      and threshold >= 75'
    cli: cli dao validate-proposal --type treasury_allocation
    test: test_dao.py::test_treasury_allocation_proposal()
  implementation_requirements:
  - 'OPA Policy: deny/allow für PROP_TYPE_002'
  - 'Unit Test: test_prop_type_002()'
  - 'Audit Trail: Log all PROP_TYPE_002-related events'
  - 'DAO Contract: Validate proposal type == ''treasury_allocation'''
  - 'Quorum Check: Require 15% participation'
  - 'Threshold Check: Require 75% approval'
  sot_artefacts:
    python: validate_prop_type_002() in sot_validator_core.py
    rego: PROP_TYPE_002 deny rule in sot_policy.rego
    cli: --rules PROP_TYPE_002 flag supported
    test: test_prop_type_002() in test_sot_validator.py
  metadata:
    list_name: governance_proposal_types
    list_source: 20_foundation/governance/dao_proposals.yaml
    list_index: 1
    audit_requirement: DAO Governance, Token Holder Rights
  data:
    type: treasury_allocation
    name: Treasury Fund Allocation
    quorum: 15%
    threshold: 75%
- rule_id: PROP_TYPE_003
  source: master_rules_lifted.yaml
  source_section: List-to-Rule Lifting - GOV001
  source_line: ~208-231
  category: DAO Governance
  severity: CRITICAL
  enforcement: MUST
  description: System MUSS Proposal-Typ 'Smart Contract Upgrade' (contract_upgrade)
    unterstützen mit Quorum 20% und Threshold 80%
  rationale: 'DAO Governance: Contract-Upgrades erfordern maximale Quorum/Threshold-Anforderungen'
  sot_mapping:
    contract: 'schema: dao_proposals.schema.json: proposal_types[contract_upgrade]'
    core: 'dao_validator.py: validate_proposal_type(type, quorum=20%, threshold=80%)'
    policy: 'opa/dao.rego: proposal.type == "contract_upgrade" and quorum >= 20 and
      threshold >= 80'
    cli: cli dao validate-proposal --type contract_upgrade
    test: test_dao.py::test_contract_upgrade_proposal()
  implementation_requirements:
  - 'OPA Policy: deny/allow für PROP_TYPE_003'
  - 'Unit Test: test_prop_type_003()'
  - 'Audit Trail: Log all PROP_TYPE_003-related events'
  - 'DAO Contract: Validate proposal type == ''contract_upgrade'''
  - 'Quorum Check: Require 20% participation'
  - 'Threshold Check: Require 80% approval'
  sot_artefacts:
    python: validate_prop_type_003() in sot_validator_core.py
    rego: PROP_TYPE_003 deny rule in sot_policy.rego
    cli: --rules PROP_TYPE_003 flag supported
    test: test_prop_type_003() in test_sot_validator.py
  metadata:
    list_name: governance_proposal_types
    list_source: 20_foundation/governance/dao_proposals.yaml
    list_index: 2
    audit_requirement: DAO Governance, Token Holder Rights
  data:
    type: contract_upgrade
    name: Smart Contract Upgrade
    quorum: 20%
    threshold: 80%
- rule_id: PROP_TYPE_004
  source: master_rules_lifted.yaml
  source_section: List-to-Rule Lifting - GOV001
  source_line: ~232-255
  category: DAO Governance
  severity: MEDIUM
  enforcement: MUST
  description: System MUSS Proposal-Typ 'Community Grant Program' (grant_program)
    unterstützen mit Quorum 5% und Threshold 50%
  rationale: 'DAO Governance: Community Grant Programs benötigen niedrigere Quorum-Anforderungen
    (5%) um Community-Engagement zu fördern, aber ausreichende Approval-Schwelle (50%)
    für Legitimität'
  sot_mapping:
    contract: 'schema: dao_governance.schema.json: proposal_types[3]'
    core: 'dao_validator.py: validate_proposal_type(type, quorum, threshold)'
    policy: 'opa/dao.rego: deny { not valid_grant_program_proposal(input) }'
    cli: cli validate --dao-proposal --type grant_program
    test: test_dao.py::test_grant_program_proposal()
  implementation_requirements:
  - 'OPA Policy: deny/allow für PROP_TYPE_004'
  - 'Unit Test: test_prop_type_004()'
  - 'Audit Trail: Log all PROP_TYPE_004-related events'
  - 'DAO Contract: Validate proposal type == ''grant_program'''
  - 'Quorum Check: Require 5% participation'
  - 'Threshold Check: Require 50% approval'
  sot_artefacts:
    python: validate_prop_type_004() in sot_validator_core.py
    rego: PROP_TYPE_004 deny rule in sot_policy.rego
    cli: --rules PROP_TYPE_004 flag supported
    test: test_prop_type_004() in test_sot_validator.py
  metadata:
    list_name: governance_proposal_types
    list_source: 20_foundation/governance/dao_proposals.yaml
    list_index: 3
    audit_requirement: DAO Governance, Token Holder Rights
  data:
    type: grant_program
    name: Community Grant Program
    quorum: 5%
    threshold: 50%
- rule_id: PROP_TYPE_005
  source: master_rules_lifted.yaml
  source_section: List-to-Rule Lifting - GOV001
  source_line: ~256-279
  category: DAO Governance
  severity: MEDIUM
  enforcement: MUST
  description: System MUSS Proposal-Typ 'Strategic Partnership' (partnership) unterstützen
    mit Quorum 10% und Threshold 66%
  rationale: 'DAO Governance: Strategische Partnerschaften haben signifikanten Einfluss
    auf Protokoll-Ausrichtung, daher mittleres Quorum (10%) und qualifizierte Mehrheit
    (66%)'
  sot_mapping:
    contract: 'schema: dao_governance.schema.json: proposal_types[4]'
    core: 'dao_validator.py: validate_proposal_type(type, quorum, threshold)'
    policy: 'opa/dao.rego: deny { not valid_partnership_proposal(input) }'
    cli: cli validate --dao-proposal --type partnership
    test: test_dao.py::test_partnership_proposal()
  implementation_requirements:
  - 'OPA Policy: deny/allow für PROP_TYPE_005'
  - 'Unit Test: test_prop_type_005()'
  - 'Audit Trail: Log all PROP_TYPE_005-related events'
  - 'DAO Contract: Validate proposal type == ''partnership'''
  - 'Quorum Check: Require 10% participation'
  - 'Threshold Check: Require 66% approval'
  sot_artefacts:
    python: validate_prop_type_005() in sot_validator_core.py
    rego: PROP_TYPE_005 deny rule in sot_policy.rego
    cli: --rules PROP_TYPE_005 flag supported
    test: test_prop_type_005() in test_sot_validator.py
  metadata:
    list_name: governance_proposal_types
    list_source: 20_foundation/governance/dao_proposals.yaml
    list_index: 4
    audit_requirement: DAO Governance, Token Holder Rights
  data:
    type: partnership
    name: Strategic Partnership
    quorum: 10%
    threshold: 66%
- rule_id: PROP_TYPE_006
  source: master_rules_lifted.yaml
  source_section: List-to-Rule Lifting - GOV001
  source_line: ~280-303
  category: DAO Governance
  severity: CRITICAL
  enforcement: MUST
  description: System MUSS Proposal-Typ 'Emergency Protocol Action' (emergency_action)
    unterstützen mit Quorum 30% und Threshold 90%
  rationale: 'Security & Governance: Emergency Actions können Protocol-kritische Änderungen
    vornehmen, daher maximale Legitimation erforderlich (30% Quorum + 90% Supermajority)
    um Missbrauch zu verhindern'
  sot_mapping:
    contract: 'schema: dao_governance.schema.json: proposal_types[5]'
    core: 'dao_validator.py: validate_proposal_type(type, quorum, threshold)'
    policy: 'opa/dao.rego: deny { not valid_emergency_action_proposal(input) }'
    cli: cli validate --dao-proposal --type emergency_action
    test: test_dao.py::test_emergency_action_proposal()
  implementation_requirements:
  - 'OPA Policy: deny/allow für PROP_TYPE_006'
  - 'Unit Test: test_prop_type_006()'
  - 'Audit Trail: Log all PROP_TYPE_006-related events'
  - 'DAO Contract: Validate proposal type == ''emergency_action'''
  - 'Quorum Check: Require 30% participation'
  - 'Threshold Check: Require 90% approval'
  sot_artefacts:
    python: validate_prop_type_006() in sot_validator_core.py
    rego: PROP_TYPE_006 deny rule in sot_policy.rego
    cli: --rules PROP_TYPE_006 flag supported
    test: test_prop_type_006() in test_sot_validator.py
  metadata:
    list_name: governance_proposal_types
    list_source: 20_foundation/governance/dao_proposals.yaml
    list_index: 5
    audit_requirement: DAO Governance, Token Holder Rights
  data:
    type: emergency_action
    name: Emergency Protocol Action
    quorum: 30%
    threshold: 90%
- rule_id: PROP_TYPE_007
  source: master_rules_lifted.yaml
  source_section: List-to-Rule Lifting - GOV001
  source_line: ~304-327
  category: DAO Governance
  severity: CRITICAL
  enforcement: MUST
  description: System MUSS Proposal-Typ 'Token Minting (Inflation)' (token_mint) unterstützen
    mit Quorum 25% und Threshold 85%
  rationale: 'Token Economics: Token Minting beeinflusst direkt die Geldmenge und
    damit Token Value. Hohe Anforderungen (25% Quorum + 85% Supermajority) schützen
    bestehende Token Holder vor inflationärer Verwässerung'
  sot_mapping:
    contract: 'schema: dao_governance.schema.json: proposal_types[6]'
    core: 'dao_validator.py: validate_proposal_type(type, quorum, threshold)'
    policy: 'opa/dao.rego: deny { not valid_token_mint_proposal(input) }'
    cli: cli validate --dao-proposal --type token_mint
    test: test_dao.py::test_token_mint_proposal()
  implementation_requirements:
  - 'OPA Policy: deny/allow für PROP_TYPE_007'
  - 'Unit Test: test_prop_type_007()'
  - 'Audit Trail: Log all PROP_TYPE_007-related events'
  - 'DAO Contract: Validate proposal type == ''token_mint'''
  - 'Quorum Check: Require 25% participation'
  - 'Threshold Check: Require 85% approval'
  sot_artefacts:
    python: validate_prop_type_007() in sot_validator_core.py
    rego: PROP_TYPE_007 deny rule in sot_policy.rego
    cli: --rules PROP_TYPE_007 flag supported
    test: test_prop_type_007() in test_sot_validator.py
  metadata:
    list_name: governance_proposal_types
    list_source: 20_foundation/governance/dao_proposals.yaml
    list_index: 6
    audit_requirement: DAO Governance, Token Holder Rights
  data:
    type: token_mint
    name: Token Minting (Inflation)
    quorum: 25%
    threshold: 85%
- rule_id: JURIS_T1_001
  source: master_rules_lifted.yaml
  source_section: List-to-Rule Lifting - S018
  source_line: ~328-348
  category: Market Coverage
  severity: HIGH
  enforcement: MUST
  description: System MUSS Germany (DE) als Tier 1 Market mit eIDAS-Level 'substantial'
    unterstützen
  rationale: 'eIDAS 2.0 Compliance: Deutschland als größter EU-Markt erfordert eIDAS-Level
    ''substantial'' für grenzüberschreitende Identitätsdienste. Tier 1 Status gewährleistet
    Priority Support'
  sot_mapping:
    contract: 'schema: jurisdictions.schema.json: tier1_markets[0]'
    core: 'market_validator.py: validate_tier1_market(country_code, eidas_level)'
    policy: 'opa/markets.rego: deny { not valid_tier1_market("DE", "substantial")
      }'
    cli: cli validate --market-coverage --tier 1 --country DE
    test: test_markets.py::test_germany_tier1()
  implementation_requirements:
  - 'OPA Policy: deny/allow für JURIS_T1_001'
  - 'Unit Test: test_juris_t1_001()'
  - 'Audit Trail: Log all JURIS_T1_001-related events'
  sot_artefacts:
    python: validate_juris_t1_001() in sot_validator_core.py
    rego: JURIS_T1_001 deny rule in sot_policy.rego
    cli: --rules JURIS_T1_001 flag supported
    test: test_juris_t1_001() in test_sot_validator.py
  metadata:
    list_name: covered_jurisdictions_tier1
    list_source: 07_governance_legal/jurisdictions.yaml
    list_index: 0
    audit_requirement: eIDAS 2.0, Local Regulations
  data:
    code: DE
    name: Germany
    tier: 1
    eidas_level: substantial
- rule_id: JURIS_T1_002
  source: master_rules_lifted.yaml
  source_section: List-to-Rule Lifting - S018
  source_line: ~349-369
  category: Market Coverage
  severity: HIGH
  enforcement: MUST
  description: System MUSS France (FR) als Tier 1 Market mit eIDAS-Level 'substantial'
    unterstützen
  rationale: 'eIDAS 2.0 Compliance: Frankreich als zweitgrößter EU-Markt mit hoher
    Adoption digitaler Identitätsdienste. Tier 1 Status für EU Single Market Access'
  sot_mapping:
    contract: 'schema: jurisdictions.schema.json: tier1_markets[1]'
    core: 'market_validator.py: validate_tier1_market(country_code, eidas_level)'
    policy: 'opa/markets.rego: deny { not valid_tier1_market("FR", "substantial")
      }'
    cli: cli validate --market-coverage --tier 1 --country FR
    test: test_markets.py::test_france_tier1()
  implementation_requirements:
  - 'OPA Policy: deny/allow für JURIS_T1_002'
  - 'Unit Test: test_juris_t1_002()'
  - 'Audit Trail: Log all JURIS_T1_002-related events'
  sot_artefacts:
    python: validate_juris_t1_002() in sot_validator_core.py
    rego: JURIS_T1_002 deny rule in sot_policy.rego
    cli: --rules JURIS_T1_002 flag supported
    test: test_juris_t1_002() in test_sot_validator.py
  metadata:
    list_name: covered_jurisdictions_tier1
    list_source: 07_governance_legal/jurisdictions.yaml
    list_index: 1
    audit_requirement: eIDAS 2.0, Local Regulations
  data:
    code: FR
    name: France
    tier: 1
    eidas_level: substantial
- rule_id: JURIS_T1_003
  source: master_rules_lifted.yaml
  source_section: List-to-Rule Lifting - S018
  source_line: ~370-390
  category: Market Coverage
  severity: HIGH
  enforcement: MUST
  description: System MUSS Netherlands (NL) als Tier 1 Market mit eIDAS-Level 'substantial'
    unterstützen
  rationale: 'eIDAS 2.0 Compliance: Niederlande als führender Fintech Hub und EU Gründungsmitglied.
    eIDAS ''substantial'' für Benelux-Integration, Tier 1 für Regulatory Priority'
  sot_mapping:
    contract: 'schema: jurisdictions.schema.json: tier1_markets[2]'
    core: 'market_validator.py: validate_tier1_market(country_code, eidas_level)'
    policy: 'opa/markets.rego: deny { not valid_tier1_market("NL", "substantial")
      }'
    cli: cli validate --market-coverage --tier 1 --country NL
    test: test_markets.py::test_netherlands_tier1()
  implementation_requirements:
  - 'OPA Policy: deny/allow für JURIS_T1_003'
  - 'Unit Test: test_juris_t1_003()'
  - 'Audit Trail: Log all JURIS_T1_003-related events'
  sot_artefacts:
    python: validate_juris_t1_003() in sot_validator_core.py
    rego: JURIS_T1_003 deny rule in sot_policy.rego
    cli: --rules JURIS_T1_003 flag supported
    test: test_juris_t1_003() in test_sot_validator.py
  metadata:
    list_name: covered_jurisdictions_tier1
    list_source: 07_governance_legal/jurisdictions.yaml
    list_index: 2
    audit_requirement: eIDAS 2.0, Local Regulations
  data:
    code: NL
    name: Netherlands
    tier: 1
    eidas_level: substantial
- rule_id: JURIS_T1_004
  source: master_rules_lifted.yaml
  source_section: List-to-Rule Lifting - S018
  source_line: ~391-410
  category: Market Coverage
  severity: HIGH
  enforcement: MUST
  description: System MUSS Switzerland (CH) als Tier 1 Market mit eIDAS-Level 'high'
    unterstützen
  rationale: 'Security Excellence: Schweiz mit höchsten Datenschutzstandards erfordert
    eIDAS-Level ''high''. Tier 1 Status für Finanzplatz Zürich, Privacy-First Compliance'
  sot_mapping:
    contract: 'schema: jurisdictions.schema.json: tier1_markets[3]'
    core: 'market_validator.py: validate_tier1_market(country_code, eidas_level)'
    policy: 'opa/markets.rego: deny { not valid_tier1_market("CH", "high") }'
    cli: cli validate --market-coverage --tier 1 --country CH
    test: test_markets.py::test_switzerland_tier1()
  implementation_requirements:
  - 'OPA Policy: deny/allow für JURIS_T1_004'
  - 'Unit Test: test_juris_t1_004()'
  - 'Audit Trail: Log all JURIS_T1_004-related events'
  sot_artefacts:
    python: validate_juris_t1_004() in sot_validator_core.py
    rego: JURIS_T1_004 deny rule in sot_policy.rego
    cli: --rules JURIS_T1_004 flag supported
    test: test_juris_t1_004() in test_sot_validator.py
  metadata:
    list_name: covered_jurisdictions_tier1
    list_source: 07_governance_legal/jurisdictions.yaml
    list_index: 3
    audit_requirement: eIDAS 2.0, Local Regulations
  data:
    code: CH
    name: Switzerland
    tier: 1
    eidas_level: high
- rule_id: JURIS_T1_005
  source: master_rules_lifted.yaml
  source_section: List-to-Rule Lifting - S018
  source_line: ~411-431
  category: Market Coverage
  severity: HIGH
  enforcement: MUST
  description: System MUSS United Kingdom (UK) als Tier 1 Market mit eIDAS-Level 'substantial'
    unterstützen
  rationale: 'Post-Brexit Alignment: UK mit UK Digital Identity and Attributes Trust
    Framework (äquivalent zu eIDAS ''substantial''). Tier 1 für größten europäischen
    Fintech-Markt'
  sot_mapping:
    contract: 'schema: jurisdictions.schema.json: tier1_markets[4]'
    core: 'market_validator.py: validate_tier1_market(country_code, eidas_level)'
    policy: 'opa/markets.rego: deny { not valid_tier1_market("UK", "substantial")
      }'
    cli: cli validate --market-coverage --tier 1 --country UK
    test: test_markets.py::test_uk_tier1()
  implementation_requirements:
  - 'OPA Policy: deny/allow für JURIS_T1_005'
  - 'Unit Test: test_juris_t1_005()'
  - 'Audit Trail: Log all JURIS_T1_005-related events'
  sot_artefacts:
    python: validate_juris_t1_005() in sot_validator_core.py
    rego: JURIS_T1_005 deny rule in sot_policy.rego
    cli: --rules JURIS_T1_005 flag supported
    test: test_juris_t1_005() in test_sot_validator.py
  metadata:
    list_name: covered_jurisdictions_tier1
    list_source: 07_governance_legal/jurisdictions.yaml
    list_index: 4
    audit_requirement: eIDAS 2.0, Local Regulations
  data:
    code: UK
    name: United Kingdom
    tier: 1
    eidas_level: substantial
- rule_id: JURIS_T1_006
  source: master_rules_lifted.yaml
  source_section: List-to-Rule Lifting - S018
  source_line: ~432-452
  category: Market Coverage
  severity: HIGH
  enforcement: MUST
  description: System MUSS Singapore (SG) als Tier 1 Market mit eIDAS-Level 'substantial'
    unterstützen
  rationale: 'ASEAN Digital Hub: Singapur als führender asiatischer Fintech-Markt
    mit Singpass Digital Identity (eIDAS-äquivalent ''substantial''). Tier 1 für ASEAN
    Gateway'
  sot_mapping:
    contract: 'schema: jurisdictions.schema.json: tier1_markets[5]'
    core: 'market_validator.py: validate_tier1_market(country_code, eidas_level)'
    policy: 'opa/markets.rego: deny { not valid_tier1_market("SG", "substantial")
      }'
    cli: cli validate --market-coverage --tier 1 --country SG
    test: test_markets.py::test_singapore_tier1()
  implementation_requirements:
  - 'OPA Policy: deny/allow für JURIS_T1_006'
  - 'Unit Test: test_juris_t1_006()'
  - 'Audit Trail: Log all JURIS_T1_006-related events'
  sot_artefacts:
    python: validate_juris_t1_006() in sot_validator_core.py
    rego: JURIS_T1_006 deny rule in sot_policy.rego
    cli: --rules JURIS_T1_006 flag supported
    test: test_juris_t1_006() in test_sot_validator.py
  metadata:
    list_name: covered_jurisdictions_tier1
    list_source: 07_governance_legal/jurisdictions.yaml
    list_index: 5
    audit_requirement: eIDAS 2.0, Local Regulations
  data:
    code: SG
    name: Singapore
    tier: 1
    eidas_level: substantial
- rule_id: JURIS_T1_007
  source: master_rules_lifted.yaml
  source_section: List-to-Rule Lifting - S018
  source_line: ~453-472
  category: Market Coverage
  severity: HIGH
  enforcement: MUST
  description: System MUSS Japan (JP) als Tier 1 Market mit eIDAS-Level 'substantial'
    unterstützen
  rationale: 'Asia-Pacific Leader: Japan als drittgrößte Volkswirtschaft mit My Number
    Card Digital Identity (eIDAS-äquivalent ''substantial''). Tier 1 für APAC Expansion'
  sot_mapping:
    contract: 'schema: jurisdictions.schema.json: tier1_markets[6]'
    core: 'market_validator.py: validate_tier1_market(country_code, eidas_level)'
    policy: 'opa/markets.rego: deny { not valid_tier1_market("JP", "substantial")
      }'
    cli: cli validate --market-coverage --tier 1 --country JP
    test: test_markets.py::test_japan_tier1()
  implementation_requirements:
  - 'OPA Policy: deny/allow für JURIS_T1_007'
  - 'Unit Test: test_juris_t1_007()'
  - 'Audit Trail: Log all JURIS_T1_007-related events'
  sot_artefacts:
    python: validate_juris_t1_007() in sot_validator_core.py
    rego: JURIS_T1_007 deny rule in sot_policy.rego
    cli: --rules JURIS_T1_007 flag supported
    test: test_juris_t1_007() in test_sot_validator.py
  metadata:
    list_name: covered_jurisdictions_tier1
    list_source: 07_governance_legal/jurisdictions.yaml
    list_index: 6
    audit_requirement: eIDAS 2.0, Local Regulations
  data:
    code: JP
    name: Japan
    tier: 1
    eidas_level: substantial
- rule_id: REWARD_POOL_001
  source: master_rules_lifted.yaml
  source_section: List-to-Rule Lifting - R020
  source_line: ~473-493
  category: Tokenomics
  severity: HIGH
  enforcement: MUST
  description: System MUSS Reward Pool 'Staking Rewards Pool' (staking_rewards) mit
    30% Allocation und Vesting 'none' verwalten
  rationale: 'Tokenomics: Staking Rewards mit 30% Allocation fördern Network Security.
    No Vesting da Rewards kontinuierlich verdient werden (nicht pre-allocated)'
  sot_mapping:
    contract: 'schema: tokenomics.schema.json: reward_pools[0]'
    core: 'tokenomics_validator.py: validate_reward_pool(pool_id, allocation, vesting)'
    policy: 'opa/tokenomics.rego: deny { not valid_staking_pool(input) }'
    cli: cli validate --tokenomics --pool staking_rewards
    test: test_tokenomics.py::test_staking_rewards_pool()
  implementation_requirements:
  - 'OPA Policy: deny/allow für REWARD_POOL_001'
  - 'Unit Test: test_reward_pool_001()'
  - 'Audit Trail: Log all REWARD_POOL_001-related events'
  sot_artefacts:
    python: validate_reward_pool_001() in sot_validator_core.py
    rego: REWARD_POOL_001 deny rule in sot_policy.rego
    cli: --rules REWARD_POOL_001 flag supported
    test: test_reward_pool_001() in test_sot_validator.py
  metadata:
    list_name: reward_pools
    list_source: 20_foundation/tokenomics/rewards.yaml
    list_index: 0
    audit_requirement: Tokenomics Transparency, MiCA
  data:
    pool_id: staking_rewards
    name: Staking Rewards Pool
    allocation_percent: 30
    vesting: none
- rule_id: REWARD_POOL_002
  source: master_rules_lifted.yaml
  source_section: List-to-Rule Lifting - R020
  source_line: ~494-514
  category: Tokenomics
  severity: HIGH
  enforcement: MUST
  description: System MUSS Reward Pool 'Liquidity Mining Pool' (liquidity_mining)
    mit 20% Allocation und Vesting 'linear_12m' verwalten
  rationale: 'Tokenomics: Liquidity Mining mit 20% Allocation fördert DEX Liquidität.
    Linear 12m Vesting verhindert Dump bei Launch, sichert nachhaltige Liquidität'
  sot_mapping:
    contract: 'schema: tokenomics.schema.json: reward_pools[1]'
    core: 'tokenomics_validator.py: validate_reward_pool(pool_id, allocation, vesting)'
    policy: 'opa/tokenomics.rego: deny { not valid_liquidity_pool(input) }'
    cli: cli validate --tokenomics --pool liquidity_mining
    test: test_tokenomics.py::test_liquidity_mining_pool()
  implementation_requirements:
  - 'OPA Policy: deny/allow für REWARD_POOL_002'
  - 'Unit Test: test_reward_pool_002()'
  - 'Audit Trail: Log all REWARD_POOL_002-related events'
  sot_artefacts:
    python: validate_reward_pool_002() in sot_validator_core.py
    rego: REWARD_POOL_002 deny rule in sot_policy.rego
    cli: --rules REWARD_POOL_002 flag supported
    test: test_reward_pool_002() in test_sot_validator.py
  metadata:
    list_name: reward_pools
    list_source: 20_foundation/tokenomics/rewards.yaml
    list_index: 1
    audit_requirement: Tokenomics Transparency, MiCA
  data:
    pool_id: liquidity_mining
    name: Liquidity Mining Pool
    allocation_percent: 20
    vesting: linear_12m
- rule_id: REWARD_POOL_003
  source: master_rules_lifted.yaml
  source_section: List-to-Rule Lifting - R020
  source_line: ~515-535
  category: Tokenomics
  severity: MEDIUM
  enforcement: MUST
  description: System MUSS Reward Pool 'Ecosystem Development Grants' (ecosystem_grants)
    mit 15% Allocation und Vesting 'milestone_based' verwalten
  rationale: 'Ecosystem Growth: 15% Allocation für Developer Grants fördert Ecosystem
    Expansion. Milestone-based Vesting bindet Auszahlung an Delivery, minimiert Risk'
  sot_mapping:
    contract: 'schema: tokenomics.schema.json: reward_pools[2]'
    core: 'tokenomics_validator.py: validate_reward_pool(pool_id, allocation, vesting)'
    policy: 'opa/tokenomics.rego: deny { not valid_ecosystem_pool(input) }'
    cli: cli validate --tokenomics --pool ecosystem_grants
    test: test_tokenomics.py::test_ecosystem_grants_pool()
  implementation_requirements:
  - 'OPA Policy: deny/allow für REWARD_POOL_003'
  - 'Unit Test: test_reward_pool_003()'
  - 'Audit Trail: Log all REWARD_POOL_003-related events'
  sot_artefacts:
    python: validate_reward_pool_003() in sot_validator_core.py
    rego: REWARD_POOL_003 deny rule in sot_policy.rego
    cli: --rules REWARD_POOL_003 flag supported
    test: test_reward_pool_003() in test_sot_validator.py
  metadata:
    list_name: reward_pools
    list_source: 20_foundation/tokenomics/rewards.yaml
    list_index: 2
    audit_requirement: Tokenomics Transparency, MiCA
  data:
    pool_id: ecosystem_grants
    name: Ecosystem Development Grants
    allocation_percent: 15
    vesting: milestone_based
- rule_id: REWARD_POOL_004
  source: master_rules_lifted.yaml
  source_section: List-to-Rule Lifting - R020
  source_line: ~536-556
  category: Tokenomics
  severity: CRITICAL
  enforcement: MUST
  description: System MUSS Reward Pool 'Team & Advisors Vesting' (team_vesting) mit
    20% Allocation und Vesting 'linear_48m_cliff_12m' verwalten
  rationale: 'Investor Protection: Team 20% Allocation mit 12m Cliff + 48m Linear
    Vesting demonstriert Long-Term Commitment. CRITICAL da Investor Confidence direkt
    abhängig'
  sot_mapping:
    contract: 'schema: tokenomics.schema.json: reward_pools[3]'
    core: 'tokenomics_validator.py: validate_reward_pool(pool_id, allocation, vesting)'
    policy: 'opa/tokenomics.rego: deny { not valid_team_vesting_pool(input) }'
    cli: cli validate --tokenomics --pool team_vesting
    test: test_tokenomics.py::test_team_vesting_pool()
  implementation_requirements:
  - 'OPA Policy: deny/allow für REWARD_POOL_004'
  - 'Unit Test: test_reward_pool_004()'
  - 'Audit Trail: Log all REWARD_POOL_004-related events'
  sot_artefacts:
    python: validate_reward_pool_004() in sot_validator_core.py
    rego: REWARD_POOL_004 deny rule in sot_policy.rego
    cli: --rules REWARD_POOL_004 flag supported
    test: test_reward_pool_004() in test_sot_validator.py
  metadata:
    list_name: reward_pools
    list_source: 20_foundation/tokenomics/rewards.yaml
    list_index: 3
    audit_requirement: Tokenomics Transparency, MiCA
  data:
    pool_id: team_vesting
    name: Team & Advisors Vesting
    allocation_percent: 20
    vesting: linear_48m_cliff_12m
- rule_id: REWARD_POOL_005
  source: master_rules_lifted.yaml
  source_section: List-to-Rule Lifting - R020
  source_line: ~557-577
  category: Tokenomics
  severity: CRITICAL
  enforcement: MUST
  description: System MUSS Reward Pool 'DAO Treasury Reserve' (treasury_reserve) mit
    15% Allocation und Vesting 'dao_controlled' verwalten
  rationale: 'Decentralization: DAO Treasury 15% Allocation sichert langfristige DAO
    Sustainability. DAO-controlled Vesting = On-Chain Governance bestimmt Freigabe.
    CRITICAL für Progressive Decentralization'
  sot_mapping:
    contract: 'schema: tokenomics.schema.json: reward_pools[4]'
    core: 'tokenomics_validator.py: validate_reward_pool(pool_id, allocation, vesting)'
    policy: 'opa/tokenomics.rego: deny { not valid_treasury_pool(input) }'
    cli: cli validate --tokenomics --pool treasury_reserve
    test: test_tokenomics.py::test_treasury_reserve_pool()
  implementation_requirements:
  - 'OPA Policy: deny/allow für REWARD_POOL_005'
  - 'Unit Test: test_reward_pool_005()'
  - 'Audit Trail: Log all REWARD_POOL_005-related events'
  sot_artefacts:
    python: validate_reward_pool_005() in sot_validator_core.py
    rego: REWARD_POOL_005 deny rule in sot_policy.rego
    cli: --rules REWARD_POOL_005 flag supported
    test: test_reward_pool_005() in test_sot_validator.py
  metadata:
    list_name: reward_pools
    list_source: 20_foundation/tokenomics/rewards.yaml
    list_index: 4
    audit_requirement: Tokenomics Transparency, MiCA
  data:
    pool_id: treasury_reserve
    name: DAO Treasury Reserve
    allocation_percent: 15
    vesting: dao_controlled
- rule_id: NETWORK_001
  source: master_rules_lifted.yaml
  source_section: List-to-Rule Lifting - PU005
  source_line: ~578-600
  category: Blockchain Integration
  severity: CRITICAL
  enforcement: MUST
  description: 'System MUSS Blockchain-Netzwerk Ethereum Mainnet (Chain ID: 1) unterstützen'
  rationale: 'Multi-Chain Architecture: Ethereum Mainnet (Chain ID 1) als Primary
    Network ist CRITICAL für DeFi Integration, Smart Contract Deployment, und größtes
    Blockchain Ecosystem'
  sot_mapping:
    contract: 'schema: blockchain.schema.json: supported_networks[0]'
    core: 'blockchain_validator.py: validate_network(chain_id, network_id)'
    policy: 'opa/blockchain.rego: deny { not valid_ethereum_network(input) }'
    cli: cli validate --blockchain --network ethereum_mainnet
    test: test_blockchain.py::test_ethereum_mainnet()
  implementation_requirements:
  - 'OPA Policy: deny/allow für NETWORK_001'
  - 'Unit Test: test_network_001()'
  - 'Audit Trail: Log all NETWORK_001-related events'
  - 'Network Config: Add Chain ID 1'
  - 'RPC Endpoint: Configure for Ethereum Mainnet'
  - 'Block Explorer: Link to etherscan.io'
  sot_artefacts:
    python: validate_network_001() in sot_validator_core.py
    rego: NETWORK_001 deny rule in sot_policy.rego
    cli: --rules NETWORK_001 flag supported
    test: test_network_001() in test_sot_validator.py
  metadata:
    list_name: supported_networks
    list_source: 03_core/blockchain/networks.yaml
    list_index: 0
    audit_requirement: Multi-Chain Architecture, Security
  data:
    network_id: ethereum_mainnet
    name: Ethereum Mainnet
    chain_id: 1
    explorer: etherscan.io
- rule_id: NETWORK_002
  source: master_rules_lifted.yaml
  source_section: List-to-Rule Lifting - PU005
  source_line: ~601-623
  category: Blockchain Integration
  severity: CRITICAL
  enforcement: MUST
  description: 'System MUSS Blockchain-Netzwerk Polygon Mainnet (Chain ID: 137) unterstützen'
  rationale: 'Scaling Solution: Polygon (Chain ID 137) als Leading L2 ist CRITICAL
    für Low-Cost Transactions, High Throughput, Ethereum Compatibility bei Massenadoption'
  sot_mapping:
    contract: 'schema: blockchain.schema.json: supported_networks[1]'
    core: 'blockchain_validator.py: validate_network(chain_id, network_id)'
    policy: 'opa/blockchain.rego: deny { not valid_polygon_network(input) }'
    cli: cli validate --blockchain --network polygon_mainnet
    test: test_blockchain.py::test_polygon_mainnet()
  implementation_requirements:
  - 'OPA Policy: deny/allow für NETWORK_002'
  - 'Unit Test: test_network_002()'
  - 'Audit Trail: Log all NETWORK_002-related events'
  - 'Network Config: Add Chain ID 137'
  - 'RPC Endpoint: Configure for Polygon Mainnet'
  - 'Block Explorer: Link to polygonscan.com'
  sot_artefacts:
    python: validate_network_002() in sot_validator_core.py
    rego: NETWORK_002 deny rule in sot_policy.rego
    cli: --rules NETWORK_002 flag supported
    test: test_network_002() in test_sot_validator.py
  metadata:
    list_name: supported_networks
    list_source: 03_core/blockchain/networks.yaml
    list_index: 1
    audit_requirement: Multi-Chain Architecture, Security
  data:
    network_id: polygon_mainnet
    name: Polygon Mainnet
    chain_id: 137
    explorer: polygonscan.com
- rule_id: NETWORK_003
  source: master_rules_lifted.yaml
  source_section: List-to-Rule Lifting - PU005
  source_line: ~624-646
  category: Blockchain Integration
  severity: HIGH
  enforcement: MUST
  description: 'System MUSS Blockchain-Netzwerk Arbitrum One (Chain ID: 42161) unterstützen'
  rationale: 'L2 Scaling: Arbitrum One (Chain ID 42161) als Leading Optimistic Rollup
    ist HIGH priority für DeFi TVL, Ethereum Security Inheritance, niedrige Gas Fees'
  sot_mapping:
    contract: 'schema: blockchain.schema.json: supported_networks[2]'
    core: 'blockchain_validator.py: validate_network(chain_id, network_id)'
    policy: 'opa/blockchain.rego: deny { not valid_arbitrum_network(input) }'
    cli: cli validate --blockchain --network arbitrum_one
    test: test_blockchain.py::test_arbitrum_one()
  implementation_requirements:
  - 'OPA Policy: deny/allow für NETWORK_003'
  - 'Unit Test: test_network_003()'
  - 'Audit Trail: Log all NETWORK_003-related events'
  - 'Network Config: Add Chain ID 42161'
  - 'RPC Endpoint: Configure for Arbitrum One'
  - 'Block Explorer: Link to arbiscan.io'
  sot_artefacts:
    python: validate_network_003() in sot_validator_core.py
    rego: NETWORK_003 deny rule in sot_policy.rego
    cli: --rules NETWORK_003 flag supported
    test: test_network_003() in test_sot_validator.py
  metadata:
    list_name: supported_networks
    list_source: 03_core/blockchain/networks.yaml
    list_index: 2
    audit_requirement: Multi-Chain Architecture, Security
  data:
    network_id: arbitrum_one
    name: Arbitrum One
    chain_id: 42161
    explorer: arbiscan.io
- rule_id: NETWORK_004
  source: master_rules_lifted.yaml
  source_section: List-to-Rule Lifting - PU005
  source_line: ~647-669
  category: Blockchain Integration
  severity: HIGH
  enforcement: MUST
  description: 'System MUSS Blockchain-Netzwerk Optimism Mainnet (Chain ID: 10) unterstützen'
  rationale: 'OP Stack Ecosystem: Optimism (Chain ID 10) als zweite Leading Optimistic
    Rollup mit OP Stack Standard ist HIGH priority für Superchain Vision, Retroactive
    Public Goods Funding'
  sot_mapping:
    contract: 'schema: blockchain.schema.json: supported_networks[3]'
    core: 'blockchain_validator.py: validate_network(chain_id, network_id)'
    policy: 'opa/blockchain.rego: deny { not valid_optimism_network(input) }'
    cli: cli validate --blockchain --network optimism
    test: test_blockchain.py::test_optimism_mainnet()
  implementation_requirements:
  - 'OPA Policy: deny/allow für NETWORK_004'
  - 'Unit Test: test_network_004()'
  - 'Audit Trail: Log all NETWORK_004-related events'
  - 'Network Config: Add Chain ID 10'
  - 'RPC Endpoint: Configure for Optimism Mainnet'
  - 'Block Explorer: Link to optimistic.etherscan.io'
  sot_artefacts:
    python: validate_network_004() in sot_validator_core.py
    rego: NETWORK_004 deny rule in sot_policy.rego
    cli: --rules NETWORK_004 flag supported
    test: test_network_004() in test_sot_validator.py
  metadata:
    list_name: supported_networks
    list_source: 03_core/blockchain/networks.yaml
    list_index: 3
    audit_requirement: Multi-Chain Architecture, Security
  data:
    network_id: optimism
    name: Optimism Mainnet
    chain_id: 10
    explorer: optimistic.etherscan.io
- rule_id: NETWORK_005
  source: master_rules_lifted.yaml
  source_section: List-to-Rule Lifting - PU005
  source_line: ~670-692
  category: Blockchain Integration
  severity: MEDIUM
  enforcement: MUST
  description: 'System MUSS Blockchain-Netzwerk Base Mainnet (Chain ID: 8453) unterstützen'
  rationale: 'Coinbase L2: Base (Chain ID 8453) auf OP Stack mit Coinbase Backing
    ist MEDIUM priority für Mainstream Adoption, Fiat On/Off-Ramps, Growing Ecosystem'
  sot_mapping:
    contract: 'schema: blockchain.schema.json: supported_networks[4]'
    core: 'blockchain_validator.py: validate_network(chain_id, network_id)'
    policy: 'opa/blockchain.rego: deny { not valid_base_network(input) }'
    cli: cli validate --blockchain --network base
    test: test_blockchain.py::test_base_mainnet()
  implementation_requirements:
  - 'OPA Policy: deny/allow für NETWORK_005'
  - 'Unit Test: test_network_005()'
  - 'Audit Trail: Log all NETWORK_005-related events'
  - 'Network Config: Add Chain ID 8453'
  - 'RPC Endpoint: Configure for Base Mainnet'
  - 'Block Explorer: Link to basescan.org'
  sot_artefacts:
    python: validate_network_005() in sot_validator_core.py
    rego: NETWORK_005 deny rule in sot_policy.rego
    cli: --rules NETWORK_005 flag supported
    test: test_network_005() in test_sot_validator.py
  metadata:
    list_name: supported_networks
    list_source: 03_core/blockchain/networks.yaml
    list_index: 4
    audit_requirement: Multi-Chain Architecture, Security
  data:
    network_id: base
    name: Base Mainnet
    chain_id: 8453
    explorer: basescan.org
- rule_id: NETWORK_006
  source: master_rules_lifted.yaml
  source_section: List-to-Rule Lifting - PU005
  source_line: ~693-715
  category: Blockchain Integration
  severity: MEDIUM
  enforcement: MUST
  description: 'System MUSS Blockchain-Netzwerk Avalanche C-Chain (Chain ID: 43114)
    unterstützen'
  rationale: 'Alternative L1: Avalanche C-Chain (Chain ID 43114) mit Sub-Second Finality
    ist MEDIUM priority für Low Latency Use Cases, Subnet Architecture, Enterprise
    Adoption'
  sot_mapping:
    contract: 'schema: blockchain.schema.json: supported_networks[5]'
    core: 'blockchain_validator.py: validate_network(chain_id, network_id)'
    policy: 'opa/blockchain.rego: deny { not valid_avalanche_network(input) }'
    cli: cli validate --blockchain --network avalanche
    test: test_blockchain.py::test_avalanche_cchain()
  implementation_requirements:
  - 'OPA Policy: deny/allow für NETWORK_006'
  - 'Unit Test: test_network_006()'
  - 'Audit Trail: Log all NETWORK_006-related events'
  - 'Network Config: Add Chain ID 43114'
  - 'RPC Endpoint: Configure for Avalanche C-Chain'
  - 'Block Explorer: Link to snowtrace.io'
  sot_artefacts:
    python: validate_network_006() in sot_validator_core.py
    rego: NETWORK_006 deny rule in sot_policy.rego
    cli: --rules NETWORK_006 flag supported
    test: test_network_006() in test_sot_validator.py
  metadata:
    list_name: supported_networks
    list_source: 03_core/blockchain/networks.yaml
    list_index: 5
    audit_requirement: Multi-Chain Architecture, Security
  data:
    network_id: avalanche
    name: Avalanche C-Chain
    chain_id: 43114
    explorer: snowtrace.io
- rule_id: AUTH_METHOD_001
  source: master_rules_lifted.yaml
  source_section: List-to-Rule Lifting - R016
  source_line: ~716-736
  category: Authentication
  severity: CRITICAL
  enforcement: MUST
  description: System MUSS Authentifizierungsmethode 'DID-based Authentication' (did_auth)
    mit eIDAS-Level 'high' unterstützen
  rationale: 'eIDAS 2.0: DID-based Authentication erreicht eIDAS ''high'' Level durch
    kryptographische Beweise. CRITICAL für Self-Sovereign Identity, No MFA needed
    (inherent proof)'
  sot_mapping:
    contract: 'schema: auth.schema.json: supported_auth_methods[0]'
    core: 'auth_validator.py: validate_auth_method(method_id, eidas_level)'
    policy: 'opa/auth.rego: deny { not valid_did_auth(input) }'
    cli: cli validate --auth --method did_auth
    test: test_auth.py::test_did_auth()
  implementation_requirements:
  - 'OPA Policy: deny/allow für AUTH_METHOD_001'
  - 'Unit Test: test_auth_method_001()'
  - 'Audit Trail: Log all AUTH_METHOD_001-related events'
  sot_artefacts:
    python: validate_auth_method_001() in sot_validator_core.py
    rego: AUTH_METHOD_001 deny rule in sot_policy.rego
    cli: --rules AUTH_METHOD_001 flag supported
    test: test_auth_method_001() in test_sot_validator.py
  metadata:
    list_name: supported_auth_methods
    list_source: 14_zero_time_auth/methods.yaml
    list_index: 0
    audit_requirement: eIDAS 2.0, Security Standards
  data:
    method_id: did_auth
    name: DID-based Authentication
    eidas_level: high
    mfa_required: false
- rule_id: AUTH_METHOD_002
  source: master_rules_lifted.yaml
  source_section: List-to-Rule Lifting - R016
  source_line: ~737-757
  category: Authentication
  severity: CRITICAL
  enforcement: MUST
  description: System MUSS Authentifizierungsmethode 'Biometric Authentication (Face/Fingerprint)'
    (biometric) mit eIDAS-Level 'high' unterstützen
  rationale: 'eIDAS 2.0: Biometric Authentication (Face/Fingerprint) erreicht eIDAS
    ''high'' durch liveness detection + secure element. CRITICAL für User Experience,
    Mobile-First'
  sot_mapping:
    contract: 'schema: auth.schema.json: supported_auth_methods[1]'
    core: 'auth_validator.py: validate_auth_method(method_id, eidas_level)'
    policy: 'opa/auth.rego: deny { not valid_biometric_auth(input) }'
    cli: cli validate --auth --method biometric
    test: test_auth.py::test_biometric_auth()
  implementation_requirements:
  - 'OPA Policy: deny/allow für AUTH_METHOD_002'
  - 'Unit Test: test_auth_method_002()'
  - 'Audit Trail: Log all AUTH_METHOD_002-related events'
  sot_artefacts:
    python: validate_auth_method_002() in sot_validator_core.py
    rego: AUTH_METHOD_002 deny rule in sot_policy.rego
    cli: --rules AUTH_METHOD_002 flag supported
    test: test_auth_method_002() in test_sot_validator.py
  metadata:
    list_name: supported_auth_methods
    list_source: 14_zero_time_auth/methods.yaml
    list_index: 1
    audit_requirement: eIDAS 2.0, Security Standards
  data:
    method_id: biometric
    name: Biometric Authentication (Face/Fingerprint)
    eidas_level: high
    mfa_required: false
- rule_id: AUTH_METHOD_003
  source: master_rules_lifted.yaml
  source_section: List-to-Rule Lifting - R016
  source_line: ~758-778
  category: Authentication
  severity: HIGH
  enforcement: MUST
  description: System MUSS Authentifizierungsmethode 'Hardware Security Key (FIDO2)'
    (hardware_token) mit eIDAS-Level 'high' unterstützen
  rationale: 'FIDO2 Standard: Hardware Security Keys (YubiKey, etc.) erreichen eIDAS
    ''high'' durch phishing-resistant hardware-bound credentials. HIGH priority für
    Enterprise Use'
  sot_mapping:
    contract: 'schema: auth.schema.json: supported_auth_methods[2]'
    core: 'auth_validator.py: validate_auth_method(method_id, eidas_level)'
    policy: 'opa/auth.rego: deny { not valid_hardware_token_auth(input) }'
    cli: cli validate --auth --method hardware_token
    test: test_auth.py::test_hardware_token_auth()
  implementation_requirements:
  - 'OPA Policy: deny/allow für AUTH_METHOD_003'
  - 'Unit Test: test_auth_method_003()'
  - 'Audit Trail: Log all AUTH_METHOD_003-related events'
  sot_artefacts:
    python: validate_auth_method_003() in sot_validator_core.py
    rego: AUTH_METHOD_003 deny rule in sot_policy.rego
    cli: --rules AUTH_METHOD_003 flag supported
    test: test_auth_method_003() in test_sot_validator.py
  metadata:
    list_name: supported_auth_methods
    list_source: 14_zero_time_auth/methods.yaml
    list_index: 2
    audit_requirement: eIDAS 2.0, Security Standards
  data:
    method_id: hardware_token
    name: Hardware Security Key (FIDO2)
    eidas_level: high
    mfa_required: false
- rule_id: AUTH_METHOD_004
  source: master_rules_lifted.yaml
  source_section: List-to-Rule Lifting - R016
  source_line: ~779-799
  category: Authentication
  severity: MEDIUM
  enforcement: MUST
  description: System MUSS Authentifizierungsmethode 'Time-based OTP (TOTP)' (totp)
    mit eIDAS-Level 'substantial' unterstützen
  rationale: 'eIDAS 2.0: TOTP (Google Authenticator) erreicht eIDAS ''substantial''
    mit MFA required. MEDIUM priority für Backward Compatibility, Wide Adoption'
  sot_mapping:
    contract: 'schema: auth.schema.json: supported_auth_methods[3]'
    core: 'auth_validator.py: validate_auth_method(method_id, eidas_level)'
    policy: 'opa/auth.rego: deny { not valid_totp_auth(input) }'
    cli: cli validate --auth --method totp
    test: test_auth.py::test_totp_auth()
  implementation_requirements:
  - 'OPA Policy: deny/allow für AUTH_METHOD_004'
  - 'Unit Test: test_auth_method_004()'
  - 'Audit Trail: Log all AUTH_METHOD_004-related events'
  sot_artefacts:
    python: validate_auth_method_004() in sot_validator_core.py
    rego: AUTH_METHOD_004 deny rule in sot_policy.rego
    cli: --rules AUTH_METHOD_004 flag supported
    test: test_auth_method_004() in test_sot_validator.py
  metadata:
    list_name: supported_auth_methods
    list_source: 14_zero_time_auth/methods.yaml
    list_index: 3
    audit_requirement: eIDAS 2.0, Security Standards
  data:
    method_id: totp
    name: Time-based OTP (TOTP)
    eidas_level: substantial
    mfa_required: true
- rule_id: AUTH_METHOD_005
  source: master_rules_lifted.yaml
  source_section: List-to-Rule Lifting - R016
  source_line: ~800-820
  category: Authentication
  severity: LOW
  enforcement: MUST
  description: System MUSS Authentifizierungsmethode 'SMS-based OTP' (sms_otp) mit
    eIDAS-Level 'low' unterstützen
  rationale: 'Fallback Option: SMS OTP nur eIDAS ''low'' wegen SIM swapping vulnerability.
    LOW priority, MFA required, für Accessibility und Emergency Access'
  sot_mapping:
    contract: 'schema: auth.schema.json: supported_auth_methods[4]'
    core: 'auth_validator.py: validate_auth_method(method_id, eidas_level)'
    policy: 'opa/auth.rego: deny { not valid_sms_otp_auth(input) }'
    cli: cli validate --auth --method sms_otp
    test: test_auth.py::test_sms_otp_auth()
  implementation_requirements:
  - 'OPA Policy: deny/allow für AUTH_METHOD_005'
  - 'Unit Test: test_auth_method_005()'
  - 'Audit Trail: Log all AUTH_METHOD_005-related events'
  sot_artefacts:
    python: validate_auth_method_005() in sot_validator_core.py
    rego: AUTH_METHOD_005 deny rule in sot_policy.rego
    cli: --rules AUTH_METHOD_005 flag supported
    test: test_auth_method_005() in test_sot_validator.py
  metadata:
    list_name: supported_auth_methods
    list_source: 14_zero_time_auth/methods.yaml
    list_index: 4
    audit_requirement: eIDAS 2.0, Security Standards
  data:
    method_id: sms_otp
    name: SMS-based OTP
    eidas_level: low
    mfa_required: true
- rule_id: AUTH_METHOD_006
  source: master_rules_lifted.yaml
  source_section: List-to-Rule Lifting - R016
  source_line: ~821-841
  category: Authentication
  severity: LOW
  enforcement: MUST
  description: System MUSS Authentifizierungsmethode 'Email Magic Link' (email_magic_link)
    mit eIDAS-Level 'low' unterstützen
  rationale: 'UX Optimization: Email Magic Link nur eIDAS ''low'' aber hohe UX. LOW
    priority, MFA required, für Passwordless Onboarding und Recovery'
  sot_mapping:
    contract: 'schema: auth.schema.json: supported_auth_methods[5]'
    core: 'auth_validator.py: validate_auth_method(method_id, eidas_level)'
    policy: 'opa/auth.rego: deny { not valid_email_magic_link_auth(input) }'
    cli: cli validate --auth --method email_magic_link
    test: test_auth.py::test_email_magic_link_auth()
  implementation_requirements:
  - 'OPA Policy: deny/allow für AUTH_METHOD_006'
  - 'Unit Test: test_auth_method_006()'
  - 'Audit Trail: Log all AUTH_METHOD_006-related events'
  sot_artefacts:
    python: validate_auth_method_006() in sot_validator_core.py
    rego: AUTH_METHOD_006 deny rule in sot_policy.rego
    cli: --rules AUTH_METHOD_006 flag supported
    test: test_auth_method_006() in test_sot_validator.py
  metadata:
    list_name: supported_auth_methods
    list_source: 14_zero_time_auth/methods.yaml
    list_index: 5
    audit_requirement: eIDAS 2.0, Security Standards
  data:
    method_id: email_magic_link
    name: Email Magic Link
    eidas_level: low
    mfa_required: true
- rule_id: PII_CAT_001
  source: master_rules_lifted.yaml
  source_section: List-to-Rule Lifting - GDPR001
  source_line: ~842-865
  category: GDPR Compliance
  severity: HIGH
  enforcement: MUST
  description: System MUSS PII-Kategorie 'Name (First, Last, Full)' (name) gemäß Art.
    4(1) behandeln
  rationale: 'GDPR Art. 4(1) Personal Data: Name (First, Last, Full) ist HIGH severity
    PII für identity verification, legal documents, und user accounts - requires hash-only
    storage und audit logging'
  sot_mapping:
    contract: 'schema: pii.schema.json: pii_categories[0]'
    core: 'pii_validator.py: validate_pii_category(category_id, gdpr_article)'
    policy: 'opa/gdpr.rego: deny { not valid_pii_handling(input, "name") }'
    cli: cli validate --gdpr --pii-category name
    test: test_gdpr.py::test_pii_name()
  implementation_requirements:
  - 'OPA Policy: deny/allow für PII_CAT_001'
  - 'Unit Test: test_pii_cat_001()'
  - 'Audit Trail: Log all PII_CAT_001-related events'
  - 'PII Detector: Recognize name'
  - 'Hash-Only Storage: Never store raw name'
  - 'GDPR Compliance: Implement Art. 4(1)'
  sot_artefacts:
    python: validate_pii_cat_001() in sot_validator_core.py
    rego: PII_CAT_001 deny rule in sot_policy.rego
    cli: --rules PII_CAT_001 flag supported
    test: test_pii_cat_001() in test_sot_validator.py
  metadata:
    list_name: pii_categories
    list_source: 23_compliance/gdpr/pii_definitions.yaml
    list_index: 0
    audit_requirement: GDPR Art. 5, 6, 9
  data:
    category_id: name
    name: Name (First, Last, Full)
    gdpr_article: Art. 4(1)
    special_category: false
- rule_id: PII_CAT_002
  source: master_rules_lifted.yaml
  source_section: List-to-Rule Lifting - GDPR001
  source_line: ~866-889
  category: GDPR Compliance
  severity: HIGH
  enforcement: MUST
  description: System MUSS PII-Kategorie 'Email Address' (email) gemäß Art. 4(1) behandeln
  rationale: 'GDPR Art. 4(1) Personal Data: Email Address ist HIGH severity PII für
    user communication, password recovery, und 2FA - unique identifier requiring hash-only
    storage'
  sot_mapping:
    contract: 'schema: pii.schema.json: pii_categories[1]'
    core: 'pii_validator.py: validate_pii_category(category_id, gdpr_article)'
    policy: 'opa/gdpr.rego: deny { not valid_pii_handling(input, "email") }'
    cli: cli validate --gdpr --pii-category email
    test: test_gdpr.py::test_pii_email()
  implementation_requirements:
  - 'OPA Policy: deny/allow für PII_CAT_002'
  - 'Unit Test: test_pii_cat_002()'
  - 'Audit Trail: Log all PII_CAT_002-related events'
  - 'PII Detector: Recognize email'
  - 'Hash-Only Storage: Never store raw email'
  - 'GDPR Compliance: Implement Art. 4(1)'
  sot_artefacts:
    python: validate_pii_cat_002() in sot_validator_core.py
    rego: PII_CAT_002 deny rule in sot_policy.rego
    cli: --rules PII_CAT_002 flag supported
    test: test_pii_cat_002() in test_sot_validator.py
  metadata:
    list_name: pii_categories
    list_source: 23_compliance/gdpr/pii_definitions.yaml
    list_index: 1
    audit_requirement: GDPR Art. 5, 6, 9
  data:
    category_id: email
    name: Email Address
    gdpr_article: Art. 4(1)
    special_category: false
- rule_id: PII_CAT_003
  source: master_rules_lifted.yaml
  source_section: List-to-Rule Lifting - GDPR001
  source_line: ~890-913
  category: GDPR Compliance
  severity: HIGH
  enforcement: MUST
  description: System MUSS PII-Kategorie 'Phone Number' (phone) gemäß Art. 4(1) behandeln
  rationale: 'GDPR Art. 4(1) Personal Data: Phone Number ist HIGH severity PII für
    SMS OTP, voice verification, und emergency contact - linkable to individual requiring
    strict protection'
  sot_mapping:
    contract: 'schema: pii.schema.json: pii_categories[2]'
    core: 'pii_validator.py: validate_pii_category(category_id, gdpr_article)'
    policy: 'opa/gdpr.rego: deny { not valid_pii_handling(input, "phone") }'
    cli: cli validate --gdpr --pii-category phone
    test: test_gdpr.py::test_pii_phone()
  implementation_requirements:
  - 'OPA Policy: deny/allow für PII_CAT_003'
  - 'Unit Test: test_pii_cat_003()'
  - 'Audit Trail: Log all PII_CAT_003-related events'
  - 'PII Detector: Recognize phone'
  - 'Hash-Only Storage: Never store raw phone'
  - 'GDPR Compliance: Implement Art. 4(1)'
  sot_artefacts:
    python: validate_pii_cat_003() in sot_validator_core.py
    rego: PII_CAT_003 deny rule in sot_policy.rego
    cli: --rules PII_CAT_003 flag supported
    test: test_pii_cat_003() in test_sot_validator.py
  metadata:
    list_name: pii_categories
    list_source: 23_compliance/gdpr/pii_definitions.yaml
    list_index: 2
    audit_requirement: GDPR Art. 5, 6, 9
  data:
    category_id: phone
    name: Phone Number
    gdpr_article: Art. 4(1)
    special_category: false
- rule_id: PII_CAT_004
  source: master_rules_lifted.yaml
  source_section: List-to-Rule Lifting - GDPR001
  source_line: ~914-937
  category: GDPR Compliance
  severity: HIGH
  enforcement: MUST
  description: System MUSS PII-Kategorie 'Physical Address' (address) gemäß Art. 4(1)
    behandeln
  rationale: 'GDPR Art. 4(1) Personal Data: Physical Address (Street, City, ZIP, Country)
    ist HIGH severity PII für legal notices, shipping, und jurisdiction determination
    - geo-location data requires protection'
  sot_mapping:
    contract: 'schema: pii.schema.json: pii_categories[3]'
    core: 'pii_validator.py: validate_pii_category(category_id, gdpr_article)'
    policy: 'opa/gdpr.rego: deny { not valid_pii_handling(input, "address") }'
    cli: cli validate --gdpr --pii-category address
    test: test_gdpr.py::test_pii_address()
  implementation_requirements:
  - 'OPA Policy: deny/allow für PII_CAT_004'
  - 'Unit Test: test_pii_cat_004()'
  - 'Audit Trail: Log all PII_CAT_004-related events'
  - 'PII Detector: Recognize address'
  - 'Hash-Only Storage: Never store raw address'
  - 'GDPR Compliance: Implement Art. 4(1)'
  sot_artefacts:
    python: validate_pii_cat_004() in sot_validator_core.py
    rego: PII_CAT_004 deny rule in sot_policy.rego
    cli: --rules PII_CAT_004 flag supported
    test: test_pii_cat_004() in test_sot_validator.py
  metadata:
    list_name: pii_categories
    list_source: 23_compliance/gdpr/pii_definitions.yaml
    list_index: 3
    audit_requirement: GDPR Art. 5, 6, 9
  data:
    category_id: address
    name: Physical Address
    gdpr_article: Art. 4(1)
    special_category: false
- rule_id: PII_CAT_005
  source: master_rules_lifted.yaml
  source_section: List-to-Rule Lifting - GDPR001
  source_line: ~938-961
  category: GDPR Compliance
  severity: CRITICAL
  enforcement: MUST
  description: System MUSS PII-Kategorie 'National ID / SSN' (national_id) gemäß Art.
    4(1) behandeln
  rationale: 'GDPR Art. 4(1) Personal Data: National ID / SSN (Tax ID, Passport) ist
    CRITICAL severity PII - government-issued unique identifier für tax compliance,
    KYC/AML, und identity verification - highest protection level required'
  sot_mapping:
    contract: 'schema: pii.schema.json: pii_categories[4]'
    core: 'pii_validator.py: validate_pii_category(category_id, gdpr_article)'
    policy: 'opa/gdpr.rego: deny { not valid_pii_handling(input, "national_id") }'
    cli: cli validate --gdpr --pii-category national_id
    test: test_gdpr.py::test_pii_national_id()
  implementation_requirements:
  - 'OPA Policy: deny/allow für PII_CAT_005'
  - 'Unit Test: test_pii_cat_005()'
  - 'Audit Trail: Log all PII_CAT_005-related events'
  - 'PII Detector: Recognize national_id'
  - 'Hash-Only Storage: Never store raw national_id'
  - 'GDPR Compliance: Implement Art. 4(1)'
  sot_artefacts:
    python: validate_pii_cat_005() in sot_validator_core.py
    rego: PII_CAT_005 deny rule in sot_policy.rego
    cli: --rules PII_CAT_005 flag supported
    test: test_pii_cat_005() in test_sot_validator.py
  metadata:
    list_name: pii_categories
    list_source: 23_compliance/gdpr/pii_definitions.yaml
    list_index: 4
    audit_requirement: GDPR Art. 5, 6, 9
  data:
    category_id: national_id
    name: National ID / SSN
    gdpr_article: Art. 4(1)
    special_category: false
- rule_id: PII_CAT_006
  source: master_rules_lifted.yaml
  source_section: List-to-Rule Lifting - GDPR001
  source_line: ~962-985
  category: GDPR Compliance
  severity: CRITICAL
  enforcement: MUST
  description: System MUSS PII-Kategorie 'Biometric Data' (biometric) gemäß Art. 9(1)
    behandeln (GDPR Special Category)
  rationale: 'GDPR Art. 9(1) Special Category Data: Biometric Data (Fingerprints,
    Facial Recognition, Iris Scans) ist CRITICAL severity - "special category" requiring
    explicit consent, legal basis Art. 9(2), und enhanced security measures'
  sot_mapping:
    contract: 'schema: pii.schema.json: pii_categories[5]'
    core: 'pii_validator.py: validate_special_category_pii(category_id, gdpr_article)'
    policy: 'opa/gdpr.rego: deny { not valid_special_category_handling(input, "biometric")
      }'
    cli: cli validate --gdpr --special-category biometric
    test: test_gdpr.py::test_special_pii_biometric()
  implementation_requirements:
  - 'OPA Policy: deny/allow für PII_CAT_006'
  - 'Unit Test: test_pii_cat_006()'
  - 'Audit Trail: Log all PII_CAT_006-related events'
  - 'PII Detector: Recognize biometric'
  - 'Hash-Only Storage: Never store raw biometric'
  - 'GDPR Compliance: Implement Art. 9(1)'
  sot_artefacts:
    python: validate_pii_cat_006() in sot_validator_core.py
    rego: PII_CAT_006 deny rule in sot_policy.rego
    cli: --rules PII_CAT_006 flag supported
    test: test_pii_cat_006() in test_sot_validator.py
  metadata:
    list_name: pii_categories
    list_source: 23_compliance/gdpr/pii_definitions.yaml
    list_index: 5
    audit_requirement: GDPR Art. 5, 6, 9
  data:
    category_id: biometric
    name: Biometric Data
    gdpr_article: Art. 9(1)
    special_category: true
- rule_id: PII_CAT_007
  source: master_rules_lifted.yaml
  source_section: List-to-Rule Lifting - GDPR001
  source_line: ~986-1009
  category: GDPR Compliance
  severity: CRITICAL
  enforcement: MUST
  description: System MUSS PII-Kategorie 'Health Data' (health) gemäß Art. 9(1) behandeln
    (GDPR Special Category)
  rationale: 'GDPR Art. 9(1) Special Category Data: Health Data (Medical Records,
    Diagnoses, Treatments) ist CRITICAL severity - requires explicit consent Art.
    9(2)(a), medical professional basis Art. 9(2)(h), oder public health Art. 9(2)(i)'
  sot_mapping:
    contract: 'schema: pii.schema.json: pii_categories[6]'
    core: 'pii_validator.py: validate_special_category_pii(category_id, gdpr_article)'
    policy: 'opa/gdpr.rego: deny { not valid_special_category_handling(input, "health")
      }'
    cli: cli validate --gdpr --special-category health
    test: test_gdpr.py::test_special_pii_health()
  implementation_requirements:
  - 'OPA Policy: deny/allow für PII_CAT_007'
  - 'Unit Test: test_pii_cat_007()'
  - 'Audit Trail: Log all PII_CAT_007-related events'
  - 'PII Detector: Recognize health'
  - 'Hash-Only Storage: Never store raw health'
  - 'GDPR Compliance: Implement Art. 9(1)'
  sot_artefacts:
    python: validate_pii_cat_007() in sot_validator_core.py
    rego: PII_CAT_007 deny rule in sot_policy.rego
    cli: --rules PII_CAT_007 flag supported
    test: test_pii_cat_007() in test_sot_validator.py
  metadata:
    list_name: pii_categories
    list_source: 23_compliance/gdpr/pii_definitions.yaml
    list_index: 6
    audit_requirement: GDPR Art. 5, 6, 9
  data:
    category_id: health
    name: Health Data
    gdpr_article: Art. 9(1)
    special_category: true
- rule_id: PII_CAT_008
  source: master_rules_lifted.yaml
  source_section: List-to-Rule Lifting - GDPR001
  source_line: ~1010-1033
  category: GDPR Compliance
  severity: CRITICAL
  enforcement: MUST
  description: System MUSS PII-Kategorie 'Genetic Data' (genetic) gemäß Art. 9(1)
    behandeln (GDPR Special Category)
  rationale: 'GDPR Art. 9(1) Special Category Data: Genetic Data (DNA Profiles, Hereditary
    Information) ist CRITICAL severity - unique immutable identifier requiring Art.
    9(2) legal basis, research ethics approval, und lifetime protection'
  sot_mapping:
    contract: 'schema: pii.schema.json: pii_categories[7]'
    core: 'pii_validator.py: validate_special_category_pii(category_id, gdpr_article)'
    policy: 'opa/gdpr.rego: deny { not valid_special_category_handling(input, "genetic")
      }'
    cli: cli validate --gdpr --special-category genetic
    test: test_gdpr.py::test_special_pii_genetic()
  implementation_requirements:
  - 'OPA Policy: deny/allow für PII_CAT_008'
  - 'Unit Test: test_pii_cat_008()'
  - 'Audit Trail: Log all PII_CAT_008-related events'
  - 'PII Detector: Recognize genetic'
  - 'Hash-Only Storage: Never store raw genetic'
  - 'GDPR Compliance: Implement Art. 9(1)'
  sot_artefacts:
    python: validate_pii_cat_008() in sot_validator_core.py
    rego: PII_CAT_008 deny rule in sot_policy.rego
    cli: --rules PII_CAT_008 flag supported
    test: test_pii_cat_008() in test_sot_validator.py
  metadata:
    list_name: pii_categories
    list_source: 23_compliance/gdpr/pii_definitions.yaml
    list_index: 7
    audit_requirement: GDPR Art. 5, 6, 9
  data:
    category_id: genetic
    name: Genetic Data
    gdpr_article: Art. 9(1)
    special_category: true
- rule_id: PII_CAT_009
  source: master_rules_lifted.yaml
  source_section: List-to-Rule Lifting - GDPR001
  source_line: ~1034-1057
  category: GDPR Compliance
  severity: CRITICAL
  enforcement: MUST
  description: System MUSS PII-Kategorie 'Religious Beliefs' (religion) gemäß Art.
    9(1) behandeln (GDPR Special Category)
  rationale: 'GDPR Art. 9(1) Special Category Data: Religious Beliefs ist CRITICAL
    severity - fundamental right to freedom of thought/conscience per EU Charter Art.
    10, requires explicit consent Art. 9(2)(a) oder religious organization basis Art.
    9(2)(d)'
  sot_mapping:
    contract: 'schema: pii.schema.json: pii_categories[8]'
    core: 'pii_validator.py: validate_special_category_pii(category_id, gdpr_article)'
    policy: 'opa/gdpr.rego: deny { not valid_special_category_handling(input, "religion")
      }'
    cli: cli validate --gdpr --special-category religion
    test: test_gdpr.py::test_special_pii_religion()
  implementation_requirements:
  - 'OPA Policy: deny/allow für PII_CAT_009'
  - 'Unit Test: test_pii_cat_009()'
  - 'Audit Trail: Log all PII_CAT_009-related events'
  - 'PII Detector: Recognize religion'
  - 'Hash-Only Storage: Never store raw religion'
  - 'GDPR Compliance: Implement Art. 9(1)'
  sot_artefacts:
    python: validate_pii_cat_009() in sot_validator_core.py
    rego: PII_CAT_009 deny rule in sot_policy.rego
    cli: --rules PII_CAT_009 flag supported
    test: test_pii_cat_009() in test_sot_validator.py
  metadata:
    list_name: pii_categories
    list_source: 23_compliance/gdpr/pii_definitions.yaml
    list_index: 8
    audit_requirement: GDPR Art. 5, 6, 9
  data:
    category_id: religion
    name: Religious Beliefs
    gdpr_article: Art. 9(1)
    special_category: true
- rule_id: PII_CAT_010
  source: master_rules_lifted.yaml
  source_section: List-to-Rule Lifting - GDPR001
  source_line: ~1058-1081
  category: GDPR Compliance
  severity: CRITICAL
  enforcement: MUST
  description: System MUSS PII-Kategorie 'Political Opinions' (political) gemäß Art.
    9(1) behandeln (GDPR Special Category)
  rationale: 'GDPR Art. 9(1) Special Category Data: Political Opinions ist CRITICAL
    severity - fundamental right to free expression per EU Charter Art. 11, requires
    explicit consent Art. 9(2)(a), protection from profiling/targeting'
  sot_mapping:
    contract: 'schema: pii.schema.json: pii_categories[9]'
    core: 'pii_validator.py: validate_special_category_pii(category_id, gdpr_article)'
    policy: 'opa/gdpr.rego: deny { not valid_special_category_handling(input, "political")
      }'
    cli: cli validate --gdpr --special-category political
    test: test_gdpr.py::test_special_pii_political()
  implementation_requirements:
  - 'OPA Policy: deny/allow für PII_CAT_010'
  - 'Unit Test: test_pii_cat_010()'
  - 'Audit Trail: Log all PII_CAT_010-related events'
  - 'PII Detector: Recognize political'
  - 'Hash-Only Storage: Never store raw political'
  - 'GDPR Compliance: Implement Art. 9(1)'
  sot_artefacts:
    python: validate_pii_cat_010() in sot_validator_core.py
    rego: PII_CAT_010 deny rule in sot_policy.rego
    cli: --rules PII_CAT_010 flag supported
    test: test_pii_cat_010() in test_sot_validator.py
  metadata:
    list_name: pii_categories
    list_source: 23_compliance/gdpr/pii_definitions.yaml
    list_index: 9
    audit_requirement: GDPR Art. 5, 6, 9
  data:
    category_id: political
    name: Political Opinions
    gdpr_article: Art. 9(1)
    special_category: true
- rule_id: HASH_ALG_001
  source: master_rules_lifted.yaml
  source_section: List-to-Rule Lifting - CRY001
  source_line: ~1082-1105
  category: Cryptography
  severity: CRITICAL
  enforcement: MUST
  description: System MUSS Hash-Algorithmus SHA3-256 (256 bits) als 'primary' unterstützen
  rationale: 'Post-Quantum Cryptography: SHA3-256 (NIST FIPS 202) als PRIMARY hash
    algorithm ist CRITICAL für hash-only storage, Merkle trees, und blockchain integration
    - quantum-resistant candidate mit 128-bit security level'
  sot_mapping:
    contract: 'schema: crypto.schema.json: approved_hash_algorithms[0]'
    core: 'crypto_validator.py: validate_hash_algorithm(algorithm_id, bits, status)'
    policy: 'opa/crypto.rego: deny { not approved_hash_algorithm(input, "sha3_256")
      }'
    cli: cli validate --crypto --hash-algorithm sha3_256
    test: test_crypto.py::test_hash_sha3_256()
  implementation_requirements:
  - 'OPA Policy: deny/allow für HASH_ALG_001'
  - 'Unit Test: test_hash_alg_001()'
  - 'Audit Trail: Log all HASH_ALG_001-related events'
  sot_artefacts:
    python: validate_hash_alg_001() in sot_validator_core.py
    rego: HASH_ALG_001 deny rule in sot_policy.rego
    cli: --rules HASH_ALG_001 flag supported
    test: test_hash_alg_001() in test_sot_validator.py
  metadata:
    list_name: approved_hash_algorithms
    list_source: 21_post_quantum_crypto/algorithms.yaml
    list_index: 0
    audit_requirement: Cryptographic Standards, Post-Quantum
  data:
    algorithm_id: sha3_256
    name: SHA3-256
    bits: 256
    quantum_safe: false
    status: primary
- rule_id: HASH_ALG_002
  source: master_rules_lifted.yaml
  source_section: List-to-Rule Lifting - CRY001
  source_line: ~1106-1129
  category: Cryptography
  severity: HIGH
  enforcement: MUST
  description: System MUSS Hash-Algorithmus SHA3-512 (512 bits) als 'approved' unterstützen
  rationale: 'Post-Quantum Cryptography: SHA3-512 (NIST FIPS 202) als APPROVED alternative
    ist HIGH severity für high-security contexts requiring 256-bit security level
    - backward compatibility mit SHA-2 migration'
  sot_mapping:
    contract: 'schema: crypto.schema.json: approved_hash_algorithms[1]'
    core: 'crypto_validator.py: validate_hash_algorithm(algorithm_id, bits, status)'
    policy: 'opa/crypto.rego: deny { not approved_hash_algorithm(input, "sha3_512")
      }'
    cli: cli validate --crypto --hash-algorithm sha3_512
    test: test_crypto.py::test_hash_sha3_512()
  implementation_requirements:
  - 'OPA Policy: deny/allow für HASH_ALG_002'
  - 'Unit Test: test_hash_alg_002()'
  - 'Audit Trail: Log all HASH_ALG_002-related events'
  sot_artefacts:
    python: validate_hash_alg_002() in sot_validator_core.py
    rego: HASH_ALG_002 deny rule in sot_policy.rego
    cli: --rules HASH_ALG_002 flag supported
    test: test_hash_alg_002() in test_sot_validator.py
  metadata:
    list_name: approved_hash_algorithms
    list_source: 21_post_quantum_crypto/algorithms.yaml
    list_index: 1
    audit_requirement: Cryptographic Standards, Post-Quantum
  data:
    algorithm_id: sha3_512
    name: SHA3-512
    bits: 512
    quantum_safe: false
    status: approved
- rule_id: HASH_ALG_003
  source: master_rules_lifted.yaml
  source_section: List-to-Rule Lifting - CRY001
  source_line: ~1130-1153
  category: Cryptography
  severity: MEDIUM
  enforcement: MUST
  description: System MUSS Hash-Algorithmus BLAKE3 (256 bits) als 'approved' unterstützen
  rationale: 'Modern Cryptography: BLAKE3 (fastest cryptographic hash) als APPROVED
    für performance-critical contexts - parallelizable, 128-bit security, ideal für
    large file hashing und streaming verification'
  sot_mapping:
    contract: 'schema: crypto.schema.json: approved_hash_algorithms[2]'
    core: 'crypto_validator.py: validate_hash_algorithm(algorithm_id, bits, status)'
    policy: 'opa/crypto.rego: deny { not approved_hash_algorithm(input, "blake3")
      }'
    cli: cli validate --crypto --hash-algorithm blake3
    test: test_crypto.py::test_hash_blake3()
  implementation_requirements:
  - 'OPA Policy: deny/allow für HASH_ALG_003'
  - 'Unit Test: test_hash_alg_003()'
  - 'Audit Trail: Log all HASH_ALG_003-related events'
  sot_artefacts:
    python: validate_hash_alg_003() in sot_validator_core.py
    rego: HASH_ALG_003 deny rule in sot_policy.rego
    cli: --rules HASH_ALG_003 flag supported
    test: test_hash_alg_003() in test_sot_validator.py
  metadata:
    list_name: approved_hash_algorithms
    list_source: 21_post_quantum_crypto/algorithms.yaml
    list_index: 2
    audit_requirement: Cryptographic Standards, Post-Quantum
  data:
    algorithm_id: blake3
    name: BLAKE3
    bits: 256
    quantum_safe: false
    status: approved
- rule_id: HASH_ALG_004
  source: master_rules_lifted.yaml
  source_section: List-to-Rule Lifting - CRY001
  source_line: ~1154-1177
  category: Cryptography
  severity: LOW
  enforcement: MUST
  description: System MUSS Hash-Algorithmus SPHINCS+ (256 bits) als 'future' (Quantum-Safe)
    unterstützen
  rationale: 'Post-Quantum Cryptography: SPHINCS+ (NIST PQC Round 3 Finalist) als
    FUTURE quantum-safe signature scheme ist LOW priority für forward-looking implementation
    - hash-based signatures resistant to quantum attacks'
  sot_mapping:
    contract: 'schema: crypto.schema.json: approved_hash_algorithms[3]'
    core: 'crypto_validator.py: validate_hash_algorithm(algorithm_id, bits, quantum_safe)'
    policy: 'opa/crypto.rego: deny { not future_quantum_safe_algorithm(input, "sphincs_plus")
      }'
    cli: cli validate --crypto --hash-algorithm sphincs_plus --quantum-safe
    test: test_crypto.py::test_hash_sphincs_plus_quantum()
  implementation_requirements:
  - 'OPA Policy: deny/allow für HASH_ALG_004'
  - 'Unit Test: test_hash_alg_004()'
  - 'Audit Trail: Log all HASH_ALG_004-related events'
  sot_artefacts:
    python: validate_hash_alg_004() in sot_validator_core.py
    rego: HASH_ALG_004 deny rule in sot_policy.rego
    cli: --rules HASH_ALG_004 flag supported
    test: test_hash_alg_004() in test_sot_validator.py
  metadata:
    list_name: approved_hash_algorithms
    list_source: 21_post_quantum_crypto/algorithms.yaml
    list_index: 3
    audit_requirement: Cryptographic Standards, Post-Quantum
  data:
    algorithm_id: sphincs_plus
    name: SPHINCS+
    bits: 256
    quantum_safe: true
    status: future
- rule_id: RETENTION_001
  source: master_rules_lifted.yaml
  source_section: List-to-Rule Lifting - GDPR002
  source_line: ~1178-1201
  category: GDPR Retention
  severity: CRITICAL
  enforcement: MUST
  description: 'System MUSS Retention Period für ''transaction_hashes'' auf 3650 Tage
    setzen. Grund: Legal requirement (10 years)'
  rationale: 'GDPR Art. 5(1)(e) Storage Limitation: transaction_hashes (10 years =
    3650 days) ist CRITICAL für AML/CTF compliance (EU 5AMLD), tax audit trails, und
    legal evidence - minimum retention per financial regulations'
  sot_mapping:
    contract: 'schema: retention.schema.json: data_retention_periods[0]'
    core: 'retention_validator.py: validate_retention_period(data_type, retention_days)'
    policy: 'opa/gdpr.rego: deny { not valid_retention_period(input, "transaction_hashes",
      3650) }'
    cli: cli validate --gdpr --retention transaction_hashes
    test: test_gdpr.py::test_retention_transaction_hashes()
  implementation_requirements:
  - 'OPA Policy: deny/allow für RETENTION_001'
  - 'Unit Test: test_retention_001()'
  - 'Audit Trail: Log all RETENTION_001-related events'
  sot_artefacts:
    python: validate_retention_001() in sot_validator_core.py
    rego: RETENTION_001 deny rule in sot_policy.rego
    cli: --rules RETENTION_001 flag supported
    test: test_retention_001() in test_sot_validator.py
  metadata:
    list_name: data_retention_periods
    list_source: 23_compliance/gdpr/retention.yaml
    list_index: 0
    audit_requirement: GDPR Art. 5(1)(e)
  data:
    data_type: transaction_hashes
    retention_days: 3650
    reason: Legal requirement (10 years)
- rule_id: RETENTION_002
  source: master_rules_lifted.yaml
  source_section: List-to-Rule Lifting - GDPR002
  source_line: ~1202-1225
  category: GDPR Retention
  severity: CRITICAL
  enforcement: MUST
  description: 'System MUSS Retention Period für ''audit_logs'' auf 3650 Tage setzen.
    Grund: Compliance (10 years)'
  rationale: 'GDPR Art. 5(1)(e) Storage Limitation: audit_logs (10 years = 3650 days)
    ist CRITICAL für compliance investigations, security incident response, und regulatory
    audits - required by eIDAS Regulation Art. 24(2)'
  sot_mapping:
    contract: 'schema: retention.schema.json: data_retention_periods[1]'
    core: 'retention_validator.py: validate_retention_period(data_type, retention_days)'
    policy: 'opa/gdpr.rego: deny { not valid_retention_period(input, "audit_logs",
      3650) }'
    cli: cli validate --gdpr --retention audit_logs
    test: test_gdpr.py::test_retention_audit_logs()
  implementation_requirements:
  - 'OPA Policy: deny/allow für RETENTION_002'
  - 'Unit Test: test_retention_002()'
  - 'Audit Trail: Log all RETENTION_002-related events'
  sot_artefacts:
    python: validate_retention_002() in sot_validator_core.py
    rego: RETENTION_002 deny rule in sot_policy.rego
    cli: --rules RETENTION_002 flag supported
    test: test_retention_002() in test_sot_validator.py
  metadata:
    list_name: data_retention_periods
    list_source: 23_compliance/gdpr/retention.yaml
    list_index: 1
    audit_requirement: GDPR Art. 5(1)(e)
  data:
    data_type: audit_logs
    retention_days: 3650
    reason: Compliance (10 years)
- rule_id: RETENTION_003
  source: master_rules_lifted.yaml
  source_section: List-to-Rule Lifting - GDPR002
  source_line: ~1226-1249
  category: GDPR Retention
  severity: HIGH
  enforcement: MUST
  description: 'System MUSS Retention Period für ''session_tokens'' auf 1 Tage setzen.
    Grund: Security best practice'
  rationale: 'GDPR Art. 5(1)(e) Storage Limitation + Security: session_tokens (1 day
    = 24 hours) ist HIGH severity für attack surface reduction, preventing token replay,
    und minimizing credential exposure - aligns with OWASP Session Management guidelines'
  sot_mapping:
    contract: 'schema: retention.schema.json: data_retention_periods[2]'
    core: 'retention_validator.py: validate_retention_period(data_type, retention_days)'
    policy: 'opa/gdpr.rego: deny { not valid_retention_period(input, "session_tokens",
      1) }'
    cli: cli validate --gdpr --retention session_tokens
    test: test_gdpr.py::test_retention_session_tokens()
  implementation_requirements:
  - 'OPA Policy: deny/allow für RETENTION_003'
  - 'Unit Test: test_retention_003()'
  - 'Audit Trail: Log all RETENTION_003-related events'
  sot_artefacts:
    python: validate_retention_003() in sot_validator_core.py
    rego: RETENTION_003 deny rule in sot_policy.rego
    cli: --rules RETENTION_003 flag supported
    test: test_retention_003() in test_sot_validator.py
  metadata:
    list_name: data_retention_periods
    list_source: 23_compliance/gdpr/retention.yaml
    list_index: 2
    audit_requirement: GDPR Art. 5(1)(e)
  data:
    data_type: session_tokens
    retention_days: 1
    reason: Security best practice
- rule_id: RETENTION_004
  source: master_rules_lifted.yaml
  source_section: List-to-Rule Lifting - GDPR002
  source_line: ~1250-1273
  category: GDPR Retention
  severity: MEDIUM
  enforcement: MUST
  description: 'System MUSS Retention Period für ''email_verification'' auf 30 Tage
    setzen. Grund: User onboarding'
  rationale: 'GDPR Art. 5(1)(e) Storage Limitation: email_verification (30 days) ist
    MEDIUM severity für user onboarding flow, allowing re-send verification emails,
    balance between security und user experience'
  sot_mapping:
    contract: 'schema: retention.schema.json: data_retention_periods[3]'
    core: 'retention_validator.py: validate_retention_period(data_type, retention_days)'
    policy: 'opa/gdpr.rego: deny { not valid_retention_period(input, "email_verification",
      30) }'
    cli: cli validate --gdpr --retention email_verification
    test: test_gdpr.py::test_retention_email_verification()
  implementation_requirements:
  - 'OPA Policy: deny/allow für RETENTION_004'
  - 'Unit Test: test_retention_004()'
  - 'Audit Trail: Log all RETENTION_004-related events'
  sot_artefacts:
    python: validate_retention_004() in sot_validator_core.py
    rego: RETENTION_004 deny rule in sot_policy.rego
    cli: --rules RETENTION_004 flag supported
    test: test_retention_004() in test_sot_validator.py
  metadata:
    list_name: data_retention_periods
    list_source: 23_compliance/gdpr/retention.yaml
    list_index: 3
    audit_requirement: GDPR Art. 5(1)(e)
  data:
    data_type: email_verification
    retention_days: 30
    reason: User onboarding
- rule_id: RETENTION_005
  source: master_rules_lifted.yaml
  source_section: List-to-Rule Lifting - GDPR002
  source_line: ~1274-1297
  category: GDPR Retention
  severity: LOW
  enforcement: MUST
  description: 'System MUSS Retention Period für ''analytics_aggregated'' auf 730
    Tage setzen. Grund: Business intelligence (2 years)'
  rationale: 'GDPR Art. 5(1)(e) Storage Limitation: analytics_aggregated (2 years
    = 730 days) ist LOW severity - anonymized/aggregated data für business intelligence,
    trend analysis, und system optimization - minimal privacy risk'
  sot_mapping:
    contract: 'schema: retention.schema.json: data_retention_periods[4]'
    core: 'retention_validator.py: validate_retention_period(data_type, retention_days)'
    policy: 'opa/gdpr.rego: deny { not valid_retention_period(input, "analytics_aggregated",
      730) }'
    cli: cli validate --gdpr --retention analytics_aggregated
    test: test_gdpr.py::test_retention_analytics_aggregated()
  implementation_requirements:
  - 'OPA Policy: deny/allow für RETENTION_005'
  - 'Unit Test: test_retention_005()'
  - 'Audit Trail: Log all RETENTION_005-related events'
  sot_artefacts:
    python: validate_retention_005() in sot_validator_core.py
    rego: RETENTION_005 deny rule in sot_policy.rego
    cli: --rules RETENTION_005 flag supported
    test: test_retention_005() in test_sot_validator.py
  metadata:
    list_name: data_retention_periods
    list_source: 23_compliance/gdpr/retention.yaml
    list_index: 4
    audit_requirement: GDPR Art. 5(1)(e)
  data:
    data_type: analytics_aggregated
    retention_days: 730
    reason: Business intelligence (2 years)
- rule_id: DID_METHOD_001
  source: master_rules_lifted.yaml
  source_section: List-to-Rule Lifting - DID001
  source_line: ~1298-1321
  category: Identity Standards
  severity: CRITICAL
  enforcement: MUST
  description: System MUSS DID-Methode did:ethr (Ethereum DID Method) gemäß Spec https://github.com/decentralized-identity/ethr-did-resolver
    unterstützen
  rationale: 'W3C DID Core 1.0: did:ethr (Ethereum DID Method) ist CRITICAL als primary
    DID method - blockchain-anchored, decentralized identity, compatible with smart
    contracts, EIP-1056 compliant für self-sovereign identity'
  sot_mapping:
    contract: 'schema: did.schema.json: supported_did_methods[0]'
    core: 'did_validator.py: validate_did_method(method_name, spec_url)'
    policy: 'opa/identity.rego: deny { not supported_did_method(input, "did:ethr")
      }'
    cli: cli validate --identity --did-method did:ethr
    test: test_identity.py::test_did_method_ethr()
  implementation_requirements:
  - 'OPA Policy: deny/allow für DID_METHOD_001'
  - 'Unit Test: test_did_method_001()'
  - 'Audit Trail: Log all DID_METHOD_001-related events'
  sot_artefacts:
    python: validate_did_method_001() in sot_validator_core.py
    rego: DID_METHOD_001 deny rule in sot_policy.rego
    cli: --rules DID_METHOD_001 flag supported
    test: test_did_method_001() in test_sot_validator.py
  metadata:
    list_name: supported_did_methods
    list_source: 09_meta_identity/did_methods.yaml
    list_index: 0
    audit_requirement: W3C DID Core 1.0
  data:
    method_name: did:ethr
    name: Ethereum DID Method
    spec: https://github.com/decentralized-identity/ethr-did-resolver
- rule_id: DID_METHOD_002
  source: master_rules_lifted.yaml
  source_section: List-to-Rule Lifting - DID001
  source_line: ~1322-1345
  category: Identity Standards
  severity: HIGH
  enforcement: MUST
  description: System MUSS DID-Methode did:key (Key-based DID Method) gemäß Spec https://w3c-ccg.github.io/did-method-key/
    unterstützen
  rationale: 'W3C DID Core 1.0: did:key (Key-based DID Method) ist HIGH severity für
    offline identity verification, no blockchain dependency, cryptographic public
    key as identifier - ideal für ephemeral sessions'
  sot_mapping:
    contract: 'schema: did.schema.json: supported_did_methods[1]'
    core: 'did_validator.py: validate_did_method(method_name, spec_url)'
    policy: 'opa/identity.rego: deny { not supported_did_method(input, "did:key")
      }'
    cli: cli validate --identity --did-method did:key
    test: test_identity.py::test_did_method_key()
  implementation_requirements:
  - 'OPA Policy: deny/allow für DID_METHOD_002'
  - 'Unit Test: test_did_method_002()'
  - 'Audit Trail: Log all DID_METHOD_002-related events'
  sot_artefacts:
    python: validate_did_method_002() in sot_validator_core.py
    rego: DID_METHOD_002 deny rule in sot_policy.rego
    cli: --rules DID_METHOD_002 flag supported
    test: test_did_method_002() in test_sot_validator.py
  metadata:
    list_name: supported_did_methods
    list_source: 09_meta_identity/did_methods.yaml
    list_index: 1
    audit_requirement: W3C DID Core 1.0
  data:
    method_name: did:key
    name: Key-based DID Method
    spec: https://w3c-ccg.github.io/did-method-key/
- rule_id: DID_METHOD_003
  source: master_rules_lifted.yaml
  source_section: List-to-Rule Lifting - DID001
  source_line: ~1346-1369
  category: Identity Standards
  severity: MEDIUM
  enforcement: MUST
  description: System MUSS DID-Methode did:web (Web DID Method) gemäß Spec https://w3c-ccg.github.io/did-method-web/
    unterstützen
  rationale: 'W3C DID Core 1.0: did:web (Web DID Method) ist MEDIUM severity für domain-based
    identity, HTTPS anchoring, organizational DIDs - bridges traditional web infrastructure
    with decentralized identity'
  sot_mapping:
    contract: 'schema: did.schema.json: supported_did_methods[2]'
    core: 'did_validator.py: validate_did_method(method_name, spec_url)'
    policy: 'opa/identity.rego: deny { not supported_did_method(input, "did:web")
      }'
    cli: cli validate --identity --did-method did:web
    test: test_identity.py::test_did_method_web()
  implementation_requirements:
  - 'OPA Policy: deny/allow für DID_METHOD_003'
  - 'Unit Test: test_did_method_003()'
  - 'Audit Trail: Log all DID_METHOD_003-related events'
  sot_artefacts:
    python: validate_did_method_003() in sot_validator_core.py
    rego: DID_METHOD_003 deny rule in sot_policy.rego
    cli: --rules DID_METHOD_003 flag supported
    test: test_did_method_003() in test_sot_validator.py
  metadata:
    list_name: supported_did_methods
    list_source: 09_meta_identity/did_methods.yaml
    list_index: 2
    audit_requirement: W3C DID Core 1.0
  data:
    method_name: did:web
    name: Web DID Method
    spec: https://w3c-ccg.github.io/did-method-web/
- rule_id: DID_METHOD_004
  source: master_rules_lifted.yaml
  source_section: List-to-Rule Lifting - DID001
  source_line: ~1370-1393
  category: Identity Standards
  severity: MEDIUM
  enforcement: MUST
  description: System MUSS DID-Methode did:ion (ION DID Method (Sidetree)) gemäß Spec
    https://identity.foundation/ion/ unterstützen
  rationale: 'W3C DID Core 1.0: did:ion (ION DID Method via Sidetree protocol) ist
    MEDIUM severity für Bitcoin-anchored identity, Decentralized Identity Foundation
    (DIF) spec, scalable DID operations via Layer 2 batching'
  sot_mapping:
    contract: 'schema: did.schema.json: supported_did_methods[3]'
    core: 'did_validator.py: validate_did_method(method_name, spec_url)'
    policy: 'opa/identity.rego: deny { not supported_did_method(input, "did:ion")
      }'
    cli: cli validate --identity --did-method did:ion
    test: test_identity.py::test_did_method_ion()
  implementation_requirements:
  - 'OPA Policy: deny/allow für DID_METHOD_004'
  - 'Unit Test: test_did_method_004()'
  - 'Audit Trail: Log all DID_METHOD_004-related events'
  sot_artefacts:
    python: validate_did_method_004() in sot_validator_core.py
    rego: DID_METHOD_004 deny rule in sot_policy.rego
    cli: --rules DID_METHOD_004 flag supported
    test: test_did_method_004() in test_sot_validator.py
  metadata:
    list_name: supported_did_methods
    list_source: 09_meta_identity/did_methods.yaml
    list_index: 3
    audit_requirement: W3C DID Core 1.0
  data:
    method_name: did:ion
    name: ION DID Method (Sidetree)
    spec: https://identity.foundation/ion/
- rule_id: SOT-V2-0001
  source: sot_contract_v2.yaml
  source_section: SSID_structure_level3_part1_MAX.md
  source_line: ~30-100
  category: GENERAL
  severity: MEDIUM
  enforcement: MUST
  description: Semantic rule for 'business_model'.
  rationale: 'Contract Structure: business_model ist MEDIUM severity für defining
    non-custodial architecture, KYC responsibility boundaries, und user interaction
    patterns - foundational business logic validation'
  sot_mapping:
    contract: 'schema: sot.schema.json: business_model'
    core: 'contract_validator.py: validate_business_model(input)'
    policy: 'opa/sot.rego: deny { not valid_business_model(input) }'
    cli: cli validate --sot --path business_model
    test: test_sot.py::test_business_model()
  sot_artefacts:
    python: validate_sot_v2(UNKNOWN) in sot_validator_core.py
    rego: UNKNOWN deny rule in sot_policy.rego
    cli: --rules UNKNOWN flag supported
    test: test_sot_v2_UNKNOWN() in test_sot_validator.py
- rule_id: SOT-V2-0003
  source: sot_contract_v2.yaml
  source_section: SSID_structure_level3_part1_MAX.md
  source_line: ~30-100
  category: GENERAL
  severity: MEDIUM
  enforcement: MUST
  description: Semantic rule for 'business_model.kyc_responsibility'.
  rationale: 'Compliance Boundaries: kyc_responsibility="user-provided" ist MEDIUM
    severity - validates self-sovereign identity model, zero-knowledge proof architecture,
    shifts KYC burden to identity providers per eIDAS 2.0'
  sot_mapping:
    contract: 'schema: sot.schema.json: business_model.kyc_responsibility'
    core: 'contract_validator.py: validate_kyc_responsibility(value)'
    policy: 'opa/sot.rego: deny { input.business_model.kyc_responsibility != "user-provided"
      }'
    cli: cli validate --sot --path business_model.kyc_responsibility
    test: test_sot.py::test_kyc_responsibility_user_provided()
  sot_artefacts:
    python: validate_sot_v2_0003() in sot_validator_core.py
    rego: SOT-V2-0003 deny rule in sot_policy.rego
    cli: --rules SOT-V2-0003 flag supported
    test: test_sot_v2_0003() in test_sot_validator.py
- rule_id: SOT-V2-0004
  source: sot_contract_v2.yaml
  source_section: SSID_structure_level3_part1_MAX.md
  source_line: ~30-100
  category: GENERAL
  severity: MEDIUM
  enforcement: MUST
  description: Semantic rule for 'business_model.not_role'.
  rationale: 'Role Exclusions: not_role list ist MEDIUM severity - defines prohibited
    roles (custodian, centralized KYC provider) ensuring non-custodial compliance,
    regulatory clarity'
  sot_mapping:
    contract: 'schema: sot.schema.json: business_model.not_role[]'
    core: 'contract_validator.py: validate_role_exclusions(not_role_list)'
    policy: 'opa/sot.rego: deny { prohibited_role_present(input.business_model.not_role)
      }'
    cli: cli validate --sot --path business_model.not_role
    test: test_sot.py::test_not_role_exclusions()
  sot_artefacts:
    python: validate_sot_v2_0004() in sot_validator_core.py
    rego: SOT-V2-0004 deny rule in sot_policy.rego
    cli: --rules SOT-V2-0004 flag supported
    test: test_sot_v2_0004() in test_sot_validator.py
- rule_id: SOT-V2-0005
  source: sot_contract_v2.yaml
  source_section: SSID_structure_level3_part1_MAX.md
  source_line: ~30-100
  category: GENERAL
  severity: MEDIUM
  enforcement: MUST
  description: Semantic rule for 'business_model.role'.
  rationale: 'Role Definition: role="non-custodial identity infrastructure" ist MEDIUM
    severity - defines system purpose, regulatory classification, architectural boundaries
    für self-sovereign identity platform'
  sot_mapping:
    contract: 'schema: sot.schema.json: business_model.role'
    core: 'contract_validator.py: validate_system_role(value)'
    policy: 'opa/sot.rego: deny { not valid_system_role(input.business_model.role)
      }'
    cli: cli validate --sot --path business_model.role
    test: test_sot.py::test_system_role()
  sot_artefacts:
    python: validate_sot_v2_0005() in sot_validator_core.py
    rego: SOT-V2-0005 deny rule in sot_policy.rego
    cli: --rules SOT-V2-0005 flag supported
    test: test_sot_v2_0005() in test_sot_validator.py
- rule_id: SOT-V2-0006
  source: sot_contract_v2.yaml
  source_section: SSID_structure_level3_part1_MAX.md
  source_line: ~30-100
  category: GENERAL
  severity: MEDIUM
  enforcement: MUST
  description: Semantic rule for 'business_model.user_interactions'.
  rationale: 'User Flow: user_interactions list ist MEDIUM severity - defines permitted
    interaction patterns (hash submission, proof verification, DID resolution), validates
    zero-knowledge architecture'
  sot_mapping:
    contract: 'schema: sot.schema.json: business_model.user_interactions[]'
    core: 'contract_validator.py: validate_user_interactions(interactions_list)'
    policy: 'opa/sot.rego: deny { invalid_interaction_pattern(input.business_model.user_interactions)
      }'
    cli: cli validate --sot --path business_model.user_interactions
    test: test_sot.py::test_user_interactions()
  sot_artefacts:
    python: validate_sot_v2_0006() in sot_validator_core.py
    rego: SOT-V2-0006 deny rule in sot_policy.rego
    cli: --rules SOT-V2-0006 flag supported
    test: test_sot_v2_0006() in test_sot_validator.py
- rule_id: SOT-V2-0007
  source: sot_contract_v2.yaml
  source_section: SSID_structure_level3_part1_MAX.md
  source_line: ~30-100
  category: METADATA
  severity: INFO
  enforcement: MUST
  description: Semantic rule for 'classification'.
  rationale: 'Contract Metadata: classification field ist INFO severity - provides
    contract categorization, discovery metadata, organizational taxonomy for SoT registry'
  sot_mapping:
    contract: 'schema: sot.schema.json: classification'
    core: 'contract_validator.py: validate_classification(value)'
    policy: 'opa/sot.rego: deny { not valid_classification(input.classification) }'
    cli: cli validate --sot --path classification
    test: test_sot.py::test_classification()
  sot_artefacts:
    python: validate_sot_v2_0007() in sot_validator_core.py
    rego: SOT-V2-0007 deny rule in sot_policy.rego
    cli: --rules SOT-V2-0007 flag supported
    test: test_sot_v2_0007() in test_sot_validator.py
- rule_id: SOT-V2-0008
  source: sot_contract_v2.yaml
  source_section: SSID_structure_level3_part1_MAX.md
  source_line: ~104-142
  category: COMPLIANCE
  severity: HIGH
  enforcement: MUST
  description: Semantic rule for 'compliance_utilities'.
  rationale: 'Compliance Framework: compliance_utilities ist HIGH severity - provides
    audit trails, legal attestations, regulatory reporting infrastructure für AML/CTF,
    GDPR, eIDAS 2.0 compliance'
  sot_mapping:
    contract: 'schema: sot.schema.json: compliance_utilities'
    core: 'contract_validator.py: validate_compliance_utilities(input)'
    policy: 'opa/sot.rego: deny { not valid_compliance_framework(input.compliance_utilities)
      }'
    cli: cli validate --sot --path compliance_utilities
    test: test_sot.py::test_compliance_utilities()
  sot_artefacts:
    python: validate_sot_v2_0008() in sot_validator_core.py
    rego: SOT-V2-0008 deny rule in sot_policy.rego
    cli: --rules SOT-V2-0008 flag supported
    test: test_sot_v2_0008() in test_sot_validator.py
- rule_id: SOT-V2-0009
  source: sot_contract_v2.yaml
  source_section: SSID_structure_level3_part1_MAX.md
  source_line: ~104-142
  category: COMPLIANCE
  severity: HIGH
  enforcement: MUST
  description: Semantic rule for 'compliance_utilities.audit_payments'.
  rationale: 'Audit Trail: audit_payments tracking ist HIGH severity - validates transparency,
    payment flow accountability, financial audit requirements für regulatory compliance'
  sot_mapping:
    contract: 'schema: sot.schema.json: compliance_utilities.audit_payments'
    core: 'contract_validator.py: validate_audit_payments(value)'
    policy: 'opa/sot.rego: deny { not valid_audit_trail(input.compliance_utilities.audit_payments)
      }'
    cli: cli validate --sot --path compliance_utilities.audit_payments
    test: test_sot.py::test_audit_payments()
  sot_artefacts:
    python: validate_sot_v2_0009() in sot_validator_core.py
    rego: SOT-V2-0009 deny rule in sot_policy.rego
    cli: --rules SOT-V2-0009 flag supported
    test: test_sot_v2_0009() in test_sot_validator.py
- rule_id: SOT-V2-0010
  source: sot_contract_v2.yaml
  source_section: SSID_structure_level3_part1_MAX.md
  source_line: ~104-142
  category: COMPLIANCE
  severity: HIGH
  enforcement: MUST
  description: Semantic rule for 'compliance_utilities.legal_attestations'.
  rationale: 'Legal Framework: legal_attestations ist HIGH severity - provides cryptographic
    proof of compliance declarations, regulatory filings, legal opinion anchoring'
  sot_mapping:
    contract: 'schema: sot.schema.json: compliance_utilities.legal_attestations'
    core: 'contract_validator.py: validate_legal_attestations(value)'
    policy: 'opa/sot.rego: deny { not valid_legal_attestations(input.compliance_utilities.legal_attestations)
      }'
    cli: cli validate --sot --path compliance_utilities.legal_attestations
    test: test_sot.py::test_legal_attestations()
  sot_artefacts:
    python: validate_sot_v2_0010() in sot_validator_core.py
    rego: SOT-V2-0010 deny rule in sot_policy.rego
    cli: --rules SOT-V2-0010 flag supported
    test: test_sot_v2_0010() in test_sot_validator.py
- rule_id: SOT-V2-0011
  source: sot_contract_v2.yaml
  source_section: SSID_structure_level3_part1_MAX.md
  source_line: ~104-142
  category: COMPLIANCE
  severity: HIGH
  enforcement: MUST
  description: Semantic rule for 'compliance_utilities.regulatory_reporting'.
  rationale: 'Regulatory Reporting: regulatory_reporting infrastructure ist HIGH severity
    - automated report generation für supervisory authorities, AML/CTF transaction
    monitoring, GDPR data breach notifications'
  sot_mapping:
    contract: 'schema: sot.schema.json: compliance_utilities.regulatory_reporting'
    core: 'contract_validator.py: validate_regulatory_reporting(value)'
    policy: 'opa/sot.rego: deny { not valid_regulatory_reporting(input.compliance_utilities.regulatory_reporting)
      }'
    cli: cli validate --sot --path compliance_utilities.regulatory_reporting
    test: test_sot.py::test_regulatory_reporting()
  sot_artefacts:
    python: validate_sot_v2_0011() in sot_validator_core.py
    rego: SOT-V2-0011 deny rule in sot_policy.rego
    cli: --rules SOT-V2-0011 flag supported
    test: test_sot_v2_0011() in test_sot_validator.py
- rule_id: SOT-V2-0012
  source: sot_contract_v2.yaml
  source_section: SSID_structure_level3_part1_MAX.md
  source_line: ~146-250
  category: METADATA
  severity: INFO
  enforcement: MUST
  description: Semantic rule for 'date'.
  rationale: 'Contract Metadata: date field ist INFO severity - timestamp for contract
    creation/modification, version control, audit trail chronology'
  sot_mapping:
    contract: 'schema: sot.schema.json: date'
    core: 'contract_validator.py: validate_date(value)'
    policy: 'opa/sot.rego: deny { not valid_iso8601_date(input.date) }'
    cli: cli validate --sot --path date
    test: test_sot.py::test_date_field()
  sot_artefacts:
    python: validate_sot_v2_0012() in sot_validator_core.py
    rego: SOT-V2-0012 deny rule in sot_policy.rego
    cli: --rules SOT-V2-0012 flag supported
    test: test_sot_v2_0012() in test_sot_validator.py
- rule_id: SOT-V2-0013
  source: sot_contract_v2.yaml
  source_section: SSID_structure_level3_part1_MAX.md
  source_line: ~146-250
  category: METADATA
  severity: INFO
  enforcement: MUST
  description: Semantic rule for 'deprecated'.
  rationale: 'Deprecation Metadata: deprecated boolean ist INFO severity - marks obsolete
    contract fields, migration warnings, backward compatibility flags'
  sot_mapping:
    contract: 'schema: sot.schema.json: deprecated'
    core: 'contract_validator.py: validate_deprecated(value)'
    policy: 'opa/sot.rego: deny { not is_boolean(input.deprecated) }'
    cli: cli validate --sot --path deprecated
    test: test_sot.py::test_deprecated_flag()
  sot_artefacts:
    python: validate_sot_v2_0013() in sot_validator_core.py
    rego: SOT-V2-0013 deny rule in sot_policy.rego
    cli: --rules SOT-V2-0013 flag supported
    test: test_sot_v2_0013() in test_sot_validator.py
- rule_id: SOT-V2-0014
  source: sot_contract_v2.yaml
  source_section: SSID_structure_level3_part1_MAX.md
  source_line: ~146-250
  category: ECONOMICS
  severity: HIGH
  enforcement: MUST
  description: Semantic rule for 'fee_routing'.
  rationale: 'Tokenomics: fee_routing structure ist HIGH severity - defines transaction
    fee distribution, burn mechanisms, validator rewards, treasury allocation - economic
    sustainability model'
  sot_mapping:
    contract: 'schema: sot.schema.json: fee_routing'
    core: 'contract_validator.py: validate_fee_routing(input)'
    policy: 'opa/sot.rego: deny { not valid_fee_routing_structure(input.fee_routing)
      }'
    cli: cli validate --sot --path fee_routing
    test: test_sot.py::test_fee_routing()
  sot_artefacts:
    python: validate_sot_v2_0014() in sot_validator_core.py
    rego: SOT-V2-0014 deny rule in sot_policy.rego
    cli: --rules SOT-V2-0014 flag supported
    test: test_sot_v2_0014() in test_sot_validator.py
- rule_id: SOT-V2-0015
  source: sot_contract_v2.yaml
  source_section: SSID_structure_level3_part1_MAX.md
  source_line: ~146-250
  category: ECONOMICS
  severity: HIGH
  enforcement: MUST
  description: Semantic rule for 'fee_routing.system_fees'.
  rationale: 'System Fees: system_fees structure ist HIGH severity - protocol fee
    collection, allocation between dev/treasury, burn mechanism parameters'
  sot_mapping:
    contract: 'schema: sot.schema.json: fee_routing.system_fees'
    core: 'contract_validator.py: validate_system_fees(value)'
    policy: 'opa/sot.rego: deny { not valid_system_fees(input.fee_routing.system_fees)
      }'
    cli: cli validate --sot --path fee_routing.system_fees
    test: test_sot.py::test_system_fees()
  sot_artefacts:
    python: validate_sot_v2_0015() in sot_validator_core.py
    rego: SOT-V2-0015 deny rule in sot_policy.rego
    cli: --rules SOT-V2-0015 flag supported
    test: test_sot_v2_0015() in test_sot_validator.py
- rule_id: SOT-V2-0016
  source: sot_contract_v2.yaml
  source_section: SSID_structure_level3_part1_MAX.md
  source_line: ~146-250
  category: ECONOMICS
  severity: HIGH
  enforcement: MUST
  description: Semantic rule for 'fee_routing.system_fees.allocation'.
  rationale: 'Fee Allocation: allocation object ist HIGH severity - percentage split
    between dev_fee und system_treasury, economic governance parameters'
  sot_mapping:
    contract: 'schema: sot.schema.json: fee_routing.system_fees.allocation'
    core: 'contract_validator.py: validate_fee_allocation(value)'
    policy: 'opa/sot.rego: deny { not valid_allocation_percentages(input.fee_routing.system_fees.allocation)
      }'
    cli: cli validate --sot --path fee_routing.system_fees.allocation
    test: test_sot.py::test_fee_allocation()
  sot_artefacts:
    python: validate_sot_v2_0016() in sot_validator_core.py
    rego: SOT-V2-0016 deny rule in sot_policy.rego
    cli: --rules SOT-V2-0016 flag supported
    test: test_sot_v2_0016() in test_sot_validator.py
- rule_id: SOT-V2-0017
  source: sot_contract_v2.yaml
  source_section: SSID_structure_level3_part1_MAX.md
  source_line: ~146-250
  category: ECONOMICS
  severity: HIGH
  enforcement: MUST
  description: Semantic rule for 'fee_routing.system_fees.allocation.dev_fee'.
  rationale: 'Development Funding: dev_fee percentage ist HIGH severity - sustainable
    development funding, core team compensation, innovation budget'
  sot_mapping:
    contract: 'schema: sot.schema.json: fee_routing.system_fees.allocation.dev_fee'
    core: 'contract_validator.py: validate_dev_fee_percentage(value)'
    policy: 'opa/sot.rego: deny { not valid_percentage(input.fee_routing.system_fees.allocation.dev_fee)
      }'
    cli: cli validate --sot --path fee_routing.system_fees.allocation.dev_fee
    test: test_sot.py::test_dev_fee()
  sot_artefacts:
    python: validate_sot_v2_0017() in sot_validator_core.py
    rego: SOT-V2-0017 deny rule in sot_policy.rego
    cli: --rules SOT-V2-0017 flag supported
    test: test_sot_v2_0017() in test_sot_validator.py
- rule_id: SOT-V2-0018
  source: sot_contract_v2.yaml
  source_section: SSID_structure_level3_part1_MAX.md
  source_line: ~146-250
  category: ECONOMICS
  severity: HIGH
  enforcement: MUST
  description: Semantic rule for 'fee_routing.system_fees.allocation.system_treasury'.
  rationale: 'Treasury Funding: system_treasury percentage ist HIGH severity - DAO
    treasury accumulation, ecosystem grants, emergency reserves'
  sot_mapping:
    contract: 'schema: sot.schema.json: fee_routing.system_fees.allocation.system_treasury'
    core: 'contract_validator.py: validate_treasury_percentage(value)'
    policy: 'opa/sot.rego: deny { not valid_percentage(input.fee_routing.system_fees.allocation.system_treasury)
      }'
    cli: cli validate --sot --path fee_routing.system_fees.allocation.system_treasury
    test: test_sot.py::test_system_treasury()
  sot_artefacts:
    python: validate_sot_v2_0018() in sot_validator_core.py
    rego: SOT-V2-0018 deny rule in sot_policy.rego
    cli: --rules SOT-V2-0018 flag supported
    test: test_sot_v2_0018() in test_sot_validator.py
- rule_id: SOT-V2-0019
  source: sot_contract_v2.yaml
  source_section: SSID_structure_level3_part1_MAX.md
  source_line: ~146-250
  category: ECONOMICS
  severity: HIGH
  enforcement: MUST
  description: Semantic rule for 'fee_routing.system_fees.burn_from_system_fee'.
  rationale: 'Token Burn: burn_from_system_fee structure ist HIGH severity - deflationary
    mechanism, circulating supply reduction, tokenomics sustainability'
  sot_mapping:
    contract: 'schema: sot.schema.json: fee_routing.system_fees.burn_from_system_fee'
    core: 'contract_validator.py: validate_burn_mechanism(value)'
    policy: 'opa/sot.rego: deny { not valid_burn_parameters(input.fee_routing.system_fees.burn_from_system_fee)
      }'
    cli: cli validate --sot --path fee_routing.system_fees.burn_from_system_fee
    test: test_sot.py::test_burn_mechanism()
  sot_artefacts:
    python: validate_sot_v2_0019() in sot_validator_core.py
    rego: SOT-V2-0019 deny rule in sot_policy.rego
    cli: --rules SOT-V2-0019 flag supported
    test: test_sot_v2_0019() in test_sot_validator.py
- rule_id: SOT-V2-0020
  source: sot_contract_v2.yaml
  source_section: SSID_structure_level3_part1_MAX.md
  source_line: ~146-250
  category: ECONOMICS
  severity: HIGH
  enforcement: MUST
  description: Semantic rule for 'fee_routing.system_fees.burn_from_system_fee.base'.
  rationale: 'Burn Base Rate: base percentage ist HIGH severity - foundational burn
    rate before caps, deflationary pressure parameter'
  sot_mapping:
    contract: 'schema: sot.schema.json: fee_routing.system_fees.burn_from_system_fee.base'
    core: 'contract_validator.py: validate_burn_base_rate(value)'
    policy: 'opa/sot.rego: deny { not valid_percentage(input.fee_routing.system_fees.burn_from_system_fee.base)
      }'
    cli: cli validate --sot --path fee_routing.system_fees.burn_from_system_fee.base
    test: test_sot.py::test_burn_base_rate()
  sot_artefacts:
    python: validate_sot_v2_0020() in sot_validator_core.py
    rego: SOT-V2-0020 deny rule in sot_policy.rego
    cli: --rules SOT-V2-0020 flag supported
    test: test_sot_v2_0020() in test_sot_validator.py
- rule_id: SOT-V2-0021
  source: sot_contract_v2.yaml
  source_section: SSID_structure_level3_part1_MAX.md
  source_line: ~146-250
  category: ECONOMICS
  severity: HIGH
  enforcement: MUST
  description: Semantic rule for 'fee_routing.system_fees.burn_from_system_fee.daily_cap_percent_of_circ'.
  rationale: 'Daily Burn Cap: daily_cap_percent_of_circ ist HIGH severity - prevents
    excessive daily deflation, protects circulating supply stability'
  sot_mapping:
    contract: 'schema: sot.schema.json: fee_routing.system_fees.burn_from_system_fee.daily_cap_percent_of_circ'
    core: 'contract_validator.py: validate_daily_burn_cap(value)'
    policy: 'opa/sot.rego: deny { not valid_percentage(input.fee_routing.system_fees.burn_from_system_fee.daily_cap_percent_of_circ)
      }'
    cli: cli validate --sot --path fee_routing.system_fees.burn_from_system_fee.daily_cap_percent_of_circ
    test: test_sot.py::test_daily_burn_cap()
  sot_artefacts:
    python: validate_sot_v2_0021() in sot_validator_core.py
    rego: SOT-V2-0021 deny rule in sot_policy.rego
    cli: --rules SOT-V2-0021 flag supported
    test: test_sot_v2_0021() in test_sot_validator.py
- rule_id: SOT-V2-0022
  source: sot_contract_v2.yaml
  source_section: SSID_structure_level3_part1_MAX.md
  source_line: ~146-250
  category: ECONOMICS
  severity: HIGH
  enforcement: MUST
  description: Semantic rule for 'fee_routing.system_fees.burn_from_system_fee.monthly_cap_percent_of_circ'.
  rationale: 'Monthly Burn Cap: monthly_cap_percent_of_circ ist HIGH severity - prevents
    excessive monthly deflation, long-term supply management'
  sot_mapping:
    contract: 'schema: sot.schema.json: fee_routing.system_fees.burn_from_system_fee.monthly_cap_percent_of_circ'
    core: 'contract_validator.py: validate_monthly_burn_cap(value)'
    policy: 'opa/sot.rego: deny { not valid_percentage(input.fee_routing.system_fees.burn_from_system_fee.monthly_cap_percent_of_circ)
      }'
    cli: cli validate --sot --path fee_routing.system_fees.burn_from_system_fee.monthly_cap_percent_of_circ
    test: test_sot.py::test_monthly_burn_cap()
  sot_artefacts:
    python: validate_sot_v2_0022() in sot_validator_core.py
    rego: SOT-V2-0022 deny rule in sot_policy.rego
    cli: --rules SOT-V2-0022 flag supported
    test: test_sot_v2_0022() in test_sot_validator.py
- rule_id: SOT-V2-0023
  source: sot_contract_v2.yaml
  source_section: SSID_structure_level3_part1_MAX.md
  source_line: ~146-250
  category: ECONOMICS
  severity: HIGH
  enforcement: MUST
  description: Semantic rule for 'fee_routing.system_fees.burn_from_system_fee.oracle_source'.
  rationale: 'Oracle Source: oracle_source reference ist HIGH severity - trusted circulating
    supply data source for burn cap calculations, anti-manipulation'
  sot_mapping:
    contract: 'schema: sot.schema.json: fee_routing.system_fees.burn_from_system_fee.oracle_source'
    core: 'contract_validator.py: validate_oracle_source(value)'
    policy: 'opa/sot.rego: deny { not valid_oracle_source(input.fee_routing.system_fees.burn_from_system_fee.oracle_source)
      }'
    cli: cli validate --sot --path fee_routing.system_fees.burn_from_system_fee.oracle_source
    test: test_sot.py::test_oracle_source()
  sot_artefacts:
    python: validate_sot_v2_0023() in sot_validator_core.py
    rego: SOT-V2-0023 deny rule in sot_policy.rego
    cli: --rules SOT-V2-0023 flag supported
    test: test_sot_v2_0023() in test_sot_validator.py
- rule_id: SOT-V2-0024
  source: sot_contract_v2.yaml
  source_section: SSID_structure_level3_part1_MAX.md
  source_line: ~146-250
  category: ECONOMICS
  severity: HIGH
  enforcement: MUST
  description: Semantic rule for 'fee_routing.system_fees.burn_from_system_fee.policy'.
  rationale: 'Burn Policy: policy description ist HIGH severity - burn mechanism governance
    rules, DAO amendment procedures, economic framework'
  sot_mapping:
    contract: 'schema: sot.schema.json: fee_routing.system_fees.burn_from_system_fee.policy'
    core: 'contract_validator.py: validate_burn_policy(value)'
    policy: 'opa/sot.rego: deny { not valid_policy_description(input.fee_routing.system_fees.burn_from_system_fee.policy)
      }'
    cli: cli validate --sot --path fee_routing.system_fees.burn_from_system_fee.policy
    test: test_sot.py::test_burn_policy()
  sot_artefacts:
    python: validate_sot_v2_0024() in sot_validator_core.py
    rego: SOT-V2-0024 deny rule in sot_policy.rego
    cli: --rules SOT-V2-0024 flag supported
    test: test_sot_v2_0024() in test_sot_validator.py
- rule_id: SOT-V2-0025
  source: sot_contract_v2.yaml
  source_section: SSID_structure_level3_part1_MAX.md
  source_line: ~146-250
  category: ECONOMICS
  severity: HIGH
  enforcement: MUST
  description: Semantic rule for 'fee_routing.system_fees.burn_from_system_fee.snapshot_time_utc'.
  rationale: 'Snapshot Timing: snapshot_time_utc ist HIGH severity - daily snapshot
    timestamp for circulating supply calculation, burn cap enforcement coordination'
  sot_mapping:
    contract: 'schema: sot.schema.json: fee_routing.system_fees.burn_from_system_fee.snapshot_time_utc'
    core: 'contract_validator.py: validate_snapshot_time(value)'
    policy: 'opa/sot.rego: deny { not valid_utc_time(input.fee_routing.system_fees.burn_from_system_fee.snapshot_time_utc)
      }'
    cli: cli validate --sot --path fee_routing.system_fees.burn_from_system_fee.snapshot_time_utc
    test: test_sot.py::test_snapshot_time()
  sot_artefacts:
    python: validate_sot_v2_0025() in sot_validator_core.py
    rego: SOT-V2-0025 deny rule in sot_policy.rego
    cli: --rules SOT-V2-0025 flag supported
    test: test_sot_v2_0025() in test_sot_validator.py
- rule_id: SOT-V2-0026
  source: sot_contract_v2.yaml
  source_section: SSID_structure_level3_part1_MAX.md
  source_line: ~146-250
  category: ECONOMICS
  severity: HIGH
  enforcement: MUST
  description: Semantic rule for 'fee_routing.system_fees.note'.
  rationale: 'Fee Notes: note field ist HIGH severity - explanatory documentation
    for fee structure changes, governance justification, audit trail context'
  sot_mapping:
    contract: 'schema: sot.schema.json: fee_routing.system_fees.note'
    core: 'contract_validator.py: validate_fee_note(value)'
    policy: 'opa/sot.rego: deny { not valid_note(input.fee_routing.system_fees.note)
      }'
    cli: cli validate --sot --path fee_routing.system_fees.note
    test: test_sot.py::test_system_fees_note()
  sot_artefacts:
    python: validate_sot_v2_0026() in sot_validator_core.py
    rego: SOT-V2-0026 deny rule in sot_policy.rego
    cli: --rules SOT-V2-0026 flag supported
    test: test_sot_v2_0026() in test_sot_validator.py
- rule_id: SOT-V2-0027
  source: sot_contract_v2.yaml
  source_section: SSID_structure_level3_part1_MAX.md
  source_line: ~146-250
  category: ECONOMICS
  severity: HIGH
  enforcement: MUST
  description: Semantic rule for 'fee_routing.system_fees.scope'.
  rationale: 'Fee Scope: scope definition ist HIGH severity - defines which transactions
    incur system fees, exemption rules, economic scope boundaries'
  sot_mapping:
    contract: 'schema: sot.schema.json: fee_routing.system_fees.scope'
    core: 'contract_validator.py: validate_fee_scope(value)'
    policy: 'opa/sot.rego: deny { not valid_scope(input.fee_routing.system_fees.scope)
      }'
    cli: cli validate --sot --path fee_routing.system_fees.scope
    test: test_sot.py::test_fee_scope()
  sot_artefacts:
    python: validate_sot_v2_0027() in sot_validator_core.py
    rego: SOT-V2-0027 deny rule in sot_policy.rego
    cli: --rules SOT-V2-0027 flag supported
    test: test_sot_v2_0027() in test_sot_validator.py
- rule_id: SOT-V2-0028
  source: sot_contract_v2.yaml
  source_section: SSID_structure_level3_part1_MAX.md
  source_line: ~146-250
  category: ECONOMICS
  severity: HIGH
  enforcement: MUST
  description: Semantic rule for 'fee_routing.system_fees.total_fee'.
  rationale: 'Total Fee Rate: total_fee percentage ist HIGH severity - aggregate system
    fee rate, transaction cost economics, user impact assessment'
  sot_mapping:
    contract: 'schema: sot.schema.json: fee_routing.system_fees.total_fee'
    core: 'contract_validator.py: validate_total_fee_rate(value)'
    policy: 'opa/sot.rego: deny { not valid_percentage(input.fee_routing.system_fees.total_fee)
      }'
    cli: cli validate --sot --path fee_routing.system_fees.total_fee
    test: test_sot.py::test_total_fee_rate()
  sot_artefacts:
    python: validate_sot_v2_0028() in sot_validator_core.py
    rego: SOT-V2-0028 deny rule in sot_policy.rego
    cli: --rules SOT-V2-0028 flag supported
    test: test_sot_v2_0028() in test_sot_validator.py
- rule_id: SOT-V2-0029
  source: sot_contract_v2.yaml
  source_section: SSID_structure_level3_part1_MAX.md
  source_line: ~146-250
  category: ECONOMICS
  severity: HIGH
  enforcement: MUST
  description: Semantic rule for 'fee_routing.validator_rewards'.
  rationale: 'Validator Rewards: validator_rewards structure ist HIGH severity - consensus
    participation incentives, network security economics, staking rewards'
  sot_mapping:
    contract: 'schema: sot.schema.json: fee_routing.validator_rewards'
    core: 'contract_validator.py: validate_validator_rewards(value)'
    policy: 'opa/sot.rego: deny { not valid_validator_rewards(input.fee_routing.validator_rewards)
      }'
    cli: cli validate --sot --path fee_routing.validator_rewards
    test: test_sot.py::test_validator_rewards()
  sot_artefacts:
    python: validate_sot_v2_0029() in sot_validator_core.py
    rego: SOT-V2-0029 deny rule in sot_policy.rego
    cli: --rules SOT-V2-0029 flag supported
    test: test_sot_v2_0029() in test_sot_validator.py
- rule_id: SOT-V2-0030
  source: sot_contract_v2.yaml
  source_section: SSID_structure_level3_part1_MAX.md
  source_line: ~146-250
  category: ECONOMICS
  severity: HIGH
  enforcement: MUST
  description: Semantic rule for 'fee_routing.validator_rewards.no_per_transaction_split'.
  rationale: 'Reward Distribution: no_per_transaction_split boolean ist HIGH severity
    - prevents per-tx reward splitting, ensures block-level validator compensation'
  sot_mapping:
    contract: 'schema: sot.schema.json: fee_routing.validator_rewards.no_per_transaction_split'
    core: 'contract_validator.py: validate_no_per_tx_split(value)'
    policy: 'opa/sot.rego: deny { not is_boolean(input.fee_routing.validator_rewards.no_per_transaction_split)
      }'
    cli: cli validate --sot --path fee_routing.validator_rewards.no_per_transaction_split
    test: test_sot.py::test_no_per_tx_split()
  sot_artefacts:
    python: validate_sot_v2_0030() in sot_validator_core.py
    rego: SOT-V2-0030 deny rule in sot_policy.rego
    cli: --rules SOT-V2-0030 flag supported
    test: test_sot_v2_0030() in test_sot_validator.py
- rule_id: SOT-V2-0031
  source: sot_contract_v2.yaml
  source_section: SSID_structure_level3_part1_MAX.md
  source_line: ~146-250
  category: ECONOMICS
  severity: HIGH
  enforcement: MUST
  description: Semantic rule for 'fee_routing.validator_rewards.note'.
  rationale: 'Validator Notes: note field ist HIGH severity - validator reward policy
    documentation, governance explanations, economic rationale'
  sot_mapping:
    contract: 'schema: sot.schema.json: fee_routing.validator_rewards.note'
    core: 'contract_validator.py: validate_validator_note(value)'
    policy: 'opa/sot.rego: deny { not valid_note(input.fee_routing.validator_rewards.note)
      }'
    cli: cli validate --sot --path fee_routing.validator_rewards.note
    test: test_sot.py::test_validator_rewards_note()
  sot_artefacts:
    python: validate_sot_v2_0031() in sot_validator_core.py
    rego: SOT-V2-0031 deny rule in sot_policy.rego
    cli: --rules SOT-V2-0031 flag supported
    test: test_sot_v2_0031() in test_sot_validator.py
- rule_id: SOT-V2-0032
  source: sot_contract_v2.yaml
  source_section: SSID_structure_level3_part1_MAX.md
  source_line: ~146-250
  category: ECONOMICS
  severity: HIGH
  enforcement: MUST
  description: Semantic rule for 'fee_routing.validator_rewards.source'.
  rationale: 'Reward Source: source definition ist HIGH severity - validator reward
    funding mechanism, inflation vs. fee-based rewards, economic sustainability'
  sot_mapping:
    contract: 'schema: sot.schema.json: fee_routing.validator_rewards.source'
    core: 'contract_validator.py: validate_validator_reward_source(value)'
    policy: 'opa/sot.rego: deny { not valid_reward_source(input.fee_routing.validator_rewards.source)
      }'
    cli: cli validate --sot --path fee_routing.validator_rewards.source
    test: test_sot.py::test_validator_reward_source()
  sot_artefacts:
    python: validate_sot_v2_0032() in sot_validator_core.py
    rego: SOT-V2-0032 deny rule in sot_policy.rego
    cli: --rules SOT-V2-0032 flag supported
    test: test_sot_v2_0032() in test_sot_validator.py
- rule_id: SOT-V2-0033
  source: sot_contract_v2.yaml
  source_section: SSID_structure_level3_part1_MAX.md
  source_line: ~30-100
  category: ECONOMICS
  severity: HIGH
  enforcement: MUST
  description: Semantic rule for 'fee_structure'.
  rationale: 'Fee Structure: Alternative fee_structure object ist HIGH severity -
    defines complete economic model structure, parallel to fee_routing'
  sot_mapping:
    contract: 'schema: sot.schema.json: fee_structure'
    core: 'contract_validator.py: validate_fee_structure(input)'
    policy: 'opa/sot.rego: deny { not valid_fee_structure(input.fee_structure) }'
    cli: cli validate --sot --path fee_structure
    test: test_sot.py::test_fee_structure()
  sot_artefacts:
    python: validate_sot_v2_0033() in sot_validator_core.py
    rego: SOT-V2-0033 deny rule in sot_policy.rego
    cli: --rules SOT-V2-0033 flag supported
    test: test_sot_v2_0033() in test_sot_validator.py
- rule_id: SOT-V2-0034
  source: sot_contract_v2.yaml
  source_section: SSID_structure_level3_part1_MAX.md
  source_line: ~30-100
  category: ECONOMICS
  severity: HIGH
  enforcement: MUST
  description: Semantic rule for 'fee_structure.allocation'.
  rationale: 'Structure Allocation: fee_structure.allocation ist HIGH severity - fee
    distribution parameters within fee_structure model'
  sot_mapping:
    contract: 'schema: sot.schema.json: fee_structure.allocation'
    core: 'contract_validator.py: validate_structure_allocation(value)'
    policy: 'opa/sot.rego: deny { not valid_allocation(input.fee_structure.allocation)
      }'
    cli: cli validate --sot --path fee_structure.allocation
    test: test_sot.py::test_structure_allocation()
  sot_artefacts:
    python: validate_sot_v2_0034() in sot_validator_core.py
    rego: SOT-V2-0034 deny rule in sot_policy.rego
    cli: --rules SOT-V2-0034 flag supported
    test: test_sot_v2_0034() in test_sot_validator.py
- rule_id: SOT-V2-0035
  source: sot_contract_v2.yaml
  source_section: SSID_structure_level3_part1_MAX.md
  source_line: ~30-100
  category: ECONOMICS
  severity: HIGH
  enforcement: MUST
  description: Semantic rule for 'fee_structure.burn_from_system_fee'.
  rationale: 'Structure Burn: burn_from_system_fee within fee_structure ist HIGH severity
    - burn mechanism parameters in alternative fee model'
  sot_mapping:
    contract: 'schema: sot.schema.json: fee_structure.burn_from_system_fee'
    core: 'contract_validator.py: validate_structure_burn(value)'
    policy: 'opa/sot.rego: deny { not valid_burn(input.fee_structure.burn_from_system_fee)
      }'
    cli: cli validate --sot --path fee_structure.burn_from_system_fee
    test: test_sot.py::test_structure_burn()
  sot_artefacts:
    python: validate_sot_v2_0035() in sot_validator_core.py
    rego: SOT-V2-0035 deny rule in sot_policy.rego
    cli: --rules SOT-V2-0035 flag supported
    test: test_sot_v2_0035() in test_sot_validator.py
- rule_id: SOT-V2-0036
  source: sot_contract_v2.yaml
  source_section: SSID_structure_level3_part1_MAX.md
  source_line: ~30-100
  category: ECONOMICS
  severity: HIGH
  enforcement: MUST
  description: Semantic rule for 'fee_structure.fee_collection'.
  rationale: 'Fee Collection: fee_collection mechanism ist HIGH severity - defines
    how fees are collected, smart contract integration, payment processing'
  sot_mapping:
    contract: 'schema: sot.schema.json: fee_structure.fee_collection'
    core: 'contract_validator.py: validate_fee_collection(value)'
    policy: 'opa/sot.rego: deny { not valid_fee_collection(input.fee_structure.fee_collection)
      }'
    cli: cli validate --sot --path fee_structure.fee_collection
    test: test_sot.py::test_fee_collection()
  sot_artefacts:
    python: validate_sot_v2_0036() in sot_validator_core.py
    rego: SOT-V2-0036 deny rule in sot_policy.rego
    cli: --rules SOT-V2-0036 flag supported
    test: test_sot_v2_0036() in test_sot_validator.py
- rule_id: SOT-V2-0037
  source: sot_contract_v2.yaml
  source_section: SSID_structure_level3_part1_MAX.md
  source_line: ~30-100
  category: ECONOMICS
  severity: HIGH
  enforcement: MUST
  description: Semantic rule for 'fee_structure.no_manual_intervention'.
  rationale: 'Automated Fees: no_manual_intervention boolean ist HIGH severity - ensures
    automated fee processing, prevents manual fee manipulation, trustless economics'
  sot_mapping:
    contract: 'schema: sot.schema.json: fee_structure.no_manual_intervention'
    core: 'contract_validator.py: validate_no_manual_intervention(value)'
    policy: 'opa/sot.rego: deny { not is_boolean(input.fee_structure.no_manual_intervention)
      }'
    cli: cli validate --sot --path fee_structure.no_manual_intervention
    test: test_sot.py::test_no_manual_intervention()
  sot_artefacts:
    python: validate_sot_v2_0037() in sot_validator_core.py
    rego: SOT-V2-0037 deny rule in sot_policy.rego
    cli: --rules SOT-V2-0037 flag supported
    test: test_sot_v2_0037() in test_sot_validator.py
- rule_id: SOT-V2-0038
  source: sot_contract_v2.yaml
  source_section: SSID_structure_level3_part1_MAX.md
  source_line: ~30-100
  category: ECONOMICS
  severity: HIGH
  enforcement: MUST
  description: Semantic rule for 'fee_structure.scope'.
  rationale: 'Structure Scope: scope within fee_structure ist HIGH severity - defines
    transaction types covered by fee structure model'
  sot_mapping:
    contract: 'schema: sot.schema.json: fee_structure.scope'
    core: 'contract_validator.py: validate_structure_scope(value)'
    policy: 'opa/sot.rego: deny { not valid_scope(input.fee_structure.scope) }'
    cli: cli validate --sot --path fee_structure.scope
    test: test_sot.py::test_structure_scope()
  sot_artefacts:
    python: validate_sot_v2_0038() in sot_validator_core.py
    rego: SOT-V2-0038 deny rule in sot_policy.rego
    cli: --rules SOT-V2-0038 flag supported
    test: test_sot_v2_0038() in test_sot_validator.py
- rule_id: SOT-V2-0039
  source: sot_contract_v2.yaml
  source_section: SSID_structure_level3_part1_MAX.md
  source_line: ~30-100
  category: ECONOMICS
  severity: HIGH
  enforcement: MUST
  description: Semantic rule for 'fee_structure.total_fee'.
  rationale: 'Structure Total Fee: total_fee within fee_structure ist HIGH severity
    - aggregate fee rate for alternative fee model'
  sot_mapping:
    contract: 'schema: sot.schema.json: fee_structure.total_fee'
    core: 'contract_validator.py: validate_structure_total_fee(value)'
    policy: 'opa/sot.rego: deny { not valid_percentage(input.fee_structure.total_fee)
      }'
    cli: cli validate --sot --path fee_structure.total_fee
    test: test_sot.py::test_structure_total_fee()
  sot_artefacts:
    python: validate_sot_v2_0039() in sot_validator_core.py
    rego: SOT-V2-0039 deny rule in sot_policy.rego
    cli: --rules SOT-V2-0039 flag supported
    test: test_sot_v2_0039() in test_sot_validator.py
- rule_id: SOT-V2-0040
  source: sot_contract_v2.yaml
  source_section: SSID_structure_level3_part1_MAX.md
  source_line: ~146-250
  category: GOVERNANCE
  severity: HIGH
  enforcement: MUST
  description: Semantic rule for 'governance_controls'.
  rationale: 'Governance Controls: governance_controls structure ist HIGH severity
    - defines DAO authority, upgrade procedures, emergency controls'
  sot_mapping:
    contract: 'schema: sot.schema.json: governance_controls'
    core: 'contract_validator.py: validate_governance_controls(input)'
    policy: 'opa/sot.rego: deny { not valid_governance_controls(input.governance_controls)
      }'
    cli: cli validate --sot --path governance_controls
    test: test_sot.py::test_governance_controls()
  sot_artefacts:
    python: validate_sot_v2_0040() in sot_validator_core.py
    rego: SOT-V2-0040 deny rule in sot_policy.rego
    cli: --rules SOT-V2-0040 flag supported
    test: test_sot_v2_0040() in test_sot_validator.py
- rule_id: SOT-V2-0041
  source: sot_contract_v2.yaml
  source_section: SSID_structure_level3_part1_MAX.md
  source_line: ~146-250
  category: GOVERNANCE
  severity: HIGH
  enforcement: MUST
  description: Semantic rule for 'governance_controls.authority'.
  rationale: 'DAO Governance: governance_controls.authority ist HIGH severity - defines
    DAO authority structure, validates governance hierarchy, ensures decentralized
    decision-making authority'
  sot_mapping:
    contract: 'schema: sot.schema.json: governance_controls.authority'
    core: 'contract_validator.py: validate_governance_authority(value)'
    policy: 'opa/sot.rego: deny { not valid_dao_authority(input.governance_controls.authority)
      }'
    cli: cli validate --sot --path governance_controls.authority
    test: test_sot.py::test_governance_authority()
  sot_artefacts:
    python: validate_sot_v2_0041() in sot_validator_core.py
    rego: SOT-V2-0041 deny rule in sot_policy.rego
    cli: --rules SOT-V2-0041 flag supported
    test: test_sot_v2_0041() in test_sot_validator.py
- rule_id: SOT-V2-0042
  source: sot_contract_v2.yaml
  source_section: SSID_structure_level3_part1_MAX.md
  source_line: ~146-250
  category: GOVERNANCE
  severity: HIGH
  enforcement: MUST
  description: Semantic rule for 'governance_controls.note'.
  rationale: 'DAO Governance: governance_controls.note ist HIGH severity - documents
    governance constraints, provides context for authority structure, ensures transparent
    governance documentation'
  sot_mapping:
    contract: 'schema: sot.schema.json: governance_controls.note'
    core: 'contract_validator.py: validate_governance_note(value)'
    policy: 'opa/sot.rego: deny { not valid_governance_note(input.governance_controls.note)
      }'
    cli: cli validate --sot --path governance_controls.note
    test: test_sot.py::test_governance_note()
  sot_artefacts:
    python: validate_sot_v2_0042() in sot_validator_core.py
    rego: SOT-V2-0042 deny rule in sot_policy.rego
    cli: --rules SOT-V2-0042 flag supported
    test: test_sot_v2_0042() in test_sot_validator.py
- rule_id: SOT-V2-0043
  source: sot_contract_v2.yaml
  source_section: SSID_structure_level3_part1_MAX.md
  source_line: ~146-250
  category: GOVERNANCE
  severity: HIGH
  enforcement: MUST
  description: Semantic rule for 'governance_controls.reference'.
  rationale: 'DAO Governance: governance_controls.reference ist HIGH severity - external
    reference to governance documentation, validates RFC/proposal references, ensures
    traceability of governance decisions'
  sot_mapping:
    contract: 'schema: sot.schema.json: governance_controls.reference'
    core: 'contract_validator.py: validate_governance_reference(value)'
    policy: 'opa/sot.rego: deny { not valid_governance_reference(input.governance_controls.reference)
      }'
    cli: cli validate --sot --path governance_controls.reference
    test: test_sot.py::test_governance_reference()
  sot_artefacts:
    python: validate_sot_v2_0043() in sot_validator_core.py
    rego: SOT-V2-0043 deny rule in sot_policy.rego
    cli: --rules SOT-V2-0043 flag supported
    test: test_sot_v2_0043() in test_sot_validator.py
- rule_id: SOT-V2-0044
  source: sot_contract_v2.yaml
  source_section: SSID_structure_level3_part1_MAX.md
  source_line: ~146-250
  category: GOVERNANCE
  severity: HIGH
  enforcement: MUST
  description: Semantic rule for 'governance_fees'.
  rationale: 'DAO Economics: governance_fees ist HIGH severity - validates governance
    participation costs, ensures economic barriers to proposal spam, balances accessibility
    with quality control'
  sot_mapping:
    contract: 'schema: sot.schema.json: governance_fees'
    core: 'contract_validator.py: validate_governance_fees(value)'
    policy: 'opa/sot.rego: deny { not valid_governance_fees(input.governance_fees)
      }'
    cli: cli validate --sot --path governance_fees
    test: test_sot.py::test_governance_fees()
  sot_artefacts:
    python: validate_sot_v2_0044() in sot_validator_core.py
    rego: SOT-V2-0044 deny rule in sot_policy.rego
    cli: --rules SOT-V2-0044 flag supported
    test: test_sot_v2_0044() in test_sot_validator.py
- rule_id: SOT-V2-0045
  source: sot_contract_v2.yaml
  source_section: SSID_structure_level3_part1_MAX.md
  source_line: ~146-250
  category: GOVERNANCE
  severity: HIGH
  enforcement: MUST
  description: Semantic rule for 'governance_fees.proposal_deposits'.
  rationale: 'DAO Economics: governance_fees.proposal_deposits ist HIGH severity -
    anti-spam mechanism, ensures serious proposals only, refundable deposit structure
    for quality governance'
  sot_mapping:
    contract: 'schema: sot.schema.json: governance_fees.proposal_deposits'
    core: 'contract_validator.py: validate_proposal_deposits(value)'
    policy: 'opa/sot.rego: deny { not valid_proposal_deposit(input.governance_fees.proposal_deposits)
      }'
    cli: cli validate --sot --path governance_fees.proposal_deposits
    test: test_sot.py::test_proposal_deposits()
  sot_artefacts:
    python: validate_sot_v2_0045() in sot_validator_core.py
    rego: SOT-V2-0045 deny rule in sot_policy.rego
    cli: --rules SOT-V2-0045 flag supported
    test: test_sot_v2_0045() in test_sot_validator.py
- rule_id: SOT-V2-0046
  source: sot_contract_v2.yaml
  source_section: SSID_structure_level3_part1_MAX.md
  source_line: ~146-250
  category: GOVERNANCE
  severity: HIGH
  enforcement: MUST
  description: Semantic rule for 'governance_fees.voting_gas'.
  rationale: 'DAO Economics: governance_fees.voting_gas ist HIGH severity - gas cost
    structure for on-chain voting, validates transaction fees, ensures affordable
    participation in governance'
  sot_mapping:
    contract: 'schema: sot.schema.json: governance_fees.voting_gas'
    core: 'contract_validator.py: validate_voting_gas(value)'
    policy: 'opa/sot.rego: deny { not valid_voting_gas(input.governance_fees.voting_gas)
      }'
    cli: cli validate --sot --path governance_fees.voting_gas
    test: test_sot.py::test_voting_gas()
  sot_artefacts:
    python: validate_sot_v2_0046() in sot_validator_core.py
    rego: SOT-V2-0046 deny rule in sot_policy.rego
    cli: --rules SOT-V2-0046 flag supported
    test: test_sot_v2_0046() in test_sot_validator.py
- rule_id: SOT-V2-0047
  source: sot_contract_v2.yaml
  source_section: SSID_structure_level3_part1_MAX.md
  source_line: ~30-100
  category: GOVERNANCE
  severity: HIGH
  enforcement: MUST
  description: Semantic rule for 'governance_framework'.
  rationale: 'DAO Framework: governance_framework ist HIGH severity - top-level governance
    structure definition, validates DAO readiness, ensures comprehensive governance
    architecture'
  sot_mapping:
    contract: 'schema: sot.schema.json: governance_framework'
    core: 'contract_validator.py: validate_governance_framework(value)'
    policy: 'opa/sot.rego: deny { not valid_governance_framework(input.governance_framework)
      }'
    cli: cli validate --sot --path governance_framework
    test: test_sot.py::test_governance_framework()
  sot_artefacts:
    python: validate_sot_v2_0047() in sot_validator_core.py
    rego: SOT-V2-0047 deny rule in sot_policy.rego
    cli: --rules SOT-V2-0047 flag supported
    test: test_sot_v2_0047() in test_sot_validator.py
- rule_id: SOT-V2-0048
  source: sot_contract_v2.yaml
  source_section: SSID_structure_level3_part1_MAX.md
  source_line: ~30-100
  category: GOVERNANCE
  severity: HIGH
  enforcement: MUST
  description: Semantic rule for 'governance_framework.dao_ready'.
  rationale: 'DAO Readiness: governance_framework.dao_ready ist HIGH severity - boolean
    flag indicating DAO launch readiness, validates governance activation state, critical
    for decentralization transition'
  sot_mapping:
    contract: 'schema: sot.schema.json: governance_framework.dao_ready'
    core: 'contract_validator.py: validate_dao_ready(value)'
    policy: 'opa/sot.rego: deny { not valid_dao_ready(input.governance_framework.dao_ready)
      }'
    cli: cli validate --sot --path governance_framework.dao_ready
    test: test_sot.py::test_dao_ready()
  sot_artefacts:
    python: validate_sot_v2_0048() in sot_validator_core.py
    rego: SOT-V2-0048 deny rule in sot_policy.rego
    cli: --rules SOT-V2-0048 flag supported
    test: test_sot_v2_0048() in test_sot_validator.py
- rule_id: SOT-V2-0049
  source: sot_contract_v2.yaml
  source_section: SSID_structure_level3_part1_MAX.md
  source_line: ~30-100
  category: GOVERNANCE
  severity: HIGH
  enforcement: MUST
  description: Semantic rule for 'governance_framework.emergency_procedures'.
  rationale: 'DAO Emergency Control: governance_framework.emergency_procedures ist
    HIGH severity - validates emergency pause/upgrade mechanisms, ensures safety measures,
    critical for risk management'
  sot_mapping:
    contract: 'schema: sot.schema.json: governance_framework.emergency_procedures'
    core: 'contract_validator.py: validate_emergency_procedures(value)'
    policy: 'opa/sot.rego: deny { not valid_emergency_procedures(input.governance_framework.emergency_procedures)
      }'
    cli: cli validate --sot --path governance_framework.emergency_procedures
    test: test_sot.py::test_emergency_procedures()
  sot_artefacts:
    python: validate_sot_v2_0049() in sot_validator_core.py
    rego: SOT-V2-0049 deny rule in sot_policy.rego
    cli: --rules SOT-V2-0049 flag supported
    test: test_sot_v2_0049() in test_sot_validator.py
- rule_id: SOT-V2-0050
  source: sot_contract_v2.yaml
  source_section: SSID_structure_level3_part1_MAX.md
  source_line: ~30-100
  category: GOVERNANCE
  severity: HIGH
  enforcement: MUST
  description: Semantic rule for 'governance_framework.proposal_system'.
  rationale: 'DAO Proposals: governance_framework.proposal_system ist HIGH severity
    - validates proposal submission/execution framework, ensures structured governance
    process, critical for DAO operations'
  sot_mapping:
    contract: 'schema: sot.schema.json: governance_framework.proposal_system'
    core: 'contract_validator.py: validate_proposal_system(value)'
    policy: 'opa/sot.rego: deny { not valid_proposal_system(input.governance_framework.proposal_system)
      }'
    cli: cli validate --sot --path governance_framework.proposal_system
    test: test_sot.py::test_proposal_system()
  sot_artefacts:
    python: validate_sot_v2_0050() in sot_validator_core.py
    rego: SOT-V2-0050 deny rule in sot_policy.rego
    cli: --rules SOT-V2-0050 flag supported
    test: test_sot_v2_0050() in test_sot_validator.py
- rule_id: SOT-V2-0051
  source: sot_contract_v2.yaml
  source_section: SSID_structure_level3_part1_MAX.md
  source_line: ~30-100
  category: GOVERNANCE
  severity: HIGH
  enforcement: MUST
  description: Semantic rule for 'governance_framework.reference'.
  rationale: 'DAO Documentation: governance_framework.reference ist HIGH severity
    - external reference to governance docs/RFCs, validates documentation completeness,
    ensures governance transparency'
  sot_mapping:
    contract: 'schema: sot.schema.json: governance_framework.reference'
    core: 'contract_validator.py: validate_framework_reference(value)'
    policy: 'opa/sot.rego: deny { not valid_framework_reference(input.governance_framework.reference)
      }'
    cli: cli validate --sot --path governance_framework.reference
    test: test_sot.py::test_framework_reference()
  sot_artefacts:
    python: validate_sot_v2_0051() in sot_validator_core.py
    rego: SOT-V2-0051 deny rule in sot_policy.rego
    cli: --rules SOT-V2-0051 flag supported
    test: test_sot_v2_0051() in test_sot_validator.py
- rule_id: SOT-V2-0052
  source: sot_contract_v2.yaml
  source_section: SSID_structure_level3_part1_MAX.md
  source_line: ~30-100
  category: GOVERNANCE
  severity: HIGH
  enforcement: MUST
  description: Semantic rule for 'governance_framework.upgrade_authority'.
  rationale: 'DAO Upgrades: governance_framework.upgrade_authority ist HIGH severity
    - validates smart contract upgrade authority, ensures controlled upgrade process,
    critical for contract security and evolution'
  sot_mapping:
    contract: 'schema: sot.schema.json: governance_framework.upgrade_authority'
    core: 'contract_validator.py: validate_upgrade_authority(value)'
    policy: 'opa/sot.rego: deny { not valid_upgrade_authority(input.governance_framework.upgrade_authority)
      }'
    cli: cli validate --sot --path governance_framework.upgrade_authority
    test: test_sot.py::test_upgrade_authority()
  sot_artefacts:
    python: validate_sot_v2_0052() in sot_validator_core.py
    rego: SOT-V2-0052 deny rule in sot_policy.rego
    cli: --rules SOT-V2-0052 flag supported
    test: test_sot_v2_0052() in test_sot_validator.py
- rule_id: SOT-V2-0053
  source: sot_contract_v2.yaml
  source_section: SSID_structure_level3_part1_MAX.md
  source_line: ~30-100
  category: GOVERNANCE
  severity: HIGH
  enforcement: MUST
  description: Semantic rule for 'governance_framework.voting_mechanism'.
  rationale: 'DAO Voting: governance_framework.voting_mechanism ist HIGH severity
    - validates voting system (token-weighted, quadratic, etc.), ensures democratic
    governance, critical for DAO legitimacy'
  sot_mapping:
    contract: 'schema: sot.schema.json: governance_framework.voting_mechanism'
    core: 'contract_validator.py: validate_voting_mechanism(value)'
    policy: 'opa/sot.rego: deny { not valid_voting_mechanism(input.governance_framework.voting_mechanism)
      }'
    cli: cli validate --sot --path governance_framework.voting_mechanism
    test: test_sot.py::test_voting_mechanism()
  sot_artefacts:
    python: validate_sot_v2_0053() in sot_validator_core.py
    rego: SOT-V2-0053 deny rule in sot_policy.rego
    cli: --rules SOT-V2-0053 flag supported
    test: test_sot_v2_0053() in test_sot_validator.py
- rule_id: SOT-V2-0054
  source: sot_contract_v2.yaml
  source_section: SSID_structure_level3_part1_MAX.md
  source_line: ~146-250
  category: GOVERNANCE
  severity: HIGH
  enforcement: MUST
  description: Semantic rule for 'governance_parameters'.
  rationale: 'DAO Parameters: governance_parameters ist HIGH severity - top-level
    governance configuration container, validates delegation/rewards/proposal parameters,
    critical for DAO operational rules'
  sot_mapping:
    contract: 'schema: sot.schema.json: governance_parameters'
    core: 'contract_validator.py: validate_governance_parameters(value)'
    policy: 'opa/sot.rego: deny { not valid_governance_parameters(input.governance_parameters)
      }'
    cli: cli validate --sot --path governance_parameters
    test: test_sot.py::test_governance_parameters()
  sot_artefacts:
    python: validate_sot_v2_0054() in sot_validator_core.py
    rego: SOT-V2-0054 deny rule in sot_policy.rego
    cli: --rules SOT-V2-0054 flag supported
    test: test_sot_v2_0054() in test_sot_validator.py
- rule_id: SOT-V2-0055
  source: sot_contract_v2.yaml
  source_section: SSID_structure_level3_part1_MAX.md
  source_line: ~146-250
  category: GOVERNANCE
  severity: HIGH
  enforcement: MUST
  description: Semantic rule for 'governance_parameters.delegation_system'.
  rationale: 'Vote Delegation: governance_parameters.delegation_system ist HIGH severity
    - validates vote delegation infrastructure, enables liquid democracy, critical
    for flexible governance participation'
  sot_mapping:
    contract: 'schema: sot.schema.json: governance_parameters.delegation_system'
    core: 'contract_validator.py: validate_delegation_system(value)'
    policy: 'opa/sot.rego: deny { not valid_delegation_system(input.governance_parameters.delegation_system)
      }'
    cli: cli validate --sot --path governance_parameters.delegation_system
    test: test_sot.py::test_delegation_system()
  sot_artefacts:
    python: validate_sot_v2_0055() in sot_validator_core.py
    rego: SOT-V2-0055 deny rule in sot_policy.rego
    cli: --rules SOT-V2-0055 flag supported
    test: test_sot_v2_0055() in test_sot_validator.py
- rule_id: SOT-V2-0056
  source: sot_contract_v2.yaml
  source_section: SSID_structure_level3_part1_MAX.md
  source_line: ~146-250
  category: GOVERNANCE
  severity: HIGH
  enforcement: MUST
  description: Semantic rule for 'governance_parameters.delegation_system.delegation_changes'.
  rationale: 'Delegation Rules: delegation_changes ist HIGH severity - validates when
    delegation can be modified, prevents gaming through last-minute delegation switches,
    ensures stable voting power'
  sot_mapping:
    contract: 'schema: sot.schema.json: governance_parameters.delegation_system.delegation_changes'
    core: 'contract_validator.py: validate_delegation_changes(value)'
    policy: 'opa/sot.rego: deny { not valid_delegation_changes(input.governance_parameters.delegation_system.delegation_changes)
      }'
    cli: cli validate --sot --path governance_parameters.delegation_system.delegation_changes
    test: test_sot.py::test_delegation_changes()
  sot_artefacts:
    python: validate_sot_v2_0056() in sot_validator_core.py
    rego: SOT-V2-0056 deny rule in sot_policy.rego
    cli: --rules SOT-V2-0056 flag supported
    test: test_sot_v2_0056() in test_sot_validator.py
- rule_id: SOT-V2-0057
  source: sot_contract_v2.yaml
  source_section: SSID_structure_level3_part1_MAX.md
  source_line: ~146-250
  category: GOVERNANCE
  severity: HIGH
  enforcement: MUST
  description: Semantic rule for 'governance_parameters.delegation_system.delegation_enabled'.
  rationale: 'Delegation Toggle: delegation_enabled ist HIGH severity - boolean flag
    to enable/disable delegation feature, validates liquid democracy activation, critical
    for governance model'
  sot_mapping:
    contract: 'schema: sot.schema.json: governance_parameters.delegation_system.delegation_enabled'
    core: 'contract_validator.py: validate_delegation_enabled(value)'
    policy: 'opa/sot.rego: deny { not valid_delegation_enabled(input.governance_parameters.delegation_system.delegation_enabled)
      }'
    cli: cli validate --sot --path governance_parameters.delegation_system.delegation_enabled
    test: test_sot.py::test_delegation_enabled()
  sot_artefacts:
    python: validate_sot_v2_0057() in sot_validator_core.py
    rego: SOT-V2-0057 deny rule in sot_policy.rego
    cli: --rules SOT-V2-0057 flag supported
    test: test_sot_v2_0057() in test_sot_validator.py
- rule_id: SOT-V2-0058
  source: sot_contract_v2.yaml
  source_section: SSID_structure_level3_part1_MAX.md
  source_line: ~146-250
  category: GOVERNANCE
  severity: HIGH
  enforcement: MUST
  description: Semantic rule for 'governance_parameters.delegation_system.self_delegation_default'.
  rationale: 'Self-Delegation: self_delegation_default ist HIGH severity - default
    behavior when user does not delegate (votes with own tokens), validates default
    governance participation model'
  sot_mapping:
    contract: 'schema: sot.schema.json: governance_parameters.delegation_system.self_delegation_default'
    core: 'contract_validator.py: validate_self_delegation_default(value)'
    policy: 'opa/sot.rego: deny { not valid_self_delegation(input.governance_parameters.delegation_system.self_delegation_default)
      }'
    cli: cli validate --sot --path governance_parameters.delegation_system.self_delegation_default
    test: test_sot.py::test_self_delegation_default()
  sot_artefacts:
    python: validate_sot_v2_0058() in sot_validator_core.py
    rego: SOT-V2-0058 deny rule in sot_policy.rego
    cli: --rules SOT-V2-0058 flag supported
    test: test_sot_v2_0058() in test_sot_validator.py
- rule_id: SOT-V2-0059
  source: sot_contract_v2.yaml
  source_section: SSID_structure_level3_part1_MAX.md
  source_line: ~146-250
  category: GOVERNANCE
  severity: HIGH
  enforcement: MUST
  description: Semantic rule for 'governance_parameters.delegation_system.vote_weight_calculation'.
  rationale: 'Vote Weight: vote_weight_calculation ist HIGH severity - algorithm for
    calculating delegated vote weight, validates voting power distribution, critical
    for fair governance'
  sot_mapping:
    contract: 'schema: sot.schema.json: governance_parameters.delegation_system.vote_weight_calculation'
    core: 'contract_validator.py: validate_vote_weight_calculation(value)'
    policy: 'opa/sot.rego: deny { not valid_vote_weight_calc(input.governance_parameters.delegation_system.vote_weight_calculation)
      }'
    cli: cli validate --sot --path governance_parameters.delegation_system.vote_weight_calculation
    test: test_sot.py::test_vote_weight_calculation()
  sot_artefacts:
    python: validate_sot_v2_0059() in sot_validator_core.py
    rego: SOT-V2-0059 deny rule in sot_policy.rego
    cli: --rules SOT-V2-0059 flag supported
    test: test_sot_v2_0059() in test_sot_validator.py
- rule_id: SOT-V2-0060
  source: sot_contract_v2.yaml
  source_section: SSID_structure_level3_part1_MAX.md
  source_line: ~146-250
  category: GOVERNANCE
  severity: HIGH
  enforcement: MUST
  description: Semantic rule for 'governance_parameters.governance_rewards'.
  rationale: 'DAO Incentives: governance_rewards ist HIGH severity - top-level rewards
    structure for governance participation, validates tokenomics for voter/delegate/creator
    incentives, critical for active governance'
  sot_mapping:
    contract: 'schema: sot.schema.json: governance_parameters.governance_rewards'
    core: 'contract_validator.py: validate_governance_rewards(value)'
    policy: 'opa/sot.rego: deny { not valid_governance_rewards(input.governance_parameters.governance_rewards)
      }'
    cli: cli validate --sot --path governance_parameters.governance_rewards
    test: test_sot.py::test_governance_rewards()
  sot_artefacts:
    python: validate_sot_v2_0060() in sot_validator_core.py
    rego: SOT-V2-0060 deny rule in sot_policy.rego
    cli: --rules SOT-V2-0060 flag supported
    test: test_sot_v2_0060() in test_sot_validator.py
- rule_id: SOT-V2-0061
  source: sot_contract_v2.yaml
  source_section: SSID_structure_level3_part1_MAX.md
  source_line: ~146-250
  category: GOVERNANCE
  severity: HIGH
  enforcement: MUST
  description: Semantic rule for 'governance_parameters.governance_rewards.delegate_rewards'.
  rationale: 'Delegate Incentives: delegate_rewards ist HIGH severity - rewards for
    delegates who accumulate voting power, validates delegation incentive structure,
    ensures liquid democracy viability'
  sot_mapping:
    contract: 'schema: sot.schema.json: governance_parameters.governance_rewards.delegate_rewards'
    core: 'contract_validator.py: validate_delegate_rewards(value)'
    policy: 'opa/sot.rego: deny { not valid_delegate_rewards(input.governance_parameters.governance_rewards.delegate_rewards)
      }'
    cli: cli validate --sot --path governance_parameters.governance_rewards.delegate_rewards
    test: test_sot.py::test_delegate_rewards()
  sot_artefacts:
    python: validate_sot_v2_0061() in sot_validator_core.py
    rego: SOT-V2-0061 deny rule in sot_policy.rego
    cli: --rules SOT-V2-0061 flag supported
    test: test_sot_v2_0061() in test_sot_validator.py
- rule_id: SOT-V2-0062
  source: sot_contract_v2.yaml
  source_section: SSID_structure_level3_part1_MAX.md
  source_line: ~146-250
  category: GOVERNANCE
  severity: HIGH
  enforcement: MUST
  description: Semantic rule for 'governance_parameters.governance_rewards.minimum_participation'.
  rationale: 'Participation Threshold: minimum_participation ist HIGH severity - minimum
    voting threshold to receive rewards, validates anti-passive-participation mechanism,
    ensures quality governance engagement'
  sot_mapping:
    contract: 'schema: sot.schema.json: governance_parameters.governance_rewards.minimum_participation'
    core: 'contract_validator.py: validate_minimum_participation(value)'
    policy: 'opa/sot.rego: deny { not valid_min_participation(input.governance_parameters.governance_rewards.minimum_participation)
      }'
    cli: cli validate --sot --path governance_parameters.governance_rewards.minimum_participation
    test: test_sot.py::test_minimum_participation()
  sot_artefacts:
    python: validate_sot_v2_0062() in sot_validator_core.py
    rego: SOT-V2-0062 deny rule in sot_policy.rego
    cli: --rules SOT-V2-0062 flag supported
    test: test_sot_v2_0062() in test_sot_validator.py
- rule_id: SOT-V2-0063
  source: sot_contract_v2.yaml
  source_section: SSID_structure_level3_part1_MAX.md
  source_line: ~146-250
  category: GOVERNANCE
  severity: HIGH
  enforcement: MUST
  description: Semantic rule for 'governance_parameters.governance_rewards.proposal_creator_rewards'.
  rationale: 'Creator Incentives: proposal_creator_rewards ist HIGH severity - rewards
    for successful proposal creators, validates innovation incentive mechanism, encourages
    quality proposals'
  sot_mapping:
    contract: 'schema: sot.schema.json: governance_parameters.governance_rewards.proposal_creator_rewards'
    core: 'contract_validator.py: validate_proposal_creator_rewards(value)'
    policy: 'opa/sot.rego: deny { not valid_creator_rewards(input.governance_parameters.governance_rewards.proposal_creator_rewards)
      }'
    cli: cli validate --sot --path governance_parameters.governance_rewards.proposal_creator_rewards
    test: test_sot.py::test_proposal_creator_rewards()
  sot_artefacts:
    python: validate_sot_v2_0063() in sot_validator_core.py
    rego: SOT-V2-0063 deny rule in sot_policy.rego
    cli: --rules SOT-V2-0063 flag supported
    test: test_sot_v2_0063() in test_sot_validator.py
- rule_id: SOT-V2-0064
  source: sot_contract_v2.yaml
  source_section: SSID_structure_level3_part1_MAX.md
  source_line: ~146-250
  category: GOVERNANCE
  severity: HIGH
  enforcement: MUST
  description: Semantic rule for 'governance_parameters.governance_rewards.voter_participation_rewards'.
  rationale: 'Voter Incentives: voter_participation_rewards ist HIGH severity - rewards
    for active voters, validates participation incentive structure, ensures high voter
    turnout'
  sot_mapping:
    contract: 'schema: sot.schema.json: governance_parameters.governance_rewards.voter_participation_rewards'
    core: 'contract_validator.py: validate_voter_participation_rewards(value)'
    policy: 'opa/sot.rego: deny { not valid_voter_rewards(input.governance_parameters.governance_rewards.voter_participation_rewards)
      }'
    cli: cli validate --sot --path governance_parameters.governance_rewards.voter_participation_rewards
    test: test_sot.py::test_voter_participation_rewards()
  sot_artefacts:
    python: validate_sot_v2_0064() in sot_validator_core.py
    rego: SOT-V2-0064 deny rule in sot_policy.rego
    cli: --rules SOT-V2-0064 flag supported
    test: test_sot_v2_0064() in test_sot_validator.py
- rule_id: SOT-V2-0065
  source: sot_contract_v2.yaml
  source_section: SSID_structure_level3_part1_MAX.md
  source_line: ~146-250
  category: GOVERNANCE
  severity: HIGH
  enforcement: MUST
  description: Semantic rule for 'governance_parameters.proposal_framework'.
  rationale: 'Proposal Structure: proposal_framework ist HIGH severity - top-level
    proposal configuration, validates deposit/threshold/types for governance proposals,
    critical for DAO proposal lifecycle'
  sot_mapping:
    contract: 'schema: sot.schema.json: governance_parameters.proposal_framework'
    core: 'contract_validator.py: validate_proposal_framework(value)'
    policy: 'opa/sot.rego: deny { not valid_proposal_framework(input.governance_parameters.proposal_framework)
      }'
    cli: cli validate --sot --path governance_parameters.proposal_framework
    test: test_sot.py::test_proposal_framework()
  sot_artefacts:
    python: validate_sot_v2_0065() in sot_validator_core.py
    rego: SOT-V2-0065 deny rule in sot_policy.rego
    cli: --rules SOT-V2-0065 flag supported
    test: test_sot_v2_0065() in test_sot_validator.py
- rule_id: SOT-V2-0066
  source: sot_contract_v2.yaml
  source_section: SSID_structure_level3_part1_MAX.md
  source_line: ~146-250
  category: GOVERNANCE
  severity: HIGH
  enforcement: MUST
  description: Semantic rule for 'governance_parameters.proposal_framework.proposal_deposit'.
  rationale: 'Proposal Deposit: proposal_deposit ist HIGH severity - minimum token
    deposit to create proposal, validates anti-spam economic barrier, ensures serious
    proposals only'
  sot_mapping:
    contract: 'schema: sot.schema.json: governance_parameters.proposal_framework.proposal_deposit'
    core: 'contract_validator.py: validate_proposal_deposit(value)'
    policy: 'opa/sot.rego: deny { not valid_proposal_deposit(input.governance_parameters.proposal_framework.proposal_deposit)
      }'
    cli: cli validate --sot --path governance_parameters.proposal_framework.proposal_deposit
    test: test_sot.py::test_proposal_deposit()
  sot_artefacts:
    python: validate_sot_v2_0066() in sot_validator_core.py
    rego: SOT-V2-0066 deny rule in sot_policy.rego
    cli: --rules SOT-V2-0066 flag supported
    test: test_sot_v2_0066() in test_sot_validator.py
- rule_id: SOT-V2-0067
  source: sot_contract_v2.yaml
  source_section: SSID_structure_level3_part1_MAX.md
  source_line: ~146-250
  category: GOVERNANCE
  severity: HIGH
  enforcement: MUST
  description: Semantic rule for 'governance_parameters.proposal_framework.proposal_threshold'.
  rationale: 'Proposal Threshold: proposal_threshold ist HIGH severity - minimum token
    holding to create proposal, validates proposer qualification, prevents low-stake
    spam proposals'
  sot_mapping:
    contract: 'schema: sot.schema.json: governance_parameters.proposal_framework.proposal_threshold'
    core: 'contract_validator.py: validate_proposal_threshold(value)'
    policy: 'opa/sot.rego: deny { not valid_proposal_threshold(input.governance_parameters.proposal_framework.proposal_threshold)
      }'
    cli: cli validate --sot --path governance_parameters.proposal_framework.proposal_threshold
    test: test_sot.py::test_proposal_threshold()
  sot_artefacts:
    python: validate_sot_v2_0067() in sot_validator_core.py
    rego: SOT-V2-0067 deny rule in sot_policy.rego
    cli: --rules SOT-V2-0067 flag supported
    test: test_sot_v2_0067() in test_sot_validator.py
- rule_id: SOT-V2-0068
  source: sot_contract_v2.yaml
  source_section: SSID_structure_level3_part1_MAX.md
  source_line: ~146-250
  category: GOVERNANCE
  severity: HIGH
  enforcement: MUST
  description: Semantic rule for 'governance_parameters.proposal_framework.proposal_types'.
  rationale: 'Proposal Types: proposal_types ist HIGH severity - list of allowed proposal
    types (emergency, protocol upgrade, parameter change, treasury), validates governance
    scope, ensures structured decision-making'
  sot_mapping:
    contract: 'schema: sot.schema.json: governance_parameters.proposal_framework.proposal_types'
    core: 'contract_validator.py: validate_proposal_types(value)'
    policy: 'opa/sot.rego: deny { not valid_proposal_types(input.governance_parameters.proposal_framework.proposal_types)
      }'
    cli: cli validate --sot --path governance_parameters.proposal_framework.proposal_types
    test: test_sot.py::test_proposal_types()
  sot_artefacts:
    python: validate_sot_v2_0068() in sot_validator_core.py
    rego: SOT-V2-0068 deny rule in sot_policy.rego
    cli: --rules SOT-V2-0068 flag supported
    test: test_sot_v2_0068() in test_sot_validator.py
- rule_id: SOT-V2-0069
  source: sot_contract_v2.yaml
  source_section: SSID_structure_level3_part1_MAX.md
  source_line: ~146-250
  category: GOVERNANCE
  severity: HIGH
  enforcement: MUST
  description: Semantic rule for 'governance_parameters.proposal_framework.proposal_types::Emergency
    proposals (expedited process)'.
  rationale: 'Emergency Proposals: Emergency proposal type ist HIGH severity - expedited
    governance process for critical issues, validates fast-track voting, ensures rapid
    response capability'
  sot_mapping:
    contract: 'schema: sot.schema.json: governance_parameters.proposal_framework.proposal_types[emergency]'
    core: 'contract_validator.py: validate_emergency_proposal_type(value)'
    policy: 'opa/sot.rego: deny { not valid_emergency_proposal(input.governance_parameters.proposal_framework.proposal_types)
      }'
    cli: cli validate --sot --path governance_parameters.proposal_framework.proposal_types.emergency
    test: test_sot.py::test_emergency_proposal_type()
  sot_artefacts:
    python: validate_sot_v2_0069() in sot_validator_core.py
    rego: SOT-V2-0069 deny rule in sot_policy.rego
    cli: --rules SOT-V2-0069 flag supported
    test: test_sot_v2_0069() in test_sot_validator.py
- rule_id: SOT-V2-0070
  source: sot_contract_v2.yaml
  source_section: SSID_structure_level3_part1_MAX.md
  source_line: ~146-250
  category: GOVERNANCE
  severity: HIGH
  enforcement: MUST
  description: Semantic rule for 'governance_parameters.proposal_framework.proposal_types::Parameter
    changes (requires simple majority)'.
  rationale: 'Parameter Changes: Parameter change proposal type ist HIGH severity
    - simple majority voting for protocol parameter updates, validates configuration
    governance, ensures flexible protocol tuning'
  sot_mapping:
    contract: 'schema: sot.schema.json: governance_parameters.proposal_framework.proposal_types[parameter_change]'
    core: 'contract_validator.py: validate_parameter_change_proposal(value)'
    policy: 'opa/sot.rego: deny { not valid_parameter_change(input.governance_parameters.proposal_framework.proposal_types)
      }'
    cli: cli validate --sot --path governance_parameters.proposal_framework.proposal_types.parameter_change
    test: test_sot.py::test_parameter_change_proposal()
  sot_artefacts:
    python: validate_sot_v2_0070() in sot_validator_core.py
    rego: SOT-V2-0070 deny rule in sot_policy.rego
    cli: --rules SOT-V2-0070 flag supported
    test: test_sot_v2_0070() in test_sot_validator.py
- rule_id: SOT-V2-0071
  source: sot_contract_v2.yaml
  source_section: SSID_structure_level3_part1_MAX.md
  source_line: ~146-250
  category: GOVERNANCE
  severity: HIGH
  enforcement: MUST
  description: Semantic rule for 'governance_parameters.proposal_framework.proposal_types::Protocol
    upgrades (requires supermajority)'.
  rationale: 'Protocol Upgrades: Protocol upgrade proposal type ist HIGH severity
    - supermajority voting for contract upgrades, validates high-stake decisions,
    ensures community consensus for critical changes'
  sot_mapping:
    contract: 'schema: sot.schema.json: governance_parameters.proposal_framework.proposal_types[protocol_upgrade]'
    core: 'contract_validator.py: validate_protocol_upgrade_proposal(value)'
    policy: 'opa/sot.rego: deny { not valid_protocol_upgrade(input.governance_parameters.proposal_framework.proposal_types)
      }'
    cli: cli validate --sot --path governance_parameters.proposal_framework.proposal_types.protocol_upgrade
    test: test_sot.py::test_protocol_upgrade_proposal()
  sot_artefacts:
    python: validate_sot_v2_0071() in sot_validator_core.py
    rego: SOT-V2-0071 deny rule in sot_policy.rego
    cli: --rules SOT-V2-0071 flag supported
    test: test_sot_v2_0071() in test_sot_validator.py
- rule_id: SOT-V2-0072
  source: sot_contract_v2.yaml
  source_section: SSID_structure_level3_part1_MAX.md
  source_line: ~146-250
  category: GOVERNANCE
  severity: HIGH
  enforcement: MUST
  description: Semantic rule for 'governance_parameters.proposal_framework.proposal_types::Treasury
    allocation (requires quorum + majority)'.
  rationale: 'Treasury Allocation: Treasury allocation proposal type ist HIGH severity
    - quorum + majority voting for fund allocation, validates financial governance,
    ensures community oversight of treasury'
  sot_mapping:
    contract: 'schema: sot.schema.json: governance_parameters.proposal_framework.proposal_types[treasury]'
    core: 'contract_validator.py: validate_treasury_proposal(value)'
    policy: 'opa/sot.rego: deny { not valid_treasury_allocation(input.governance_parameters.proposal_framework.proposal_types)
      }'
    cli: cli validate --sot --path governance_parameters.proposal_framework.proposal_types.treasury
    test: test_sot.py::test_treasury_allocation_proposal()
  sot_artefacts:
    python: validate_sot_v2_0072() in sot_validator_core.py
    rego: SOT-V2-0072 deny rule in sot_policy.rego
    cli: --rules SOT-V2-0072 flag supported
    test: test_sot_v2_0072() in test_sot_validator.py
- rule_id: SOT-V2-0073
  source: sot_contract_v2.yaml
  source_section: SSID_structure_level3_part1_MAX.md
  source_line: ~146-250
  category: GOVERNANCE
  severity: HIGH
  enforcement: MUST
  description: Semantic rule for 'governance_parameters.timelock_framework'.
  rationale: 'Timelock System: timelock_framework ist HIGH severity - top-level timelock
    configuration, validates delay periods before proposal execution, critical for
    security and community review'
  sot_mapping:
    contract: 'schema: sot.schema.json: governance_parameters.timelock_framework'
    core: 'contract_validator.py: validate_timelock_framework(value)'
    policy: 'opa/sot.rego: deny { not valid_timelock_framework(input.governance_parameters.timelock_framework)
      }'
    cli: cli validate --sot --path governance_parameters.timelock_framework
    test: test_sot.py::test_timelock_framework()
  sot_artefacts:
    python: validate_sot_v2_0073() in sot_validator_core.py
    rego: SOT-V2-0073 deny rule in sot_policy.rego
    cli: --rules SOT-V2-0073 flag supported
    test: test_sot_v2_0073() in test_sot_validator.py
- rule_id: SOT-V2-0074
  source: sot_contract_v2.yaml
  source_section: SSID_structure_level3_part1_MAX.md
  source_line: ~146-250
  category: GOVERNANCE
  severity: HIGH
  enforcement: MUST
  description: Semantic rule for 'governance_parameters.timelock_framework.emergency_proposals'.
  rationale: 'Emergency Timelock: emergency_proposals timelock ist HIGH severity -
    minimal/zero delay for critical fixes, validates rapid execution capability, balances
    security with emergency response'
  sot_mapping:
    contract: 'schema: sot.schema.json: governance_parameters.timelock_framework.emergency_proposals'
    core: 'contract_validator.py: validate_emergency_timelock(value)'
    policy: 'opa/sot.rego: deny { not valid_emergency_timelock(input.governance_parameters.timelock_framework.emergency_proposals)
      }'
    cli: cli validate --sot --path governance_parameters.timelock_framework.emergency_proposals
    test: test_sot.py::test_emergency_timelock()
  sot_artefacts:
    python: validate_sot_v2_0074() in sot_validator_core.py
    rego: SOT-V2-0074 deny rule in sot_policy.rego
    cli: --rules SOT-V2-0074 flag supported
    test: test_sot_v2_0074() in test_sot_validator.py
- rule_id: SOT-V2-0075
  source: sot_contract_v2.yaml
  source_section: SSID_structure_level3_part1_MAX.md
  source_line: ~146-250
  category: GOVERNANCE
  severity: HIGH
  enforcement: MUST
  description: Semantic rule for 'governance_parameters.timelock_framework.parameter_changes'.
  rationale: 'Parameter Timelock: parameter_changes timelock ist HIGH severity - delay
    period for parameter updates, validates community review window, ensures thoughtful
    configuration changes'
  sot_mapping:
    contract: 'schema: sot.schema.json: governance_parameters.timelock_framework.parameter_changes'
    core: 'contract_validator.py: validate_parameter_timelock(value)'
    policy: 'opa/sot.rego: deny { not valid_parameter_timelock(input.governance_parameters.timelock_framework.parameter_changes)
      }'
    cli: cli validate --sot --path governance_parameters.timelock_framework.parameter_changes
    test: test_sot.py::test_parameter_timelock()
  sot_artefacts:
    python: validate_sot_v2_0075() in sot_validator_core.py
    rego: SOT-V2-0075 deny rule in sot_policy.rego
    cli: --rules SOT-V2-0075 flag supported
    test: test_sot_v2_0075() in test_sot_validator.py
- rule_id: SOT-V2-0076
  source: sot_contract_v2.yaml
  source_section: SSID_structure_level3_part1_MAX.md
  source_line: ~146-250
  category: GOVERNANCE
  severity: HIGH
  enforcement: MUST
  description: Semantic rule for 'governance_parameters.timelock_framework.protocol_upgrades'.
  rationale: 'Protocol Upgrade Timelock: protocol_upgrades timelock ist HIGH severity
    - longest delay for contract upgrades, validates extended community review, critical
    for security of high-stake changes'
  sot_mapping:
    contract: 'schema: sot.schema.json: governance_parameters.timelock_framework.protocol_upgrades'
    core: 'contract_validator.py: validate_protocol_upgrade_timelock(value)'
    policy: 'opa/sot.rego: deny { not valid_protocol_timelock(input.governance_parameters.timelock_framework.protocol_upgrades)
      }'
    cli: cli validate --sot --path governance_parameters.timelock_framework.protocol_upgrades
    test: test_sot.py::test_protocol_upgrade_timelock()
  sot_artefacts:
    python: validate_sot_v2_0076() in sot_validator_core.py
    rego: SOT-V2-0076 deny rule in sot_policy.rego
    cli: --rules SOT-V2-0076 flag supported
    test: test_sot_v2_0076() in test_sot_validator.py
- rule_id: SOT-V2-0077
  source: sot_contract_v2.yaml
  source_section: SSID_structure_level3_part1_MAX.md
  source_line: ~146-250
  category: GOVERNANCE
  severity: HIGH
  enforcement: MUST
  description: Semantic rule for 'governance_parameters.timelock_framework.standard_proposals'.
  rationale: 'Standard Timelock: standard_proposals timelock ist HIGH severity - default
    delay for typical proposals, validates balanced review period, ensures community
    oversight without excessive delays'
  sot_mapping:
    contract: 'schema: sot.schema.json: governance_parameters.timelock_framework.standard_proposals'
    core: 'contract_validator.py: validate_standard_timelock(value)'
    policy: 'opa/sot.rego: deny { not valid_standard_timelock(input.governance_parameters.timelock_framework.standard_proposals)
      }'
    cli: cli validate --sot --path governance_parameters.timelock_framework.standard_proposals
    test: test_sot.py::test_standard_timelock()
  sot_artefacts:
    python: validate_sot_v2_0077() in sot_validator_core.py
    rego: SOT-V2-0077 deny rule in sot_policy.rego
    cli: --rules SOT-V2-0077 flag supported
    test: test_sot_v2_0077() in test_sot_validator.py
- rule_id: SOT-V2-0078
  source: sot_contract_v2.yaml
  source_section: SSID_structure_level3_part1_MAX.md
  source_line: ~146-250
  category: GOVERNANCE
  severity: HIGH
  enforcement: MUST
  description: Semantic rule for 'governance_parameters.timelock_framework.treasury_allocations'.
  rationale: 'Treasury Timelock: treasury_allocations timelock ist HIGH severity -
    delay for fund allocation proposals, validates community review of financial decisions,
    critical for treasury security'
  sot_mapping:
    contract: 'schema: sot.schema.json: governance_parameters.timelock_framework.treasury_allocations'
    core: 'contract_validator.py: validate_treasury_timelock(value)'
    policy: 'opa/sot.rego: deny { not valid_treasury_timelock(input.governance_parameters.timelock_framework.treasury_allocations)
      }'
    cli: cli validate --sot --path governance_parameters.timelock_framework.treasury_allocations
    test: test_sot.py::test_treasury_timelock()
  sot_artefacts:
    python: validate_sot_v2_0078() in sot_validator_core.py
    rego: SOT-V2-0078 deny rule in sot_policy.rego
    cli: --rules SOT-V2-0078 flag supported
    test: test_sot_v2_0078() in test_sot_validator.py
- rule_id: SOT-V2-0079
  source: sot_contract_v2.yaml
  source_section: SSID_structure_level3_part1_MAX.md
  source_line: ~146-250
  category: GOVERNANCE
  severity: HIGH
  enforcement: MUST
  description: Semantic rule for 'governance_parameters.voting_periods'.
  rationale: 'Voting Periods: voting_periods ist HIGH severity - top-level voting
    duration configuration, validates time windows for different proposal types, critical
    for democratic participation'
  sot_mapping:
    contract: 'schema: sot.schema.json: governance_parameters.voting_periods'
    core: 'contract_validator.py: validate_voting_periods(value)'
    policy: 'opa/sot.rego: deny { not valid_voting_periods(input.governance_parameters.voting_periods)
      }'
    cli: cli validate --sot --path governance_parameters.voting_periods
    test: test_sot.py::test_voting_periods()
  sot_artefacts:
    python: validate_sot_v2_0079() in sot_validator_core.py
    rego: SOT-V2-0079 deny rule in sot_policy.rego
    cli: --rules SOT-V2-0079 flag supported
    test: test_sot_v2_0079() in test_sot_validator.py
- rule_id: SOT-V2-0080
  source: sot_contract_v2.yaml
  source_section: SSID_structure_level3_part1_MAX.md
  source_line: ~146-250
  category: GOVERNANCE
  severity: HIGH
  enforcement: MUST
  description: Semantic rule for 'governance_parameters.voting_periods.emergency_voting'.
  rationale: 'Emergency Voting Period: emergency_voting period ist HIGH severity -
    shortest voting duration for critical proposals, balances urgency with democratic
    participation, typically 24-48 hours'
  sot_mapping:
    contract: 'schema: sot.schema.json: governance_parameters.voting_periods.emergency_voting'
    core: 'contract_validator.py: validate_emergency_voting_period(value)'
    policy: 'opa/sot.rego: deny { not valid_emergency_voting_period(input.governance_parameters.voting_periods.emergency_voting)
      }'
    cli: cli validate --sot --path governance_parameters.voting_periods.emergency_voting
    test: test_sot.py::test_emergency_voting_period()
  sot_artefacts:
    python: validate_sot_v2_0080() in sot_validator_core.py
    rego: SOT-V2-0080 deny rule in sot_policy.rego
    cli: --rules SOT-V2-0080 flag supported
    test: test_sot_v2_0080() in test_sot_validator.py
- rule_id: SOT-V2-0081
  source: sot_contract_v2.yaml
  source_section: SSID_structure_level3_part1_MAX.md
  source_line: ~146-250
  category: GOVERNANCE
  severity: HIGH
  enforcement: MUST
  description: Semantic rule for 'governance_parameters.voting_periods.parameter_voting'.
  rationale: 'Parameter Voting Period: parameter_voting period ist HIGH severity -
    voting duration for parameter changes, validates adequate review time, typically
    3-5 days for configuration changes'
  sot_mapping:
    contract: 'schema: sot.schema.json: governance_parameters.voting_periods.parameter_voting'
    core: 'contract_validator.py: validate_parameter_voting_period(value)'
    policy: 'opa/sot.rego: deny { not valid_parameter_voting_period(input.governance_parameters.voting_periods.parameter_voting)
      }'
    cli: cli validate --sot --path governance_parameters.voting_periods.parameter_voting
    test: test_sot.py::test_parameter_voting_period()
  sot_artefacts:
    python: validate_sot_v2_0081() in sot_validator_core.py
    rego: SOT-V2-0081 deny rule in sot_policy.rego
    cli: --rules SOT-V2-0081 flag supported
    test: test_sot_v2_0081() in test_sot_validator.py
- rule_id: SOT-V2-0082
  source: sot_contract_v2.yaml
  source_section: SSID_structure_level3_part1_MAX.md
  source_line: ~146-250
  category: GOVERNANCE
  severity: HIGH
  enforcement: MUST
  description: Semantic rule for 'governance_parameters.voting_periods.protocol_upgrade_voting'.
  rationale: 'Protocol Upgrade Voting Period: protocol_upgrade_voting period ist HIGH
    severity - longest voting duration for contract upgrades, validates extensive
    community review, typically 7-14 days'
  sot_mapping:
    contract: 'schema: sot.schema.json: governance_parameters.voting_periods.protocol_upgrade_voting'
    core: 'contract_validator.py: validate_protocol_upgrade_voting_period(value)'
    policy: 'opa/sot.rego: deny { not valid_protocol_voting_period(input.governance_parameters.voting_periods.protocol_upgrade_voting)
      }'
    cli: cli validate --sot --path governance_parameters.voting_periods.protocol_upgrade_voting
    test: test_sot.py::test_protocol_upgrade_voting_period()
  sot_artefacts:
    python: validate_sot_v2_0082() in sot_validator_core.py
    rego: SOT-V2-0082 deny rule in sot_policy.rego
    cli: --rules SOT-V2-0082 flag supported
    test: test_sot_v2_0082() in test_sot_validator.py
- rule_id: SOT-V2-0083
  source: sot_contract_v2.yaml
  source_section: SSID_structure_level3_part1_MAX.md
  source_line: ~146-250
  category: GOVERNANCE
  severity: HIGH
  enforcement: MUST
  description: Semantic rule for 'governance_parameters.voting_periods.standard_voting'.
  rationale: 'Standard Voting Period: standard_voting period ist HIGH severity - default
    voting duration for typical proposals, validates balanced participation window,
    typically 5-7 days'
  sot_mapping:
    contract: 'schema: sot.schema.json: governance_parameters.voting_periods.standard_voting'
    core: 'contract_validator.py: validate_standard_voting_period(value)'
    policy: 'opa/sot.rego: deny { not valid_standard_voting_period(input.governance_parameters.voting_periods.standard_voting)
      }'
    cli: cli validate --sot --path governance_parameters.voting_periods.standard_voting
    test: test_sot.py::test_standard_voting_period()
  sot_artefacts:
    python: validate_sot_v2_0083() in sot_validator_core.py
    rego: SOT-V2-0083 deny rule in sot_policy.rego
    cli: --rules SOT-V2-0083 flag supported
    test: test_sot_v2_0083() in test_sot_validator.py
- rule_id: SOT-V2-0084
  source: sot_contract_v2.yaml
  source_section: SSID_structure_level3_part1_MAX.md
  source_line: ~146-250
  category: GOVERNANCE
  severity: HIGH
  enforcement: MUST
  description: Semantic rule for 'governance_parameters.voting_requirements'.
  rationale: 'Voting Requirements: voting_requirements ist HIGH severity - top-level
    quorum and majority thresholds, validates democratic legitimacy standards, critical
    for governance validity'
  sot_mapping:
    contract: 'schema: sot.schema.json: governance_parameters.voting_requirements'
    core: 'contract_validator.py: validate_voting_requirements(value)'
    policy: 'opa/sot.rego: deny { not valid_voting_requirements(input.governance_parameters.voting_requirements)
      }'
    cli: cli validate --sot --path governance_parameters.voting_requirements
    test: test_sot.py::test_voting_requirements()
  sot_artefacts:
    python: validate_sot_v2_0084() in sot_validator_core.py
    rego: SOT-V2-0084 deny rule in sot_policy.rego
    cli: --rules SOT-V2-0084 flag supported
    test: test_sot_v2_0084() in test_sot_validator.py
- rule_id: SOT-V2-0085
  source: sot_contract_v2.yaml
  source_section: SSID_structure_level3_part1_MAX.md
  source_line: ~146-250
  category: GOVERNANCE
  severity: HIGH
  enforcement: MUST
  description: Semantic rule for 'governance_parameters.voting_requirements.emergency_supermajority'.
  rationale: 'Emergency Supermajority: emergency_supermajority ist HIGH severity -
    supermajority threshold for emergency proposals (typically 66%), validates high
    consensus for critical fast-track changes'
  sot_mapping:
    contract: 'schema: sot.schema.json: governance_parameters.voting_requirements.emergency_supermajority'
    core: 'contract_validator.py: validate_emergency_supermajority(value)'
    policy: 'opa/sot.rego: deny { not valid_emergency_supermajority(input.governance_parameters.voting_requirements.emergency_supermajority)
      }'
    cli: cli validate --sot --path governance_parameters.voting_requirements.emergency_supermajority
    test: test_sot.py::test_emergency_supermajority()
  sot_artefacts:
    python: validate_sot_v2_0085() in sot_validator_core.py
    rego: SOT-V2-0085 deny rule in sot_policy.rego
    cli: --rules SOT-V2-0085 flag supported
    test: test_sot_v2_0085() in test_sot_validator.py
- rule_id: SOT-V2-0086
  source: sot_contract_v2.yaml
  source_section: SSID_structure_level3_part1_MAX.md
  source_line: ~146-250
  category: GOVERNANCE
  severity: HIGH
  enforcement: MUST
  description: Semantic rule for 'governance_parameters.voting_requirements.quorum_emergency'.
  rationale: 'Emergency Quorum: quorum_emergency ist HIGH severity - minimum participation
    for emergency votes, validates sufficient representation despite urgency, typically
    lower than standard quorum'
  sot_mapping:
    contract: 'schema: sot.schema.json: governance_parameters.voting_requirements.quorum_emergency'
    core: 'contract_validator.py: validate_emergency_quorum(value)'
    policy: 'opa/sot.rego: deny { not valid_emergency_quorum(input.governance_parameters.voting_requirements.quorum_emergency)
      }'
    cli: cli validate --sot --path governance_parameters.voting_requirements.quorum_emergency
    test: test_sot.py::test_emergency_quorum()
  sot_artefacts:
    python: validate_sot_v2_0086() in sot_validator_core.py
    rego: SOT-V2-0086 deny rule in sot_policy.rego
    cli: --rules SOT-V2-0086 flag supported
    test: test_sot_v2_0086() in test_sot_validator.py
- rule_id: SOT-V2-0087
  source: sot_contract_v2.yaml
  source_section: SSID_structure_level3_part1_MAX.md
  source_line: ~146-250
  category: GOVERNANCE
  severity: HIGH
  enforcement: MUST
  description: Semantic rule for 'governance_parameters.voting_requirements.quorum_protocol_upgrade'.
  rationale: 'Protocol Upgrade Quorum: quorum_protocol_upgrade ist HIGH severity -
    highest minimum participation for upgrades, validates broad community engagement,
    typically 40-50% of voting power'
  sot_mapping:
    contract: 'schema: sot.schema.json: governance_parameters.voting_requirements.quorum_protocol_upgrade'
    core: 'contract_validator.py: validate_protocol_upgrade_quorum(value)'
    policy: 'opa/sot.rego: deny { not valid_protocol_quorum(input.governance_parameters.voting_requirements.quorum_protocol_upgrade)
      }'
    cli: cli validate --sot --path governance_parameters.voting_requirements.quorum_protocol_upgrade
    test: test_sot.py::test_protocol_upgrade_quorum()
  sot_artefacts:
    python: validate_sot_v2_0087() in sot_validator_core.py
    rego: SOT-V2-0087 deny rule in sot_policy.rego
    cli: --rules SOT-V2-0087 flag supported
    test: test_sot_v2_0087() in test_sot_validator.py
- rule_id: SOT-V2-0088
  source: sot_contract_v2.yaml
  source_section: SSID_structure_level3_part1_MAX.md
  source_line: ~146-250
  category: GOVERNANCE
  severity: HIGH
  enforcement: MUST
  description: Semantic rule for 'governance_parameters.voting_requirements.quorum_standard'.
  rationale: 'Standard Quorum: quorum_standard ist HIGH severity - default minimum
    participation for typical proposals, validates democratic legitimacy, typically
    20-30% of voting power'
  sot_mapping:
    contract: 'schema: sot.schema.json: governance_parameters.voting_requirements.quorum_standard'
    core: 'contract_validator.py: validate_standard_quorum(value)'
    policy: 'opa/sot.rego: deny { not valid_standard_quorum(input.governance_parameters.voting_requirements.quorum_standard)
      }'
    cli: cli validate --sot --path governance_parameters.voting_requirements.quorum_standard
    test: test_sot.py::test_standard_quorum()
  sot_artefacts:
    python: validate_sot_v2_0088() in sot_validator_core.py
    rego: SOT-V2-0088 deny rule in sot_policy.rego
    cli: --rules SOT-V2-0088 flag supported
    test: test_sot_v2_0088() in test_sot_validator.py
- rule_id: SOT-V2-0089
  source: sot_contract_v2.yaml
  source_section: SSID_structure_level3_part1_MAX.md
  source_line: ~146-250
  category: GOVERNANCE
  severity: HIGH
  enforcement: MUST
  description: Semantic rule for 'governance_parameters.voting_requirements.simple_majority'.
  rationale: 'Simple Majority: simple_majority ist HIGH severity - 50%+1 threshold
    for basic proposals, validates straightforward democratic decisions, used for
    parameter changes and standard proposals'
  sot_mapping:
    contract: 'schema: sot.schema.json: governance_parameters.voting_requirements.simple_majority'
    core: 'contract_validator.py: validate_simple_majority(value)'
    policy: 'opa/sot.rego: deny { not valid_simple_majority(input.governance_parameters.voting_requirements.simple_majority)
      }'
    cli: cli validate --sot --path governance_parameters.voting_requirements.simple_majority
    test: test_sot.py::test_simple_majority()
  sot_artefacts:
    python: validate_sot_v2_0089() in sot_validator_core.py
    rego: SOT-V2-0089 deny rule in sot_policy.rego
    cli: --rules SOT-V2-0089 flag supported
    test: test_sot_v2_0089() in test_sot_validator.py
- rule_id: SOT-V2-0090
  source: sot_contract_v2.yaml
  source_section: SSID_structure_level3_part1_MAX.md
  source_line: ~146-250
  category: GOVERNANCE
  severity: HIGH
  enforcement: MUST
  description: Semantic rule for 'governance_parameters.voting_requirements.supermajority'.
  rationale: 'Supermajority: supermajority ist HIGH severity - typically 66% threshold
    for protocol upgrades, validates strong community consensus for critical changes,
    prevents narrow majorities from forcing major updates'
  sot_mapping:
    contract: 'schema: sot.schema.json: governance_parameters.voting_requirements.supermajority'
    core: 'contract_validator.py: validate_supermajority(value)'
    policy: 'opa/sot.rego: deny { not valid_supermajority(input.governance_parameters.voting_requirements.supermajority)
      }'
    cli: cli validate --sot --path governance_parameters.voting_requirements.supermajority
    test: test_sot.py::test_supermajority()
  sot_artefacts:
    python: validate_sot_v2_0090() in sot_validator_core.py
    rego: SOT-V2-0090 deny rule in sot_policy.rego
    cli: --rules SOT-V2-0090 flag supported
    test: test_sot_v2_0090() in test_sot_validator.py
- rule_id: SOT-V2-0091
  source: sot_contract_v2.yaml
  source_section: SSID_structure_level3_part1_MAX.md
  source_line: ~250-350
  category: STRUCTURE
  severity: CRITICAL
  enforcement: MUST
  description: Semantic rule for 'grundprinzipien.ausnahmen.allowed_root_files'.
  rationale: 'Structure Exceptions: allowed_root_files ist CRITICAL severity - whitelist
    of allowed files at repository root, validates AR001 compliance, ensures clean
    root directory structure'
  sot_mapping:
    contract: 'schema: sot.schema.json: grundprinzipien.ausnahmen.allowed_root_files'
    core: 'contract_validator.py: validate_allowed_root_files(value)'
    policy: 'opa/sot.rego: deny { not valid_root_files(input.grundprinzipien.ausnahmen.allowed_root_files)
      }'
    cli: cli validate --sot --path grundprinzipien.ausnahmen.allowed_root_files
    test: test_sot.py::test_allowed_root_files()
  sot_artefacts:
    python: validate_sot_v2_0091() in sot_validator_core.py
    rego: SOT-V2-0091 deny rule in sot_policy.rego
    cli: --rules SOT-V2-0091 flag supported
    test: test_sot_v2_0091() in test_sot_validator.py
- rule_id: SOT-V2-0092
  source: sot_contract_v2.yaml
  source_section: SSID_structure_level3_part1_MAX.md
  source_line: ~250-350
  category: STRUCTURE
  severity: CRITICAL
  enforcement: MUST
  description: Semantic rule for 'grundprinzipien.critical.structure_exceptions_yaml'.
  rationale: 'Structure Exceptions Registry: structure_exceptions_yaml ist CRITICAL
    severity - path to exceptions registry file, validates centralized exception management,
    critical for AR001-AR010 enforcement'
  sot_mapping:
    contract: 'schema: sot.schema.json: grundprinzipien.critical.structure_exceptions_yaml'
    core: 'contract_validator.py: validate_structure_exceptions_yaml(value)'
    policy: 'opa/sot.rego: deny { not valid_exceptions_yaml(input.grundprinzipien.critical.structure_exceptions_yaml)
      }'
    cli: cli validate --sot --path grundprinzipien.critical.structure_exceptions_yaml
    test: test_sot.py::test_structure_exceptions_yaml()
  sot_artefacts:
    python: validate_sot_v2_0092() in sot_validator_core.py
    rego: SOT-V2-0092 deny rule in sot_policy.rego
    cli: --rules SOT-V2-0092 flag supported
    test: test_sot_v2_0092() in test_sot_validator.py
- rule_id: SOT-V2-0093
  source: sot_contract_v2.yaml
  source_section: SSID_structure_level3_part1_MAX.md
  source_line: ~250-350
  category: STRUCTURE
  severity: CRITICAL
  enforcement: MUST
  description: Semantic rule for 'grundprinzipien.root_level_ausnahmen'.
  rationale: 'Root Level Exceptions: root_level_ausnahmen ist CRITICAL severity -
    list of permitted root-level exceptions, validates AR001 exceptions, ensures minimal
    deviation from 24-root structure'
  sot_mapping:
    contract: 'schema: sot.schema.json: grundprinzipien.root_level_ausnahmen'
    core: 'contract_validator.py: validate_root_level_exceptions(value)'
    policy: 'opa/sot.rego: deny { not valid_root_exceptions(input.grundprinzipien.root_level_ausnahmen)
      }'
    cli: cli validate --sot --path grundprinzipien.root_level_ausnahmen
    test: test_sot.py::test_root_level_exceptions()
  sot_artefacts:
    python: validate_sot_v2_0093() in sot_validator_core.py
    rego: SOT-V2-0093 deny rule in sot_policy.rego
    cli: --rules SOT-V2-0093 flag supported
    test: test_sot_v2_0093() in test_sot_validator.py
- rule_id: SOT-V2-0094
  source: sot_contract_v2.yaml
  source_section: SSID_structure_level3_part1_MAX.md
  source_line: ~250-350
  category: STRUCTURE
  severity: CRITICAL
  enforcement: MUST
  description: Semantic rule for 'grundprinzipien.verbindliche_root_module'.
  rationale: 'Mandatory Root Modules: verbindliche_root_module ist CRITICAL severity
    - list of 24 mandatory root folders, validates AR001 compliance, ensures complete
    Matrix Architecture implementation'
  sot_mapping:
    contract: 'schema: sot.schema.json: grundprinzipien.verbindliche_root_module'
    core: 'contract_validator.py: validate_mandatory_root_modules(value)'
    policy: 'opa/sot.rego: deny { not valid_root_modules(input.grundprinzipien.verbindliche_root_module)
      }'
    cli: cli validate --sot --path grundprinzipien.verbindliche_root_module
    test: test_sot.py::test_mandatory_root_modules()
  sot_artefacts:
    python: validate_sot_v2_0094() in sot_validator_core.py
    rego: SOT-V2-0094 deny rule in sot_policy.rego
    cli: --rules SOT-V2-0094 flag supported
    test: test_sot_v2_0094() in test_sot_validator.py
- rule_id: SOT-V2-0095
  source: sot_contract_v2.yaml
  source_section: SSID_structure_level3_part1_MAX.md
  source_line: ~350-450
  category: COMPLIANCE
  severity: HIGH
  enforcement: MUST
  description: Semantic rule for 'jurisdictional_compliance'.
  rationale: 'Jurisdictional Compliance: jurisdictional_compliance ist HIGH severity
    - top-level sanctions compliance structure, validates OFAC/EU blacklist enforcement,
    critical for AML/CTF compliance'
  sot_mapping:
    contract: 'schema: sot.schema.json: jurisdictional_compliance'
    core: 'contract_validator.py: validate_jurisdictional_compliance(value)'
    policy: 'opa/sot.rego: deny { not valid_jurisdictional_compliance(input.jurisdictional_compliance)
      }'
    cli: cli validate --sot --path jurisdictional_compliance
    test: test_sot.py::test_jurisdictional_compliance()
  sot_artefacts:
    python: validate_sot_v2_0095() in sot_validator_core.py
    rego: SOT-V2-0095 deny rule in sot_policy.rego
    cli: --rules SOT-V2-0095 flag supported
    test: test_sot_v2_0095() in test_sot_validator.py
- rule_id: SOT-V2-0096
  source: sot_contract_v2.yaml
  source_section: SSID_structure_level3_part1_MAX.md
  source_line: ~350-450
  category: COMPLIANCE
  severity: HIGH
  enforcement: MUST
  description: Semantic rule for 'jurisdictional_compliance.blacklist_jurisdictions'.
  rationale: 'Blacklist Jurisdictions: blacklist_jurisdictions ist HIGH severity -
    list of sanctioned countries, validates JURIS_BL_001-007 compliance, ensures no
    service to OFAC/EU sanctioned regions'
  sot_mapping:
    contract: 'schema: sot.schema.json: jurisdictional_compliance.blacklist_jurisdictions'
    core: 'contract_validator.py: validate_blacklist_jurisdictions(value)'
    policy: 'opa/sot.rego: deny { not valid_blacklist_jurisdictions(input.jurisdictional_compliance.blacklist_jurisdictions)
      }'
    cli: cli validate --sot --path jurisdictional_compliance.blacklist_jurisdictions
    test: test_sot.py::test_blacklist_jurisdictions()
  sot_artefacts:
    python: validate_sot_v2_0096() in sot_validator_core.py
    rego: SOT-V2-0096 deny rule in sot_policy.rego
    cli: --rules SOT-V2-0096 flag supported
    test: test_sot_v2_0096() in test_sot_validator.py
- rule_id: SOT-V2-0097
  source: sot_contract_v2.yaml
  source_section: SSID_structure_level3_part1_MAX.md
  source_line: ~350-450
  category: COMPLIANCE
  severity: HIGH
  enforcement: MUST
  description: Semantic rule for 'jurisdictional_compliance.blacklist_jurisdictions::IR'.
  rationale: 'OFAC Sanctions: IR (Iran) ist HIGH severity - OFAC Comprehensive Sanctions,
    validates JURIS_BL_001 compliance, prohibits all transactions with Iranian entities'
  sot_mapping:
    contract: 'schema: sot.schema.json: jurisdictional_compliance.blacklist_jurisdictions[IR]'
    core: 'contract_validator.py: validate_blacklist_ir(value)'
    policy: 'opa/sot.rego: deny { input.user.country_code == "IR" }'
    cli: cli validate --sot --path jurisdictional_compliance.blacklist_jurisdictions.IR
    test: test_sot.py::test_blacklist_iran()
  sot_artefacts:
    python: validate_sot_v2_0097() in sot_validator_core.py
    rego: SOT-V2-0097 deny rule in sot_policy.rego
    cli: --rules SOT-V2-0097 flag supported
    test: test_sot_v2_0097() in test_sot_validator.py
- rule_id: SOT-V2-0098
  source: sot_contract_v2.yaml
  source_section: SSID_structure_level3_part1_MAX.md
  source_line: ~350-450
  category: COMPLIANCE
  severity: HIGH
  enforcement: MUST
  description: Semantic rule for 'jurisdictional_compliance.blacklist_jurisdictions::KP'.
  rationale: 'OFAC Sanctions: KP (North Korea) ist HIGH severity - OFAC Comprehensive
    Sanctions, validates JURIS_BL_002 compliance, prohibits all transactions with
    North Korean entities'
  sot_mapping:
    contract: 'schema: sot.schema.json: jurisdictional_compliance.blacklist_jurisdictions[KP]'
    core: 'contract_validator.py: validate_blacklist_kp(value)'
    policy: 'opa/sot.rego: deny { input.user.country_code == "KP" }'
    cli: cli validate --sot --path jurisdictional_compliance.blacklist_jurisdictions.KP
    test: test_sot.py::test_blacklist_north_korea()
  sot_artefacts:
    python: validate_sot_v2_0098() in sot_validator_core.py
    rego: SOT-V2-0098 deny rule in sot_policy.rego
    cli: --rules SOT-V2-0098 flag supported
    test: test_sot_v2_0098() in test_sot_validator.py
- rule_id: SOT-V2-0099
  source: sot_contract_v2.yaml
  source_section: SSID_structure_level3_part1_MAX.md
  source_line: ~350-450
  category: COMPLIANCE
  severity: HIGH
  enforcement: MUST
  description: Semantic rule for 'jurisdictional_compliance.blacklist_jurisdictions::SY'.
  rationale: 'OFAC Sanctions: SY (Syria) ist HIGH severity - OFAC Comprehensive Sanctions,
    validates JURIS_BL_003 compliance, prohibits transactions with Syrian government
    entities'
  sot_mapping:
    contract: 'schema: sot.schema.json: jurisdictional_compliance.blacklist_jurisdictions[SY]'
    core: 'contract_validator.py: validate_blacklist_sy(value)'
    policy: 'opa/sot.rego: deny { input.user.country_code == "SY" }'
    cli: cli validate --sot --path jurisdictional_compliance.blacklist_jurisdictions.SY
    test: test_sot.py::test_blacklist_syria()
  sot_artefacts:
    python: validate_sot_v2_0099() in sot_validator_core.py
    rego: SOT-V2-0099 deny rule in sot_policy.rego
    cli: --rules SOT-V2-0099 flag supported
    test: test_sot_v2_0099() in test_sot_validator.py
- rule_id: SOT-V2-0100
  source: sot_contract_v2.yaml
  source_section: SSID_structure_level3_part1_MAX.md
  source_line: ~350-450
  category: COMPLIANCE
  severity: HIGH
  enforcement: MUST
  description: Semantic rule for 'jurisdictional_compliance.blacklist_jurisdictions::CU'.
  rationale: 'OFAC Sanctions: CU (Cuba) ist HIGH severity - OFAC Sanctions Limited,
    validates JURIS_BL_004 compliance, restricts transactions with Cuban government
    entities'
  sot_mapping:
    contract: 'schema: sot.schema.json: jurisdictional_compliance.blacklist_jurisdictions[CU]'
    core: 'contract_validator.py: validate_blacklist_cu(value)'
    policy: 'opa/sot.rego: deny { input.user.country_code == "CU" }'
    cli: cli validate --sot --path jurisdictional_compliance.blacklist_jurisdictions.CU
    test: test_sot.py::test_blacklist_cuba()
  sot_artefacts:
    python: validate_sot_v2_0100() in sot_validator_core.py
    rego: SOT-V2-0100 deny rule in sot_policy.rego
    cli: --rules SOT-V2-0100 flag supported
    test: test_sot_v2_0100() in test_sot_validator.py
- rule_id: SOT-V2-0101
  source: sot_contract_v2.yaml
  source_section: SSID_structure_level3_part1_MAX.md
  source_line: ~350-450
  category: COMPLIANCE
  severity: HIGH
  enforcement: MUST
  description: Semantic rule for 'jurisdictional_compliance.compliance_basis'.
  rationale: 'Compliance Legal Basis: compliance_basis ist HIGH severity - legal framework
    for sanctions compliance (OFAC, EU 5AMLD), validates regulatory foundation, ensures
    documented compliance rationale'
  sot_mapping:
    contract: 'schema: sot.schema.json: jurisdictional_compliance.compliance_basis'
    core: 'contract_validator.py: validate_compliance_basis(value)'
    policy: 'opa/sot.rego: deny { not valid_compliance_basis(input.jurisdictional_compliance.compliance_basis)
      }'
    cli: cli validate --sot --path jurisdictional_compliance.compliance_basis
    test: test_sot.py::test_compliance_basis()
  sot_artefacts:
    python: validate_sot_v2_0101() in sot_validator_core.py
    rego: SOT-V2-0101 deny rule in sot_policy.rego
    cli: --rules SOT-V2-0101 flag supported
    test: test_sot_v2_0101() in test_sot_validator.py
- rule_id: SOT-V2-0102
  source: sot_contract_v2.yaml
  source_section: SSID_structure_level3_part1_MAX.md
  source_line: ~350-450
  category: COMPLIANCE
  severity: HIGH
  enforcement: MUST
  description: Semantic rule for 'jurisdictional_compliance.excluded_entities'.
  rationale: 'Entity Exclusions: excluded_entities ist HIGH severity - list of sanctioned
    entities beyond country-level blacklist, validates OFAC SDN/EU designated persons,
    ensures entity-level compliance'
  sot_mapping:
    contract: 'schema: sot.schema.json: jurisdictional_compliance.excluded_entities'
    core: 'contract_validator.py: validate_excluded_entities(value)'
    policy: 'opa/sot.rego: deny { not valid_excluded_entities(input.jurisdictional_compliance.excluded_entities)
      }'
    cli: cli validate --sot --path jurisdictional_compliance.excluded_entities
    test: test_sot.py::test_excluded_entities()
  sot_artefacts:
    python: validate_sot_v2_0102() in sot_validator_core.py
    rego: SOT-V2-0102 deny rule in sot_policy.rego
    cli: --rules SOT-V2-0102 flag supported
    test: test_sot_v2_0102() in test_sot_validator.py
- rule_id: SOT-V2-0103
  source: sot_contract_v2.yaml
  source_section: SSID_structure_level3_part1_MAX.md
  source_line: ~350-450
  category: COMPLIANCE
  severity: HIGH
  enforcement: MUST
  description: Semantic rule for 'jurisdictional_compliance.excluded_entities::Belarus_designated_entities'.
  rationale: 'Belarus Sanctions: Belarus designated entities ist HIGH severity - EU
    sanctions on Lukashenko regime, validates entity-level exclusions, ensures compliance
    with EU restrictive measures'
  sot_mapping:
    contract: 'schema: sot.schema.json: jurisdictional_compliance.excluded_entities.belarus'
    core: 'contract_validator.py: validate_belarus_entities(value)'
    policy: 'opa/sot.rego: deny { belarus_designated_entity(input.user.entity_id)
      }'
    cli: cli validate --sot --path jurisdictional_compliance.excluded_entities.belarus
    test: test_sot.py::test_belarus_designated_entities()
  sot_artefacts:
    python: validate_sot_v2_0103() in sot_validator_core.py
    rego: SOT-V2-0103 deny rule in sot_policy.rego
    cli: --rules SOT-V2-0103 flag supported
    test: test_sot_v2_0103() in test_sot_validator.py
- rule_id: SOT-V2-0104
  source: sot_contract_v2.yaml
  source_section: SSID_structure_level3_part1_MAX.md
  source_line: ~350-450
  category: COMPLIANCE
  severity: HIGH
  enforcement: MUST
  description: Semantic rule for 'jurisdictional_compliance.excluded_entities::RU_designated_entities'.
  rationale: 'Russia Sanctions: RU designated entities ist HIGH severity - OFAC/EU
    sanctions on Russian oligarchs and entities, validates Ukraine conflict sanctions,
    ensures compliance with ongoing restrictive measures'
  sot_mapping:
    contract: 'schema: sot.schema.json: jurisdictional_compliance.excluded_entities.russia'
    core: 'contract_validator.py: validate_russia_entities(value)'
    policy: 'opa/sot.rego: deny { russian_designated_entity(input.user.entity_id)
      }'
    cli: cli validate --sot --path jurisdictional_compliance.excluded_entities.russia
    test: test_sot.py::test_russia_designated_entities()
  sot_artefacts:
    python: validate_sot_v2_0104() in sot_validator_core.py
    rego: SOT-V2-0104 deny rule in sot_policy.rego
    cli: --rules SOT-V2-0104 flag supported
    test: test_sot_v2_0104() in test_sot_validator.py
- rule_id: SOT-V2-0105
  source: sot_contract_v2.yaml
  source_section: SSID_structure_level3_part1_MAX.md
  source_line: ~350-450
  category: COMPLIANCE
  severity: HIGH
  enforcement: MUST
  description: Semantic rule for 'jurisdictional_compliance.excluded_entities::Venezuela_government_entities'.
  rationale: 'Venezuela Sanctions: Venezuela government entities ist HIGH severity
    - OFAC sectoral sanctions on Maduro regime, validates government entity exclusions,
    ensures compliance with Venezuela sanctions program'
  sot_mapping:
    contract: 'schema: sot.schema.json: jurisdictional_compliance.excluded_entities.venezuela'
    core: 'contract_validator.py: validate_venezuela_entities(value)'
    policy: 'opa/sot.rego: deny { venezuela_government_entity(input.user.entity_id)
      }'
    cli: cli validate --sot --path jurisdictional_compliance.excluded_entities.venezuela
    test: test_sot.py::test_venezuela_government_entities()
  sot_artefacts:
    python: validate_sot_v2_0105() in sot_validator_core.py
    rego: SOT-V2-0105 deny rule in sot_policy.rego
    cli: --rules SOT-V2-0105 flag supported
    test: test_sot_v2_0105() in test_sot_validator.py
- rule_id: SOT-V2-0106
  source: sot_contract_v2.yaml
  source_section: SSID_structure_level3_part1_MAX.md
  source_line: ~350-450
  category: COMPLIANCE
  severity: HIGH
  enforcement: MUST
  description: Semantic rule for 'jurisdictional_compliance.excluded_markets'.
  rationale: 'Market Exclusions: excluded_markets ist HIGH severity - countries excluded
    for business/regulatory reasons beyond sanctions, validates market access restrictions,
    ensures strategic market limitation'
  sot_mapping:
    contract: 'schema: sot.schema.json: jurisdictional_compliance.excluded_markets'
    core: 'contract_validator.py: validate_excluded_markets(value)'
    policy: 'opa/sot.rego: deny { not valid_excluded_markets(input.jurisdictional_compliance.excluded_markets)
      }'
    cli: cli validate --sot --path jurisdictional_compliance.excluded_markets
    test: test_sot.py::test_excluded_markets()
  sot_artefacts:
    python: validate_sot_v2_0106() in sot_validator_core.py
    rego: SOT-V2-0106 deny rule in sot_policy.rego
    cli: --rules SOT-V2-0106 flag supported
    test: test_sot_v2_0106() in test_sot_validator.py
- rule_id: SOT-V2-0107
  source: sot_contract_v2.yaml
  source_section: SSID_structure_level3_part1_MAX.md
  source_line: ~350-450
  category: COMPLIANCE
  severity: HIGH
  enforcement: MUST
  description: Semantic rule for 'jurisdictional_compliance.excluded_markets::India'.
  rationale: 'India Market Exclusion: India excluded market ist HIGH severity - regulatory
    complexity and data localization requirements, validates strategic market decision,
    ensures no Indian user onboarding'
  sot_mapping:
    contract: 'schema: sot.schema.json: jurisdictional_compliance.excluded_markets.india'
    core: 'contract_validator.py: validate_india_exclusion(value)'
    policy: 'opa/sot.rego: deny { input.user.country_code == "IN" }'
    cli: cli validate --sot --path jurisdictional_compliance.excluded_markets.india
    test: test_sot.py::test_india_market_exclusion()
  sot_artefacts:
    python: validate_sot_v2_0107() in sot_validator_core.py
    rego: SOT-V2-0107 deny rule in sot_policy.rego
    cli: --rules SOT-V2-0107 flag supported
    test: test_sot_v2_0107() in test_sot_validator.py
- rule_id: SOT-V2-0108
  source: sot_contract_v2.yaml
  source_section: SSID_structure_level3_part1_MAX.md
  source_line: ~350-450
  category: COMPLIANCE
  severity: HIGH
  enforcement: MUST
  description: Semantic rule for 'jurisdictional_compliance.excluded_markets::Myanmar'.
  rationale: 'Myanmar Market Exclusion: Myanmar excluded market ist HIGH severity
    - political instability and military coup sanctions, validates strategic market
    decision, ensures no Myanmar user onboarding'
  sot_mapping:
    contract: 'schema: sot.schema.json: jurisdictional_compliance.excluded_markets.myanmar'
    core: 'contract_validator.py: validate_myanmar_exclusion(value)'
    policy: 'opa/sot.rego: deny { input.user.country_code == "MM" }'
    cli: cli validate --sot --path jurisdictional_compliance.excluded_markets.myanmar
    test: test_sot.py::test_myanmar_market_exclusion()
  sot_artefacts:
    python: validate_sot_v2_0108() in sot_validator_core.py
    rego: SOT-V2-0108 deny rule in sot_policy.rego
    cli: --rules SOT-V2-0108 flag supported
    test: test_sot_v2_0108() in test_sot_validator.py
- rule_id: SOT-V2-0109
  source: sot_contract_v2.yaml
  source_section: SSID_structure_level3_part1_MAX.md
  source_line: ~350-450
  category: COMPLIANCE
  severity: HIGH
  enforcement: MUST
  description: Semantic rule for 'jurisdictional_compliance.excluded_markets::Pakistan'.
  rationale: 'Pakistan Market Exclusion: Pakistan excluded market ist HIGH severity
    - FATF grey list and regulatory uncertainty, validates strategic market decision,
    ensures no Pakistani user onboarding'
  sot_mapping:
    contract: 'schema: sot.schema.json: jurisdictional_compliance.excluded_markets.pakistan'
    core: 'contract_validator.py: validate_pakistan_exclusion(value)'
    policy: 'opa/sot.rego: deny { input.user.country_code == "PK" }'
    cli: cli validate --sot --path jurisdictional_compliance.excluded_markets.pakistan
    test: test_sot.py::test_pakistan_market_exclusion()
  sot_artefacts:
    python: validate_sot_v2_0109() in sot_validator_core.py
    rego: SOT-V2-0109 deny rule in sot_policy.rego
    cli: --rules SOT-V2-0109 flag supported
    test: test_sot_v2_0109() in test_sot_validator.py
- rule_id: SOT-V2-0110
  source: sot_contract_v2.yaml
  source_section: SSID_structure_level3_part1_MAX.md
  source_line: ~350-450
  category: COMPLIANCE
  severity: HIGH
  enforcement: MUST
  description: Semantic rule for 'jurisdictional_compliance.reference'.
  rationale: 'Compliance Reference: reference field ist HIGH severity - links to authoritative
    compliance documentation, validates traceability requirement, ensures regulatory
    audit trail'
  sot_mapping:
    contract: 'schema: sot.schema.json: jurisdictional_compliance.reference'
    core: 'contract_validator.py: validate_compliance_reference(value)'
    policy: 'opa/sot.rego: deny { not valid_reference(input.jurisdictional_compliance.reference)
      }'
    cli: cli validate --sot --path jurisdictional_compliance.reference
    test: test_sot.py::test_compliance_reference()
  sot_artefacts:
    python: validate_sot_v2_0110() in sot_validator_core.py
    rego: SOT-V2-0110 deny rule in sot_policy.rego
    cli: --rules SOT-V2-0110 flag supported
    test: test_sot_v2_0110() in test_sot_validator.py
- rule_id: SOT-V2-0111
  source: sot_contract_v2.yaml
  source_section: SSID_structure_level3_part1_MAX.md
  source_line: ~350-450
  category: COMPLIANCE
  severity: HIGH
  enforcement: MUST
  description: Semantic rule for 'jurisdictional_compliance.regulatory_exemptions'.
  rationale: 'Regulatory Exemptions: regulatory_exemptions field ist HIGH severity
    - documents applicable legal exemptions and safe harbors, validates legal strategy,
    ensures compliance team awareness'
  sot_mapping:
    contract: 'schema: sot.schema.json: jurisdictional_compliance.regulatory_exemptions'
    core: 'contract_validator.py: validate_regulatory_exemptions(value)'
    policy: 'opa/sot.rego: deny { not valid_exemptions(input.jurisdictional_compliance.regulatory_exemptions)
      }'
    cli: cli validate --sot --path jurisdictional_compliance.regulatory_exemptions
    test: test_sot.py::test_regulatory_exemptions()
  sot_artefacts:
    python: validate_sot_v2_0111() in sot_validator_core.py
    rego: SOT-V2-0111 deny rule in sot_policy.rego
    cli: --rules SOT-V2-0111 flag supported
    test: test_sot_v2_0111() in test_sot_validator.py
- rule_id: SOT-V2-0112
  source: sot_contract_v2.yaml
  source_section: SSID_structure_level3_part1_MAX.md
  source_line: ~450-550
  category: COMPLIANCE
  severity: HIGH
  enforcement: MUST
  description: Semantic rule for 'legal_safe_harbor'.
  rationale: 'Legal Safe Harbor: legal_safe_harbor ist HIGH severity - defines token
    classification safeguards to avoid securities designation, validates Howey Test
    avoidance strategy, ensures regulatory compliance architecture'
  sot_mapping:
    contract: 'schema: sot.schema.json: legal_safe_harbor'
    core: 'contract_validator.py: validate_legal_safe_harbor(value)'
    policy: 'opa/sot.rego: deny { not valid_safe_harbor(input.legal_safe_harbor) }'
    cli: cli validate --sot --path legal_safe_harbor
    test: test_sot.py::test_legal_safe_harbor()
  sot_artefacts:
    python: validate_sot_v2_0112() in sot_validator_core.py
    rego: SOT-V2-0112 deny rule in sot_policy.rego
    cli: --rules SOT-V2-0112 flag supported
    test: test_sot_v2_0112() in test_sot_validator.py
- rule_id: SOT-V2-0113
  source: sot_contract_v2.yaml
  source_section: SSID_structure_level3_part1_MAX.md
  source_line: ~450-550
  category: COMPLIANCE
  severity: HIGH
  enforcement: MUST
  description: Semantic rule for 'legal_safe_harbor.admin_controls'.
  rationale: 'Admin Controls Safe Harbor: admin_controls ist HIGH severity - documents
    absence of centralized admin control, validates decentralization for Howey Test,
    ensures no "efforts of others" element'
  sot_mapping:
    contract: 'schema: sot.schema.json: legal_safe_harbor.admin_controls'
    core: 'contract_validator.py: validate_admin_controls(value)'
    policy: 'opa/sot.rego: deny { not decentralized_admin(input.legal_safe_harbor.admin_controls)
      }'
    cli: cli validate --sot --path legal_safe_harbor.admin_controls
    test: test_sot.py::test_admin_controls_safe_harbor()
  sot_artefacts:
    python: validate_sot_v2_0113() in sot_validator_core.py
    rego: SOT-V2-0113 deny rule in sot_policy.rego
    cli: --rules SOT-V2-0113 flag supported
    test: test_sot_v2_0113() in test_sot_validator.py
- rule_id: SOT-V2-0114
  source: sot_contract_v2.yaml
  source_section: SSID_structure_level3_part1_MAX.md
  source_line: ~450-550
  category: COMPLIANCE
  severity: HIGH
  enforcement: MUST
  description: Semantic rule for 'legal_safe_harbor.e_money_token'.
  rationale: 'E-Money Token Safe Harbor: e_money_token ist HIGH severity - ensures
    token is NOT classified as e-money under EU 5AMLD, validates utility token design,
    ensures no regulatory capture as payment instrument'
  sot_mapping:
    contract: 'schema: sot.schema.json: legal_safe_harbor.e_money_token'
    core: 'contract_validator.py: validate_e_money_token(value)'
    policy: 'opa/sot.rego: deny { is_e_money_token(input.legal_safe_harbor.e_money_token)
      }'
    cli: cli validate --sot --path legal_safe_harbor.e_money_token
    test: test_sot.py::test_e_money_token_safe_harbor()
  sot_artefacts:
    python: validate_sot_v2_0114() in sot_validator_core.py
    rego: SOT-V2-0114 deny rule in sot_policy.rego
    cli: --rules SOT-V2-0114 flag supported
    test: test_sot_v2_0114() in test_sot_validator.py
- rule_id: SOT-V2-0115
  source: sot_contract_v2.yaml
  source_section: SSID_structure_level3_part1_MAX.md
  source_line: ~450-550
  category: COMPLIANCE
  severity: HIGH
  enforcement: MUST
  description: Semantic rule for 'legal_safe_harbor.investment_contract'.
  rationale: 'Investment Contract Safe Harbor: investment_contract ist HIGH severity
    - ensures token is NOT an investment contract under Howey Test, validates utility-only
    design, ensures no "expectation of profits" element'
  sot_mapping:
    contract: 'schema: sot.schema.json: legal_safe_harbor.investment_contract'
    core: 'contract_validator.py: validate_investment_contract(value)'
    policy: 'opa/sot.rego: deny { is_investment_contract(input.legal_safe_harbor.investment_contract)
      }'
    cli: cli validate --sot --path legal_safe_harbor.investment_contract
    test: test_sot.py::test_investment_contract_safe_harbor()
  sot_artefacts:
    python: validate_sot_v2_0115() in sot_validator_core.py
    rego: SOT-V2-0115 deny rule in sot_policy.rego
    cli: --rules SOT-V2-0115 flag supported
    test: test_sot_v2_0115() in test_sot_validator.py
- rule_id: SOT-V2-0116
  source: sot_contract_v2.yaml
  source_section: SSID_structure_level3_part1_MAX.md
  source_line: ~450-550
  category: COMPLIANCE
  severity: HIGH
  enforcement: MUST
  description: Semantic rule for 'legal_safe_harbor.passive_income'.
  rationale: 'Passive Income Safe Harbor: passive_income ist HIGH severity - ensures
    token does NOT generate passive income, validates active utility requirement,
    ensures no "profits from efforts of others"'
  sot_mapping:
    contract: 'schema: sot.schema.json: legal_safe_harbor.passive_income'
    core: 'contract_validator.py: validate_passive_income(value)'
    policy: 'opa/sot.rego: deny { generates_passive_income(input.legal_safe_harbor.passive_income)
      }'
    cli: cli validate --sot --path legal_safe_harbor.passive_income
    test: test_sot.py::test_passive_income_safe_harbor()
  sot_artefacts:
    python: validate_sot_v2_0116() in sot_validator_core.py
    rego: SOT-V2-0116 deny rule in sot_policy.rego
    cli: --rules SOT-V2-0116 flag supported
    test: test_sot_v2_0116() in test_sot_validator.py
- rule_id: SOT-V2-0117
  source: sot_contract_v2.yaml
  source_section: SSID_structure_level3_part1_MAX.md
  source_line: ~450-550
  category: COMPLIANCE
  severity: HIGH
  enforcement: MUST
  description: Semantic rule for 'legal_safe_harbor.redemption_rights'.
  rationale: 'Redemption Rights Safe Harbor: redemption_rights ist HIGH severity -
    ensures no guaranteed redemption rights, validates non-security status, ensures
    market-based pricing only'
  sot_mapping:
    contract: 'schema: sot.schema.json: legal_safe_harbor.redemption_rights'
    core: 'contract_validator.py: validate_redemption_rights(value)'
    policy: 'opa/sot.rego: deny { has_redemption_rights(input.legal_safe_harbor.redemption_rights)
      }'
    cli: cli validate --sot --path legal_safe_harbor.redemption_rights
    test: test_sot.py::test_redemption_rights_safe_harbor()
  sot_artefacts:
    python: validate_sot_v2_0117() in sot_validator_core.py
    rego: SOT-V2-0117 deny rule in sot_policy.rego
    cli: --rules SOT-V2-0117 flag supported
    test: test_sot_v2_0117() in test_sot_validator.py
- rule_id: SOT-V2-0118
  source: sot_contract_v2.yaml
  source_section: SSID_structure_level3_part1_MAX.md
  source_line: ~450-550
  category: COMPLIANCE
  severity: HIGH
  enforcement: MUST
  description: Semantic rule for 'legal_safe_harbor.security_token'.
  rationale: 'Security Token Safe Harbor: security_token ist HIGH severity - ensures
    token is NOT a security, validates utility-only classification, ensures SEC/BaFin
    compliance'
  sot_mapping:
    contract: 'schema: sot.schema.json: legal_safe_harbor.security_token'
    core: 'contract_validator.py: validate_security_token(value)'
    policy: 'opa/sot.rego: deny { is_security_token(input.legal_safe_harbor.security_token)
      }'
    cli: cli validate --sot --path legal_safe_harbor.security_token
    test: test_sot.py::test_security_token_safe_harbor()
  sot_artefacts:
    python: validate_sot_v2_0118() in sot_validator_core.py
    rego: SOT-V2-0118 deny rule in sot_policy.rego
    cli: --rules SOT-V2-0118 flag supported
    test: test_sot_v2_0118() in test_sot_validator.py
- rule_id: SOT-V2-0119
  source: sot_contract_v2.yaml
  source_section: SSID_structure_level3_part1_MAX.md
  source_line: ~450-550
  category: COMPLIANCE
  severity: HIGH
  enforcement: MUST
  description: Semantic rule for 'legal_safe_harbor.stablecoin'.
  rationale: 'Stablecoin Safe Harbor: stablecoin ist HIGH severity - ensures token
    is NOT a stablecoin, validates non-pegged design, ensures no MiCA stablecoin regulation
    applicability'
  sot_mapping:
    contract: 'schema: sot.schema.json: legal_safe_harbor.stablecoin'
    core: 'contract_validator.py: validate_stablecoin(value)'
    policy: 'opa/sot.rego: deny { is_stablecoin(input.legal_safe_harbor.stablecoin)
      }'
    cli: cli validate --sot --path legal_safe_harbor.stablecoin
    test: test_sot.py::test_stablecoin_safe_harbor()
  sot_artefacts:
    python: validate_sot_v2_0119() in sot_validator_core.py
    rego: SOT-V2-0119 deny rule in sot_policy.rego
    cli: --rules SOT-V2-0119 flag supported
    test: test_sot_v2_0119() in test_sot_validator.py
- rule_id: SOT-V2-0120
  source: sot_contract_v2.yaml
  source_section: SSID_structure_level3_part1_MAX.md
  source_line: ~450-550
  category: COMPLIANCE
  severity: HIGH
  enforcement: MUST
  description: Semantic rule for 'legal_safe_harbor.upgrade_mechanism'.
  rationale: 'Upgrade Mechanism Safe Harbor: upgrade_mechanism ist HIGH severity -
    documents decentralized upgrade governance, validates non-custodial control, ensures
    DAO-based protocol evolution'
  sot_mapping:
    contract: 'schema: sot.schema.json: legal_safe_harbor.upgrade_mechanism'
    core: 'contract_validator.py: validate_upgrade_mechanism(value)'
    policy: 'opa/sot.rego: deny { centralized_upgrades(input.legal_safe_harbor.upgrade_mechanism)
      }'
    cli: cli validate --sot --path legal_safe_harbor.upgrade_mechanism
    test: test_sot.py::test_upgrade_mechanism_safe_harbor()
  sot_artefacts:
    python: validate_sot_v2_0120() in sot_validator_core.py
    rego: SOT-V2-0120 deny rule in sot_policy.rego
    cli: --rules SOT-V2-0120 flag supported
    test: test_sot_v2_0120() in test_sot_validator.py
- rule_id: SOT-V2-0121
  source: sot_contract_v2.yaml
  source_section: SSID_structure_level3_part1_MAX.md
  source_line: ~450-550
  category: COMPLIANCE
  severity: HIGH
  enforcement: MUST
  description: Semantic rule for 'legal_safe_harbor.yield_bearing'.
  rationale: 'Yield Bearing Safe Harbor: yield_bearing ist HIGH severity - ensures
    token does NOT bear automatic yield, validates non-interest-bearing design, ensures
    no "expectation of profits" element'
  sot_mapping:
    contract: 'schema: sot.schema.json: legal_safe_harbor.yield_bearing'
    core: 'contract_validator.py: validate_yield_bearing(value)'
    policy: 'opa/sot.rego: deny { is_yield_bearing(input.legal_safe_harbor.yield_bearing)
      }'
    cli: cli validate --sot --path legal_safe_harbor.yield_bearing
    test: test_sot.py::test_yield_bearing_safe_harbor()
  sot_artefacts:
    python: validate_sot_v2_0121() in sot_validator_core.py
    rego: SOT-V2-0121 deny rule in sot_policy.rego
    cli: --rules SOT-V2-0121 flag supported
    test: test_sot_v2_0121() in test_sot_validator.py
- rule_id: SOT-V2-0122
  source: sot_contract_v2.yaml
  source_section: SSID_structure_level3_part1_MAX.md
  source_line: ~550-650
  category: GENERAL
  severity: MEDIUM
  enforcement: MUST
  description: Semantic rule for 'primary_utilities'.
  rationale: 'Primary Utilities: primary_utilities ist MEDIUM severity - defines core
    token utilities that provide actual value, validates utility token classification,
    ensures non-speculative use cases'
  sot_mapping:
    contract: 'schema: sot.schema.json: primary_utilities'
    core: 'contract_validator.py: validate_primary_utilities(value)'
    policy: 'opa/sot.rego: deny { not has_primary_utilities(input.primary_utilities)
      }'
    cli: cli validate --sot --path primary_utilities
    test: test_sot.py::test_primary_utilities()
  sot_artefacts:
    python: validate_sot_v2_0122() in sot_validator_core.py
    rego: SOT-V2-0122 deny rule in sot_policy.rego
    cli: --rules SOT-V2-0122 flag supported
    test: test_sot_v2_0122() in test_sot_validator.py
- rule_id: SOT-V2-0123
  source: sot_contract_v2.yaml
  source_section: SSID_structure_level3_part1_MAX.md
  source_line: ~550-650
  category: GENERAL
  severity: MEDIUM
  enforcement: MUST
  description: Semantic rule for 'primary_utilities.ecosystem_rewards'.
  rationale: 'Ecosystem Rewards: ecosystem_rewards ist MEDIUM severity - defines reward
    distribution mechanisms, validates active participation incentives, ensures value
    accrual for contributors'
  sot_mapping:
    contract: 'schema: sot.schema.json: primary_utilities.ecosystem_rewards'
    core: 'contract_validator.py: validate_ecosystem_rewards(value)'
    policy: 'opa/sot.rego: deny { not valid_ecosystem_rewards(input.primary_utilities.ecosystem_rewards)
      }'
    cli: cli validate --sot --path primary_utilities.ecosystem_rewards
    test: test_sot.py::test_ecosystem_rewards()
  sot_artefacts:
    python: validate_sot_v2_0123() in sot_validator_core.py
    rego: SOT-V2-0123 deny rule in sot_policy.rego
    cli: --rules SOT-V2-0123 flag supported
    test: test_sot_v2_0123() in test_sot_validator.py
- rule_id: SOT-V2-0124
  source: sot_contract_v2.yaml
  source_section: SSID_structure_level3_part1_MAX.md
  source_line: ~550-650
  category: GENERAL
  severity: MEDIUM
  enforcement: MUST
  description: Semantic rule for 'primary_utilities.ecosystem_rewards.description'.
  rationale: 'Rewards Description: description field ist MEDIUM severity - documents
    reward mechanism purpose, validates transparency requirement, ensures clear communication
    to users'
  sot_mapping:
    contract: 'schema: sot.schema.json: primary_utilities.ecosystem_rewards.description'
    core: 'contract_validator.py: validate_rewards_description(value)'
    policy: 'opa/sot.rego: deny { not valid_description(input.primary_utilities.ecosystem_rewards.description)
      }'
    cli: cli validate --sot --path primary_utilities.ecosystem_rewards.description
    test: test_sot.py::test_rewards_description()
  sot_artefacts:
    python: validate_sot_v2_0124() in sot_validator_core.py
    rego: SOT-V2-0124 deny rule in sot_policy.rego
    cli: --rules SOT-V2-0124 flag supported
    test: test_sot_v2_0124() in test_sot_validator.py
- rule_id: SOT-V2-0125
  source: sot_contract_v2.yaml
  source_section: SSID_structure_level3_part1_MAX.md
  source_line: ~550-650
  category: GENERAL
  severity: MEDIUM
  enforcement: MUST
  description: Semantic rule for 'primary_utilities.ecosystem_rewards.distribution_method'.
  rationale: 'Distribution Method: distribution_method ist MEDIUM severity - defines
    how rewards are distributed, validates fair allocation mechanism, ensures transparent
    reward delivery'
  sot_mapping:
    contract: 'schema: sot.schema.json: primary_utilities.ecosystem_rewards.distribution_method'
    core: 'contract_validator.py: validate_distribution_method(value)'
    policy: 'opa/sot.rego: deny { not valid_distribution(input.primary_utilities.ecosystem_rewards.distribution_method)
      }'
    cli: cli validate --sot --path primary_utilities.ecosystem_rewards.distribution_method
    test: test_sot.py::test_distribution_method()
  sot_artefacts:
    python: validate_sot_v2_0125() in sot_validator_core.py
    rego: SOT-V2-0125 deny rule in sot_policy.rego
    cli: --rules SOT-V2-0125 flag supported
    test: test_sot_v2_0125() in test_sot_validator.py
- rule_id: SOT-V2-0126
  source: sot_contract_v2.yaml
  source_section: SSID_structure_level3_part1_MAX.md
  source_line: ~550-650
  category: GENERAL
  severity: MEDIUM
  enforcement: MUST
  description: Semantic rule for 'primary_utilities.ecosystem_rewards.reward_pools'.
  rationale: 'Reward Pools: reward_pools ist MEDIUM severity - defines separate allocation
    pools for different contributor types, validates structured distribution, ensures
    fair allocation across ecosystem roles'
  sot_mapping:
    contract: 'schema: sot.schema.json: primary_utilities.ecosystem_rewards.reward_pools'
    core: 'contract_validator.py: validate_reward_pools(value)'
    policy: 'opa/sot.rego: deny { not valid_reward_pools(input.primary_utilities.ecosystem_rewards.reward_pools)
      }'
    cli: cli validate --sot --path primary_utilities.ecosystem_rewards.reward_pools
    test: test_sot.py::test_reward_pools()
  sot_artefacts:
    python: validate_sot_v2_0126() in sot_validator_core.py
    rego: SOT-V2-0126 deny rule in sot_policy.rego
    cli: --rules SOT-V2-0126 flag supported
    test: test_sot_v2_0126() in test_sot_validator.py
- rule_id: SOT-V2-0127
  source: sot_contract_v2.yaml
  source_section: SSID_structure_level3_part1_MAX.md
  source_line: ~550-650
  category: GENERAL
  severity: MEDIUM
  enforcement: MUST
  description: Semantic rule for 'primary_utilities.ecosystem_rewards.reward_pools::community'.
  rationale: 'Community Pool: community reward pool ist MEDIUM severity - allocates
    rewards to community contributors, validates grassroots participation incentives,
    ensures community value recognition'
  sot_mapping:
    contract: 'schema: sot.schema.json: primary_utilities.ecosystem_rewards.reward_pools.community'
    core: 'contract_validator.py: validate_community_pool(value)'
    policy: 'opa/sot.rego: deny { not valid_community_pool(input.primary_utilities.ecosystem_rewards.reward_pools.community)
      }'
    cli: cli validate --sot --path primary_utilities.ecosystem_rewards.reward_pools.community
    test: test_sot.py::test_community_reward_pool()
  sot_artefacts:
    python: validate_sot_v2_0127() in sot_validator_core.py
    rego: SOT-V2-0127 deny rule in sot_policy.rego
    cli: --rules SOT-V2-0127 flag supported
    test: test_sot_v2_0127() in test_sot_validator.py
- rule_id: SOT-V2-0128
  source: sot_contract_v2.yaml
  source_section: SSID_structure_level3_part1_MAX.md
  source_line: ~550-650
  category: GENERAL
  severity: MEDIUM
  enforcement: MUST
  description: Semantic rule for 'primary_utilities.ecosystem_rewards.reward_pools::development'.
  rationale: 'Development Pool: development reward pool ist MEDIUM severity - allocates
    rewards to core developers and maintainers, validates contributor incentives,
    ensures sustainable development funding'
  sot_mapping:
    contract: 'schema: sot.schema.json: primary_utilities.ecosystem_rewards.reward_pools.development'
    core: 'contract_validator.py: validate_development_pool(value)'
    policy: 'opa/sot.rego: deny { not valid_development_pool(input.primary_utilities.ecosystem_rewards.reward_pools.development)
      }'
    cli: cli validate --sot --path primary_utilities.ecosystem_rewards.reward_pools.development
    test: test_sot.py::test_development_reward_pool()
  sot_artefacts:
    python: validate_sot_v2_0128() in sot_validator_core.py
    rego: SOT-V2-0128 deny rule in sot_policy.rego
    cli: --rules SOT-V2-0128 flag supported
    test: test_sot_v2_0128() in test_sot_validator.py
- rule_id: SOT-V2-0129
  source: sot_contract_v2.yaml
  source_section: SSID_structure_level3_part1_MAX.md
  source_line: ~550-650
  category: GENERAL
  severity: MEDIUM
  enforcement: MUST
  description: Semantic rule for 'primary_utilities.ecosystem_rewards.reward_pools::validation'.
  rationale: 'Validation Pool: validation reward pool ist MEDIUM severity - allocates
    rewards to validators and node operators, validates network security incentives,
    ensures decentralized infrastructure support'
  sot_mapping:
    contract: 'schema: sot.schema.json: primary_utilities.ecosystem_rewards.reward_pools.validation'
    core: 'contract_validator.py: validate_validation_pool(value)'
    policy: 'opa/sot.rego: deny { not valid_validation_pool(input.primary_utilities.ecosystem_rewards.reward_pools.validation)
      }'
    cli: cli validate --sot --path primary_utilities.ecosystem_rewards.reward_pools.validation
    test: test_sot.py::test_validation_reward_pool()
  sot_artefacts:
    python: validate_sot_v2_0129() in sot_validator_core.py
    rego: SOT-V2-0129 deny rule in sot_policy.rego
    cli: --rules SOT-V2-0129 flag supported
    test: test_sot_v2_0129() in test_sot_validator.py
- rule_id: SOT-V2-0130
  source: sot_contract_v2.yaml
  source_section: SSID_structure_level3_part1_MAX.md
  source_line: ~550-650
  category: GENERAL
  severity: MEDIUM
  enforcement: MUST
  description: Semantic rule for 'primary_utilities.governance_participation'.
  rationale: 'Governance Participation: governance_participation ist MEDIUM severity
    - defines voting and proposal rights, validates DAO utility, ensures decentralized
    decision-making access'
  sot_mapping:
    contract: 'schema: sot.schema.json: primary_utilities.governance_participation'
    core: 'contract_validator.py: validate_governance_participation(value)'
    policy: 'opa/sot.rego: deny { not valid_governance_participation(input.primary_utilities.governance_participation)
      }'
    cli: cli validate --sot --path primary_utilities.governance_participation
    test: test_sot.py::test_governance_participation()
  sot_artefacts:
    python: validate_sot_v2_0130() in sot_validator_core.py
    rego: SOT-V2-0130 deny rule in sot_policy.rego
    cli: --rules SOT-V2-0130 flag supported
    test: test_sot_v2_0130() in test_sot_validator.py
- rule_id: SOT-V2-0131
  source: sot_contract_v2.yaml
  source_section: SSID_structure_level3_part1_MAX.md
  source_line: ~550-650
  category: GENERAL
  severity: MEDIUM
  enforcement: MUST
  description: Semantic rule for 'primary_utilities.governance_participation.description'.
  rationale: 'Governance Description: description field ist MEDIUM severity - documents
    governance utility purpose, validates transparency requirement, ensures clear
    communication of voting rights'
  sot_mapping:
    contract: 'schema: sot.schema.json: primary_utilities.governance_participation.description'
    core: 'contract_validator.py: validate_governance_description(value)'
    policy: 'opa/sot.rego: deny { not valid_description(input.primary_utilities.governance_participation.description)
      }'
    cli: cli validate --sot --path primary_utilities.governance_participation.description
    test: test_sot.py::test_governance_description()
  sot_artefacts:
    python: validate_sot_v2_0131() in sot_validator_core.py
    rego: SOT-V2-0131 deny rule in sot_policy.rego
    cli: --rules SOT-V2-0131 flag supported
    test: test_sot_v2_0131() in test_sot_validator.py
- rule_id: SOT-V2-0132
  source: sot_contract_v2.yaml
  source_section: SSID_structure_level3_part1_MAX.md
  source_line: ~550-650
  category: GOVERNANCE
  severity: HIGH
  enforcement: MUST
  description: Semantic rule for 'primary_utilities.governance_participation.proposal_threshold'.
  rationale: 'Proposal Threshold: proposal_threshold ist HIGH severity - defines minimum
    tokens required to create proposals, validates anti-spam mechanism, ensures meaningful
    governance participation'
  sot_mapping:
    contract: 'schema: sot.schema.json: primary_utilities.governance_participation.proposal_threshold'
    core: 'contract_validator.py: validate_proposal_threshold(value)'
    policy: 'opa/sot.rego: deny { not valid_proposal_threshold(input.primary_utilities.governance_participation.proposal_threshold)
      }'
    cli: cli validate --sot --path primary_utilities.governance_participation.proposal_threshold
    test: test_sot.py::test_proposal_threshold()
  sot_artefacts:
    python: validate_sot_v2_0132() in sot_validator_core.py
    rego: SOT-V2-0132 deny rule in sot_policy.rego
    cli: --rules SOT-V2-0132 flag supported
    test: test_sot_v2_0132() in test_sot_validator.py
- rule_id: SOT-V2-0133
  source: sot_contract_v2.yaml
  source_section: SSID_structure_level3_part1_MAX.md
  source_line: ~550-650
  category: GOVERNANCE
  severity: HIGH
  enforcement: MUST
  description: Semantic rule for 'primary_utilities.governance_participation.voting_weight'.
  rationale: 'Voting Weight: voting_weight ist HIGH severity - defines how voting
    power is calculated, validates democratic participation model, ensures fair representation
    in governance'
  sot_mapping:
    contract: 'schema: sot.schema.json: primary_utilities.governance_participation.voting_weight'
    core: 'contract_validator.py: validate_voting_weight(value)'
    policy: 'opa/sot.rego: deny { not valid_voting_weight(input.primary_utilities.governance_participation.voting_weight)
      }'
    cli: cli validate --sot --path primary_utilities.governance_participation.voting_weight
    test: test_sot.py::test_voting_weight()
  sot_artefacts:
    python: validate_sot_v2_0133() in sot_validator_core.py
    rego: SOT-V2-0133 deny rule in sot_policy.rego
    cli: --rules SOT-V2-0133 flag supported
    test: test_sot_v2_0133() in test_sot_validator.py
- rule_id: SOT-V2-0134
  source: sot_contract_v2.yaml
  source_section: SSID_structure_level3_part1_MAX.md
  source_line: ~550-650
  category: GENERAL
  severity: MEDIUM
  enforcement: MUST
  description: Semantic rule for 'primary_utilities.identity_verification'.
  rationale: 'Identity Verification: identity_verification ist MEDIUM severity - defines
    KYC/identity proofing utility, validates core SSID functionality, ensures identity
    verification token use case'
  sot_mapping:
    contract: 'schema: sot.schema.json: primary_utilities.identity_verification'
    core: 'contract_validator.py: validate_identity_verification(value)'
    policy: 'opa/sot.rego: deny { not valid_identity_verification(input.primary_utilities.identity_verification)
      }'
    cli: cli validate --sot --path primary_utilities.identity_verification
    test: test_sot.py::test_identity_verification()
  sot_artefacts:
    python: validate_sot_v2_0134() in sot_validator_core.py
    rego: SOT-V2-0134 deny rule in sot_policy.rego
    cli: --rules SOT-V2-0134 flag supported
    test: test_sot_v2_0134() in test_sot_validator.py
- rule_id: SOT-V2-0135
  source: sot_contract_v2.yaml
  source_section: SSID_structure_level3_part1_MAX.md
  source_line: ~550-650
  category: GENERAL
  severity: MEDIUM
  enforcement: MUST
  description: Semantic rule for 'primary_utilities.identity_verification.burn_clarification'.
  rationale: 'Burn Clarification: burn_clarification ist MEDIUM severity - clarifies
    that burn mechanism is deflationary not value-generating, validates non-security
    status, ensures regulatory compliance'
  sot_mapping:
    contract: 'schema: sot.schema.json: primary_utilities.identity_verification.burn_clarification'
    core: 'contract_validator.py: validate_burn_clarification(value)'
    policy: 'opa/sot.rego: deny { not valid_burn_clarification(input.primary_utilities.identity_verification.burn_clarification)
      }'
    cli: cli validate --sot --path primary_utilities.identity_verification.burn_clarification
    test: test_sot.py::test_burn_clarification()
  sot_artefacts:
    python: validate_sot_v2_0135() in sot_validator_core.py
    rego: SOT-V2-0135 deny rule in sot_policy.rego
    cli: --rules SOT-V2-0135 flag supported
    test: test_sot_v2_0135() in test_sot_validator.py
- rule_id: SOT-V2-0136
  source: sot_contract_v2.yaml
  source_section: SSID_structure_level3_part1_MAX.md
  source_line: ~550-650
  category: GENERAL
  severity: MEDIUM
  enforcement: MUST
  description: Semantic rule for 'primary_utilities.identity_verification.burn_source_note'.
  rationale: 'Burn Source Note: burn_source_note ist MEDIUM severity - documents origin
    of burn mechanism design, validates transparency requirement, ensures compliance
    documentation'
  sot_mapping:
    contract: 'schema: sot.schema.json: primary_utilities.identity_verification.burn_source_note'
    core: 'contract_validator.py: validate_burn_source_note(value)'
    policy: 'opa/sot.rego: deny { not valid_burn_source_note(input.primary_utilities.identity_verification.burn_source_note)
      }'
    cli: cli validate --sot --path primary_utilities.identity_verification.burn_source_note
    test: test_sot.py::test_burn_source_note()
  sot_artefacts:
    python: validate_sot_v2_0136() in sot_validator_core.py
    rego: SOT-V2-0136 deny rule in sot_policy.rego
    cli: --rules SOT-V2-0136 flag supported
    test: test_sot_v2_0136() in test_sot_validator.py
- rule_id: SOT-V2-0137
  source: sot_contract_v2.yaml
  source_section: SSID_structure_level3_part1_MAX.md
  source_line: ~550-650
  category: GENERAL
  severity: MEDIUM
  enforcement: MUST
  description: Semantic rule for 'primary_utilities.identity_verification.description'.
  rationale: 'Identity Verification Description: description field ist MEDIUM severity
    - documents identity verification utility purpose, validates transparency requirement,
    ensures clear communication of KYC use case'
  sot_mapping:
    contract: 'schema: sot.schema.json: primary_utilities.identity_verification.description'
    core: 'contract_validator.py: validate_identity_description(value)'
    policy: 'opa/sot.rego: deny { not valid_description(input.primary_utilities.identity_verification.description)
      }'
    cli: cli validate --sot --path primary_utilities.identity_verification.description
    test: test_sot.py::test_identity_verification_description()
  sot_artefacts:
    python: validate_sot_v2_0137() in sot_validator_core.py
    rego: SOT-V2-0137 deny rule in sot_policy.rego
    cli: --rules SOT-V2-0137 flag supported
    test: test_sot_v2_0137() in test_sot_validator.py
- rule_id: SOT-V2-0138
  source: sot_contract_v2.yaml
  source_section: SSID_structure_level3_part1_MAX.md
  source_line: ~550-650
  category: ECONOMICS
  severity: HIGH
  enforcement: MUST
  description: Semantic rule for 'primary_utilities.identity_verification.fee_burn_mechanism'.
  rationale: 'Fee Burn Mechanism: fee_burn_mechanism ist HIGH severity - defines deflationary
    fee burning for identity verification, validates utility value capture, ensures
    non-security economic model'
  sot_mapping:
    contract: 'schema: sot.schema.json: primary_utilities.identity_verification.fee_burn_mechanism'
    core: 'contract_validator.py: validate_fee_burn_mechanism(value)'
    policy: 'opa/sot.rego: deny { not valid_fee_burn_mechanism(input.primary_utilities.identity_verification.fee_burn_mechanism)
      }'
    cli: cli validate --sot --path primary_utilities.identity_verification.fee_burn_mechanism
    test: test_sot.py::test_fee_burn_mechanism()
  sot_artefacts:
    python: validate_sot_v2_0138() in sot_validator_core.py
    rego: SOT-V2-0138 deny rule in sot_policy.rego
    cli: --rules SOT-V2-0138 flag supported
    test: test_sot_v2_0138() in test_sot_validator.py
- rule_id: SOT-V2-0139
  source: sot_contract_v2.yaml
  source_section: SSID_structure_level3_part1_MAX.md
  source_line: ~550-650
  category: GENERAL
  severity: MEDIUM
  enforcement: MUST
  description: Semantic rule for 'primary_utilities.identity_verification.smart_contract'.
  rationale: 'Identity Smart Contract: smart_contract ist MEDIUM severity - references
    smart contract implementing identity verification, validates on-chain implementation,
    ensures transparency and auditability'
  sot_mapping:
    contract: 'schema: sot.schema.json: primary_utilities.identity_verification.smart_contract'
    core: 'contract_validator.py: validate_identity_smart_contract(value)'
    policy: 'opa/sot.rego: deny { not valid_smart_contract(input.primary_utilities.identity_verification.smart_contract)
      }'
    cli: cli validate --sot --path primary_utilities.identity_verification.smart_contract
    test: test_sot.py::test_identity_verification_smart_contract()
  sot_artefacts:
    python: validate_sot_v2_0139() in sot_validator_core.py
    rego: SOT-V2-0139 deny rule in sot_policy.rego
    cli: --rules SOT-V2-0139 flag supported
    test: test_sot_v2_0139() in test_sot_validator.py
- rule_id: SOT-V2-0140
  source: sot_contract_v2.yaml
  source_section: SSID_structure_level3_part1_MAX.md
  source_line: ~550-650
  category: ECONOMICS
  severity: HIGH
  enforcement: MUST
  description: Semantic rule for 'primary_utilities.staking_utility'.
  rationale: 'Staking Utility: staking_utility ist HIGH severity - defines token staking
    mechanism for network security, validates active participation utility, ensures
    non-passive income model'
  sot_mapping:
    contract: 'schema: sot.schema.json: primary_utilities.staking_utility'
    core: 'contract_validator.py: validate_staking_utility(value)'
    policy: 'opa/sot.rego: deny { not valid_staking_utility(input.primary_utilities.staking_utility)
      }'
    cli: cli validate --sot --path primary_utilities.staking_utility
    test: test_sot.py::test_staking_utility()
  sot_artefacts:
    python: validate_sot_v2_0140() in sot_validator_core.py
    rego: SOT-V2-0140 deny rule in sot_policy.rego
    cli: --rules SOT-V2-0140 flag supported
    test: test_sot_v2_0140() in test_sot_validator.py
- rule_id: SOT-V2-0141
  source: sot_contract_v2.yaml
  source_section: SSID_structure_level3_part1_MAX.md
  source_line: ~550-650
  category: ECONOMICS
  severity: HIGH
  enforcement: MUST
  description: Semantic rule for 'primary_utilities.staking_utility.description'.
  rationale: 'Staking Description: description field ist HIGH severity - documents
    staking utility purpose, validates transparency requirement, ensures clear communication
    of staking mechanism'
  sot_mapping:
    contract: 'schema: sot.schema.json: primary_utilities.staking_utility.description'
    core: 'contract_validator.py: validate_staking_description(value)'
    policy: 'opa/sot.rego: deny { not valid_description(input.primary_utilities.staking_utility.description)
      }'
    cli: cli validate --sot --path primary_utilities.staking_utility.description
    test: test_sot.py::test_staking_description()
  sot_artefacts:
    python: validate_sot_v2_0141() in sot_validator_core.py
    rego: SOT-V2-0141 deny rule in sot_policy.rego
    cli: --rules SOT-V2-0141 flag supported
    test: test_sot_v2_0141() in test_sot_validator.py
- rule_id: SOT-V2-0142
  source: sot_contract_v2.yaml
  source_section: SSID_structure_level3_part1_MAX.md
  source_line: ~550-650
  category: ECONOMICS
  severity: HIGH
  enforcement: MUST
  description: Semantic rule for 'primary_utilities.staking_utility.slashing_conditions'.
  rationale: 'Slashing Conditions: slashing_conditions ist HIGH severity - defines
    penalties for malicious validator behavior, validates network security mechanism,
    ensures accountability in staking'
  sot_mapping:
    contract: 'schema: sot.schema.json: primary_utilities.staking_utility.slashing_conditions'
    core: 'contract_validator.py: validate_slashing_conditions(value)'
    policy: 'opa/sot.rego: deny { not valid_slashing_conditions(input.primary_utilities.staking_utility.slashing_conditions)
      }'
    cli: cli validate --sot --path primary_utilities.staking_utility.slashing_conditions
    test: test_sot.py::test_slashing_conditions()
  sot_artefacts:
    python: validate_sot_v2_0142() in sot_validator_core.py
    rego: SOT-V2-0142 deny rule in sot_policy.rego
    cli: --rules SOT-V2-0142 flag supported
    test: test_sot_v2_0142() in test_sot_validator.py
- rule_id: SOT-V2-0143
  source: sot_contract_v2.yaml
  source_section: SSID_structure_level3_part1_MAX.md
  source_line: ~550-650
  category: ECONOMICS
  severity: HIGH
  enforcement: MUST
  description: Semantic rule for 'primary_utilities.staking_utility.staking_rewards'.
  rationale: 'Staking Rewards: staking_rewards ist HIGH severity - defines reward
    distribution for stakers, validates active participation model, ensures rewards
    tied to network contribution not passive holding'
  sot_mapping:
    contract: 'schema: sot.schema.json: primary_utilities.staking_utility.staking_rewards'
    core: 'contract_validator.py: validate_staking_rewards(value)'
    policy: 'opa/sot.rego: deny { not valid_staking_rewards(input.primary_utilities.staking_utility.staking_rewards)
      }'
    cli: cli validate --sot --path primary_utilities.staking_utility.staking_rewards
    test: test_sot.py::test_staking_rewards()
  sot_artefacts:
    python: validate_sot_v2_0143() in sot_validator_core.py
    rego: SOT-V2-0143 deny rule in sot_policy.rego
    cli: --rules SOT-V2-0143 flag supported
    test: test_sot_v2_0143() in test_sot_validator.py
- rule_id: SOT-V2-0144
  source: sot_contract_v2.yaml
  source_section: SSID_structure_level3_part1_MAX.md
  source_line: ~650-750
  category: GENERAL
  severity: MEDIUM
  enforcement: MUST
  description: Semantic rule for 'risk_mitigation'.
  rationale: 'Risk Mitigation: risk_mitigation ist MEDIUM severity - defines strategies
    to avoid securities classification, validates Howey Test avoidance, ensures regulatory
    compliance safeguards'
  sot_mapping:
    contract: 'schema: sot.schema.json: risk_mitigation'
    core: 'contract_validator.py: validate_risk_mitigation(value)'
    policy: 'opa/sot.rego: deny { not valid_risk_mitigation(input.risk_mitigation)
      }'
    cli: cli validate --sot --path risk_mitigation
    test: test_sot.py::test_risk_mitigation()
  sot_artefacts:
    python: validate_sot_v2_0144() in sot_validator_core.py
    rego: SOT-V2-0144 deny rule in sot_policy.rego
    cli: --rules SOT-V2-0144 flag supported
    test: test_sot_v2_0144() in test_sot_validator.py
- rule_id: SOT-V2-0145
  source: sot_contract_v2.yaml
  source_section: SSID_structure_level3_part1_MAX.md
  source_line: ~650-750
  category: GENERAL
  severity: MEDIUM
  enforcement: MUST
  description: Semantic rule for 'risk_mitigation.clear_utility_purpose'.
  rationale: 'Clear Utility Purpose: clear_utility_purpose ist MEDIUM severity - documents
    clear utility functions avoiding investment narrative, validates non-security
    status, ensures Howey Test compliance'
  sot_mapping:
    contract: 'schema: sot.schema.json: risk_mitigation.clear_utility_purpose'
    core: 'contract_validator.py: validate_clear_utility_purpose(value)'
    policy: 'opa/sot.rego: deny { not valid_utility_purpose(input.risk_mitigation.clear_utility_purpose)
      }'
    cli: cli validate --sot --path risk_mitigation.clear_utility_purpose
    test: test_sot.py::test_clear_utility_purpose()
  sot_artefacts:
    python: validate_sot_v2_0145() in sot_validator_core.py
    rego: SOT-V2-0145 deny rule in sot_policy.rego
    cli: --rules SOT-V2-0145 flag supported
    test: test_sot_v2_0145() in test_sot_validator.py
- rule_id: SOT-V2-0146
  source: sot_contract_v2.yaml
  source_section: SSID_structure_level3_part1_MAX.md
  source_line: ~650-750
  category: GENERAL
  severity: MEDIUM
  enforcement: MUST
  description: Semantic rule for 'risk_mitigation.no_fiat_pegging'.
  rationale: 'No Fiat Pegging: no_fiat_pegging ist MEDIUM severity - ensures token
    is NOT pegged to fiat currency, validates non-stablecoin status, ensures MiCA
    stablecoin regulation avoidance'
  sot_mapping:
    contract: 'schema: sot.schema.json: risk_mitigation.no_fiat_pegging'
    core: 'contract_validator.py: validate_no_fiat_pegging(value)'
    policy: 'opa/sot.rego: deny { is_fiat_pegged(input.risk_mitigation.no_fiat_pegging)
      }'
    cli: cli validate --sot --path risk_mitigation.no_fiat_pegging
    test: test_sot.py::test_no_fiat_pegging()
  sot_artefacts:
    python: validate_sot_v2_0146() in sot_validator_core.py
    rego: SOT-V2-0146 deny rule in sot_policy.rego
    cli: --rules SOT-V2-0146 flag supported
    test: test_sot_v2_0146() in test_sot_validator.py
- rule_id: SOT-V2-0147
  source: sot_contract_v2.yaml
  source_section: SSID_structure_level3_part1_MAX.md
  source_line: ~650-750
  category: GENERAL
  severity: MEDIUM
  enforcement: MUST
  description: Semantic rule for 'risk_mitigation.no_marketing_investment'.
  rationale: 'No Marketing Investment: no_marketing_investment ist MEDIUM severity
    - prohibits marketing token as investment opportunity, validates Howey Test compliance,
    ensures utility-only communication'
  sot_mapping:
    contract: 'schema: sot.schema.json: risk_mitigation.no_marketing_investment'
    core: 'contract_validator.py: validate_no_marketing_investment(value)'
    policy: 'opa/sot.rego: deny { markets_as_investment(input.risk_mitigation.no_marketing_investment)
      }'
    cli: cli validate --sot --path risk_mitigation.no_marketing_investment
    test: test_sot.py::test_no_marketing_investment()
  sot_artefacts:
    python: validate_sot_v2_0147() in sot_validator_core.py
    rego: SOT-V2-0147 deny rule in sot_policy.rego
    cli: --rules SOT-V2-0147 flag supported
    test: test_sot_v2_0147() in test_sot_validator.py
- rule_id: SOT-V2-0148
  source: sot_contract_v2.yaml
  source_section: SSID_structure_level3_part1_MAX.md
  source_line: ~650-750
  category: GENERAL
  severity: MEDIUM
  enforcement: MUST
  description: Semantic rule for 'risk_mitigation.no_redemption_mechanism'.
  rationale: 'No Redemption Mechanism: no_redemption_mechanism ist MEDIUM severity
    - ensures no guaranteed buy-back or redemption rights, validates non-security
    status, ensures market-based pricing only'
  sot_mapping:
    contract: 'schema: sot.schema.json: risk_mitigation.no_redemption_mechanism'
    core: 'contract_validator.py: validate_no_redemption_mechanism(value)'
    policy: 'opa/sot.rego: deny { has_redemption_mechanism(input.risk_mitigation.no_redemption_mechanism)
      }'
    cli: cli validate --sot --path risk_mitigation.no_redemption_mechanism
    test: test_sot.py::test_no_redemption_mechanism()
  sot_artefacts:
    python: validate_sot_v2_0148() in sot_validator_core.py
    rego: SOT-V2-0148 deny rule in sot_policy.rego
    cli: --rules SOT-V2-0148 flag supported
    test: test_sot_v2_0148() in test_sot_validator.py
- rule_id: SOT-V2-0149
  source: sot_contract_v2.yaml
  source_section: SSID_structure_level3_part1_MAX.md
  source_line: ~650-750
  category: GENERAL
  severity: MEDIUM
  enforcement: MUST
  description: Semantic rule for 'risk_mitigation.no_yield_promises'.
  rationale: 'No Yield Promises: no_yield_promises ist MEDIUM severity - prohibits
    promising returns or yields, validates Howey Test compliance, ensures no expectation
    of profits from efforts of others'
  sot_mapping:
    contract: 'schema: sot.schema.json: risk_mitigation.no_yield_promises'
    core: 'contract_validator.py: validate_no_yield_promises(value)'
    policy: 'opa/sot.rego: deny { promises_yield(input.risk_mitigation.no_yield_promises)
      }'
    cli: cli validate --sot --path risk_mitigation.no_yield_promises
    test: test_sot.py::test_no_yield_promises()
  sot_artefacts:
    python: validate_sot_v2_0149() in sot_validator_core.py
    rego: SOT-V2-0149 deny rule in sot_policy.rego
    cli: --rules SOT-V2-0149 flag supported
    test: test_sot_v2_0149() in test_sot_validator.py
- rule_id: SOT-V2-0150
  source: sot_contract_v2.yaml
  source_section: SSID_structure_level3_part1_MAX.md
  source_line: ~650-750
  category: GENERAL
  severity: MEDIUM
  enforcement: MUST
  description: Semantic rule for 'risk_mitigation.open_source_license'.
  rationale: 'Open Source License: open_source_license ist MEDIUM severity - requires
    open source codebase for transparency, validates decentralization claim, ensures
    auditability'
  sot_mapping:
    contract: 'schema: sot.schema.json: risk_mitigation.open_source_license'
    core: 'contract_validator.py: validate_open_source_license(value)'
    policy: 'opa/sot.rego: deny { not is_open_source(input.risk_mitigation.open_source_license)
      }'
    cli: cli validate --sot --path risk_mitigation.open_source_license
    test: test_sot.py::test_open_source_license()
  sot_artefacts:
    python: validate_sot_v2_0150() in sot_validator_core.py
    rego: SOT-V2-0150 deny rule in sot_policy.rego
    cli: --rules SOT-V2-0150 flag supported
    test: test_sot_v2_0150() in test_sot_validator.py
- rule_id: SOT-V2-0151
  source: sot_contract_v2.yaml
  source_section: SSID_structure_level3_part1_MAX.md
  source_line: ~750-850
  category: GENERAL
  severity: MEDIUM
  enforcement: MUST
  description: Semantic rule for 'secondary_utilities'.
  rationale: 'Secondary Utilities: secondary_utilities ist MEDIUM severity - defines
    non-primary token use cases, validates additional utility layer, ensures token
    is not solely reliant on primary utilities for value'
  sot_mapping:
    contract: 'schema: sot.schema.json: secondary_utilities'
    core: 'contract_validator.py: validate_secondary_utilities(value)'
    policy: 'opa/sot.rego: deny { not valid_secondary_utilities(input.secondary_utilities)
      }'
    cli: cli validate --sot --path secondary_utilities
    test: test_sot.py::test_secondary_utilities()
  sot_artefacts:
    python: validate_sot_v2_0151() in sot_validator_core.py
    rego: SOT-V2-0151 deny rule in sot_policy.rego
    cli: --rules SOT-V2-0151 flag supported
    test: test_sot_v2_0151() in test_sot_validator.py
- rule_id: SOT-V2-0152
  source: sot_contract_v2.yaml
  source_section: SSID_structure_level3_part1_MAX.md
  source_line: ~750-850
  category: GENERAL
  severity: MEDIUM
  enforcement: MUST
  description: Semantic rule for 'secondary_utilities.api_access'.
  rationale: 'API Access: api_access ist MEDIUM severity - tokens grant access to
    premium API endpoints, validates utility-based access control, ensures non-investment
    utility function'
  sot_mapping:
    contract: 'schema: sot.schema.json: secondary_utilities.api_access'
    core: 'contract_validator.py: validate_api_access(value)'
    policy: 'opa/sot.rego: deny { not valid_api_access(input.secondary_utilities.api_access)
      }'
    cli: cli validate --sot --path secondary_utilities.api_access
    test: test_sot.py::test_api_access()
  sot_artefacts:
    python: validate_sot_v2_0152() in sot_validator_core.py
    rego: SOT-V2-0152 deny rule in sot_policy.rego
    cli: --rules SOT-V2-0152 flag supported
    test: test_sot_v2_0152() in test_sot_validator.py
- rule_id: SOT-V2-0153
  source: sot_contract_v2.yaml
  source_section: SSID_structure_level3_part1_MAX.md
  source_line: ~750-850
  category: GENERAL
  severity: LOW
  enforcement: MUST
  description: Semantic rule for 'secondary_utilities.data_portability'.
  rationale: 'Data Portability: data_portability ist LOW severity - enables user data
    export and migration, validates GDPR Article 20 compliance, ensures user sovereignty
    over identity data'
  sot_mapping:
    contract: 'schema: sot.schema.json: secondary_utilities.data_portability'
    core: 'contract_validator.py: validate_data_portability(value)'
    policy: 'opa/sot.rego: deny { not gdpr_compliant_portability(input.secondary_utilities.data_portability)
      }'
    cli: cli validate --sot --path secondary_utilities.data_portability
    test: test_sot.py::test_data_portability()
  sot_artefacts:
    python: validate_sot_v2_0153() in sot_validator_core.py
    rego: SOT-V2-0153 deny rule in sot_policy.rego
    cli: --rules SOT-V2-0153 flag supported
    test: test_sot_v2_0153() in test_sot_validator.py
- rule_id: SOT-V2-0154
  source: sot_contract_v2.yaml
  source_section: SSID_structure_level3_part1_MAX.md
  source_line: ~750-850
  category: GENERAL
  severity: MEDIUM
  enforcement: MUST
  description: Semantic rule for 'secondary_utilities.marketplace_access'.
  rationale: 'Marketplace Access: marketplace_access ist MEDIUM severity - tokens
    unlock marketplace features for identity-based services, validates utility consumption
    model, ensures economic activity beyond speculation'
  sot_mapping:
    contract: 'schema: sot.schema.json: secondary_utilities.marketplace_access'
    core: 'contract_validator.py: validate_marketplace_access(value)'
    policy: 'opa/sot.rego: deny { not valid_marketplace(input.secondary_utilities.marketplace_access)
      }'
    cli: cli validate --sot --path secondary_utilities.marketplace_access
    test: test_sot.py::test_marketplace_access()
  sot_artefacts:
    python: validate_sot_v2_0154() in sot_validator_core.py
    rego: SOT-V2-0154 deny rule in sot_policy.rego
    cli: --rules SOT-V2-0154 flag supported
    test: test_sot_v2_0154() in test_sot_validator.py
- rule_id: SOT-V2-0155
  source: sot_contract_v2.yaml
  source_section: SSID_structure_level3_part1_MAX.md
  source_line: ~750-850
  category: GENERAL
  severity: LOW
  enforcement: MUST
  description: Semantic rule for 'secondary_utilities.premium_features'.
  rationale: 'Premium Features: premium_features ist LOW severity - token holders
    access enhanced platform capabilities, validates freemium utility model, ensures
    non-speculative value proposition'
  sot_mapping:
    contract: 'schema: sot.schema.json: secondary_utilities.premium_features'
    core: 'contract_validator.py: validate_premium_features(value)'
    policy: 'opa/sot.rego: deny { not valid_premium_tier(input.secondary_utilities.premium_features)
      }'
    cli: cli validate --sot --path secondary_utilities.premium_features
    test: test_sot.py::test_premium_features()
  sot_artefacts:
    python: validate_sot_v2_0155() in sot_validator_core.py
    rego: SOT-V2-0155 deny rule in sot_policy.rego
    cli: --rules SOT-V2-0155 flag supported
    test: test_sot_v2_0155() in test_sot_validator.py
- rule_id: SOT-V2-0156
  source: sot_contract_v2.yaml
  source_section: SSID_structure_level3_part1_MAX.md
  source_line: ~850-950
  category: ECONOMICS
  severity: HIGH
  enforcement: MUST
  description: Semantic rule for 'staking_mechanics'.
  rationale: 'Staking Mechanics: staking_mechanics ist HIGH severity - defines comprehensive
    staking system parameters, validates economic security model, ensures non-passive
    income design (active participation required)'
  sot_mapping:
    contract: 'schema: sot.schema.json: staking_mechanics'
    core: 'contract_validator.py: validate_staking_mechanics(value)'
    policy: 'opa/sot.rego: deny { not valid_staking_model(input.staking_mechanics)
      }'
    cli: cli validate --sot --path staking_mechanics
    test: test_sot.py::test_staking_mechanics()
  sot_artefacts:
    python: validate_sot_v2_0156() in sot_validator_core.py
    rego: SOT-V2-0156 deny rule in sot_policy.rego
    cli: --rules SOT-V2-0156 flag supported
    test: test_sot_v2_0156() in test_sot_validator.py
- rule_id: SOT-V2-0157
  source: sot_contract_v2.yaml
  source_section: SSID_structure_level3_part1_MAX.md
  source_line: ~850-950
  category: ECONOMICS
  severity: HIGH
  enforcement: MUST
  description: Semantic rule for 'staking_mechanics.discount_applies_to'.
  rationale: 'Discount Applies To: discount_applies_to ist HIGH severity - defines
    which fees receive staking discount (identity verification fees, NOT speculative
    trading), validates utility-focused economics, ensures non-investment staking
    benefit'
  sot_mapping:
    contract: 'schema: sot.schema.json: staking_mechanics.discount_applies_to'
    core: 'contract_validator.py: validate_discount_scope(value)'
    policy: 'opa/sot.rego: deny { invalid_discount_target(input.staking_mechanics.discount_applies_to)
      }'
    cli: cli validate --sot --path staking_mechanics.discount_applies_to
    test: test_sot.py::test_discount_applies_to()
  sot_artefacts:
    python: validate_sot_v2_0157() in sot_validator_core.py
    rego: SOT-V2-0157 deny rule in sot_policy.rego
    cli: --rules SOT-V2-0157 flag supported
    test: test_sot_v2_0157() in test_sot_validator.py
- rule_id: SOT-V2-0158
  source: sot_contract_v2.yaml
  source_section: SSID_structure_level3_part1_MAX.md
  source_line: ~850-950
  category: ECONOMICS
  severity: HIGH
  enforcement: MUST
  description: Semantic rule for 'staking_mechanics.maximum_discount'.
  rationale: 'Maximum Discount: maximum_discount ist HIGH severity - caps staking
    discount percentage (e.g., max 30%), validates reasonable economic incentive,
    prevents excessive value extraction that could resemble passive income'
  sot_mapping:
    contract: 'schema: sot.schema.json: staking_mechanics.maximum_discount'
    core: 'contract_validator.py: validate_maximum_discount(value)'
    policy: 'opa/sot.rego: deny { input.staking_mechanics.maximum_discount > 0.30
      }'
    cli: cli validate --sot --path staking_mechanics.maximum_discount
    test: test_sot.py::test_maximum_discount()
  sot_artefacts:
    python: validate_sot_v2_0158() in sot_validator_core.py
    rego: SOT-V2-0158 deny rule in sot_policy.rego
    cli: --rules SOT-V2-0158 flag supported
    test: test_sot_v2_0158() in test_sot_validator.py
- rule_id: SOT-V2-0159
  source: sot_contract_v2.yaml
  source_section: SSID_structure_level3_part1_MAX.md
  source_line: ~850-950
  category: ECONOMICS
  severity: HIGH
  enforcement: MUST
  description: Semantic rule for 'staking_mechanics.minimum_stake'.
  rationale: 'Minimum Stake: minimum_stake ist HIGH severity - defines minimum tokens
    required for staking participation, validates anti-spam mechanism, ensures meaningful
    commitment without excessive barrier to entry'
  sot_mapping:
    contract: 'schema: sot.schema.json: staking_mechanics.minimum_stake'
    core: 'contract_validator.py: validate_minimum_stake(value)'
    policy: 'opa/sot.rego: deny { input.stake_amount < input.staking_mechanics.minimum_stake
      }'
    cli: cli validate --sot --path staking_mechanics.minimum_stake
    test: test_sot.py::test_minimum_stake()
  sot_artefacts:
    python: validate_sot_v2_0159() in sot_validator_core.py
    rego: SOT-V2-0159 deny rule in sot_policy.rego
    cli: --rules SOT-V2-0159 flag supported
    test: test_sot_v2_0159() in test_sot_validator.py
- rule_id: SOT-V2-0160
  source: sot_contract_v2.yaml
  source_section: SSID_structure_level3_part1_MAX.md
  source_line: ~850-950
  category: ECONOMICS
  severity: HIGH
  enforcement: MUST
  description: Semantic rule for 'staking_mechanics.slashing_penalty'.
  rationale: 'Slashing Penalty: slashing_penalty ist HIGH severity - defines stake
    penalties for malicious validator behavior, validates proof-of-stake security,
    ensures active participation risk (not passive holding)'
  sot_mapping:
    contract: 'schema: sot.schema.json: staking_mechanics.slashing_penalty'
    core: 'contract_validator.py: validate_slashing_penalty(value)'
    policy: 'opa/sot.rego: deny { not valid_slashing_config(input.staking_mechanics.slashing_penalty)
      }'
    cli: cli validate --sot --path staking_mechanics.slashing_penalty
    test: test_sot.py::test_slashing_penalty()
  sot_artefacts:
    python: validate_sot_v2_0160() in sot_validator_core.py
    rego: SOT-V2-0160 deny rule in sot_policy.rego
    cli: --rules SOT-V2-0160 flag supported
    test: test_sot_v2_0160() in test_sot_validator.py
- rule_id: SOT-V2-0161
  source: sot_contract_v2.yaml
  source_section: SSID_structure_level3_part1_MAX.md
  source_line: ~850-950
  category: ECONOMICS
  severity: CRITICAL
  enforcement: MUST
  description: Semantic rule for 'staking_mechanics.system_fee_invariance'.
  rationale: 'System Fee Invariance: system_fee_invariance ist CRITICAL severity -
    ensures system fees NEVER accrue to stakers (critical Howey Test compliance),
    validates no passive income from others'' efforts, ensures only discount benefits
    (not income)'
  sot_mapping:
    contract: 'schema: sot.schema.json: staking_mechanics.system_fee_invariance'
    core: 'contract_validator.py: validate_fee_invariance(value)'
    policy: 'opa/sot.rego: deny { fees_accrue_to_stakers(input.staking_mechanics)
      }'
    cli: cli validate --sot --path staking_mechanics.system_fee_invariance
    test: test_sot.py::test_system_fee_invariance()
  sot_artefacts:
    python: validate_sot_v2_0161() in sot_validator_core.py
    rego: SOT-V2-0161 deny rule in sot_policy.rego
    cli: --rules SOT-V2-0161 flag supported
    test: test_sot_v2_0161() in test_sot_validator.py
- rule_id: SOT-V2-0162
  source: sot_contract_v2.yaml
  source_section: SSID_structure_level3_part1_MAX.md
  source_line: ~850-950
  category: ECONOMICS
  severity: HIGH
  enforcement: MUST
  description: Semantic rule for 'staking_mechanics.unstaking_period'.
  rationale: 'Unstaking Period: unstaking_period ist HIGH severity - defines cooldown
    time for unstaking (e.g., 7-21 days), validates network security commitment, ensures
    exit friction prevents flash-stake attacks'
  sot_mapping:
    contract: 'schema: sot.schema.json: staking_mechanics.unstaking_period'
    core: 'contract_validator.py: validate_unstaking_period(value)'
    policy: 'opa/sot.rego: deny { input.staking_mechanics.unstaking_period < min_unstaking_days
      }'
    cli: cli validate --sot --path staking_mechanics.unstaking_period
    test: test_sot.py::test_unstaking_period()
  sot_artefacts:
    python: validate_sot_v2_0162() in sot_validator_core.py
    rego: SOT-V2-0162 deny rule in sot_policy.rego
    cli: --rules SOT-V2-0162 flag supported
    test: test_sot_v2_0162() in test_sot_validator.py
- rule_id: MD-STRUCT-009
  source: ssid_master_definition_corrected_v1.1.1.md
  category: STRUCTURE
  severity: CRITICAL
  enforcement: MUST
  description: Pfad {ROOT}/shards/{SHARD}/chart.yaml MUSS existieren
  sot_artefacts:
    python: validate_md_struct_009() in sot_validator_core.py
    rego: MD-STRUCT-009 deny rule in sot_policy.rego
    cli: --rules MD-STRUCT-009 flag supported
    test: test_md_struct_009() in test_sot_validator.py
- rule_id: MD-STRUCT-010
  source: ssid_master_definition_corrected_v1.1.1.md
  category: STRUCTURE
  severity: CRITICAL
  enforcement: MUST
  description: Pfad .../implementations/{IMPL}/manifest.yaml MUSS existieren
  sot_artefacts:
    python: validate_md_struct_010() in sot_validator_core.py
    rego: MD-STRUCT-010 deny rule in sot_policy.rego
    cli: --rules MD-STRUCT-010 flag supported
    test: test_md_struct_010() in test_sot_validator.py
- rule_id: MD-CHART-024
  source: ssid_master_definition_corrected_v1.1.1.md
  category: CHART_STRUCTURE
  severity: HIGH
  enforcement: MUST
  description: chart.yaml MUSS compatibility.core_min_version definieren
  sot_artefakte:
    python: validate_md_chart_024() in sot_validator_core.py
    rego: MD-CHART-024 deny rule in sot_policy.rego
    cli: --rules MD-CHART-024 flag supported
    test: test_md_chart_024() in test_sot_validator.py
- rule_id: MD-CHART-029
  source: ssid_master_definition_corrected_v1.1.1.md
  category: CHART_STRUCTURE
  severity: MEDIUM
  enforcement: SHOULD
  description: chart.yaml SOLLTE orchestration.workflows definieren
  sot_artefakte:
    python: validate_md_chart_029() in sot_validator_core.py
    rego: MD-CHART-029 informational only in sot_policy.rego
    cli: --rules MD-CHART-029 flag supported
    test: test_md_chart_029() in test_sot_validator.py
- rule_id: MD-CHART-045
  source: ssid_master_definition_corrected_v1.1.1.md
  category: CHART_STRUCTURE
  severity: CRITICAL
  enforcement: MUST
  description: chart.yaml MUSS security.encryption (at_rest, in_transit) definieren
  sot_artefakte:
    python: validate_md_chart_045() in sot_validator_core.py
    rego: MD-CHART-045 deny rule in sot_policy.rego
    cli: --rules MD-CHART-045 flag supported
    test: test_md_chart_045() in test_sot_validator.py
- rule_id: MD-CHART-048
  source: ssid_master_definition_corrected_v1.1.1.md
  category: CHART_STRUCTURE
  severity: MEDIUM
  enforcement: MUST
  description: chart.yaml MUSS resources.compute definieren
  sot_artefakte:
    python: validate_md_chart_048() in sot_validator_core.py
    rego: MD-CHART-048 deny rule in sot_policy.rego
    cli: --rules MD-CHART-048 flag supported
    test: test_md_chart_048() in test_sot_validator.py
- rule_id: MD-CHART-050
  source: ssid_master_definition_corrected_v1.1.1.md
  category: CHART_STRUCTURE
  severity: LOW
  enforcement: SHOULD
  description: chart.yaml SOLLTE roadmap.upcoming definieren
  sot_artefakte:
    python: validate_md_chart_050() in sot_validator_core.py
    rego: MD-CHART-050 informational only in sot_policy.rego
    cli: --rules MD-CHART-050 flag supported
    test: test_md_chart_050() in test_sot_validator.py
- rule_id: MD-MANIFEST-004
  source: ssid_master_definition_corrected_v1.1.1.md
  category: MANIFEST_STRUCTURE
  severity: MEDIUM
  enforcement: MUST
  description: manifest.yaml MUSS metadata.maturity definieren
  sot_artefakte:
    python: validate_md_manifest_004() in sot_validator_core.py
    rego: MD-MANIFEST-004 deny rule in sot_policy.rego
    cli: --rules MD-MANIFEST-004 flag supported
    test: test_md_manifest_004() in test_sot_validator.py
- rule_id: MD-MANIFEST-009
  source: ssid_master_definition_corrected_v1.1.1.md
  category: MANIFEST_STRUCTURE
  severity: MEDIUM
  enforcement: MUST
  description: manifest.yaml MUSS technology_stack.linting_formatting definieren
  sot_artefakte:
    python: validate_md_manifest_009() in sot_validator_core.py
    rego: MD-MANIFEST-009 deny rule in sot_policy.rego
    cli: --rules MD-MANIFEST-009 flag supported
    test: test_md_manifest_009() in test_sot_validator.py
- rule_id: MD-MANIFEST-012
  source: ssid_master_definition_corrected_v1.1.1.md
  category: MANIFEST_STRUCTURE
  severity: MEDIUM
  enforcement: MUST
  description: manifest.yaml MUSS artifacts.configuration.location definieren
  sot_artefakte:
    python: validate_md_manifest_012() in sot_validator_core.py
    rego: MD-MANIFEST-012 deny rule in sot_policy.rego
    cli: --rules MD-MANIFEST-012 flag supported
    test: test_md_manifest_012() in test_sot_validator.py
- rule_id: MD-MANIFEST-013
  source: ssid_master_definition_corrected_v1.1.1.md
  category: MANIFEST_STRUCTURE
  severity: MEDIUM
  enforcement: SHOULD
  description: manifest.yaml SOLLTE artifacts.models.location definieren (AI/ML)
  sot_artefakte:
    python: validate_md_manifest_013() in sot_validator_core.py
    rego: MD-MANIFEST-013 informational only in sot_policy.rego
    cli: --rules MD-MANIFEST-013 flag supported
    test: test_md_manifest_013() in test_sot_validator.py
- rule_id: MD-MANIFEST-014
  source: ssid_master_definition_corrected_v1.1.1.md
  category: MANIFEST_STRUCTURE
  severity: MEDIUM
  enforcement: SHOULD
  description: manifest.yaml SOLLTE artifacts.protocols.location definieren (gRPC)
  sot_artefakte:
    python: validate_md_manifest_014() in sot_validator_core.py
    rego: MD-MANIFEST-014 informational only in sot_policy.rego
    cli: --rules MD-MANIFEST-014 flag supported
    test: test_md_manifest_014() in test_sot_validator.py
- rule_id: MD-MANIFEST-015
  source: ssid_master_definition_corrected_v1.1.1.md
  category: MANIFEST_STRUCTURE
  severity: HIGH
  enforcement: MUST
  description: manifest.yaml MUSS artifacts.tests.location definieren
  sot_artefakte:
    python: validate_md_manifest_015() in sot_validator_core.py
    rego: MD-MANIFEST-015 deny rule in sot_policy.rego
    cli: --rules MD-MANIFEST-015 flag supported
    test: test_md_manifest_015() in test_sot_validator.py
- rule_id: MD-MANIFEST-016
  source: ssid_master_definition_corrected_v1.1.1.md
  category: MANIFEST_STRUCTURE
  severity: MEDIUM
  enforcement: MUST
  description: manifest.yaml MUSS artifacts.documentation.location definieren
  sot_artefakte:
    python: validate_md_manifest_016() in sot_validator_core.py
    rego: MD-MANIFEST-016 deny rule in sot_policy.rego
    cli: --rules MD-MANIFEST-016 flag supported
    test: test_md_manifest_016() in test_sot_validator.py
- rule_id: MD-MANIFEST-017
  source: ssid_master_definition_corrected_v1.1.1.md
  category: MANIFEST_STRUCTURE
  severity: MEDIUM
  enforcement: MUST
  description: manifest.yaml MUSS artifacts.scripts.location definieren
  sot_artefakte:
    python: validate_md_manifest_017() in sot_validator_core.py
    rego: MD-MANIFEST-017 deny rule in sot_policy.rego
    cli: --rules MD-MANIFEST-017 flag supported
    test: test_md_manifest_017() in test_sot_validator.py
- rule_id: MD-MANIFEST-018
  source: ssid_master_definition_corrected_v1.1.1.md
  category: MANIFEST_STRUCTURE
  severity: HIGH
  enforcement: MUST
  description: manifest.yaml MUSS artifacts.docker.files=[Dockerfile,docker-compose.yml]
    definieren
  sot_artefakte:
    python: validate_md_manifest_018() in sot_validator_core.py
    rego: MD-MANIFEST-018 deny rule in sot_policy.rego
    cli: --rules MD-MANIFEST-018 flag supported
    test: test_md_manifest_018() in test_sot_validator.py
- rule_id: MD-MANIFEST-023
  source: ssid_master_definition_corrected_v1.1.1.md
  category: MANIFEST_STRUCTURE
  severity: HIGH
  enforcement: MUST
  description: manifest.yaml MUSS build.commands definieren
  sot_artefakte:
    python: validate_md_manifest_023() in sot_validator_core.py
    rego: MD-MANIFEST-023 deny rule in sot_policy.rego
    cli: --rules MD-MANIFEST-023 flag supported
    test: test_md_manifest_023() in test_sot_validator.py
- rule_id: MD-MANIFEST-024
  source: ssid_master_definition_corrected_v1.1.1.md
  category: MANIFEST_STRUCTURE
  severity: HIGH
  enforcement: MUST
  description: manifest.yaml MUSS build.docker definieren
  sot_artefakte:
    python: validate_md_manifest_024() in sot_validator_core.py
    rego: MD-MANIFEST-024 deny rule in sot_policy.rego
    cli: --rules MD-MANIFEST-024 flag supported
    test: test_md_manifest_024() in test_sot_validator.py
- rule_id: MD-MANIFEST-025
  source: ssid_master_definition_corrected_v1.1.1.md
  category: MANIFEST_STRUCTURE
  severity: HIGH
  enforcement: MUST
  description: manifest.yaml MUSS deployment.kubernetes.manifests_location definieren
  sot_artefakte:
    python: validate_md_manifest_025() in sot_validator_core.py
    rego: MD-MANIFEST-025 deny rule in sot_policy.rego
    cli: --rules MD-MANIFEST-025 flag supported
    test: test_md_manifest_025() in test_sot_validator.py
- rule_id: MD-MANIFEST-026
  source: ssid_master_definition_corrected_v1.1.1.md
  category: MANIFEST_STRUCTURE
  severity: HIGH
  enforcement: MUST
  description: manifest.yaml MUSS deployment.helm.chart_location definieren
  sot_artefakte:
    python: validate_md_manifest_026() in sot_validator_core.py
    rego: MD-MANIFEST-026 deny rule in sot_policy.rego
    cli: --rules MD-MANIFEST-026 flag supported
    test: test_md_manifest_026() in test_sot_validator.py
- rule_id: MD-MANIFEST-027
  source: ssid_master_definition_corrected_v1.1.1.md
  category: MANIFEST_STRUCTURE
  severity: HIGH
  enforcement: MUST
  description: manifest.yaml MUSS deployment.environment_variables definieren
  sot_artefakte:
    python: validate_md_manifest_027() in sot_validator_core.py
    rego: MD-MANIFEST-027 deny rule in sot_policy.rego
    cli: --rules MD-MANIFEST-027 flag supported
    test: test_md_manifest_027() in test_sot_validator.py
- rule_id: MD-MANIFEST-029
  source: ssid_master_definition_corrected_v1.1.1.md
  category: MANIFEST_STRUCTURE
  severity: CRITICAL
  enforcement: MUST
  description: manifest.yaml MUSS testing.unit_tests.coverage_target>=80 definieren
  sot_artefakte:
    python: validate_md_manifest_029() in sot_validator_core.py
    rego: MD-MANIFEST-029 deny rule in sot_policy.rego
    cli: --rules MD-MANIFEST-029 flag supported
    test: test_md_manifest_029() in test_sot_validator.py
- rule_id: MD-MANIFEST-032
  source: ssid_master_definition_corrected_v1.1.1.md
  category: MANIFEST_STRUCTURE
  severity: CRITICAL
  enforcement: MUST
  description: manifest.yaml MUSS testing.security_tests definieren
  sot_artefakte:
    python: validate_md_manifest_032() in sot_validator_core.py
    rego: MD-MANIFEST-032 deny rule in sot_policy.rego
    cli: --rules MD-MANIFEST-032 flag supported
    test: test_md_manifest_032() in test_sot_validator.py
- rule_id: MD-MANIFEST-033
  source: ssid_master_definition_corrected_v1.1.1.md
  category: MANIFEST_STRUCTURE
  severity: HIGH
  enforcement: MUST
  description: manifest.yaml MUSS testing.performance_tests definieren
  sot_artefakte:
    python: validate_md_manifest_033() in sot_validator_core.py
    rego: MD-MANIFEST-033 deny rule in sot_policy.rego
    cli: --rules MD-MANIFEST-033 flag supported
    test: test_md_manifest_033() in test_sot_validator.py
- rule_id: MD-MANIFEST-036
  source: ssid_master_definition_corrected_v1.1.1.md
  category: MANIFEST_STRUCTURE
  severity: HIGH
  enforcement: MUST
  description: manifest.yaml MUSS observability.logging.format=json definieren
  sot_artefakte:
    python: validate_md_manifest_036() in sot_validator_core.py
    rego: MD-MANIFEST-036 deny rule in sot_policy.rego
    cli: --rules MD-MANIFEST-036 flag supported
    test: test_md_manifest_036() in test_sot_validator.py
- rule_id: MD-MANIFEST-038
  source: ssid_master_definition_corrected_v1.1.1.md
  category: MANIFEST_STRUCTURE
  severity: CRITICAL
  enforcement: MUST
  description: manifest.yaml MUSS observability.health_checks.liveness definieren
  sot_artefakte:
    python: validate_md_manifest_038() in sot_validator_core.py
    rego: MD-MANIFEST-038 deny rule in sot_policy.rego
    cli: --rules MD-MANIFEST-038 flag supported
    test: test_md_manifest_038() in test_sot_validator.py
- rule_id: MD-MANIFEST-039
  source: ssid_master_definition_corrected_v1.1.1.md
  category: MANIFEST_STRUCTURE
  severity: CRITICAL
  enforcement: MUST
  description: manifest.yaml MUSS observability.health_checks.readiness definieren
  sot_artefakte:
    python: validate_md_manifest_039() in sot_validator_core.py
    rego: MD-MANIFEST-039 deny rule in sot_policy.rego
    cli: --rules MD-MANIFEST-039 flag supported
    test: test_md_manifest_039() in test_sot_validator.py
- rule_id: MD-MANIFEST-040
  source: ssid_master_definition_corrected_v1.1.1.md
  category: MANIFEST_STRUCTURE
  severity: MEDIUM
  enforcement: MUST
  description: manifest.yaml MUSS development.setup definieren
  sot_artefakte:
    python: validate_md_manifest_040() in sot_validator_core.py
    rego: MD-MANIFEST-040 deny rule in sot_policy.rego
    cli: --rules MD-MANIFEST-040 flag supported
    test: test_md_manifest_040() in test_sot_validator.py
- rule_id: MD-MANIFEST-041
  source: ssid_master_definition_corrected_v1.1.1.md
  category: MANIFEST_STRUCTURE
  severity: MEDIUM
  enforcement: MUST
  description: manifest.yaml MUSS development.local_development definieren
  sot_artefakte:
    python: validate_md_manifest_041() in sot_validator_core.py
    rego: MD-MANIFEST-041 deny rule in sot_policy.rego
    cli: --rules MD-MANIFEST-041 flag supported
    test: test_md_manifest_041() in test_sot_validator.py
- rule_id: MD-MANIFEST-042
  source: ssid_master_definition_corrected_v1.1.1.md
  category: MANIFEST_STRUCTURE
  severity: HIGH
  enforcement: MUST
  description: manifest.yaml MUSS development.pre_commit_hooks definieren
  sot_artefakte:
    python: validate_md_manifest_042() in sot_validator_core.py
    rego: MD-MANIFEST-042 deny rule in sot_policy.rego
    cli: --rules MD-MANIFEST-042 flag supported
    test: test_md_manifest_042() in test_sot_validator.py
- rule_id: MD-MANIFEST-046
  source: ssid_master_definition_corrected_v1.1.1.md
  category: MANIFEST_STRUCTURE
  severity: HIGH
  enforcement: MUST
  description: manifest.yaml MUSS performance.baseline_benchmarks definieren
  sot_artefakte:
    python: validate_md_manifest_046() in sot_validator_core.py
    rego: MD-MANIFEST-046 deny rule in sot_policy.rego
    cli: --rules MD-MANIFEST-046 flag supported
    test: test_md_manifest_046() in test_sot_validator.py
- rule_id: MD-MANIFEST-047
  source: ssid_master_definition_corrected_v1.1.1.md
  category: MANIFEST_STRUCTURE
  severity: HIGH
  enforcement: MUST
  description: manifest.yaml MUSS performance.optimization_targets definieren
  sot_artefakte:
    python: validate_md_manifest_047() in sot_validator_core.py
    rego: MD-MANIFEST-047 deny rule in sot_policy.rego
    cli: --rules MD-MANIFEST-047 flag supported
    test: test_md_manifest_047() in test_sot_validator.py
- rule_id: MD-MANIFEST-048
  source: ssid_master_definition_corrected_v1.1.1.md
  category: MANIFEST_STRUCTURE
  severity: HIGH
  enforcement: MUST
  description: manifest.yaml MUSS performance.resource_requirements definieren
  sot_artefakte:
    python: validate_md_manifest_048() in sot_validator_core.py
    rego: MD-MANIFEST-048 deny rule in sot_policy.rego
    cli: --rules MD-MANIFEST-048 flag supported
    test: test_md_manifest_048() in test_sot_validator.py
- rule_id: MD-MANIFEST-049
  source: ssid_master_definition_corrected_v1.1.1.md
  category: MANIFEST_STRUCTURE
  severity: MEDIUM
  enforcement: MUST
  description: manifest.yaml MUSS changelog.location=CHANGELOG.md definieren
  sot_artefakte:
    python: validate_md_manifest_049() in sot_validator_core.py
    rego: MD-MANIFEST-049 deny rule in sot_policy.rego
    cli: --rules MD-MANIFEST-049 flag supported
    test: test_md_manifest_049() in test_sot_validator.py
- rule_id: MD-MANIFEST-050
  source: ssid_master_definition_corrected_v1.1.1.md
  category: MANIFEST_STRUCTURE
  severity: MEDIUM
  enforcement: MUST
  description: manifest.yaml MUSS support.contacts definieren
  sot_artefakte:
    python: validate_md_manifest_050() in sot_validator_core.py
    rego: MD-MANIFEST-050 deny rule in sot_policy.rego
    cli: --rules MD-MANIFEST-050 flag supported
    test: test_md_manifest_050() in test_sot_validator.py
- rule_id: MD-POLICY-009
  source: ssid_master_definition_corrected_v1.1.1.md
  category: CRITICAL_POLICIES
  severity: CRITICAL
  enforcement: MUST
  description: Hashing MUSS deterministisch sein
  sot_artefakte:
    python: validate_md_policy_009() in sot_validator_core.py
    rego: MD-POLICY-009 deny rule in sot_policy.rego
    cli: --rules MD-POLICY-009 flag supported
    test: test_md_policy_009() in test_sot_validator.py
- rule_id: MD-POLICY-012
  source: ssid_master_definition_corrected_v1.1.1.md
  category: CRITICAL_POLICIES
  severity: CRITICAL
  enforcement: MUST
  description: Purpose Limitation MUSS erzwungen werden
  sot_artefakte:
    python: validate_md_policy_012() in sot_validator_core.py
    rego: MD-POLICY-012 deny rule in sot_policy.rego
    cli: --rules MD-POLICY-012 flag supported
    test: test_md_policy_012() in test_sot_validator.py
- rule_id: MD-POLICY-023
  source: ssid_master_definition_corrected_v1.1.1.md
  category: CRITICAL_POLICIES
  severity: CRITICAL
  enforcement: MUST
  description: Hourly Anchoring MUSS implementiert sein
  sot_artefakte:
    python: validate_md_policy_023() in sot_validator_core.py
    rego: MD-POLICY-023 deny rule in sot_policy.rego
    cli: --rules MD-POLICY-023 flag supported
    test: test_md_policy_023() in test_sot_validator.py
- rule_id: MD-POLICY-027
  source: ssid_master_definition_corrected_v1.1.1.md
  category: CRITICAL_POLICIES
  severity: CRITICAL
  enforcement: MUST
  description: Encryption MUSS AES-256-GCM verwenden
  sot_artefakte:
    python: validate_md_policy_027() in sot_validator_core.py
    rego: MD-POLICY-027 deny rule in sot_policy.rego
    cli: --rules MD-POLICY-027 flag supported
    test: test_md_policy_027() in test_sot_validator.py
- rule_id: MD-POLICY-028
  source: ssid_master_definition_corrected_v1.1.1.md
  category: CRITICAL_POLICIES
  severity: CRITICAL
  enforcement: MUST
  description: TLS 1.3 MUSS für in-transit encryption verwendet werden
  sot_artefakte:
    python: validate_md_policy_028() in sot_validator_core.py
    rego: MD-POLICY-028 deny rule in sot_policy.rego
    cli: --rules MD-POLICY-028 flag supported
    test: test_md_policy_028() in test_sot_validator.py
- rule_id: MD-PRINC-007
  source: ssid_master_definition_corrected_v1.1.1.md
  category: CORE_PRINCIPLES
  severity: CRITICAL
  enforcement: MUST
  description: RBAC MUSS für alle Zugriffe implementiert sein
  sot_artefakte:
    python: validate_md_princ_007() in sot_validator_core.py
    rego: MD-PRINC-007 deny rule in sot_policy.rego
    cli: --rules MD-PRINC-007 flag supported
    test: test_md_princ_007() in test_sot_validator.py
- rule_id: MD-PRINC-009
  source: ssid_master_definition_corrected_v1.1.1.md
  category: CORE_PRINCIPLES
  severity: HIGH
  enforcement: MUST
  description: Continuous Vulnerability Scanning MUSS implementiert sein
  sot_artefakte:
    python: validate_md_princ_009() in sot_validator_core.py
    rego: MD-PRINC-009 deny rule in sot_policy.rego
    cli: --rules MD-PRINC-009 flag supported
    test: test_md_princ_009() in test_sot_validator.py
- rule_id: MD-PRINC-013
  source: ssid_master_definition_corrected_v1.1.1.md
  category: CORE_PRINCIPLES
  severity: HIGH
  enforcement: MUST
  description: AlertManager MUSS für Alerting integriert sein
  sot_artefakte:
    python: validate_md_princ_013() in sot_validator_core.py
    rego: MD-PRINC-013 deny rule in sot_policy.rego
    cli: --rules MD-PRINC-013 flag supported
    test: test_md_princ_013() in test_sot_validator.py
- rule_id: MD-PRINC-018
  source: ssid_master_definition_corrected_v1.1.1.md
  category: CORE_PRINCIPLES
  severity: MEDIUM
  enforcement: MUST
  description: Load Balancing MUSS konfiguriert sein
  sot_artefakte:
    python: validate_md_princ_018() in sot_validator_core.py
    rego: MD-PRINC-018 deny rule in sot_policy.rego
    cli: --rules MD-PRINC-018 flag supported
    test: test_md_princ_018() in test_sot_validator.py
- rule_id: MD-PRINC-019
  source: ssid_master_definition_corrected_v1.1.1.md
  category: CORE_PRINCIPLES
  severity: MEDIUM
  enforcement: MUST
  description: Caching-Strategien MÜSSEN definiert sein
  sot_artefakte:
    python: validate_md_princ_019() in sot_validator_core.py
    rego: MD-PRINC-019 deny rule in sot_policy.rego
    cli: --rules MD-PRINC-019 flag supported
    test: test_md_princ_019() in test_sot_validator.py
- rule_id: MD-PRINC-020
  source: ssid_master_definition_corrected_v1.1.1.md
  category: CORE_PRINCIPLES
  severity: HIGH
  enforcement: MUST
  description: Performance-Benchmarks MÜSSEN als Gates definiert sein
  sot_artefakte:
    python: validate_md_princ_020() in sot_validator_core.py
    rego: MD-PRINC-020 deny rule in sot_policy.rego
    cli: --rules MD-PRINC-020 flag supported
    test: test_md_princ_020() in test_sot_validator.py
- rule_id: MD-GOV-005
  source: ssid_master_definition_corrected_v1.1.1.md
  category: VERSIONING_GOVERNANCE
  severity: HIGH
  enforcement: MUST
  description: Compliance Team MUSS Policies prüfen
  sot_artefakte:
    python: validate_md_gov_005() in sot_validator_core.py
    rego: MD-GOV-005 deny rule in sot_policy.rego
    cli: --rules MD-GOV-005 flag supported
    test: test_md_gov_005() in test_sot_validator.py
- rule_id: MD-GOV-006
  source: ssid_master_definition_corrected_v1.1.1.md
  category: VERSIONING_GOVERNANCE
  severity: HIGH
  enforcement: MUST
  description: Compliance Team MUSS Constraints genehmigen
  sot_artefakte:
    python: validate_md_gov_006() in sot_validator_core.py
    rego: MD-GOV-006 deny rule in sot_policy.rego
    cli: --rules MD-GOV-006 flag supported
    test: test_md_gov_006() in test_sot_validator.py
- rule_id: MD-GOV-007
  source: ssid_master_definition_corrected_v1.1.1.md
  category: VERSIONING_GOVERNANCE
  severity: HIGH
  enforcement: MUST
  description: Security Team MUSS Threat Modeling durchführen
  sot_artefakte:
    python: validate_md_gov_007() in sot_validator_core.py
    rego: MD-GOV-007 deny rule in sot_policy.rego
    cli: --rules MD-GOV-007 flag supported
    test: test_md_gov_007() in test_sot_validator.py
- rule_id: MD-GOV-008
  source: ssid_master_definition_corrected_v1.1.1.md
  category: VERSIONING_GOVERNANCE
  severity: HIGH
  enforcement: MUST
  description: Change-Prozess MUSS 7 Schritte haben
  sot_artefakte:
    python: validate_md_gov_008() in sot_validator_core.py
    rego: MD-GOV-008 deny rule in sot_policy.rego
    cli: --rules MD-GOV-008 flag supported
    test: test_md_gov_008() in test_sot_validator.py
- rule_id: MD-GOV-009
  source: ssid_master_definition_corrected_v1.1.1.md
  category: VERSIONING_GOVERNANCE
  severity: HIGH
  enforcement: MUST
  description: SHOULD->MUST promotion MUSS 90d + 99.5% SLA erfüllen
  sot_artefakte:
    python: validate_md_gov_009() in sot_validator_core.py
    rego: MD-GOV-009 deny rule in sot_policy.rego
    cli: --rules MD-GOV-009 flag supported
    test: test_md_gov_009() in test_sot_validator.py
- rule_id: MD-GOV-010
  source: ssid_master_definition_corrected_v1.1.1.md
  category: VERSIONING_GOVERNANCE
  severity: HIGH
  enforcement: MUST
  description: SHOULD->MUST promotion MUSS 95% Contract Test Coverage erfüllen
  sot_artefakte:
    python: validate_md_gov_010() in sot_validator_core.py
    rego: MD-GOV-010 deny rule in sot_policy.rego
    cli: --rules MD-GOV-010 flag supported
    test: test_md_gov_010() in test_sot_validator.py
- rule_id: MD-GOV-011
  source: ssid_master_definition_corrected_v1.1.1.md
  category: VERSIONING_GOVERNANCE
  severity: HIGH
  enforcement: MUST
  description: HAVE->SHOULD promotion MUSS Feature complete + Beta + Doku erfüllen
  sot_artefakte:
    python: validate_md_gov_011() in sot_validator_core.py
    rego: MD-GOV-011 deny rule in sot_policy.rego
    cli: --rules MD-GOV-011 flag supported
    test: test_md_gov_011() in test_sot_validator.py
- rule_id: MD-EXT-012
  source: ssid_master_definition_corrected_v1.1.1.md
  category: EXTENSIONS
  severity: MEDIUM
  enforcement: MUST
  description: OPA MUSS string_similarity() helper function haben
  sot_artefakte:
    python: validate_md_ext_012() in sot_validator_core.py
    rego: MD-EXT-012 meta-rule validated separately
    cli: --rules MD-EXT-012 flag supported
    test: test_md_ext_012() in test_sot_validator.py
- rule_id: MD-EXT-014
  source: ssid_master_definition_corrected_v1.1.1.md
  category: EXTENSIONS
  severity: MEDIUM
  enforcement: MUST
  description: CI MUSS schedule 0 0 1 */3 * quarterly audit haben
  sot_artefakte:
    python: validate_md_ext_014() in sot_validator_core.py
    rego: MD-EXT-014 deny rule in sot_policy.rego
    cli: --rules MD-EXT-014 flag supported
    test: test_md_ext_014() in test_sot_validator.py
- rule_id: MD-EXT-015
  source: ssid_master_definition_corrected_v1.1.1.md
  category: EXTENSIONS
  severity: LOW
  enforcement: MUST
  description: CI MUSS actions/upload-artifact@v4 verwenden
  sot_artefakte:
    python: validate_md_ext_015() in sot_validator_core.py
    rego: MD-EXT-015 deny rule in sot_policy.rego
    cli: --rules MD-EXT-015 flag supported
    test: test_md_ext_015() in test_sot_validator.py
- rule_id: MD-EXT-018
  source: ssid_master_definition_corrected_v1.1.1.md
  category: EXTENSIONS
  severity: HIGH
  enforcement: MUST
  description: Sanctions MUSS sha256 Hash verwenden
  sot_artefakte:
    python: validate_md_ext_018() in sot_validator_core.py
    rego: MD-EXT-018 deny rule in sot_policy.rego
    cli: --rules MD-EXT-018 flag supported
    test: test_md_ext_018() in test_sot_validator.py
- rule_id: CS001
  category: CHART_STRUCTURE
  type: MUST
  severity: HIGH
  description: chart.yaml MUSS metadata.shard_id, version, status enthalten
  source: SSID Master Definition v1.1.1
  rationale: Chart Structure requirement for SSID compliance
  enforcement:
    type: RECOMMENDED
    validation: sot_validator_core.py::validate_cs001()
    policy: sot_policy.rego::cs001_check
    test: test_sot_validator.py::test_cs001()
  implementation_status: implemented_in_validator
  implementation_requirements:
  - 'Python Validator: validate_cs001() exists'
  - 'OPA Policy: cs001_check rule'
  - 'Contract YAML: CS001 definition'
  - 'Test: test_cs001() passing'
- rule_id: CS002
  category: CHART_STRUCTURE
  type: MUST
  severity: HIGH
  description: chart.yaml MUSS governance.owner mit team, lead, contact haben
  source: SSID Master Definition v1.1.1
  rationale: Chart Structure requirement for SSID compliance
  enforcement:
    type: RECOMMENDED
    validation: sot_validator_core.py::validate_cs002()
    policy: sot_policy.rego::cs002_check
    test: test_sot_validator.py::test_cs002()
  implementation_status: implemented_in_validator
  implementation_requirements:
  - 'Python Validator: validate_cs002() exists'
  - 'OPA Policy: cs002_check rule'
  - 'Contract YAML: CS002 definition'
  - 'Test: test_cs002() passing'
- rule_id: CS003
  category: CHART_STRUCTURE
  type: MUST
  severity: HIGH
  description: chart.yaml MUSS capabilities mit MUST/SHOULD/HAVE kategorisieren
  source: SSID Master Definition v1.1.1
  rationale: Chart Structure requirement for SSID compliance
  enforcement:
    type: RECOMMENDED
    validation: sot_validator_core.py::validate_cs003()
    policy: sot_policy.rego::cs003_check
    test: test_sot_validator.py::test_cs003()
  implementation_status: implemented_in_validator
  implementation_requirements:
  - 'Python Validator: validate_cs003() exists'
  - 'OPA Policy: cs003_check rule'
  - 'Contract YAML: CS003 definition'
  - 'Test: test_cs003() passing'
- rule_id: CS004
  category: CHART_STRUCTURE
  type: MUST
  severity: HIGH
  description: chart.yaml MUSS constraints für pii_storage, data_policy, custody definieren
  source: SSID Master Definition v1.1.1
  rationale: Chart Structure requirement for SSID compliance
  enforcement:
    type: RECOMMENDED
    validation: sot_validator_core.py::validate_cs004()
    policy: sot_policy.rego::cs004_check
    test: test_sot_validator.py::test_cs004()
  implementation_status: implemented_in_validator
  implementation_requirements:
  - 'Python Validator: validate_cs004() exists'
  - 'OPA Policy: cs004_check rule'
  - 'Contract YAML: CS004 definition'
  - 'Test: test_cs004() passing'
- rule_id: CS005
  category: CHART_STRUCTURE
  type: MUST
  severity: HIGH
  description: chart.yaml MUSS enforcement mit static_analysis, runtime_checks, audit
    haben
  source: SSID Master Definition v1.1.1
  rationale: Chart Structure requirement for SSID compliance
  enforcement:
    type: RECOMMENDED
    validation: sot_validator_core.py::validate_cs005()
    policy: sot_policy.rego::cs005_check
    test: test_sot_validator.py::test_cs005()
  implementation_status: implemented_in_validator
  implementation_requirements:
  - 'Python Validator: validate_cs005() exists'
  - 'OPA Policy: cs005_check rule'
  - 'Contract YAML: CS005 definition'
  - 'Test: test_cs005() passing'
- rule_id: CS006
  category: CHART_STRUCTURE
  type: MUST
  severity: HIGH
  description: chart.yaml MUSS interfaces.contracts mit OpenAPI-Specs referenzieren
  source: SSID Master Definition v1.1.1
  rationale: Chart Structure requirement for SSID compliance
  enforcement:
    type: RECOMMENDED
    validation: sot_validator_core.py::validate_cs006()
    policy: sot_policy.rego::cs006_check
    test: test_sot_validator.py::test_cs006()
  implementation_status: implemented_in_validator
  implementation_requirements:
  - 'Python Validator: validate_cs006() exists'
  - 'OPA Policy: cs006_check rule'
  - 'Contract YAML: CS006 definition'
  - 'Test: test_cs006() passing'
- rule_id: CS007
  category: CHART_STRUCTURE
  type: MUST
  severity: HIGH
  description: chart.yaml MUSS dependencies.required auflisten
  source: SSID Master Definition v1.1.1
  rationale: Chart Structure requirement for SSID compliance
  enforcement:
    type: RECOMMENDED
    validation: sot_validator_core.py::validate_cs007()
    policy: sot_policy.rego::cs007_check
    test: test_sot_validator.py::test_cs007()
  implementation_status: implemented_in_validator
  implementation_requirements:
  - 'Python Validator: validate_cs007() exists'
  - 'OPA Policy: cs007_check rule'
  - 'Contract YAML: CS007 definition'
  - 'Test: test_cs007() passing'
- rule_id: CS008
  category: CHART_STRUCTURE
  type: MUST
  severity: HIGH
  description: chart.yaml MUSS implementations.default und available definieren
  source: SSID Master Definition v1.1.1
  rationale: Chart Structure requirement for SSID compliance
  enforcement:
    type: RECOMMENDED
    validation: sot_validator_core.py::validate_cs008()
    policy: sot_policy.rego::cs008_check
    test: test_sot_validator.py::test_cs008()
  implementation_status: implemented_in_validator
  implementation_requirements:
  - 'Python Validator: validate_cs008() exists'
  - 'OPA Policy: cs008_check rule'
  - 'Contract YAML: CS008 definition'
  - 'Test: test_cs008() passing'
- rule_id: CS009
  category: CHART_STRUCTURE
  type: MUST
  severity: HIGH
  description: chart.yaml MUSS conformance.contract_tests definieren
  source: SSID Master Definition v1.1.1
  rationale: Chart Structure requirement for SSID compliance
  enforcement:
    type: RECOMMENDED
    validation: sot_validator_core.py::validate_cs009()
    policy: sot_policy.rego::cs009_check
    test: test_sot_validator.py::test_cs009()
  implementation_status: implemented_in_validator
  implementation_requirements:
  - 'Python Validator: validate_cs009() exists'
  - 'OPA Policy: cs009_check rule'
  - 'Contract YAML: CS009 definition'
  - 'Test: test_cs009() passing'
- rule_id: CS010
  category: CHART_STRUCTURE
  type: MUST
  severity: HIGH
  description: chart.yaml MUSS observability mit metrics, tracing, logging definieren
  source: SSID Master Definition v1.1.1
  rationale: Chart Structure requirement for SSID compliance
  enforcement:
    type: RECOMMENDED
    validation: sot_validator_core.py::validate_cs010()
    policy: sot_policy.rego::cs010_check
    test: test_sot_validator.py::test_cs010()
  implementation_status: implemented_in_validator
  implementation_requirements:
  - 'Python Validator: validate_cs010() exists'
  - 'OPA Policy: cs010_check rule'
  - 'Contract YAML: CS010 definition'
  - 'Test: test_cs010() passing'
- rule_id: CS011
  category: CHART_STRUCTURE
  type: MUST
  severity: HIGH
  description: chart.yaml MUSS security.threat_model referenzieren
  source: SSID Master Definition v1.1.1
  rationale: Chart Structure requirement for SSID compliance
  enforcement:
    type: RECOMMENDED
    validation: sot_validator_core.py::validate_cs011()
    policy: sot_policy.rego::cs011_check
    test: test_sot_validator.py::test_cs011()
  implementation_status: implemented_in_validator
  implementation_requirements:
  - 'Python Validator: validate_cs011() exists'
  - 'OPA Policy: cs011_check rule'
  - 'Contract YAML: CS011 definition'
  - 'Test: test_cs011() passing'
- rule_id: MS001
  category: MANIFEST_STRUCTURE
  type: MUST
  severity: HIGH
  description: manifest.yaml MUSS root_folder, shard_id, shard_name enthalten
  source: SSID Master Definition v1.1.1
  rationale: Manifest Structure requirement for SSID compliance
  enforcement:
    type: RECOMMENDED
    validation: sot_validator_core.py::validate_ms001()
    policy: sot_policy.rego::ms001_check
    test: test_sot_validator.py::test_ms001()
  implementation_status: implemented_in_validator
  implementation_requirements:
  - 'Python Validator: validate_ms001() exists'
  - 'OPA Policy: ms001_check rule'
  - 'Contract YAML: MS001 definition'
  - 'Test: test_ms001() passing'
- rule_id: MS002
  category: MANIFEST_STRUCTURE
  type: MUST
  severity: HIGH
  description: manifest.yaml MUSS metadata mit version, status, last_updated haben
  source: SSID Master Definition v1.1.1
  rationale: Manifest Structure requirement for SSID compliance
  enforcement:
    type: RECOMMENDED
    validation: sot_validator_core.py::validate_ms002()
    policy: sot_policy.rego::ms002_check
    test: test_sot_validator.py::test_ms002()
  implementation_status: implemented_in_validator
  implementation_requirements:
  - 'Python Validator: validate_ms002() exists'
  - 'OPA Policy: ms002_check rule'
  - 'Contract YAML: MS002 definition'
  - 'Test: test_ms002() passing'
- rule_id: MS003
  category: MANIFEST_STRUCTURE
  type: MUST
  severity: HIGH
  description: manifest.yaml MUSS business_model definieren
  source: SSID Master Definition v1.1.1
  rationale: Manifest Structure requirement for SSID compliance
  enforcement:
    type: RECOMMENDED
    validation: sot_validator_core.py::validate_ms003()
    policy: sot_policy.rego::ms003_check
    test: test_sot_validator.py::test_ms003()
  implementation_status: implemented_in_validator
  implementation_requirements:
  - 'Python Validator: validate_ms003() exists'
  - 'OPA Policy: ms003_check rule'
  - 'Contract YAML: MS003 definition'
  - 'Test: test_ms003() passing'
- rule_id: MS004
  category: MANIFEST_STRUCTURE
  type: MUST
  severity: HIGH
  description: manifest.yaml MUSS pii_handling mit categories und storage_policy haben
  source: SSID Master Definition v1.1.1
  rationale: Manifest Structure requirement for SSID compliance
  enforcement:
    type: RECOMMENDED
    validation: sot_validator_core.py::validate_ms004()
    policy: sot_policy.rego::ms004_check
    test: test_sot_validator.py::test_ms004()
  implementation_status: implemented_in_validator
  implementation_requirements:
  - 'Python Validator: validate_ms004() exists'
  - 'OPA Policy: ms004_check rule'
  - 'Contract YAML: MS004 definition'
  - 'Test: test_ms004() passing'
- rule_id: MS005
  category: MANIFEST_STRUCTURE
  type: MUST
  severity: HIGH
  description: manifest.yaml MUSS compliance_utilities definieren
  source: SSID Master Definition v1.1.1
  rationale: Manifest Structure requirement for SSID compliance
  enforcement:
    type: RECOMMENDED
    validation: sot_validator_core.py::validate_ms005()
    policy: sot_policy.rego::ms005_check
    test: test_sot_validator.py::test_ms005()
  implementation_status: implemented_in_validator
  implementation_requirements:
  - 'Python Validator: validate_ms005() exists'
  - 'OPA Policy: ms005_check rule'
  - 'Contract YAML: MS005 definition'
  - 'Test: test_ms005() passing'
- rule_id: MS006
  category: MANIFEST_STRUCTURE
  type: MUST
  severity: HIGH
  description: manifest.yaml MUSS ownership mit team und contact haben
  source: SSID Master Definition v1.1.1
  rationale: Manifest Structure requirement for SSID compliance
  enforcement:
    type: RECOMMENDED
    validation: sot_validator_core.py::validate_ms006()
    policy: sot_policy.rego::ms006_check
    test: test_sot_validator.py::test_ms006()
  implementation_status: implemented_in_validator
  implementation_requirements:
  - 'Python Validator: validate_ms006() exists'
  - 'OPA Policy: ms006_check rule'
  - 'Contract YAML: MS006 definition'
  - 'Test: test_ms006() passing'
- rule_id: KP001
  category: CORE_PRINCIPLES
  type: MUST
  severity: CRITICAL
  description: 'Non-Custodial Principle: System NIEMALS private keys speichern'
  source: SSID Master Definition v1.1.1
  rationale: Core Principles requirement for SSID compliance
  enforcement:
    type: MANDATORY
    validation: sot_validator_core.py::validate_kp001()
    policy: sot_policy.rego::kp001_check
    test: test_sot_validator.py::test_kp001()
  implementation_status: implemented_in_validator
  implementation_requirements:
  - 'Python Validator: validate_kp001() exists'
  - 'OPA Policy: kp001_check rule'
  - 'Contract YAML: KP001 definition'
  - 'Test: test_kp001() passing'
- rule_id: KP002
  category: CORE_PRINCIPLES
  type: MUST
  severity: CRITICAL
  description: 'Hash-Only Storage: PII NIEMALS im Klartext speichern'
  source: SSID Master Definition v1.1.1
  rationale: Core Principles requirement for SSID compliance
  enforcement:
    type: MANDATORY
    validation: sot_validator_core.py::validate_kp002()
    policy: sot_policy.rego::kp002_check
    test: test_sot_validator.py::test_kp002()
  implementation_status: implemented_in_validator
  implementation_requirements:
  - 'Python Validator: validate_kp002() exists'
  - 'OPA Policy: kp002_check rule'
  - 'Contract YAML: KP002 definition'
  - 'Test: test_kp002() passing'
- rule_id: KP003
  category: CORE_PRINCIPLES
  type: MUST
  severity: CRITICAL
  description: 'Zero-Knowledge Proofs: ZKP für sensible Daten verwenden'
  source: SSID Master Definition v1.1.1
  rationale: Core Principles requirement for SSID compliance
  enforcement:
    type: MANDATORY
    validation: sot_validator_core.py::validate_kp003()
    policy: sot_policy.rego::kp003_check
    test: test_sot_validator.py::test_kp003()
  implementation_status: implemented_in_validator
  implementation_requirements:
  - 'Python Validator: validate_kp003() exists'
  - 'OPA Policy: kp003_check rule'
  - 'Contract YAML: KP003 definition'
  - 'Test: test_kp003() passing'
- rule_id: KP004
  category: CORE_PRINCIPLES
  type: MUST
  severity: CRITICAL
  description: 'Selective Disclosure: Minimale Daten offenlegen'
  source: SSID Master Definition v1.1.1
  rationale: Core Principles requirement for SSID compliance
  enforcement:
    type: MANDATORY
    validation: sot_validator_core.py::validate_kp004()
    policy: sot_policy.rego::kp004_check
    test: test_sot_validator.py::test_kp004()
  implementation_status: implemented_in_validator
  implementation_requirements:
  - 'Python Validator: validate_kp004() exists'
  - 'OPA Policy: kp004_check rule'
  - 'Contract YAML: KP004 definition'
  - 'Test: test_kp004() passing'
- rule_id: KP005
  category: CORE_PRINCIPLES
  type: MUST
  severity: CRITICAL
  description: 'Privacy-by-Design: Datenschutz ab Entwicklungsphase'
  source: SSID Master Definition v1.1.1
  rationale: Core Principles requirement for SSID compliance
  enforcement:
    type: MANDATORY
    validation: sot_validator_core.py::validate_kp005()
    policy: sot_policy.rego::kp005_check
    test: test_sot_validator.py::test_kp005()
  implementation_status: implemented_in_validator
  implementation_requirements:
  - 'Python Validator: validate_kp005() exists'
  - 'OPA Policy: kp005_check rule'
  - 'Contract YAML: KP005 definition'
  - 'Test: test_kp005() passing'
- rule_id: KP006
  category: CORE_PRINCIPLES
  type: MUST
  severity: CRITICAL
  description: 'Data Minimization: Nur notwendige Daten sammeln'
  source: SSID Master Definition v1.1.1
  rationale: Core Principles requirement for SSID compliance
  enforcement:
    type: MANDATORY
    validation: sot_validator_core.py::validate_kp006()
    policy: sot_policy.rego::kp006_check
    test: test_sot_validator.py::test_kp006()
  implementation_status: implemented_in_validator
  implementation_requirements:
  - 'Python Validator: validate_kp006() exists'
  - 'OPA Policy: kp006_check rule'
  - 'Contract YAML: KP006 definition'
  - 'Test: test_kp006() passing'
- rule_id: KP007
  category: CORE_PRINCIPLES
  type: MUST
  severity: CRITICAL
  description: 'Purpose Limitation: Daten nur für deklarierten Zweck nutzen'
  source: SSID Master Definition v1.1.1
  rationale: Core Principles requirement for SSID compliance
  enforcement:
    type: MANDATORY
    validation: sot_validator_core.py::validate_kp007()
    policy: sot_policy.rego::kp007_check
    test: test_sot_validator.py::test_kp007()
  implementation_status: implemented_in_validator
  implementation_requirements:
  - 'Python Validator: validate_kp007() exists'
  - 'OPA Policy: kp007_check rule'
  - 'Contract YAML: KP007 definition'
  - 'Test: test_kp007() passing'
- rule_id: KP008
  category: CORE_PRINCIPLES
  type: MUST
  severity: CRITICAL
  description: 'Bias-Aware AI: Fairness Metrics in ML-Modellen'
  source: SSID Master Definition v1.1.1
  rationale: Core Principles requirement for SSID compliance
  enforcement:
    type: MANDATORY
    validation: sot_validator_core.py::validate_kp008()
    policy: sot_policy.rego::kp008_check
    test: test_sot_validator.py::test_kp008()
  implementation_status: implemented_in_validator
  implementation_requirements:
  - 'Python Validator: validate_kp008() exists'
  - 'OPA Policy: kp008_check rule'
  - 'Contract YAML: KP008 definition'
  - 'Test: test_kp008() passing'
- rule_id: KP009
  category: CORE_PRINCIPLES
  type: MUST
  severity: CRITICAL
  description: 'Consent Management: Explizite Nutzer-Zustimmung'
  source: SSID Master Definition v1.1.1
  rationale: Core Principles requirement for SSID compliance
  enforcement:
    type: MANDATORY
    validation: sot_validator_core.py::validate_kp009()
    policy: sot_policy.rego::kp009_check
    test: test_sot_validator.py::test_kp009()
  implementation_status: implemented_in_validator
  implementation_requirements:
  - 'Python Validator: validate_kp009() exists'
  - 'OPA Policy: kp009_check rule'
  - 'Contract YAML: KP009 definition'
  - 'Test: test_kp009() passing'
- rule_id: KP010
  category: CORE_PRINCIPLES
  type: MUST
  severity: CRITICAL
  description: 'Right to Erasure: Hash-Rotation für GDPR-Compliance'
  source: SSID Master Definition v1.1.1
  rationale: Core Principles requirement for SSID compliance
  enforcement:
    type: MANDATORY
    validation: sot_validator_core.py::validate_kp010()
    policy: sot_policy.rego::kp010_check
    test: test_sot_validator.py::test_kp010()
  implementation_status: implemented_in_validator
  implementation_requirements:
  - 'Python Validator: validate_kp010() exists'
  - 'OPA Policy: kp010_check rule'
  - 'Contract YAML: KP010 definition'
  - 'Test: test_kp010() passing'
- rule_id: CE001
  category: CONSOLIDATED_EXTENSIONS
  type: MUST
  severity: HIGH
  description: 'Regulatory Matrix: UK FCA compliance requirements'
  source: SSID Master Definition v1.1.1
  rationale: Consolidated Extensions v1.1.1 requirement for SSID compliance
  enforcement:
    type: RECOMMENDED
    validation: sot_validator_core.py::validate_ce001()
    policy: sot_policy.rego::ce001_check
    test: test_sot_validator.py::test_ce001()
  implementation_status: implemented_in_validator
  implementation_requirements:
  - 'Python Validator: validate_ce001() exists'
  - 'OPA Policy: ce001_check rule'
  - 'Contract YAML: CE001 definition'
  - 'Test: test_ce001() passing'
- rule_id: CE002
  category: CONSOLIDATED_EXTENSIONS
  type: MUST
  severity: HIGH
  description: 'Regulatory Matrix: Singapore MAS compliance requirements'
  source: SSID Master Definition v1.1.1
  rationale: Consolidated Extensions v1.1.1 requirement for SSID compliance
  enforcement:
    type: RECOMMENDED
    validation: sot_validator_core.py::validate_ce002()
    policy: sot_policy.rego::ce002_check
    test: test_sot_validator.py::test_ce002()
  implementation_status: implemented_in_validator
  implementation_requirements:
  - 'Python Validator: validate_ce002() exists'
  - 'OPA Policy: ce002_check rule'
  - 'Contract YAML: CE002 definition'
  - 'Test: test_ce002() passing'
- rule_id: CE003
  category: CONSOLIDATED_EXTENSIONS
  type: MUST
  severity: HIGH
  description: 'Regulatory Matrix: Japan FSA compliance requirements'
  source: SSID Master Definition v1.1.1
  rationale: Consolidated Extensions v1.1.1 requirement for SSID compliance
  enforcement:
    type: RECOMMENDED
    validation: sot_validator_core.py::validate_ce003()
    policy: sot_policy.rego::ce003_check
    test: test_sot_validator.py::test_ce003()
  implementation_status: implemented_in_validator
  implementation_requirements:
  - 'Python Validator: validate_ce003() exists'
  - 'OPA Policy: ce003_check rule'
  - 'Contract YAML: CE003 definition'
  - 'Test: test_ce003() passing'
- rule_id: CE004
  category: CONSOLIDATED_EXTENSIONS
  type: MUST
  severity: HIGH
  description: 'Regulatory Matrix: Australia ASIC compliance requirements'
  source: SSID Master Definition v1.1.1
  rationale: Consolidated Extensions v1.1.1 requirement for SSID compliance
  enforcement:
    type: RECOMMENDED
    validation: sot_validator_core.py::validate_ce004()
    policy: sot_policy.rego::ce004_check
    test: test_sot_validator.py::test_ce004()
  implementation_status: implemented_in_validator
  implementation_requirements:
  - 'Python Validator: validate_ce004() exists'
  - 'OPA Policy: ce004_check rule'
  - 'Contract YAML: CE004 definition'
  - 'Test: test_ce004() passing'
- rule_id: CE005
  category: CONSOLIDATED_EXTENSIONS
  type: MUST
  severity: HIGH
  description: 'OPA Substring-Helper: has_substr function für Policy-Checks'
  source: SSID Master Definition v1.1.1
  rationale: Consolidated Extensions v1.1.1 requirement for SSID compliance
  enforcement:
    type: RECOMMENDED
    validation: sot_validator_core.py::validate_ce005()
    policy: sot_policy.rego::ce005_check
    test: test_sot_validator.py::test_ce005()
  implementation_status: implemented_in_validator
  implementation_requirements:
  - 'Python Validator: validate_ce005() exists'
  - 'OPA Policy: ce005_check rule'
  - 'Contract YAML: CE005 definition'
  - 'Test: test_ce005() passing'
- rule_id: CE006
  category: CONSOLIDATED_EXTENSIONS
  type: MUST
  severity: HIGH
  description: 'Fuzzy-Matching für Sanctions: Levenshtein-Distanz-basierte Prüfung'
  source: SSID Master Definition v1.1.1
  rationale: Consolidated Extensions v1.1.1 requirement for SSID compliance
  enforcement:
    type: RECOMMENDED
    validation: sot_validator_core.py::validate_ce006()
    policy: sot_policy.rego::ce006_check
    test: test_sot_validator.py::test_ce006()
  implementation_status: implemented_in_validator
  implementation_requirements:
  - 'Python Validator: validate_ce006() exists'
  - 'OPA Policy: ce006_check rule'
  - 'Contract YAML: CE006 definition'
  - 'Test: test_ce006() passing'
- rule_id: CE007
  category: CONSOLIDATED_EXTENSIONS
  type: MUST
  severity: HIGH
  description: 'Daily sanctions schedule in CI: Automatische OFAC-Updates'
  source: SSID Master Definition v1.1.1
  rationale: Consolidated Extensions v1.1.1 requirement for SSID compliance
  enforcement:
    type: RECOMMENDED
    validation: sot_validator_core.py::validate_ce007()
    policy: sot_policy.rego::ce007_check
    test: test_sot_validator.py::test_ce007()
  implementation_status: implemented_in_validator
  implementation_requirements:
  - 'Python Validator: validate_ce007() exists'
  - 'OPA Policy: ce007_check rule'
  - 'Contract YAML: CE007 definition'
  - 'Test: test_ce007() passing'
- rule_id: CE008
  category: CONSOLIDATED_EXTENSIONS
  type: MUST
  severity: HIGH
  description: 'DORA incident_response_plan.md requirement: EU Digital Operational
    Resilience Act'
  source: SSID Master Definition v1.1.1
  rationale: Consolidated Extensions v1.1.1 requirement for SSID compliance
  enforcement:
    type: RECOMMENDED
    validation: sot_validator_core.py::validate_ce008()
    policy: sot_policy.rego::ce008_check
    test: test_sot_validator.py::test_ce008()
  implementation_status: implemented_in_validator
  implementation_requirements:
  - 'Python Validator: validate_ce008() exists'
  - 'OPA Policy: ce008_check rule'
  - 'Contract YAML: CE008 definition'
  - 'Test: test_ce008() passing'
- rule_id: TS001
  category: TECHNOLOGY_STANDARDS
  type: MUST
  severity: MEDIUM
  description: OpenAPI 3.x für alle Shard-APIs
  source: SSID Master Definition v1.1.1
  rationale: Technology Standards requirement for SSID compliance
  enforcement:
    type: RECOMMENDED
    validation: sot_validator_core.py::validate_ts001()
    policy: sot_policy.rego::ts001_check
    test: test_sot_validator.py::test_ts001()
  implementation_status: implemented_in_validator
  implementation_requirements:
  - 'Python Validator: validate_ts001() exists'
  - 'OPA Policy: ts001_check rule'
  - 'Contract YAML: TS001 definition'
  - 'Test: test_ts001() passing'
- rule_id: TS002
  category: TECHNOLOGY_STANDARDS
  type: MUST
  severity: MEDIUM
  description: JSON Schema für Contract-Definitionen
  source: SSID Master Definition v1.1.1
  rationale: Technology Standards requirement for SSID compliance
  enforcement:
    type: RECOMMENDED
    validation: sot_validator_core.py::validate_ts002()
    policy: sot_policy.rego::ts002_check
    test: test_sot_validator.py::test_ts002()
  implementation_status: implemented_in_validator
  implementation_requirements:
  - 'Python Validator: validate_ts002() exists'
  - 'OPA Policy: ts002_check rule'
  - 'Contract YAML: TS002 definition'
  - 'Test: test_ts002() passing'
- rule_id: TS003
  category: TECHNOLOGY_STANDARDS
  type: MUST
  severity: MEDIUM
  description: OPA (Open Policy Agent) für Policy Enforcement
  source: SSID Master Definition v1.1.1
  rationale: Technology Standards requirement for SSID compliance
  enforcement:
    type: RECOMMENDED
    validation: sot_validator_core.py::validate_ts003()
    policy: sot_policy.rego::ts003_check
    test: test_sot_validator.py::test_ts003()
  implementation_status: implemented_in_validator
  implementation_requirements:
  - 'Python Validator: validate_ts003() exists'
  - 'OPA Policy: ts003_check rule'
  - 'Contract YAML: TS003 definition'
  - 'Test: test_ts003() passing'
- rule_id: TS004
  category: TECHNOLOGY_STANDARDS
  type: MUST
  severity: MEDIUM
  description: SHA3-256 als primärer Hash-Algorithmus
  source: SSID Master Definition v1.1.1
  rationale: Technology Standards requirement for SSID compliance
  enforcement:
    type: RECOMMENDED
    validation: sot_validator_core.py::validate_ts004()
    policy: sot_policy.rego::ts004_check
    test: test_sot_validator.py::test_ts004()
  implementation_status: implemented_in_validator
  implementation_requirements:
  - 'Python Validator: validate_ts004() exists'
  - 'OPA Policy: ts004_check rule'
  - 'Contract YAML: TS004 definition'
  - 'Test: test_ts004() passing'
- rule_id: TS005
  category: TECHNOLOGY_STANDARDS
  type: MUST
  severity: MEDIUM
  description: EVM-kompatible Smart Contracts
  source: SSID Master Definition v1.1.1
  rationale: Technology Standards requirement for SSID compliance
  enforcement:
    type: RECOMMENDED
    validation: sot_validator_core.py::validate_ts005()
    policy: sot_policy.rego::ts005_check
    test: test_sot_validator.py::test_ts005()
  implementation_status: implemented_in_validator
  implementation_requirements:
  - 'Python Validator: validate_ts005() exists'
  - 'OPA Policy: ts005_check rule'
  - 'Contract YAML: TS005 definition'
  - 'Test: test_ts005() passing'
- rule_id: DC001
  category: DEPLOYMENT_CICD
  type: MUST
  severity: HIGH
  description: GitHub Actions für CI/CD Pipeline
  source: SSID Master Definition v1.1.1
  rationale: Deployment & CI/CD requirement for SSID compliance
  enforcement:
    type: RECOMMENDED
    validation: sot_validator_core.py::validate_dc001()
    policy: sot_policy.rego::dc001_check
    test: test_sot_validator.py::test_dc001()
  implementation_status: implemented_in_validator
  implementation_requirements:
  - 'Python Validator: validate_dc001() exists'
  - 'OPA Policy: dc001_check rule'
  - 'Contract YAML: DC001 definition'
  - 'Test: test_dc001() passing'
- rule_id: DC002
  category: DEPLOYMENT_CICD
  type: MUST
  severity: HIGH
  description: Pre-commit hooks für Policy Enforcement
  source: SSID Master Definition v1.1.1
  rationale: Deployment & CI/CD requirement for SSID compliance
  enforcement:
    type: RECOMMENDED
    validation: sot_validator_core.py::validate_dc002()
    policy: sot_policy.rego::dc002_check
    test: test_sot_validator.py::test_dc002()
  implementation_status: implemented_in_validator
  implementation_requirements:
  - 'Python Validator: validate_dc002() exists'
  - 'OPA Policy: dc002_check rule'
  - 'Contract YAML: DC002 definition'
  - 'Test: test_dc002() passing'
- rule_id: DC003
  category: DEPLOYMENT_CICD
  type: MUST
  severity: HIGH
  description: Artifacts upload mit actions/upload-artifact@v4
  source: SSID Master Definition v1.1.1
  rationale: Deployment & CI/CD requirement for SSID compliance
  enforcement:
    type: RECOMMENDED
    validation: sot_validator_core.py::validate_dc003()
    policy: sot_policy.rego::dc003_check
    test: test_sot_validator.py::test_dc003()
  implementation_status: implemented_in_validator
  implementation_requirements:
  - 'Python Validator: validate_dc003() exists'
  - 'OPA Policy: dc003_check rule'
  - 'Contract YAML: DC003 definition'
  - 'Test: test_dc003() passing'
- rule_id: DC004
  category: DEPLOYMENT_CICD
  type: MUST
  severity: HIGH
  description: 'Deployment strategy: blue-green oder canary'
  source: SSID Master Definition v1.1.1
  rationale: Deployment & CI/CD requirement for SSID compliance
  enforcement:
    type: RECOMMENDED
    validation: sot_validator_core.py::validate_dc004()
    policy: sot_policy.rego::dc004_check
    test: test_sot_validator.py::test_dc004()
  implementation_status: implemented_in_validator
  implementation_requirements:
  - 'Python Validator: validate_dc004() exists'
  - 'OPA Policy: dc004_check rule'
  - 'Contract YAML: DC004 definition'
  - 'Test: test_dc004() passing'
- rule_id: MR001
  category: MATRIX_REGISTRY
  type: MUST
  severity: HIGH
  description: 24×16 Matrix-Struktur enforcement
  source: SSID Master Definition v1.1.1
  rationale: Matrix & Registry requirement for SSID compliance
  enforcement:
    type: RECOMMENDED
    validation: sot_validator_core.py::validate_mr001()
    policy: sot_policy.rego::mr001_check
    test: test_sot_validator.py::test_mr001()
  implementation_status: implemented_in_validator
  implementation_requirements:
  - 'Python Validator: validate_mr001() exists'
  - 'OPA Policy: mr001_check rule'
  - 'Contract YAML: MR001 definition'
  - 'Test: test_mr001() passing'
- rule_id: MR002
  category: MATRIX_REGISTRY
  type: MUST
  severity: HIGH
  description: Chart Registry mit Checksums
  source: SSID Master Definition v1.1.1
  rationale: Matrix & Registry requirement for SSID compliance
  enforcement:
    type: RECOMMENDED
    validation: sot_validator_core.py::validate_mr002()
    policy: sot_policy.rego::mr002_check
    test: test_sot_validator.py::test_mr002()
  implementation_status: implemented_in_validator
  implementation_requirements:
  - 'Python Validator: validate_mr002() exists'
  - 'OPA Policy: mr002_check rule'
  - 'Contract YAML: MR002 definition'
  - 'Test: test_mr002() passing'
- rule_id: MR003
  category: MATRIX_REGISTRY
  type: MUST
  severity: HIGH
  description: Registry repo_scan.json generation
  source: SSID Master Definition v1.1.1
  rationale: Matrix & Registry requirement for SSID compliance
  enforcement:
    type: RECOMMENDED
    validation: sot_validator_core.py::validate_mr003()
    policy: sot_policy.rego::mr003_check
    test: test_sot_validator.py::test_mr003()
  implementation_status: implemented_in_validator
  implementation_requirements:
  - 'Python Validator: validate_mr003() exists'
  - 'OPA Policy: mr003_check rule'
  - 'Contract YAML: MR003 definition'
  - 'Test: test_mr003() passing'
- rule_id: SOT-V2-0002
  category: GENERAL
  type: MUST
  severity: MEDIUM
  description: Semantic rule for 'business_model.data_custody'.
  source:
    file: SSID_structure_level3_part1_MAX.md
    lines: 30-100
    path: business_model.data_custody
  enforcement:
    type: policy+test
    validation: sot_validator_core.py::validate_sot_v2(2)
    policy: sot_policy.rego::sot_v2_sot_v2_0002_check
    test: test_sot_validator.py::test_sot_v2_0002()
  implementation_status: implemented_in_validator
- rule_id: SOT-V2-0163
  category: ECONOMICS
  type: MUST
  severity: HIGH
  description: Semantic rule for 'supply_mechanics'.
  source:
    file: SSID_structure_level3_part1_MAX.md
    lines: 146-250
    path: supply_mechanics
  enforcement:
    type: policy+test
    validation: sot_validator_core.py::validate_sot_v2(163)
    policy: sot_policy.rego::sot_v2_sot_v2_0163_check
    test: test_sot_validator.py::test_sot_v2_0163()
  implementation_status: implemented_in_validator
- rule_id: SOT-V2-0164
  category: ECONOMICS
  type: MUST
  severity: HIGH
  description: Semantic rule for 'supply_mechanics.circulation_controls'.
  source:
    file: SSID_structure_level3_part1_MAX.md
    lines: 146-250
    path: supply_mechanics.circulation_controls
  enforcement:
    type: policy+test
    validation: sot_validator_core.py::validate_sot_v2(164)
    policy: sot_policy.rego::sot_v2_sot_v2_0164_check
    test: test_sot_validator.py::test_sot_v2_0164()
  implementation_status: implemented_in_validator
- rule_id: SOT-V2-0165
  category: ECONOMICS
  type: MUST
  severity: HIGH
  description: Semantic rule for 'supply_mechanics.circulation_controls.max_annual_inflation'.
  source:
    file: SSID_structure_level3_part1_MAX.md
    lines: 146-250
    path: supply_mechanics.circulation_controls.max_annual_inflation
  enforcement:
    type: policy+test
    validation: sot_validator_core.py::validate_sot_v2(165)
    policy: sot_policy.rego::sot_v2_sot_v2_0165_check
    test: test_sot_validator.py::test_sot_v2_0165()
  implementation_status: implemented_in_validator
- rule_id: SOT-V2-0166
  category: ECONOMICS
  type: MUST
  severity: HIGH
  description: Semantic rule for 'supply_mechanics.circulation_controls.partnership_unlock'.
  source:
    file: SSID_structure_level3_part1_MAX.md
    lines: 146-250
    path: supply_mechanics.circulation_controls.partnership_unlock
  enforcement:
    type: policy+test
    validation: sot_validator_core.py::validate_sot_v2(166)
    policy: sot_policy.rego::sot_v2_sot_v2_0166_check
    test: test_sot_validator.py::test_sot_v2_0166()
  implementation_status: implemented_in_validator
- rule_id: SOT-V2-0167
  category: ECONOMICS
  type: MUST
  severity: HIGH
  description: Semantic rule for 'supply_mechanics.circulation_controls.reserve_governance'.
  source:
    file: SSID_structure_level3_part1_MAX.md
    lines: 146-250
    path: supply_mechanics.circulation_controls.reserve_governance
  enforcement:
    type: policy+test
    validation: sot_validator_core.py::validate_sot_v2(167)
    policy: sot_policy.rego::sot_v2_sot_v2_0167_check
    test: test_sot_validator.py::test_sot_v2_0167()
  implementation_status: implemented_in_validator
- rule_id: SOT-V2-0168
  category: ECONOMICS
  type: MUST
  severity: HIGH
  description: Semantic rule for 'supply_mechanics.circulation_controls.team_vesting_schedule'.
  source:
    file: SSID_structure_level3_part1_MAX.md
    lines: 146-250
    path: supply_mechanics.circulation_controls.team_vesting_schedule
  enforcement:
    type: policy+test
    validation: sot_validator_core.py::validate_sot_v2(168)
    policy: sot_policy.rego::sot_v2_sot_v2_0168_check
    test: test_sot_validator.py::test_sot_v2_0168()
  implementation_status: implemented_in_validator
- rule_id: SOT-V2-0169
  category: ECONOMICS
  type: MUST
  severity: HIGH
  description: Semantic rule for 'supply_mechanics.deflationary_mechanisms'.
  source:
    file: SSID_structure_level3_part1_MAX.md
    lines: 146-250
    path: supply_mechanics.deflationary_mechanisms
  enforcement:
    type: policy+test
    validation: sot_validator_core.py::validate_sot_v2(169)
    policy: sot_policy.rego::sot_v2_sot_v2_0169_check
    test: test_sot_validator.py::test_sot_v2_0169()
  implementation_status: implemented_in_validator
- rule_id: SOT-V2-0170
  category: ECONOMICS
  type: MUST
  severity: HIGH
  description: Semantic rule for 'supply_mechanics.deflationary_mechanisms.governance_burning'.
  source:
    file: SSID_structure_level3_part1_MAX.md
    lines: 146-250
    path: supply_mechanics.deflationary_mechanisms.governance_burning
  enforcement:
    type: policy+test
    validation: sot_validator_core.py::validate_sot_v2(170)
    policy: sot_policy.rego::sot_v2_sot_v2_0170_check
    test: test_sot_validator.py::test_sot_v2_0170()
  implementation_status: implemented_in_validator
- rule_id: SOT-V2-0171
  category: ECONOMICS
  type: MUST
  severity: HIGH
  description: Semantic rule for 'supply_mechanics.deflationary_mechanisms.staking_slashing'.
  source:
    file: SSID_structure_level3_part1_MAX.md
    lines: 146-250
    path: supply_mechanics.deflationary_mechanisms.staking_slashing
  enforcement:
    type: policy+test
    validation: sot_validator_core.py::validate_sot_v2(171)
    policy: sot_policy.rego::sot_v2_sot_v2_0171_check
    test: test_sot_validator.py::test_sot_v2_0171()
  implementation_status: implemented_in_validator
- rule_id: SOT-V2-0172
  category: ECONOMICS
  type: MUST
  severity: HIGH
  description: Semantic rule for 'supply_mechanics.initial_distribution'.
  source:
    file: SSID_structure_level3_part1_MAX.md
    lines: 146-250
    path: supply_mechanics.initial_distribution
  enforcement:
    type: policy+test
    validation: sot_validator_core.py::validate_sot_v2(172)
    policy: sot_policy.rego::sot_v2_sot_v2_0172_check
    test: test_sot_validator.py::test_sot_v2_0172()
  implementation_status: implemented_in_validator
- rule_id: SOT-V2-0173
  category: ECONOMICS
  type: MUST
  severity: HIGH
  description: Semantic rule for 'supply_mechanics.initial_distribution.community_rewards'.
  source:
    file: SSID_structure_level3_part1_MAX.md
    lines: 146-250
    path: supply_mechanics.initial_distribution.community_rewards
  enforcement:
    type: policy+test
    validation: sot_validator_core.py::validate_sot_v2(173)
    policy: sot_policy.rego::sot_v2_sot_v2_0173_check
    test: test_sot_validator.py::test_sot_v2_0173()
  implementation_status: implemented_in_validator
- rule_id: SOT-V2-0174
  category: ECONOMICS
  type: MUST
  severity: HIGH
  description: Semantic rule for 'supply_mechanics.initial_distribution.ecosystem_development'.
  source:
    file: SSID_structure_level3_part1_MAX.md
    lines: 146-250
    path: supply_mechanics.initial_distribution.ecosystem_development
  enforcement:
    type: policy+test
    validation: sot_validator_core.py::validate_sot_v2(174)
    policy: sot_policy.rego::sot_v2_sot_v2_0174_check
    test: test_sot_validator.py::test_sot_v2_0174()
  implementation_status: implemented_in_validator
- rule_id: SOT-V2-0175
  category: ECONOMICS
  type: MUST
  severity: HIGH
  description: Semantic rule for 'supply_mechanics.initial_distribution.partnerships'.
  source:
    file: SSID_structure_level3_part1_MAX.md
    lines: 146-250
    path: supply_mechanics.initial_distribution.partnerships
  enforcement:
    type: policy+test
    validation: sot_validator_core.py::validate_sot_v2(175)
    policy: sot_policy.rego::sot_v2_sot_v2_0175_check
    test: test_sot_validator.py::test_sot_v2_0175()
  implementation_status: implemented_in_validator
- rule_id: SOT-V2-0176
  category: ECONOMICS
  type: MUST
  severity: HIGH
  description: Semantic rule for 'supply_mechanics.initial_distribution.reserve_fund'.
  source:
    file: SSID_structure_level3_part1_MAX.md
    lines: 146-250
    path: supply_mechanics.initial_distribution.reserve_fund
  enforcement:
    type: policy+test
    validation: sot_validator_core.py::validate_sot_v2(176)
    policy: sot_policy.rego::sot_v2_sot_v2_0176_check
    test: test_sot_validator.py::test_sot_v2_0176()
  implementation_status: implemented_in_validator
- rule_id: SOT-V2-0177
  category: ECONOMICS
  type: MUST
  severity: HIGH
  description: Semantic rule for 'supply_mechanics.initial_distribution.team_development'.
  source:
    file: SSID_structure_level3_part1_MAX.md
    lines: 146-250
    path: supply_mechanics.initial_distribution.team_development
  enforcement:
    type: policy+test
    validation: sot_validator_core.py::validate_sot_v2(177)
    policy: sot_policy.rego::sot_v2_sot_v2_0177_check
    test: test_sot_validator.py::test_sot_v2_0177()
  implementation_status: implemented_in_validator
- rule_id: SOT-V2-0178
  category: ECONOMICS
  type: MUST
  severity: HIGH
  description: Semantic rule for 'supply_mechanics.total_supply'.
  source:
    file: SSID_structure_level3_part1_MAX.md
    lines: 146-250
    path: supply_mechanics.total_supply
  enforcement:
    type: policy+test
    validation: sot_validator_core.py::validate_sot_v2(178)
    policy: sot_policy.rego::sot_v2_sot_v2_0178_check
    test: test_sot_validator.py::test_sot_v2_0178()
  implementation_status: implemented_in_validator
- rule_id: SOT-V2-0179
  category: GENERAL
  type: MUST
  severity: MEDIUM
  description: Semantic rule for 'technical_specification'.
  source:
    file: SSID_structure_level3_part1_MAX.md
    lines: 30-100
    path: technical_specification
  enforcement:
    type: policy+test
    validation: sot_validator_core.py::validate_sot_v2(179)
    policy: sot_policy.rego::sot_v2_sot_v2_0179_check
    test: test_sot_validator.py::test_sot_v2_0179()
  implementation_status: implemented_in_validator
- rule_id: SOT-V2-0180
  category: GENERAL
  type: MUST
  severity: MEDIUM
  description: Semantic rule for 'technical_specification.blockchain'.
  source:
    file: SSID_structure_level3_part1_MAX.md
    lines: 30-100
    path: technical_specification.blockchain
  enforcement:
    type: policy+test
    validation: sot_validator_core.py::validate_sot_v2(180)
    policy: sot_policy.rego::sot_v2_sot_v2_0180_check
    test: test_sot_validator.py::test_sot_v2_0180()
  implementation_status: implemented_in_validator
- rule_id: SOT-V2-0181
  category: GENERAL
  type: MUST
  severity: MEDIUM
  description: Semantic rule for 'technical_specification.custody_model'.
  source:
    file: SSID_structure_level3_part1_MAX.md
    lines: 30-100
    path: technical_specification.custody_model
  enforcement:
    type: policy+test
    validation: sot_validator_core.py::validate_sot_v2(181)
    policy: sot_policy.rego::sot_v2_sot_v2_0181_check
    test: test_sot_validator.py::test_sot_v2_0181()
  implementation_status: implemented_in_validator
- rule_id: SOT-V2-0182
  category: GENERAL
  type: MUST
  severity: MEDIUM
  description: Semantic rule for 'technical_specification.smart_contract_automation'.
  source:
    file: SSID_structure_level3_part1_MAX.md
    lines: 30-100
    path: technical_specification.smart_contract_automation
  enforcement:
    type: policy+test
    validation: sot_validator_core.py::validate_sot_v2(182)
    policy: sot_policy.rego::sot_v2_sot_v2_0182_check
    test: test_sot_validator.py::test_sot_v2_0182()
  implementation_status: implemented_in_validator
- rule_id: SOT-V2-0183
  category: GENERAL
  type: MUST
  severity: MEDIUM
  description: Semantic rule for 'technical_specification.standard'.
  source:
    file: SSID_structure_level3_part1_MAX.md
    lines: 30-100
    path: technical_specification.standard
  enforcement:
    type: policy+test
    validation: sot_validator_core.py::validate_sot_v2(183)
    policy: sot_policy.rego::sot_v2_sot_v2_0183_check
    test: test_sot_validator.py::test_sot_v2_0183()
  implementation_status: implemented_in_validator
- rule_id: SOT-V2-0184
  category: ECONOMICS
  type: MUST
  severity: HIGH
  description: Semantic rule for 'technical_specification.supply_model'.
  source:
    file: SSID_structure_level3_part1_MAX.md
    lines: 30-100
    path: technical_specification.supply_model
  enforcement:
    type: policy+test
    validation: sot_validator_core.py::validate_sot_v2(184)
    policy: sot_policy.rego::sot_v2_sot_v2_0184_check
    test: test_sot_validator.py::test_sot_v2_0184()
  implementation_status: implemented_in_validator
- rule_id: SOT-V2-0185
  category: GENERAL
  type: MUST
  severity: MEDIUM
  description: Semantic rule for 'token_definition'.
  source:
    file: SSID_structure_level3_part1_MAX.md
    lines: 30-100
    path: token_definition
  enforcement:
    type: policy+test
    validation: sot_validator_core.py::validate_sot_v2(185)
    policy: sot_policy.rego::sot_v2_sot_v2_0185_check
    test: test_sot_validator.py::test_sot_v2_0185()
  implementation_status: implemented_in_validator
- rule_id: SOT-V2-0186
  category: GENERAL
  type: MUST
  severity: MEDIUM
  description: Semantic rule for 'token_definition.explicit_exclusions'.
  source:
    file: SSID_structure_level3_part1_MAX.md
    lines: 30-100
    path: token_definition.explicit_exclusions
  enforcement:
    type: policy+test
    validation: sot_validator_core.py::validate_sot_v2(186)
    policy: sot_policy.rego::sot_v2_sot_v2_0186_check
    test: test_sot_validator.py::test_sot_v2_0186()
  implementation_status: implemented_in_validator
- rule_id: SOT-V2-0187
  category: COMPLIANCE
  type: MUST
  severity: HIGH
  description: Semantic rule for 'token_definition.legal_position'.
  source:
    file: SSID_structure_level3_part1_MAX.md
    lines: 30-100
    path: token_definition.legal_position
  enforcement:
    type: policy+test
    validation: sot_validator_core.py::validate_sot_v2(187)
    policy: sot_policy.rego::sot_v2_sot_v2_0187_check
    test: test_sot_validator.py::test_sot_v2_0187()
  implementation_status: implemented_in_validator
- rule_id: SOT-V2-0188
  category: GENERAL
  type: MUST
  severity: MEDIUM
  description: Semantic rule for 'token_definition.purpose'.
  source:
    file: SSID_structure_level3_part1_MAX.md
    lines: 30-100
    path: token_definition.purpose
  enforcement:
    type: policy+test
    validation: sot_validator_core.py::validate_sot_v2(188)
    policy: sot_policy.rego::sot_v2_sot_v2_0188_check
    test: test_sot_validator.py::test_sot_v2_0188()
  implementation_status: implemented_in_validator
- rule_id: SOT-V2-0189
  category: METADATA
  type: MUST
  severity: INFO
  description: Semantic rule for 'version'.
  source:
    file: SSID_structure_level3_part1_MAX.md
    lines: 146-250
    path: version
  enforcement:
    type: policy+test
    validation: sot_validator_core.py::validate_sot_v2(189)
    policy: sot_policy.rego::sot_v2_sot_v2_0189_check
    test: test_sot_validator.py::test_sot_v2_0189()
  implementation_status: implemented_in_validator
