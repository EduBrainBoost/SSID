version: 1.4.0
combined_date: '2025-10-19T21:49:58.789055'
metadata:
  version: 2.0.0
  extraction_date: '2025-10-19'
  source_documents:
  - ssid_master_definition_corrected_v1.1.1.md
  - 16_codex/structure/level3/ssid_master_rules.txt
  - 16_codex/structure/level3/ssid_master_rules_part2.txt
  - 16_codex/structure/level3/sot_contract_v2.yaml
  total_rules: 311
  coverage_target: 100% in all 5 SoT Artefacts
sot_artefacts:
- name: Contract Definitions
  location: contracts/*.openapi.yaml + contracts/schemas/*.schema.json
  purpose: API contracts, data schemas, interface definitions
  coverage_requirement: All interface, API, and data structure rules
- name: Core Logic
  location: implementations/*/src/
  purpose: Business logic, core functionality, implementation
  coverage_requirement: All policy, enforcement, and behavior rules
- name: Policy Enforcement
  location: policies/*.yaml + 23_compliance/opa/*.rego
  purpose: OPA policies, Semgrep rules, enforcement logic
  coverage_requirement: All CRITICAL, NIEMALS, and constraint rules
- name: CLI Validation
  location: 12_tooling/cli/
  purpose: Command-line tools, validators, structure checkers
  coverage_requirement: All structure, naming, and validation rules
- name: Test Suites
  location: conformance/ + implementations/*/tests/
  purpose: Unit, integration, contract, and conformance tests
  coverage_requirement: All behavior, contract, and regression rules
statistics:
  core_rules: 30
  lifted_rules: 61
  total_rules: 91
architecture_rules:
  AR001:
    rule_id: AR001
    category: Matrix Architecture
    type: MUST
    severity: CRITICAL
    rule: Das System MUSS aus exakt 24 Root-Ordnern bestehen
    source_section: Die 24 Root-Ordner
    source_line: ~50-199
    rationale: Deterministische Matrix-Architektur erfordert exakte Struktur
    sot_mapping:
      contract: 'schema: roots_registry.schema.json with enum[24]'
      core: 'registry_validator.py: assert len(roots) == 24'
      policy: 'opa/structure.rego: root_count == 24'
      cli: 'cli validate --roots: exit 1 if != 24'
      test: test_registry.py::test_exact_24_roots()
    implementation_requirements:
    - Validator prüft exakte Anzahl Root-Ordner
    - Registry führt Liste aller 24 Roots
    - CLI blockiert Abweichungen
    - Exit Code != 0 bei Violation
  AR002:
    rule_id: AR002
    category: Matrix Architecture
    type: MUST
    severity: CRITICAL
    rule: Jeder Root-Ordner MUSS exakt 16 Shards enthalten
    source_section: Die 16 Shards (Oberkategorien)
    source_line: ~201-288
    rationale: 'Matrix-Vollständigkeit: 24×16 = 384 Chart-Dateien'
    sot_mapping:
      contract: 'schema: shard_structure.schema.json with minItems: 16, maxItems:
        16'
      core: 'shard_validator.py: assert len(shards) == 16 per root'
      policy: 'opa/structure.rego: shard_count_per_root == 16'
      cli: 'cli validate --shards: per-root check'
      test: test_shards.py::test_16_shards_per_root()
    implementation_requirements:
    - Validator prüft 16 Shards pro Root
    - 'Matrix-Berechnung: 24×16 = 384 Chart-Dateien'
  AR003:
    rule_id: AR003
    category: Matrix Architecture
    type: MUST
    severity: CRITICAL
    rule: Es MÜSSEN exakt 384 Chart-Dateien existieren (24×16)
    source_section: Matrix-Architektur (24×16)
    source_line: ~290-325
    rationale: 'Deterministisches Mapping: keine Lücken, keine Überzähligen'
    sot_mapping:
      contract: 'schema: matrix_registry.schema.json with total_charts: 384'
      core: 'chart_validator.py: assert count_charts() == 384'
      policy: 'opa/matrix.rego: count(charts) == 384'
      cli: 'cli validate --matrix: total chart count'
      test: test_matrix.py::test_exact_384_charts()
    implementation_requirements:
    - Validator zählt alle chart.yaml-Dateien
    - Exit Code != 0 bei Abweichung
  AR004:
    rule_id: AR004
    category: Naming Convention
    type: MUST
    severity: HIGH
    rule: Root-Ordner MÜSSEN Format '{NR}_{NAME}' haben (z.B. 01_ai_layer)
    source_section: Naming Conventions
    source_line: ~624-631
    rationale: Deterministische Sortierung und eindeutige Identifikation
    sot_mapping:
      contract: 'schema: root_naming.schema.json with pattern: ^\d{2}_[a-z_]+$'
      core: 'naming_validator.py: regex_check(root_name, ROOT_PATTERN)'
      policy: 'opa/naming.rego: re_match(^\d{2}_[a-z_]+$, root)'
      cli: 'cli validate --naming: root pattern check'
      test: test_naming.py::test_root_naming_convention()
    implementation_requirements:
    - 'Regex: ^\d{2}_[a-z_]+$'
    - CLI validiert Namen bei Erstellung
  AR005:
    rule_id: AR005
    category: Naming Convention
    type: MUST
    severity: HIGH
    rule: Shards MÜSSEN Format 'Shard_{NR}_{NAME}' haben
    source_section: Naming Conventions
    source_line: ~632-637
    rationale: Konsistente Benennung über alle 384 Shards
    sot_mapping:
      contract: 'schema: shard_naming.schema.json with pattern: ^Shard_\d{2}_[A-Za-z_]+$'
      core: 'naming_validator.py: regex_check(shard_name, SHARD_PATTERN)'
      policy: 'opa/naming.rego: re_match(^Shard_\d{2}_[A-Za-z_]+$, shard)'
      cli: 'cli validate --naming: shard pattern check'
      test: test_naming.py::test_shard_naming_convention()
    implementation_requirements:
    - 'Regex: ^Shard_\d{2}_[A-Za-z_]+$'
    - Eindeutige Nummerierung 01-16
  AR006:
    rule_id: AR006
    category: File Structure
    type: MUST
    severity: CRITICAL
    rule: Jeder Shard MUSS eine chart.yaml (SoT) enthalten
    source_section: 'Hybrid-Struktur: SoT + Implementierung'
    source_line: ~329-353
    rationale: chart.yaml ist Single Source of Truth (abstrakt)
    sot_mapping:
      contract: 'schema: shard_structure.schema.json requires chart.yaml'
      core: 'shard_validator.py: assert exists(chart_path)'
      policy: 'opa/structure.rego: chart_yaml_exists'
      cli: 'cli validate --structure: chart.yaml presence'
      test: test_structure.py::test_chart_yaml_exists()
    implementation_requirements:
    - Validator prüft Existenz von chart.yaml
    - SHA256-Hash in Registry
  AR007:
    rule_id: AR007
    category: File Structure
    type: MUST
    severity: HIGH
    rule: Jede Implementierung MUSS eine manifest.yaml enthalten
    source_section: 'Hybrid-Struktur: SoT + Implementierung'
    source_line: ~329-353
    rationale: manifest.yaml definiert konkrete Implementierung (WIE)
    sot_mapping:
      contract: 'schema: implementation.schema.json requires manifest.yaml'
      core: 'impl_validator.py: assert exists(manifest_path)'
      policy: 'opa/structure.rego: manifest_yaml_exists'
      cli: cli validate --implementations
      test: test_impl.py::test_manifest_yaml_exists()
    implementation_requirements:
    - Validator prüft implementations/*/manifest.yaml
    - Link zur chart.yaml via chart_version
  AR008:
    rule_id: AR008
    category: Directory Structure
    type: MUST
    severity: HIGH
    rule: 'Pfadstruktur MUSS sein: {ROOT}/shards/{SHARD}/chart.yaml'
    source_section: Naming Conventions - Pfade
    source_line: ~647-660
    rationale: Deterministische Pfade für Automatisierung
    sot_mapping:
      contract: 'schema: path_structure.schema.json'
      core: 'path_validator.py: validate_path_pattern()'
      policy: 'opa/paths.rego: valid_chart_path'
      cli: cli validate --paths
      test: test_paths.py::test_chart_yaml_path()
    implementation_requirements:
    - Validator prüft exakte Pfadstruktur
    - Keine abweichenden Hierarchien erlaubt
  AR009:
    rule_id: AR009
    category: Directory Structure
    type: MUST
    severity: HIGH
    rule: Implementierungen MÜSSEN unter implementations/{IMPL_ID}/ liegen
    source_section: Ordnerstruktur Beispiele
    source_line: ~356-430
    rationale: Multi-Implementation Support mit Namespace-Isolation
    sot_mapping:
      contract: 'schema: implementation_paths.schema.json'
      core: 'impl_validator.py: validate_impl_paths()'
      policy: 'opa/impl.rego: valid_impl_path'
      cli: cli validate --impl-paths
      test: test_impl_paths.py::test_impl_directory_structure()
    implementation_requirements:
    - Validator prüft implementations/-Subordner
    - Jede Impl. hat eigenen Namespace
  AR010:
    rule_id: AR010
    category: Contracts
    type: MUST
    severity: HIGH
    rule: Contracts MÜSSEN in contracts/-Ordner mit OpenAPI/JSON-Schema liegen
    source_section: Ordnerstruktur Beispiele
    source_line: ~366-372
    rationale: 'Contract-First Development: Contracts vor Implementation'
    sot_mapping:
      contract: 'schema: contract_structure.schema.json'
      core: 'contract_validator.py: validate_contracts()'
      policy: 'opa/contracts.rego: contracts_present'
      cli: cli validate --contracts
      test: test_contracts.py::test_contract_files_exist()
    implementation_requirements:
    - Validator prüft contracts/*.openapi.yaml
    - Validator prüft contracts/schemas/*.schema.json
critical_policies:
  CP001:
    rule_id: CP001
    category: Non-Custodial
    type: NIEMALS
    severity: CRITICAL
    rule: NIEMALS Rohdaten von PII oder biometrischen Daten speichern
    source_section: Kritische Policies - Non-Custodial
    source_line: ~666-677
    rationale: 'Rechtskonformität: Non-Custodial = keine PII-Speicherung'
    enforcement:
    - Static Analysis (Semgrep) blockiert PII-Storage
    - Runtime PII-Detector blockiert Verstöße
    - Violations = System-Block + Alert an Compliance-Team
    sot_mapping:
      contract: 'schema: pii_constraints.schema.json forbids pii_storage'
      core: 'pii_detector.py: runtime_check(), raise on violation'
      policy: 'opa/pii.rego: deny[msg] { pii_storage }'
      cli: 'cli lint --pii: pre-commit hook'
      test: test_pii.py::test_no_pii_storage()
    implementation_requirements:
    - 'OPA Policy: deny_pii_storage.rego'
    - 'Semgrep Ruleset: no-pii-storage.yaml'
    - 'Runtime: pii_detector.py'
  CP002:
    rule_id: CP002
    category: Hash-Only Data Policy
    type: MUST
    severity: CRITICAL
    rule: Alle Daten MÜSSEN als SHA3-256 Hashes gespeichert werden
    source_section: Kritische Policies - Hash-Only Data Policy
    source_line: ~678-686
    rationale: Deterministische Hashing-Strategie für Auditierbarkeit
    sot_mapping:
      contract: 'schema: data_policy.schema.json: storage_type=hash_only'
      core: 'hasher.py: sha3_256_hash(data, tenant_pepper)'
      policy: 'opa/hash_policy.rego: data_policy == hash_only'
      cli: cli validate --data-policy
      test: test_hash_policy.py::test_hash_only_storage()
    implementation_requirements:
    - data_policy.storage_type = 'hash_only'
    - hash_algorithm = 'SHA3-256'
    - Validator prüft Hashformat
  CP003:
    rule_id: CP003
    category: Hash-Only Data Policy
    type: MUST
    severity: CRITICAL
    rule: Tenant-spezifische Peppers MÜSSEN verwendet werden
    source_section: Kritische Policies - Hash-Only Data Policy
    source_line: ~678-686
    rationale: 'Sicherheit: Tenant-Isolation via Pepper'
    sot_mapping:
      contract: 'schema: pepper_strategy.schema.json: per_tenant'
      core: 'pepper_manager.py: get_tenant_pepper(tenant_id)'
      policy: 'opa/pepper.rego: pepper_strategy == per_tenant'
      cli: cli validate --pepper-strategy
      test: test_pepper.py::test_per_tenant_pepper()
    implementation_requirements:
    - pepper_strategy = 'per_tenant'
    - Secrets Management via 15_infra/vault
  CP004:
    rule_id: CP004
    category: Non-Custodial
    type: MUST
    severity: CRITICAL
    rule: Raw Data Retention MUSS '0 seconds' sein (Immediate Discard)
    source_section: Kritische Policies - Non-Custodial
    source_line: ~666-677
    rationale: 'Compliance: keine temporäre PII-Speicherung'
    sot_mapping:
      contract: 'schema: retention_policy.schema.json: raw_data=0s'
      core: 'data_processor.py: immediate_discard_after_hash()'
      policy: 'opa/retention.rego: raw_data_retention == 0'
      cli: cli validate --retention
      test: test_retention.py::test_immediate_discard()
    implementation_requirements:
    - raw_data_retention = '0 seconds'
    - In-memory processing only
    - Kein Dateisystem-Cache für PII
  CP005:
    rule_id: CP005
    category: GDPR Compliance
    type: MUST
    severity: HIGH
    rule: Right to Erasure MUSS via Hash-Rotation implementiert sein
    source_section: Kritische Policies - GDPR Compliance
    source_line: ~687-693
    rationale: 'GDPR Art. 17: Recht auf Löschung'
    sot_mapping:
      contract: 'api: POST /gdpr/erasure with pepper_rotation'
      core: 'gdpr_handler.py: rotate_pepper(user_id)'
      policy: 'opa/gdpr.rego: erasure_mechanism_present'
      cli: cli gdpr-erasure --user-id
      test: test_gdpr.py::test_right_to_erasure()
    implementation_requirements:
    - Neuer Pepper macht alte Hashes unbrauchbar
    - Pepper-Rotation-API vorhanden
  CP006:
    rule_id: CP006
    category: GDPR Compliance
    type: MUST
    severity: HIGH
    rule: Data Portability MUSS JSON-Export aller Hashes + Metadaten bieten
    source_section: Kritische Policies - GDPR Compliance
    source_line: ~687-693
    rationale: 'GDPR Art. 20: Recht auf Datenübertragbarkeit'
    sot_mapping:
      contract: 'api: GET /gdpr/export returns JSON'
      core: 'gdpr_handler.py: export_user_data(user_id)'
      policy: 'opa/gdpr.rego: portability_endpoint_present'
      cli: cli gdpr-export --user-id --output export.json
      test: test_gdpr.py::test_data_portability()
    implementation_requirements:
    - Export-API in 03_core
    - JSON-Format mit Timestamps
  CP007:
    rule_id: CP007
    category: GDPR Compliance
    type: MUST
    severity: HIGH
    rule: PII Redaction MUSS automatisch in Logs & Traces erfolgen
    source_section: Kritische Policies - GDPR Compliance
    source_line: ~687-693
    rationale: 'Datenschutz: keine versehentliche PII-Exposition'
    sot_mapping:
      contract: 'schema: logging_config.schema.json: pii_redaction=true'
      core: 'log_redactor.py: redact_pii_patterns(log_entry)'
      policy: 'opa/logging.rego: pii_redaction_enabled'
      cli: cli validate --logging-config
      test: test_logging.py::test_pii_redaction()
    implementation_requirements:
    - 'Logging-Config: pii_redaction: true'
    - Regex-basierte Redaction-Engine
  CP008:
    rule_id: CP008
    category: Bias & Fairness
    type: MUST
    severity: HIGH
    rule: Alle AI/ML-Modelle MÜSSEN auf Bias getestet werden
    source_section: Kritische Policies - Bias & Fairness
    source_line: ~694-699
    rationale: EU AI Act Compliance + Ethik
    sot_mapping:
      contract: 'schema: model_card.schema.json includes fairness_metrics'
      core: 'bias_tester.py: test_demographic_parity(), test_equal_opportunity()'
      policy: 'opa/ai_governance.rego: bias_tests_required'
      cli: cli test-bias --model-path
      test: test_bias.py::test_model_fairness_metrics()
    implementation_requirements:
    - 'Bias Testing: Demographic Parity, Equal Opportunity'
    - Quarterly Bias Audits
    - Transparent Model Cards
  CP009:
    rule_id: CP009
    category: Evidence & Audit
    type: MUST
    severity: CRITICAL
    rule: Hash-Ledger mit Blockchain-Anchoring MUSS verwendet werden
    source_section: Kritische Policies - Evidence & Audit
    source_line: ~700-706
    rationale: Tamper-Proof Evidence für Audits
    sot_mapping:
      contract: 'schema: evidence_strategy.schema.json: blockchain_anchoring'
      core: 'blockchain_anchor.py: anchor_to_ethereum(), anchor_to_polygon()'
      policy: 'opa/evidence.rego: anchoring_enabled'
      cli: cli anchor --chain ethereum|polygon
      test: test_anchoring.py::test_blockchain_anchor()
    implementation_requirements:
    - 'Strategy: hash_ledger_with_anchoring'
    - 'Chains: Ethereum Mainnet, Polygon'
    - 'Frequency: Hourly Anchoring'
  CP010:
    rule_id: CP010
    category: Evidence & Audit
    type: MUST
    severity: CRITICAL
    rule: WORM-Storage mit 10 Jahren Retention MUSS verwendet werden
    source_section: Kritische Policies - Evidence & Audit
    source_line: ~700-706
    rationale: Unveränderliche Beweisführung über lange Zeiträume
    sot_mapping:
      contract: 'schema: worm_config.schema.json: retention=10y'
      core: 'worm_storage.py: write_once_read_many(record)'
      policy: 'opa/worm.rego: retention_policy == 10_years'
      cli: cli validate --worm-config
      test: test_worm.py::test_immutable_storage()
    implementation_requirements:
    - 'Storage: Write-Once-Read-Many'
    - 'Retention: 10 Jahre'
    - Immutable Backup-Strategie
  CP011:
    rule_id: CP011
    category: Secrets Management
    type: NIEMALS
    severity: CRITICAL
    rule: NIEMALS Secrets in Git committen
    source_section: Kritische Policies - Secrets Management
    source_line: ~707-712
    rationale: 'Sicherheit: Secrets gehören in Vault, nicht in VCS'
    enforcement:
    - Git pre-commit hook blockiert Secrets
    - Nur .template-Dateien erlaubt
    sot_mapping:
      contract: 'schema: forbidden_patterns.schema.json'
      core: 'secret_scanner.py: detect_secrets_in_diff()'
      policy: 'opa/secrets.rego: deny[msg] { secret_in_repo }'
      cli: 'pre-commit hook: cli scan-secrets'
      test: test_secrets.py::test_no_secrets_in_repo()
    implementation_requirements:
    - Secrets via 15_infra/vault
    - AES-256-GCM at-rest, TLS 1.3 in-transit
  CP012:
    rule_id: CP012
    category: Secrets Management
    type: MUST
    severity: HIGH
    rule: Secrets MÜSSEN alle 90 Tage rotiert werden
    source_section: Kritische Policies - Secrets Management
    source_line: ~707-712
    rationale: Reduktion des Risikos bei Kompromittierung
    sot_mapping:
      contract: 'schema: rotation_policy.schema.json: frequency=90d'
      core: 'vault_rotation.py: auto_rotate_secrets()'
      policy: 'opa/rotation.rego: rotation_frequency <= 90'
      cli: cli rotate-secrets --force
      test: test_rotation.py::test_90_day_rotation()
    implementation_requirements:
    - 'Rotation Policy: 90 Tage'
    - Automatisierte Rotation via Vault
versioning_governance:
  VG001:
    rule_id: VG001
    category: Semantic Versioning
    type: MUST
    severity: HIGH
    rule: Alle Versionen MÜSSEN Semver (MAJOR.MINOR.PATCH) verwenden
    source_section: Kritische Policies - Versioning & Breaking Changes
    source_line: ~713-718
    rationale: Standardisierung für Breaking Change Management
    sot_mapping:
      contract: 'schema: version.schema.json pattern: ^\d+\.\d+\.\d+$'
      core: 'version_validator.py: is_valid_semver(version)'
      policy: 'opa/versioning.rego: valid_semver'
      cli: cli bump-version --type major|minor|patch
      test: test_versioning.py::test_semver_format()
    implementation_requirements:
    - Validator prüft Semver-Format
    - Automatischer Bump via CI
  VG002:
    rule_id: VG002
    category: Breaking Changes
    type: MUST
    severity: HIGH
    rule: Breaking Changes MÜSSEN Migration Guide + Compatibility Layer haben
    source_section: Kritische Policies - Versioning & Breaking Changes
    source_line: ~713-718
    rationale: 'User Experience: sanfte Migration statt harter Breaks'
    sot_mapping:
      contract: 'schema: breaking_change.schema.json requires migration_guide'
      core: 'compat_layer.py: provide_backward_compatibility()'
      policy: 'opa/breaking.rego: migration_guide_present'
      cli: cli check-breaking-changes
      test: test_breaking.py::test_migration_guide_exists()
    implementation_requirements:
    - Migration Guide in docs/migrations/
    - Compatibility Layer für 1 Major-Version
  VG003:
    rule_id: VG003
    category: Deprecation
    type: MUST
    severity: HIGH
    rule: Deprecations MÜSSEN 180 Tage Notice Period haben
    source_section: Kritische Policies - Versioning & Breaking Changes
    source_line: ~713-718
    rationale: 'User Communication: genügend Zeit für Anpassungen'
    sot_mapping:
      contract: 'schema: deprecation.schema.json: notice_period_days=180'
      core: 'deprecation_tracker.py: enforce_notice_period()'
      policy: 'opa/deprecation.rego: notice_period >= 180'
      cli: cli deprecate --feature --notice-period 180
      test: test_deprecation.py::test_180_day_notice()
    implementation_requirements:
    - Deprecation Notice in CHANGELOG.md
    - Automated Deprecation Warnings
  VG004:
    rule_id: VG004
    category: RFC Process
    type: MUST
    severity: HIGH
    rule: Alle MUST-Capability-Änderungen MÜSSEN RFC-Prozess durchlaufen
    source_section: Kritische Policies - Versioning & Breaking Changes
    source_line: ~713-718
    rationale: 'Governance: Änderungen an kritischen Features bedürfen Review'
    sot_mapping:
      contract: 'schema: rfc_requirement.schema.json'
      core: 'rfc_tracker.py: require_rfc_for_must_changes()'
      policy: 'opa/rfc.rego: rfc_required for MUST capabilities'
      cli: cli create-rfc --capability
      test: test_rfc.py::test_rfc_required_for_must()
    implementation_requirements:
    - RFC Template in 05_documentation/templates/
    - Approval von Architecture Board
  VG005:
    rule_id: VG005
    category: Governance Roles
    type: MUST
    severity: MEDIUM
    rule: Jeder Shard MUSS einen Owner haben
    source_section: Governance-Modell - Rollen
    source_line: ~720-743
    rationale: 'Verantwortlichkeit: klare Ansprechpartner pro Shard'
    sot_mapping:
      contract: 'schema: chart.yaml requires governance.owner'
      core: 'owner_validator.py: assert owner_present(shard)'
      policy: 'opa/governance.rego: owner_defined'
      cli: cli validate --owner-presence
      test: test_owner.py::test_every_shard_has_owner()
    implementation_requirements:
    - Owner in chart.yaml.governance.owner
    - Kontaktdaten in Registry
  VG006:
    rule_id: VG006
    category: Governance Roles
    type: MUST
    severity: HIGH
    rule: Architecture Board MUSS alle chart.yaml-Änderungen reviewen
    source_section: Governance-Modell - Rollen
    source_line: ~720-743
    rationale: 'Quality Gate: Architektursicherung durch Review'
    sot_mapping:
      contract: 'schema: review_process.schema.json'
      core: 'review_tracker.py: require_arch_board_approval()'
      policy: 'opa/review.rego: arch_board_reviewed'
      cli: cli request-review --arch-board
      test: test_review.py::test_arch_board_review()
    implementation_requirements:
    - 'Dual Review: Architecture + Compliance'
    - Approval-Log in 02_audit_logging
  VG007:
    rule_id: VG007
    category: Change Process
    type: MUST
    severity: HIGH
    rule: Change-Prozess MUSS 7 Stufen durchlaufen (RFC bis Monitoring)
    source_section: Governance-Modell - Change-Prozess
    source_line: ~745-762
    rationale: 'Qualitätssicherung: systematischer Rollout-Prozess'
    sot_mapping:
      contract: 'schema: change_process.schema.json: stages[7]'
      core: 'change_orchestrator.py: enforce_7_stage_process()'
      policy: 'opa/change.rego: all_stages_completed'
      cli: cli change-status --change-id
      test: test_change_process.py::test_7_stage_gate()
    implementation_requirements:
    - CI Pipeline prüft alle 7 Gates
    - Rollback-Plan erforderlich
  VG008:
    rule_id: VG008
    category: Promotion Rules
    type: MUST
    severity: MEDIUM
    rule: SHOULD→MUST Promotion MUSS 90 Tage Production + 99.5% SLA erfüllen
    source_section: Governance-Modell - Promotion-Regeln
    source_line: ~764-787
    rationale: 'Stabile Features: Bewährung in Production erforderlich'
    sot_mapping:
      contract: 'schema: promotion_requirements.schema.json'
      core: 'promotion_checker.py: validate_should_to_must()'
      policy: 'opa/promotion.rego: production_duration >= 90 && sla >= 99.5'
      cli: cli promote --from SHOULD --to MUST
      test: test_promotion.py::test_should_to_must_criteria()
    implementation_requirements:
    - SLA-Tracking in 17_observability
    - Contract Test Coverage ≥95%
lifted_rules:
  JURIS_BL_001:
    type: MUST
    rule: 'System MUSS Transaktionen aus Iran (IR) blockieren. Grund: OFAC Comprehensive
      Sanctions'
    source: List-to-Rule Lifting - KONS001
    category: Sanctions Compliance
    severity: CRITICAL
    list_metadata:
      list_name: blacklist_jurisdictions
      list_source: 23_compliance/policies/sanctions.yaml
      list_index: 0
      audit_requirement: MiCA, eIDAS, OFAC
    item_data:
      code: IR
      name: Iran
      reason: OFAC Comprehensive Sanctions
    implementation_requirements:
    - 'OPA Policy: deny/allow für JURIS_BL_001'
    - 'Unit Test: test_juris_bl_001()'
    - 'Audit Trail: Log all JURIS_BL_001-related events'
    - 'Runtime Check: Block if input.country_code == ''IR'''
    - 'API Response: 403 Forbidden with reason ''Sanctioned jurisdiction: IR'''
  JURIS_BL_002:
    type: MUST
    rule: 'System MUSS Transaktionen aus North Korea (KP) blockieren. Grund: OFAC
      Comprehensive Sanctions'
    source: List-to-Rule Lifting - KONS001
    category: Sanctions Compliance
    severity: CRITICAL
    list_metadata:
      list_name: blacklist_jurisdictions
      list_source: 23_compliance/policies/sanctions.yaml
      list_index: 1
      audit_requirement: MiCA, eIDAS, OFAC
    item_data:
      code: KP
      name: North Korea
      reason: OFAC Comprehensive Sanctions
    implementation_requirements:
    - 'OPA Policy: deny/allow für JURIS_BL_002'
    - 'Unit Test: test_juris_bl_002()'
    - 'Audit Trail: Log all JURIS_BL_002-related events'
    - 'Runtime Check: Block if input.country_code == ''KP'''
    - 'API Response: 403 Forbidden with reason ''Sanctioned jurisdiction: KP'''
  JURIS_BL_003:
    type: MUST
    rule: 'System MUSS Transaktionen aus Syria (SY) blockieren. Grund: OFAC Comprehensive
      Sanctions'
    source: List-to-Rule Lifting - KONS001
    category: Sanctions Compliance
    severity: CRITICAL
    list_metadata:
      list_name: blacklist_jurisdictions
      list_source: 23_compliance/policies/sanctions.yaml
      list_index: 2
      audit_requirement: MiCA, eIDAS, OFAC
    item_data:
      code: SY
      name: Syria
      reason: OFAC Comprehensive Sanctions
    implementation_requirements:
    - 'OPA Policy: deny/allow für JURIS_BL_003'
    - 'Unit Test: test_juris_bl_003()'
    - 'Audit Trail: Log all JURIS_BL_003-related events'
    - 'Runtime Check: Block if input.country_code == ''SY'''
    - 'API Response: 403 Forbidden with reason ''Sanctioned jurisdiction: SY'''
  JURIS_BL_004:
    type: MUST
    rule: 'System MUSS Transaktionen aus Cuba (CU) blockieren. Grund: OFAC Sanctions
      (Limited)'
    source: List-to-Rule Lifting - KONS001
    category: Sanctions Compliance
    severity: HIGH
    list_metadata:
      list_name: blacklist_jurisdictions
      list_source: 23_compliance/policies/sanctions.yaml
      list_index: 3
      audit_requirement: MiCA, eIDAS, OFAC
    item_data:
      code: CU
      name: Cuba
      reason: OFAC Sanctions (Limited)
    implementation_requirements:
    - 'OPA Policy: deny/allow für JURIS_BL_004'
    - 'Unit Test: test_juris_bl_004()'
    - 'Audit Trail: Log all JURIS_BL_004-related events'
    - 'Runtime Check: Block if input.country_code == ''CU'''
    - 'API Response: 403 Forbidden with reason ''Sanctioned jurisdiction: CU'''
  JURIS_BL_005:
    type: MUST
    rule: 'System MUSS Transaktionen aus Sudan (SD) blockieren. Grund: OFAC Sanctions
      (Regional)'
    source: List-to-Rule Lifting - KONS001
    category: Sanctions Compliance
    severity: HIGH
    list_metadata:
      list_name: blacklist_jurisdictions
      list_source: 23_compliance/policies/sanctions.yaml
      list_index: 4
      audit_requirement: MiCA, eIDAS, OFAC
    item_data:
      code: SD
      name: Sudan
      reason: OFAC Sanctions (Regional)
    implementation_requirements:
    - 'OPA Policy: deny/allow für JURIS_BL_005'
    - 'Unit Test: test_juris_bl_005()'
    - 'Audit Trail: Log all JURIS_BL_005-related events'
    - 'Runtime Check: Block if input.country_code == ''SD'''
    - 'API Response: 403 Forbidden with reason ''Sanctioned jurisdiction: SD'''
  JURIS_BL_006:
    type: MUST
    rule: 'System MUSS Transaktionen aus Belarus (BY) blockieren. Grund: EU Sanctions'
    source: List-to-Rule Lifting - KONS001
    category: Sanctions Compliance
    severity: HIGH
    list_metadata:
      list_name: blacklist_jurisdictions
      list_source: 23_compliance/policies/sanctions.yaml
      list_index: 5
      audit_requirement: MiCA, eIDAS, OFAC
    item_data:
      code: BY
      name: Belarus
      reason: EU Sanctions
    implementation_requirements:
    - 'OPA Policy: deny/allow für JURIS_BL_006'
    - 'Unit Test: test_juris_bl_006()'
    - 'Audit Trail: Log all JURIS_BL_006-related events'
    - 'Runtime Check: Block if input.country_code == ''BY'''
    - 'API Response: 403 Forbidden with reason ''Sanctioned jurisdiction: BY'''
  JURIS_BL_007:
    type: MUST
    rule: 'System MUSS Transaktionen aus Venezuela (VE) blockieren. Grund: OFAC Sectoral
      Sanctions'
    source: List-to-Rule Lifting - KONS001
    category: Sanctions Compliance
    severity: MEDIUM
    list_metadata:
      list_name: blacklist_jurisdictions
      list_source: 23_compliance/policies/sanctions.yaml
      list_index: 6
      audit_requirement: MiCA, eIDAS, OFAC
    item_data:
      code: VE
      name: Venezuela
      reason: OFAC Sectoral Sanctions
    implementation_requirements:
    - 'OPA Policy: deny/allow für JURIS_BL_007'
    - 'Unit Test: test_juris_bl_007()'
    - 'Audit Trail: Log all JURIS_BL_007-related events'
    - 'Runtime Check: Block if input.country_code == ''VE'''
    - 'API Response: 403 Forbidden with reason ''Sanctioned jurisdiction: VE'''
  PROP_TYPE_001:
    type: MUST
    rule: System MUSS Proposal-Typ 'System Parameter Change' (parameter_change) unterstützen
      mit Quorum 10% und Threshold 66%
    source: List-to-Rule Lifting - GOV001
    category: DAO Governance
    severity: HIGH
    list_metadata:
      list_name: governance_proposal_types
      list_source: 20_foundation/governance/dao_proposals.yaml
      list_index: 0
      audit_requirement: DAO Governance, Token Holder Rights
    item_data:
      type: parameter_change
      name: System Parameter Change
      quorum: 10%
      threshold: 66%
    implementation_requirements:
    - 'OPA Policy: deny/allow für PROP_TYPE_001'
    - 'Unit Test: test_prop_type_001()'
    - 'Audit Trail: Log all PROP_TYPE_001-related events'
    - 'DAO Contract: Validate proposal type == ''parameter_change'''
    - 'Quorum Check: Require 10% participation'
    - 'Threshold Check: Require 66% approval'
  PROP_TYPE_002:
    type: MUST
    rule: System MUSS Proposal-Typ 'Treasury Fund Allocation' (treasury_allocation)
      unterstützen mit Quorum 15% und Threshold 75%
    source: List-to-Rule Lifting - GOV001
    category: DAO Governance
    severity: CRITICAL
    list_metadata:
      list_name: governance_proposal_types
      list_source: 20_foundation/governance/dao_proposals.yaml
      list_index: 1
      audit_requirement: DAO Governance, Token Holder Rights
    item_data:
      type: treasury_allocation
      name: Treasury Fund Allocation
      quorum: 15%
      threshold: 75%
    implementation_requirements:
    - 'OPA Policy: deny/allow für PROP_TYPE_002'
    - 'Unit Test: test_prop_type_002()'
    - 'Audit Trail: Log all PROP_TYPE_002-related events'
    - 'DAO Contract: Validate proposal type == ''treasury_allocation'''
    - 'Quorum Check: Require 15% participation'
    - 'Threshold Check: Require 75% approval'
  PROP_TYPE_003:
    type: MUST
    rule: System MUSS Proposal-Typ 'Smart Contract Upgrade' (contract_upgrade) unterstützen
      mit Quorum 20% und Threshold 80%
    source: List-to-Rule Lifting - GOV001
    category: DAO Governance
    severity: CRITICAL
    list_metadata:
      list_name: governance_proposal_types
      list_source: 20_foundation/governance/dao_proposals.yaml
      list_index: 2
      audit_requirement: DAO Governance, Token Holder Rights
    item_data:
      type: contract_upgrade
      name: Smart Contract Upgrade
      quorum: 20%
      threshold: 80%
    implementation_requirements:
    - 'OPA Policy: deny/allow für PROP_TYPE_003'
    - 'Unit Test: test_prop_type_003()'
    - 'Audit Trail: Log all PROP_TYPE_003-related events'
    - 'DAO Contract: Validate proposal type == ''contract_upgrade'''
    - 'Quorum Check: Require 20% participation'
    - 'Threshold Check: Require 80% approval'
  PROP_TYPE_004:
    type: MUST
    rule: System MUSS Proposal-Typ 'Community Grant Program' (grant_program) unterstützen
      mit Quorum 5% und Threshold 50%
    source: List-to-Rule Lifting - GOV001
    category: DAO Governance
    severity: MEDIUM
    list_metadata:
      list_name: governance_proposal_types
      list_source: 20_foundation/governance/dao_proposals.yaml
      list_index: 3
      audit_requirement: DAO Governance, Token Holder Rights
    item_data:
      type: grant_program
      name: Community Grant Program
      quorum: 5%
      threshold: 50%
    implementation_requirements:
    - 'OPA Policy: deny/allow für PROP_TYPE_004'
    - 'Unit Test: test_prop_type_004()'
    - 'Audit Trail: Log all PROP_TYPE_004-related events'
    - 'DAO Contract: Validate proposal type == ''grant_program'''
    - 'Quorum Check: Require 5% participation'
    - 'Threshold Check: Require 50% approval'
  PROP_TYPE_005:
    type: MUST
    rule: System MUSS Proposal-Typ 'Strategic Partnership' (partnership) unterstützen
      mit Quorum 10% und Threshold 66%
    source: List-to-Rule Lifting - GOV001
    category: DAO Governance
    severity: MEDIUM
    list_metadata:
      list_name: governance_proposal_types
      list_source: 20_foundation/governance/dao_proposals.yaml
      list_index: 4
      audit_requirement: DAO Governance, Token Holder Rights
    item_data:
      type: partnership
      name: Strategic Partnership
      quorum: 10%
      threshold: 66%
    implementation_requirements:
    - 'OPA Policy: deny/allow für PROP_TYPE_005'
    - 'Unit Test: test_prop_type_005()'
    - 'Audit Trail: Log all PROP_TYPE_005-related events'
    - 'DAO Contract: Validate proposal type == ''partnership'''
    - 'Quorum Check: Require 10% participation'
    - 'Threshold Check: Require 66% approval'
  PROP_TYPE_006:
    type: MUST
    rule: System MUSS Proposal-Typ 'Emergency Protocol Action' (emergency_action)
      unterstützen mit Quorum 30% und Threshold 90%
    source: List-to-Rule Lifting - GOV001
    category: DAO Governance
    severity: CRITICAL
    list_metadata:
      list_name: governance_proposal_types
      list_source: 20_foundation/governance/dao_proposals.yaml
      list_index: 5
      audit_requirement: DAO Governance, Token Holder Rights
    item_data:
      type: emergency_action
      name: Emergency Protocol Action
      quorum: 30%
      threshold: 90%
    implementation_requirements:
    - 'OPA Policy: deny/allow für PROP_TYPE_006'
    - 'Unit Test: test_prop_type_006()'
    - 'Audit Trail: Log all PROP_TYPE_006-related events'
    - 'DAO Contract: Validate proposal type == ''emergency_action'''
    - 'Quorum Check: Require 30% participation'
    - 'Threshold Check: Require 90% approval'
  PROP_TYPE_007:
    type: MUST
    rule: System MUSS Proposal-Typ 'Token Minting (Inflation)' (token_mint) unterstützen
      mit Quorum 25% und Threshold 85%
    source: List-to-Rule Lifting - GOV001
    category: DAO Governance
    severity: CRITICAL
    list_metadata:
      list_name: governance_proposal_types
      list_source: 20_foundation/governance/dao_proposals.yaml
      list_index: 6
      audit_requirement: DAO Governance, Token Holder Rights
    item_data:
      type: token_mint
      name: Token Minting (Inflation)
      quorum: 25%
      threshold: 85%
    implementation_requirements:
    - 'OPA Policy: deny/allow für PROP_TYPE_007'
    - 'Unit Test: test_prop_type_007()'
    - 'Audit Trail: Log all PROP_TYPE_007-related events'
    - 'DAO Contract: Validate proposal type == ''token_mint'''
    - 'Quorum Check: Require 25% participation'
    - 'Threshold Check: Require 85% approval'
  JURIS_T1_001:
    type: MUST
    rule: System MUSS Germany (DE) als Tier 1 Market mit eIDAS-Level 'substantial'
      unterstützen
    source: List-to-Rule Lifting - S018
    category: Market Coverage
    severity: HIGH
    list_metadata:
      list_name: covered_jurisdictions_tier1
      list_source: 07_governance_legal/jurisdictions.yaml
      list_index: 0
      audit_requirement: eIDAS 2.0, Local Regulations
    item_data:
      code: DE
      name: Germany
      tier: 1
      eidas_level: substantial
    implementation_requirements:
    - 'OPA Policy: deny/allow für JURIS_T1_001'
    - 'Unit Test: test_juris_t1_001()'
    - 'Audit Trail: Log all JURIS_T1_001-related events'
  JURIS_T1_002:
    type: MUST
    rule: System MUSS France (FR) als Tier 1 Market mit eIDAS-Level 'substantial'
      unterstützen
    source: List-to-Rule Lifting - S018
    category: Market Coverage
    severity: HIGH
    list_metadata:
      list_name: covered_jurisdictions_tier1
      list_source: 07_governance_legal/jurisdictions.yaml
      list_index: 1
      audit_requirement: eIDAS 2.0, Local Regulations
    item_data:
      code: FR
      name: France
      tier: 1
      eidas_level: substantial
    implementation_requirements:
    - 'OPA Policy: deny/allow für JURIS_T1_002'
    - 'Unit Test: test_juris_t1_002()'
    - 'Audit Trail: Log all JURIS_T1_002-related events'
  JURIS_T1_003:
    type: MUST
    rule: System MUSS Netherlands (NL) als Tier 1 Market mit eIDAS-Level 'substantial'
      unterstützen
    source: List-to-Rule Lifting - S018
    category: Market Coverage
    severity: HIGH
    list_metadata:
      list_name: covered_jurisdictions_tier1
      list_source: 07_governance_legal/jurisdictions.yaml
      list_index: 2
      audit_requirement: eIDAS 2.0, Local Regulations
    item_data:
      code: NL
      name: Netherlands
      tier: 1
      eidas_level: substantial
    implementation_requirements:
    - 'OPA Policy: deny/allow für JURIS_T1_003'
    - 'Unit Test: test_juris_t1_003()'
    - 'Audit Trail: Log all JURIS_T1_003-related events'
  JURIS_T1_004:
    type: MUST
    rule: System MUSS Switzerland (CH) als Tier 1 Market mit eIDAS-Level 'high' unterstützen
    source: List-to-Rule Lifting - S018
    category: Market Coverage
    severity: HIGH
    list_metadata:
      list_name: covered_jurisdictions_tier1
      list_source: 07_governance_legal/jurisdictions.yaml
      list_index: 3
      audit_requirement: eIDAS 2.0, Local Regulations
    item_data:
      code: CH
      name: Switzerland
      tier: 1
      eidas_level: high
    implementation_requirements:
    - 'OPA Policy: deny/allow für JURIS_T1_004'
    - 'Unit Test: test_juris_t1_004()'
    - 'Audit Trail: Log all JURIS_T1_004-related events'
  JURIS_T1_005:
    type: MUST
    rule: System MUSS United Kingdom (UK) als Tier 1 Market mit eIDAS-Level 'substantial'
      unterstützen
    source: List-to-Rule Lifting - S018
    category: Market Coverage
    severity: HIGH
    list_metadata:
      list_name: covered_jurisdictions_tier1
      list_source: 07_governance_legal/jurisdictions.yaml
      list_index: 4
      audit_requirement: eIDAS 2.0, Local Regulations
    item_data:
      code: UK
      name: United Kingdom
      tier: 1
      eidas_level: substantial
    implementation_requirements:
    - 'OPA Policy: deny/allow für JURIS_T1_005'
    - 'Unit Test: test_juris_t1_005()'
    - 'Audit Trail: Log all JURIS_T1_005-related events'
  JURIS_T1_006:
    type: MUST
    rule: System MUSS Singapore (SG) als Tier 1 Market mit eIDAS-Level 'substantial'
      unterstützen
    source: List-to-Rule Lifting - S018
    category: Market Coverage
    severity: HIGH
    list_metadata:
      list_name: covered_jurisdictions_tier1
      list_source: 07_governance_legal/jurisdictions.yaml
      list_index: 5
      audit_requirement: eIDAS 2.0, Local Regulations
    item_data:
      code: SG
      name: Singapore
      tier: 1
      eidas_level: substantial
    implementation_requirements:
    - 'OPA Policy: deny/allow für JURIS_T1_006'
    - 'Unit Test: test_juris_t1_006()'
    - 'Audit Trail: Log all JURIS_T1_006-related events'
  JURIS_T1_007:
    type: MUST
    rule: System MUSS Japan (JP) als Tier 1 Market mit eIDAS-Level 'substantial' unterstützen
    source: List-to-Rule Lifting - S018
    category: Market Coverage
    severity: HIGH
    list_metadata:
      list_name: covered_jurisdictions_tier1
      list_source: 07_governance_legal/jurisdictions.yaml
      list_index: 6
      audit_requirement: eIDAS 2.0, Local Regulations
    item_data:
      code: JP
      name: Japan
      tier: 1
      eidas_level: substantial
    implementation_requirements:
    - 'OPA Policy: deny/allow für JURIS_T1_007'
    - 'Unit Test: test_juris_t1_007()'
    - 'Audit Trail: Log all JURIS_T1_007-related events'
  REWARD_POOL_001:
    type: MUST
    rule: System MUSS Reward Pool 'Staking Rewards Pool' (staking_rewards) mit 30%
      Allocation und Vesting 'none' verwalten
    source: List-to-Rule Lifting - R020
    category: Tokenomics
    severity: HIGH
    list_metadata:
      list_name: reward_pools
      list_source: 20_foundation/tokenomics/rewards.yaml
      list_index: 0
      audit_requirement: Tokenomics Transparency, MiCA
    item_data:
      pool_id: staking_rewards
      name: Staking Rewards Pool
      allocation_percent: 30
      vesting: none
    implementation_requirements:
    - 'OPA Policy: deny/allow für REWARD_POOL_001'
    - 'Unit Test: test_reward_pool_001()'
    - 'Audit Trail: Log all REWARD_POOL_001-related events'
  REWARD_POOL_002:
    type: MUST
    rule: System MUSS Reward Pool 'Liquidity Mining Pool' (liquidity_mining) mit 20%
      Allocation und Vesting 'linear_12m' verwalten
    source: List-to-Rule Lifting - R020
    category: Tokenomics
    severity: HIGH
    list_metadata:
      list_name: reward_pools
      list_source: 20_foundation/tokenomics/rewards.yaml
      list_index: 1
      audit_requirement: Tokenomics Transparency, MiCA
    item_data:
      pool_id: liquidity_mining
      name: Liquidity Mining Pool
      allocation_percent: 20
      vesting: linear_12m
    implementation_requirements:
    - 'OPA Policy: deny/allow für REWARD_POOL_002'
    - 'Unit Test: test_reward_pool_002()'
    - 'Audit Trail: Log all REWARD_POOL_002-related events'
  REWARD_POOL_003:
    type: MUST
    rule: System MUSS Reward Pool 'Ecosystem Development Grants' (ecosystem_grants)
      mit 15% Allocation und Vesting 'milestone_based' verwalten
    source: List-to-Rule Lifting - R020
    category: Tokenomics
    severity: MEDIUM
    list_metadata:
      list_name: reward_pools
      list_source: 20_foundation/tokenomics/rewards.yaml
      list_index: 2
      audit_requirement: Tokenomics Transparency, MiCA
    item_data:
      pool_id: ecosystem_grants
      name: Ecosystem Development Grants
      allocation_percent: 15
      vesting: milestone_based
    implementation_requirements:
    - 'OPA Policy: deny/allow für REWARD_POOL_003'
    - 'Unit Test: test_reward_pool_003()'
    - 'Audit Trail: Log all REWARD_POOL_003-related events'
  REWARD_POOL_004:
    type: MUST
    rule: System MUSS Reward Pool 'Team & Advisors Vesting' (team_vesting) mit 20%
      Allocation und Vesting 'linear_48m_cliff_12m' verwalten
    source: List-to-Rule Lifting - R020
    category: Tokenomics
    severity: CRITICAL
    list_metadata:
      list_name: reward_pools
      list_source: 20_foundation/tokenomics/rewards.yaml
      list_index: 3
      audit_requirement: Tokenomics Transparency, MiCA
    item_data:
      pool_id: team_vesting
      name: Team & Advisors Vesting
      allocation_percent: 20
      vesting: linear_48m_cliff_12m
    implementation_requirements:
    - 'OPA Policy: deny/allow für REWARD_POOL_004'
    - 'Unit Test: test_reward_pool_004()'
    - 'Audit Trail: Log all REWARD_POOL_004-related events'
  REWARD_POOL_005:
    type: MUST
    rule: System MUSS Reward Pool 'DAO Treasury Reserve' (treasury_reserve) mit 15%
      Allocation und Vesting 'dao_controlled' verwalten
    source: List-to-Rule Lifting - R020
    category: Tokenomics
    severity: CRITICAL
    list_metadata:
      list_name: reward_pools
      list_source: 20_foundation/tokenomics/rewards.yaml
      list_index: 4
      audit_requirement: Tokenomics Transparency, MiCA
    item_data:
      pool_id: treasury_reserve
      name: DAO Treasury Reserve
      allocation_percent: 15
      vesting: dao_controlled
    implementation_requirements:
    - 'OPA Policy: deny/allow für REWARD_POOL_005'
    - 'Unit Test: test_reward_pool_005()'
    - 'Audit Trail: Log all REWARD_POOL_005-related events'
  NETWORK_001:
    type: MUST
    rule: 'System MUSS Blockchain-Netzwerk Ethereum Mainnet (Chain ID: 1) unterstützen'
    source: List-to-Rule Lifting - PU005
    category: Blockchain Integration
    severity: CRITICAL
    list_metadata:
      list_name: supported_networks
      list_source: 03_core/blockchain/networks.yaml
      list_index: 0
      audit_requirement: Multi-Chain Architecture, Security
    item_data:
      network_id: ethereum_mainnet
      name: Ethereum Mainnet
      chain_id: 1
      explorer: etherscan.io
    implementation_requirements:
    - 'OPA Policy: deny/allow für NETWORK_001'
    - 'Unit Test: test_network_001()'
    - 'Audit Trail: Log all NETWORK_001-related events'
    - 'Network Config: Add Chain ID 1'
    - 'RPC Endpoint: Configure for Ethereum Mainnet'
    - 'Block Explorer: Link to etherscan.io'
  NETWORK_002:
    type: MUST
    rule: 'System MUSS Blockchain-Netzwerk Polygon Mainnet (Chain ID: 137) unterstützen'
    source: List-to-Rule Lifting - PU005
    category: Blockchain Integration
    severity: CRITICAL
    list_metadata:
      list_name: supported_networks
      list_source: 03_core/blockchain/networks.yaml
      list_index: 1
      audit_requirement: Multi-Chain Architecture, Security
    item_data:
      network_id: polygon_mainnet
      name: Polygon Mainnet
      chain_id: 137
      explorer: polygonscan.com
    implementation_requirements:
    - 'OPA Policy: deny/allow für NETWORK_002'
    - 'Unit Test: test_network_002()'
    - 'Audit Trail: Log all NETWORK_002-related events'
    - 'Network Config: Add Chain ID 137'
    - 'RPC Endpoint: Configure for Polygon Mainnet'
    - 'Block Explorer: Link to polygonscan.com'
  NETWORK_003:
    type: MUST
    rule: 'System MUSS Blockchain-Netzwerk Arbitrum One (Chain ID: 42161) unterstützen'
    source: List-to-Rule Lifting - PU005
    category: Blockchain Integration
    severity: HIGH
    list_metadata:
      list_name: supported_networks
      list_source: 03_core/blockchain/networks.yaml
      list_index: 2
      audit_requirement: Multi-Chain Architecture, Security
    item_data:
      network_id: arbitrum_one
      name: Arbitrum One
      chain_id: 42161
      explorer: arbiscan.io
    implementation_requirements:
    - 'OPA Policy: deny/allow für NETWORK_003'
    - 'Unit Test: test_network_003()'
    - 'Audit Trail: Log all NETWORK_003-related events'
    - 'Network Config: Add Chain ID 42161'
    - 'RPC Endpoint: Configure for Arbitrum One'
    - 'Block Explorer: Link to arbiscan.io'
  NETWORK_004:
    type: MUST
    rule: 'System MUSS Blockchain-Netzwerk Optimism Mainnet (Chain ID: 10) unterstützen'
    source: List-to-Rule Lifting - PU005
    category: Blockchain Integration
    severity: HIGH
    list_metadata:
      list_name: supported_networks
      list_source: 03_core/blockchain/networks.yaml
      list_index: 3
      audit_requirement: Multi-Chain Architecture, Security
    item_data:
      network_id: optimism
      name: Optimism Mainnet
      chain_id: 10
      explorer: optimistic.etherscan.io
    implementation_requirements:
    - 'OPA Policy: deny/allow für NETWORK_004'
    - 'Unit Test: test_network_004()'
    - 'Audit Trail: Log all NETWORK_004-related events'
    - 'Network Config: Add Chain ID 10'
    - 'RPC Endpoint: Configure for Optimism Mainnet'
    - 'Block Explorer: Link to optimistic.etherscan.io'
  NETWORK_005:
    type: MUST
    rule: 'System MUSS Blockchain-Netzwerk Base Mainnet (Chain ID: 8453) unterstützen'
    source: List-to-Rule Lifting - PU005
    category: Blockchain Integration
    severity: MEDIUM
    list_metadata:
      list_name: supported_networks
      list_source: 03_core/blockchain/networks.yaml
      list_index: 4
      audit_requirement: Multi-Chain Architecture, Security
    item_data:
      network_id: base
      name: Base Mainnet
      chain_id: 8453
      explorer: basescan.org
    implementation_requirements:
    - 'OPA Policy: deny/allow für NETWORK_005'
    - 'Unit Test: test_network_005()'
    - 'Audit Trail: Log all NETWORK_005-related events'
    - 'Network Config: Add Chain ID 8453'
    - 'RPC Endpoint: Configure for Base Mainnet'
    - 'Block Explorer: Link to basescan.org'
  NETWORK_006:
    type: MUST
    rule: 'System MUSS Blockchain-Netzwerk Avalanche C-Chain (Chain ID: 43114) unterstützen'
    source: List-to-Rule Lifting - PU005
    category: Blockchain Integration
    severity: MEDIUM
    list_metadata:
      list_name: supported_networks
      list_source: 03_core/blockchain/networks.yaml
      list_index: 5
      audit_requirement: Multi-Chain Architecture, Security
    item_data:
      network_id: avalanche
      name: Avalanche C-Chain
      chain_id: 43114
      explorer: snowtrace.io
    implementation_requirements:
    - 'OPA Policy: deny/allow für NETWORK_006'
    - 'Unit Test: test_network_006()'
    - 'Audit Trail: Log all NETWORK_006-related events'
    - 'Network Config: Add Chain ID 43114'
    - 'RPC Endpoint: Configure for Avalanche C-Chain'
    - 'Block Explorer: Link to snowtrace.io'
  AUTH_METHOD_001:
    type: MUST
    rule: System MUSS Authentifizierungsmethode 'DID-based Authentication' (did_auth)
      mit eIDAS-Level 'high' unterstützen
    source: List-to-Rule Lifting - R016
    category: Authentication
    severity: CRITICAL
    list_metadata:
      list_name: supported_auth_methods
      list_source: 14_zero_time_auth/methods.yaml
      list_index: 0
      audit_requirement: eIDAS 2.0, Security Standards
    item_data:
      method_id: did_auth
      name: DID-based Authentication
      eidas_level: high
      mfa_required: false
    implementation_requirements:
    - 'OPA Policy: deny/allow für AUTH_METHOD_001'
    - 'Unit Test: test_auth_method_001()'
    - 'Audit Trail: Log all AUTH_METHOD_001-related events'
  AUTH_METHOD_002:
    type: MUST
    rule: System MUSS Authentifizierungsmethode 'Biometric Authentication (Face/Fingerprint)'
      (biometric) mit eIDAS-Level 'high' unterstützen
    source: List-to-Rule Lifting - R016
    category: Authentication
    severity: CRITICAL
    list_metadata:
      list_name: supported_auth_methods
      list_source: 14_zero_time_auth/methods.yaml
      list_index: 1
      audit_requirement: eIDAS 2.0, Security Standards
    item_data:
      method_id: biometric
      name: Biometric Authentication (Face/Fingerprint)
      eidas_level: high
      mfa_required: false
    implementation_requirements:
    - 'OPA Policy: deny/allow für AUTH_METHOD_002'
    - 'Unit Test: test_auth_method_002()'
    - 'Audit Trail: Log all AUTH_METHOD_002-related events'
  AUTH_METHOD_003:
    type: MUST
    rule: System MUSS Authentifizierungsmethode 'Hardware Security Key (FIDO2)' (hardware_token)
      mit eIDAS-Level 'high' unterstützen
    source: List-to-Rule Lifting - R016
    category: Authentication
    severity: HIGH
    list_metadata:
      list_name: supported_auth_methods
      list_source: 14_zero_time_auth/methods.yaml
      list_index: 2
      audit_requirement: eIDAS 2.0, Security Standards
    item_data:
      method_id: hardware_token
      name: Hardware Security Key (FIDO2)
      eidas_level: high
      mfa_required: false
    implementation_requirements:
    - 'OPA Policy: deny/allow für AUTH_METHOD_003'
    - 'Unit Test: test_auth_method_003()'
    - 'Audit Trail: Log all AUTH_METHOD_003-related events'
  AUTH_METHOD_004:
    type: MUST
    rule: System MUSS Authentifizierungsmethode 'Time-based OTP (TOTP)' (totp) mit
      eIDAS-Level 'substantial' unterstützen
    source: List-to-Rule Lifting - R016
    category: Authentication
    severity: MEDIUM
    list_metadata:
      list_name: supported_auth_methods
      list_source: 14_zero_time_auth/methods.yaml
      list_index: 3
      audit_requirement: eIDAS 2.0, Security Standards
    item_data:
      method_id: totp
      name: Time-based OTP (TOTP)
      eidas_level: substantial
      mfa_required: true
    implementation_requirements:
    - 'OPA Policy: deny/allow für AUTH_METHOD_004'
    - 'Unit Test: test_auth_method_004()'
    - 'Audit Trail: Log all AUTH_METHOD_004-related events'
  AUTH_METHOD_005:
    type: MUST
    rule: System MUSS Authentifizierungsmethode 'SMS-based OTP' (sms_otp) mit eIDAS-Level
      'low' unterstützen
    source: List-to-Rule Lifting - R016
    category: Authentication
    severity: LOW
    list_metadata:
      list_name: supported_auth_methods
      list_source: 14_zero_time_auth/methods.yaml
      list_index: 4
      audit_requirement: eIDAS 2.0, Security Standards
    item_data:
      method_id: sms_otp
      name: SMS-based OTP
      eidas_level: low
      mfa_required: true
    implementation_requirements:
    - 'OPA Policy: deny/allow für AUTH_METHOD_005'
    - 'Unit Test: test_auth_method_005()'
    - 'Audit Trail: Log all AUTH_METHOD_005-related events'
  AUTH_METHOD_006:
    type: MUST
    rule: System MUSS Authentifizierungsmethode 'Email Magic Link' (email_magic_link)
      mit eIDAS-Level 'low' unterstützen
    source: List-to-Rule Lifting - R016
    category: Authentication
    severity: LOW
    list_metadata:
      list_name: supported_auth_methods
      list_source: 14_zero_time_auth/methods.yaml
      list_index: 5
      audit_requirement: eIDAS 2.0, Security Standards
    item_data:
      method_id: email_magic_link
      name: Email Magic Link
      eidas_level: low
      mfa_required: true
    implementation_requirements:
    - 'OPA Policy: deny/allow für AUTH_METHOD_006'
    - 'Unit Test: test_auth_method_006()'
    - 'Audit Trail: Log all AUTH_METHOD_006-related events'
  PII_CAT_001:
    type: MUST
    rule: System MUSS PII-Kategorie 'Name (First, Last, Full)' (name) gemäß Art. 4(1)
      behandeln
    source: List-to-Rule Lifting - KP001
    category: GDPR Compliance
    severity: HIGH
    list_metadata:
      list_name: pii_categories
      list_source: 23_compliance/gdpr/pii_definitions.yaml
      list_index: 0
      audit_requirement: GDPR Art. 5, 6, 9
    item_data:
      category_id: name
      name: Name (First, Last, Full)
      gdpr_article: Art. 4(1)
      special_category: false
    implementation_requirements:
    - 'OPA Policy: deny/allow für PII_CAT_001'
    - 'Unit Test: test_pii_cat_001()'
    - 'Audit Trail: Log all PII_CAT_001-related events'
    - 'PII Detector: Recognize name'
    - 'Hash-Only Storage: Never store raw name'
    - 'GDPR Compliance: Implement Art. 4(1)'
  PII_CAT_002:
    type: MUST
    rule: System MUSS PII-Kategorie 'Email Address' (email) gemäß Art. 4(1) behandeln
    source: List-to-Rule Lifting - KP001
    category: GDPR Compliance
    severity: HIGH
    list_metadata:
      list_name: pii_categories
      list_source: 23_compliance/gdpr/pii_definitions.yaml
      list_index: 1
      audit_requirement: GDPR Art. 5, 6, 9
    item_data:
      category_id: email
      name: Email Address
      gdpr_article: Art. 4(1)
      special_category: false
    implementation_requirements:
    - 'OPA Policy: deny/allow für PII_CAT_002'
    - 'Unit Test: test_pii_cat_002()'
    - 'Audit Trail: Log all PII_CAT_002-related events'
    - 'PII Detector: Recognize email'
    - 'Hash-Only Storage: Never store raw email'
    - 'GDPR Compliance: Implement Art. 4(1)'
  PII_CAT_003:
    type: MUST
    rule: System MUSS PII-Kategorie 'Phone Number' (phone) gemäß Art. 4(1) behandeln
    source: List-to-Rule Lifting - KP001
    category: GDPR Compliance
    severity: HIGH
    list_metadata:
      list_name: pii_categories
      list_source: 23_compliance/gdpr/pii_definitions.yaml
      list_index: 2
      audit_requirement: GDPR Art. 5, 6, 9
    item_data:
      category_id: phone
      name: Phone Number
      gdpr_article: Art. 4(1)
      special_category: false
    implementation_requirements:
    - 'OPA Policy: deny/allow für PII_CAT_003'
    - 'Unit Test: test_pii_cat_003()'
    - 'Audit Trail: Log all PII_CAT_003-related events'
    - 'PII Detector: Recognize phone'
    - 'Hash-Only Storage: Never store raw phone'
    - 'GDPR Compliance: Implement Art. 4(1)'
  PII_CAT_004:
    type: MUST
    rule: System MUSS PII-Kategorie 'Physical Address' (address) gemäß Art. 4(1) behandeln
    source: List-to-Rule Lifting - KP001
    category: GDPR Compliance
    severity: HIGH
    list_metadata:
      list_name: pii_categories
      list_source: 23_compliance/gdpr/pii_definitions.yaml
      list_index: 3
      audit_requirement: GDPR Art. 5, 6, 9
    item_data:
      category_id: address
      name: Physical Address
      gdpr_article: Art. 4(1)
      special_category: false
    implementation_requirements:
    - 'OPA Policy: deny/allow für PII_CAT_004'
    - 'Unit Test: test_pii_cat_004()'
    - 'Audit Trail: Log all PII_CAT_004-related events'
    - 'PII Detector: Recognize address'
    - 'Hash-Only Storage: Never store raw address'
    - 'GDPR Compliance: Implement Art. 4(1)'
  PII_CAT_005:
    type: MUST
    rule: System MUSS PII-Kategorie 'National ID / SSN' (national_id) gemäß Art. 4(1)
      behandeln
    source: List-to-Rule Lifting - KP001
    category: GDPR Compliance
    severity: CRITICAL
    list_metadata:
      list_name: pii_categories
      list_source: 23_compliance/gdpr/pii_definitions.yaml
      list_index: 4
      audit_requirement: GDPR Art. 5, 6, 9
    item_data:
      category_id: national_id
      name: National ID / SSN
      gdpr_article: Art. 4(1)
      special_category: false
    implementation_requirements:
    - 'OPA Policy: deny/allow für PII_CAT_005'
    - 'Unit Test: test_pii_cat_005()'
    - 'Audit Trail: Log all PII_CAT_005-related events'
    - 'PII Detector: Recognize national_id'
    - 'Hash-Only Storage: Never store raw national_id'
    - 'GDPR Compliance: Implement Art. 4(1)'
  PII_CAT_006:
    type: MUST
    rule: System MUSS PII-Kategorie 'Biometric Data' (biometric) gemäß Art. 9(1) behandeln
      (GDPR Special Category)
    source: List-to-Rule Lifting - KP001
    category: GDPR Compliance
    severity: CRITICAL
    list_metadata:
      list_name: pii_categories
      list_source: 23_compliance/gdpr/pii_definitions.yaml
      list_index: 5
      audit_requirement: GDPR Art. 5, 6, 9
    item_data:
      category_id: biometric
      name: Biometric Data
      gdpr_article: Art. 9(1)
      special_category: true
    implementation_requirements:
    - 'OPA Policy: deny/allow für PII_CAT_006'
    - 'Unit Test: test_pii_cat_006()'
    - 'Audit Trail: Log all PII_CAT_006-related events'
    - 'PII Detector: Recognize biometric'
    - 'Hash-Only Storage: Never store raw biometric'
    - 'GDPR Compliance: Implement Art. 9(1)'
  PII_CAT_007:
    type: MUST
    rule: System MUSS PII-Kategorie 'Health Data' (health) gemäß Art. 9(1) behandeln
      (GDPR Special Category)
    source: List-to-Rule Lifting - KP001
    category: GDPR Compliance
    severity: CRITICAL
    list_metadata:
      list_name: pii_categories
      list_source: 23_compliance/gdpr/pii_definitions.yaml
      list_index: 6
      audit_requirement: GDPR Art. 5, 6, 9
    item_data:
      category_id: health
      name: Health Data
      gdpr_article: Art. 9(1)
      special_category: true
    implementation_requirements:
    - 'OPA Policy: deny/allow für PII_CAT_007'
    - 'Unit Test: test_pii_cat_007()'
    - 'Audit Trail: Log all PII_CAT_007-related events'
    - 'PII Detector: Recognize health'
    - 'Hash-Only Storage: Never store raw health'
    - 'GDPR Compliance: Implement Art. 9(1)'
  PII_CAT_008:
    type: MUST
    rule: System MUSS PII-Kategorie 'Genetic Data' (genetic) gemäß Art. 9(1) behandeln
      (GDPR Special Category)
    source: List-to-Rule Lifting - KP001
    category: GDPR Compliance
    severity: CRITICAL
    list_metadata:
      list_name: pii_categories
      list_source: 23_compliance/gdpr/pii_definitions.yaml
      list_index: 7
      audit_requirement: GDPR Art. 5, 6, 9
    item_data:
      category_id: genetic
      name: Genetic Data
      gdpr_article: Art. 9(1)
      special_category: true
    implementation_requirements:
    - 'OPA Policy: deny/allow für PII_CAT_008'
    - 'Unit Test: test_pii_cat_008()'
    - 'Audit Trail: Log all PII_CAT_008-related events'
    - 'PII Detector: Recognize genetic'
    - 'Hash-Only Storage: Never store raw genetic'
    - 'GDPR Compliance: Implement Art. 9(1)'
  PII_CAT_009:
    type: MUST
    rule: System MUSS PII-Kategorie 'Religious Beliefs' (religion) gemäß Art. 9(1)
      behandeln (GDPR Special Category)
    source: List-to-Rule Lifting - KP001
    category: GDPR Compliance
    severity: CRITICAL
    list_metadata:
      list_name: pii_categories
      list_source: 23_compliance/gdpr/pii_definitions.yaml
      list_index: 8
      audit_requirement: GDPR Art. 5, 6, 9
    item_data:
      category_id: religion
      name: Religious Beliefs
      gdpr_article: Art. 9(1)
      special_category: true
    implementation_requirements:
    - 'OPA Policy: deny/allow für PII_CAT_009'
    - 'Unit Test: test_pii_cat_009()'
    - 'Audit Trail: Log all PII_CAT_009-related events'
    - 'PII Detector: Recognize religion'
    - 'Hash-Only Storage: Never store raw religion'
    - 'GDPR Compliance: Implement Art. 9(1)'
  PII_CAT_010:
    type: MUST
    rule: System MUSS PII-Kategorie 'Political Opinions' (political) gemäß Art. 9(1)
      behandeln (GDPR Special Category)
    source: List-to-Rule Lifting - KP001
    category: GDPR Compliance
    severity: CRITICAL
    list_metadata:
      list_name: pii_categories
      list_source: 23_compliance/gdpr/pii_definitions.yaml
      list_index: 9
      audit_requirement: GDPR Art. 5, 6, 9
    item_data:
      category_id: political
      name: Political Opinions
      gdpr_article: Art. 9(1)
      special_category: true
    implementation_requirements:
    - 'OPA Policy: deny/allow für PII_CAT_010'
    - 'Unit Test: test_pii_cat_010()'
    - 'Audit Trail: Log all PII_CAT_010-related events'
    - 'PII Detector: Recognize political'
    - 'Hash-Only Storage: Never store raw political'
    - 'GDPR Compliance: Implement Art. 9(1)'
  HASH_ALG_001:
    type: MUST
    rule: System MUSS Hash-Algorithmus SHA3-256 (256 bits) als 'primary' unterstützen
    source: List-to-Rule Lifting - KP002
    category: Cryptography
    severity: CRITICAL
    list_metadata:
      list_name: approved_hash_algorithms
      list_source: 21_post_quantum_crypto/algorithms.yaml
      list_index: 0
      audit_requirement: Cryptographic Standards, Post-Quantum
    item_data:
      algorithm_id: sha3_256
      name: SHA3-256
      bits: 256
      quantum_safe: false
      status: primary
    implementation_requirements:
    - 'OPA Policy: deny/allow für HASH_ALG_001'
    - 'Unit Test: test_hash_alg_001()'
    - 'Audit Trail: Log all HASH_ALG_001-related events'
  HASH_ALG_002:
    type: MUST
    rule: System MUSS Hash-Algorithmus SHA3-512 (512 bits) als 'approved' unterstützen
    source: List-to-Rule Lifting - KP002
    category: Cryptography
    severity: HIGH
    list_metadata:
      list_name: approved_hash_algorithms
      list_source: 21_post_quantum_crypto/algorithms.yaml
      list_index: 1
      audit_requirement: Cryptographic Standards, Post-Quantum
    item_data:
      algorithm_id: sha3_512
      name: SHA3-512
      bits: 512
      quantum_safe: false
      status: approved
    implementation_requirements:
    - 'OPA Policy: deny/allow für HASH_ALG_002'
    - 'Unit Test: test_hash_alg_002()'
    - 'Audit Trail: Log all HASH_ALG_002-related events'
  HASH_ALG_003:
    type: MUST
    rule: System MUSS Hash-Algorithmus BLAKE3 (256 bits) als 'approved' unterstützen
    source: List-to-Rule Lifting - KP002
    category: Cryptography
    severity: MEDIUM
    list_metadata:
      list_name: approved_hash_algorithms
      list_source: 21_post_quantum_crypto/algorithms.yaml
      list_index: 2
      audit_requirement: Cryptographic Standards, Post-Quantum
    item_data:
      algorithm_id: blake3
      name: BLAKE3
      bits: 256
      quantum_safe: false
      status: approved
    implementation_requirements:
    - 'OPA Policy: deny/allow für HASH_ALG_003'
    - 'Unit Test: test_hash_alg_003()'
    - 'Audit Trail: Log all HASH_ALG_003-related events'
  HASH_ALG_004:
    type: MUST
    rule: System MUSS Hash-Algorithmus SPHINCS+ (256 bits) als 'future' (Quantum-Safe)
      unterstützen
    source: List-to-Rule Lifting - KP002
    category: Cryptography
    severity: LOW
    list_metadata:
      list_name: approved_hash_algorithms
      list_source: 21_post_quantum_crypto/algorithms.yaml
      list_index: 3
      audit_requirement: Cryptographic Standards, Post-Quantum
    item_data:
      algorithm_id: sphincs_plus
      name: SPHINCS+
      bits: 256
      quantum_safe: true
      status: future
    implementation_requirements:
    - 'OPA Policy: deny/allow für HASH_ALG_004'
    - 'Unit Test: test_hash_alg_004()'
    - 'Audit Trail: Log all HASH_ALG_004-related events'
  RETENTION_001:
    type: MUST
    rule: 'System MUSS Retention Period für ''transaction_hashes'' auf 3650 Tage setzen.
      Grund: Legal requirement (10 years)'
    source: List-to-Rule Lifting - KP006
    category: GDPR Retention
    severity: CRITICAL
    list_metadata:
      list_name: data_retention_periods
      list_source: 23_compliance/gdpr/retention.yaml
      list_index: 0
      audit_requirement: GDPR Art. 5(1)(e)
    item_data:
      data_type: transaction_hashes
      retention_days: 3650
      reason: Legal requirement (10 years)
    implementation_requirements:
    - 'OPA Policy: deny/allow für RETENTION_001'
    - 'Unit Test: test_retention_001()'
    - 'Audit Trail: Log all RETENTION_001-related events'
  RETENTION_002:
    type: MUST
    rule: 'System MUSS Retention Period für ''audit_logs'' auf 3650 Tage setzen. Grund:
      Compliance (10 years)'
    source: List-to-Rule Lifting - KP006
    category: GDPR Retention
    severity: CRITICAL
    list_metadata:
      list_name: data_retention_periods
      list_source: 23_compliance/gdpr/retention.yaml
      list_index: 1
      audit_requirement: GDPR Art. 5(1)(e)
    item_data:
      data_type: audit_logs
      retention_days: 3650
      reason: Compliance (10 years)
    implementation_requirements:
    - 'OPA Policy: deny/allow für RETENTION_002'
    - 'Unit Test: test_retention_002()'
    - 'Audit Trail: Log all RETENTION_002-related events'
  RETENTION_003:
    type: MUST
    rule: 'System MUSS Retention Period für ''session_tokens'' auf 1 Tage setzen.
      Grund: Security best practice'
    source: List-to-Rule Lifting - KP006
    category: GDPR Retention
    severity: HIGH
    list_metadata:
      list_name: data_retention_periods
      list_source: 23_compliance/gdpr/retention.yaml
      list_index: 2
      audit_requirement: GDPR Art. 5(1)(e)
    item_data:
      data_type: session_tokens
      retention_days: 1
      reason: Security best practice
    implementation_requirements:
    - 'OPA Policy: deny/allow für RETENTION_003'
    - 'Unit Test: test_retention_003()'
    - 'Audit Trail: Log all RETENTION_003-related events'
  RETENTION_004:
    type: MUST
    rule: 'System MUSS Retention Period für ''email_verification'' auf 30 Tage setzen.
      Grund: User onboarding'
    source: List-to-Rule Lifting - KP006
    category: GDPR Retention
    severity: MEDIUM
    list_metadata:
      list_name: data_retention_periods
      list_source: 23_compliance/gdpr/retention.yaml
      list_index: 3
      audit_requirement: GDPR Art. 5(1)(e)
    item_data:
      data_type: email_verification
      retention_days: 30
      reason: User onboarding
    implementation_requirements:
    - 'OPA Policy: deny/allow für RETENTION_004'
    - 'Unit Test: test_retention_004()'
    - 'Audit Trail: Log all RETENTION_004-related events'
  RETENTION_005:
    type: MUST
    rule: 'System MUSS Retention Period für ''analytics_aggregated'' auf 730 Tage
      setzen. Grund: Business intelligence (2 years)'
    source: List-to-Rule Lifting - KP006
    category: GDPR Retention
    severity: LOW
    list_metadata:
      list_name: data_retention_periods
      list_source: 23_compliance/gdpr/retention.yaml
      list_index: 4
      audit_requirement: GDPR Art. 5(1)(e)
    item_data:
      data_type: analytics_aggregated
      retention_days: 730
      reason: Business intelligence (2 years)
    implementation_requirements:
    - 'OPA Policy: deny/allow für RETENTION_005'
    - 'Unit Test: test_retention_005()'
    - 'Audit Trail: Log all RETENTION_005-related events'
  DID_METHOD_001:
    type: MUST
    rule: System MUSS DID-Methode did:ethr (Ethereum DID Method) gemäß Spec https://github.com/decentralized-identity/ethr-did-resolver
      unterstützen
    source: List-to-Rule Lifting - PU007
    category: Identity Standards
    severity: CRITICAL
    list_metadata:
      list_name: supported_did_methods
      list_source: 09_meta_identity/did_methods.yaml
      list_index: 0
      audit_requirement: W3C DID Core 1.0
    item_data:
      method_name: did:ethr
      name: Ethereum DID Method
      spec: https://github.com/decentralized-identity/ethr-did-resolver
    implementation_requirements:
    - 'OPA Policy: deny/allow für DID_METHOD_001'
    - 'Unit Test: test_did_method_001()'
    - 'Audit Trail: Log all DID_METHOD_001-related events'
  DID_METHOD_002:
    type: MUST
    rule: System MUSS DID-Methode did:key (Key-based DID Method) gemäß Spec https://w3c-ccg.github.io/did-method-key/
      unterstützen
    source: List-to-Rule Lifting - PU007
    category: Identity Standards
    severity: HIGH
    list_metadata:
      list_name: supported_did_methods
      list_source: 09_meta_identity/did_methods.yaml
      list_index: 1
      audit_requirement: W3C DID Core 1.0
    item_data:
      method_name: did:key
      name: Key-based DID Method
      spec: https://w3c-ccg.github.io/did-method-key/
    implementation_requirements:
    - 'OPA Policy: deny/allow für DID_METHOD_002'
    - 'Unit Test: test_did_method_002()'
    - 'Audit Trail: Log all DID_METHOD_002-related events'
  DID_METHOD_003:
    type: MUST
    rule: System MUSS DID-Methode did:web (Web DID Method) gemäß Spec https://w3c-ccg.github.io/did-method-web/
      unterstützen
    source: List-to-Rule Lifting - PU007
    category: Identity Standards
    severity: MEDIUM
    list_metadata:
      list_name: supported_did_methods
      list_source: 09_meta_identity/did_methods.yaml
      list_index: 2
      audit_requirement: W3C DID Core 1.0
    item_data:
      method_name: did:web
      name: Web DID Method
      spec: https://w3c-ccg.github.io/did-method-web/
    implementation_requirements:
    - 'OPA Policy: deny/allow für DID_METHOD_003'
    - 'Unit Test: test_did_method_003()'
    - 'Audit Trail: Log all DID_METHOD_003-related events'
  DID_METHOD_004:
    type: MUST
    rule: System MUSS DID-Methode did:ion (ION DID Method (Sidetree)) gemäß Spec https://identity.foundation/ion/
      unterstützen
    source: List-to-Rule Lifting - PU007
    category: Identity Standards
    severity: MEDIUM
    list_metadata:
      list_name: supported_did_methods
      list_source: 09_meta_identity/did_methods.yaml
      list_index: 3
      audit_requirement: W3C DID Core 1.0
    item_data:
      method_name: did:ion
      name: ION DID Method (Sidetree)
      spec: https://identity.foundation/ion/
    implementation_requirements:
    - 'OPA Policy: deny/allow für DID_METHOD_004'
    - 'Unit Test: test_did_method_004()'
    - 'Audit Trail: Log all DID_METHOD_004-related events'
coverage_strategy:
  requirement: Each rule MUST be demonstrably present in ALL 5 SoT Artefacts
  validation_method:
  - step: 1
    action: Parse master_rules.yaml and extract all rules
  - step: 2
    action: For each rule, check presence in all 5 SoT Artefacts
  - step: 3
    action: Generate coverage matrix (rules × artefacts)
  - step: 4
    action: Identify coverage gaps (rules not in all 5)
  - step: 5
    action: Generate JSON report with gaps + recommendations
  - step: 6
    action: Exit Code 0 only if 100% coverage achieved
  reporting:
    format: JSON + Console Table
    output_location: 02_audit_logging/reports/coverage/
    sha256_hash: true
    anchor_to_blockchain: false
