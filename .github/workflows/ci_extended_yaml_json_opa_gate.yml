name: ssid-ci-extended (YAML→JSON + OPA Gate + Artifact)

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build_pricing_json:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install PyYAML
        run: python -m pip install pyyaml

      - name: Compile YAML → JSON
        run: |
          python scripts/compile_pricing_json.py \
            07_governance_legal/docs/pricing/enterprise_subscription_model_v5.yaml \
            07_governance_legal/docs/pricing/enterprise_subscription_model_v5.json

      - name: Upload pricing JSON artifact
        uses: actions/upload-artifact@v4
        with:
          name: pricing-json
          path: 07_governance_legal/docs/pricing/enterprise_subscription_model_v5.json
          if-no-files-found: error

  opa_gate:
    runs-on: ubuntu-latest
    needs: build_pricing_json
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Download pricing JSON artifact
        uses: actions/download-artifact@v4
        with:
          name: pricing-json
          path: ./compiled

      - name: Fetch OPA
        run: |
          curl -L -o opa https://openpolicyagent.org/downloads/v0.64.0/opa_linux_amd64_static
          chmod +x opa
          echo "$PWD" >> $GITHUB_PATH

      - name: Verify pricing policy (pricing_enforcement.rego)
        run: |
          RES=$(./opa eval --format raw \
              --data 23_compliance/policies/pricing_enforcement.rego \
              --input ./compiled/enterprise_subscription_model_v5.json \
              'data.ssid.pricing.allow')
          echo "Result: $RES"
          if [ "$RES" != "true" ]; then
            echo "::error::OPA pricing_enforcement failed (allow != true)"
            exit 1
          fi

      - name: Verify RAT policy (rat_enforcement.rego)
        run: |
          cat <<'JSON' > rat_input.json
          {
            "model": $(cat ./compiled/enterprise_subscription_model_v5.json),
            "request": { "tier": "global_proof_suite", "regions": ["DACH"], "bundles": [] }
          }
          JSON
          RES=$(./opa eval --format raw \
              --data 23_compliance/policies/rat_enforcement.rego \
              --input rat_input.json \
              'data.ssid.rat.allow')
          echo "Result: $RES"
          if [ "$RES" != "true" ]; then
            echo "::error::OPA rat_enforcement failed (allow != true)"
            exit 1
          fi
