name: QA Policy Enforcement CI
# Ensures all QA test files comply with DUAL-LAYER QA Architecture
# Enforces qa_master_suite/ and 11_test_simulation/ as only allowed locations

on:
  push:
    branches: [main, develop]
    paths:
      - '**/*.py'
      - '**/*.yaml'
      - '**/*.yml'
      - '**/*.rego'
      - '**/*.json'
      - '.github/workflows/qa_policy_check.yml'
      - '23_compliance/policies/qa/qa_policy_enforcer.rego'
  pull_request:
    branches: [main, develop]
  workflow_dispatch:

env:
  OPA_VERSION: '0.60.0'  # Latest stable OPA version

jobs:
  qa-policy-enforcement:
    name: QA Policy Enforcement Check
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Full history for accurate diff

      - name: Install OPA
        run: |
          echo "Installing OPA v${{ env.OPA_VERSION }}..."
          curl -L -o opa https://openpolicyagent.org/downloads/v${{ env.OPA_VERSION }}/opa_linux_amd64_static
          chmod +x opa
          sudo mv opa /usr/local/bin/
          opa version

      - name: Generate files list
        id: files
        run: |
          echo "Generating list of changed files..."

          # Get list of changed files
          if [ "${{ github.event_name }}" == "pull_request" ]; then
            FILES=$(git diff --name-only --diff-filter=ACM ${{ github.event.pull_request.base.sha }} ${{ github.sha }})
          else
            FILES=$(git diff --name-only --diff-filter=ACM ${{ github.event.before }} ${{ github.sha }})
          fi

          # Create JSON input for OPA
          echo "{" > files.json
          echo '  "files": [' >> files.json

          FIRST=true
          for file in $FILES; do
            # Only include test-related files
            if [[ "$file" == *.py ]] || [[ "$file" == *.yaml ]] || [[ "$file" == *.yml ]] || [[ "$file" == *.rego ]] || [[ "$file" == *.json ]]; then
              if [ "$FIRST" = true ]; then
                FIRST=false
              else
                echo "," >> files.json
              fi
              echo "    {\"path\": \"$file\", \"action\": \"add\"}" >> files.json
            fi
          done

          echo "" >> files.json
          echo "  ]" >> files.json
          echo "}" >> files.json

          echo "Files to check:"
          cat files.json

      - name: Run OPA Policy Evaluation
        id: opa
        run: |
          echo "Running OPA policy evaluation..."

          # Evaluate deny rules
          DENY_RESULT=$(opa eval -i files.json -d 23_compliance/policies/qa/qa_policy_enforcer.rego "data.qa_policy.deny" --format json)
          echo "deny_result=$DENY_RESULT" >> $GITHUB_OUTPUT

          # Evaluate report
          REPORT_RESULT=$(opa eval -i files.json -d 23_compliance/policies/qa/qa_policy_enforcer.rego "data.qa_policy.report" --format json)
          echo "report_result=$REPORT_RESULT" >> $GITHUB_OUTPUT

          # Check if there are any violations
          VIOLATIONS=$(echo "$DENY_RESULT" | jq -r '.result[0].expressions[0].value | length')
          echo "violations=$VIOLATIONS" >> $GITHUB_OUTPUT

          echo "Violations found: $VIOLATIONS"

      - name: Parse OPA results
        id: parse
        run: |
          VIOLATIONS=${{ steps.opa.outputs.violations }}

          if [ "$VIOLATIONS" -gt 0 ]; then
            echo "status=FAIL" >> $GITHUB_OUTPUT
            echo "## ❌ QA Policy Violations Detected" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "**Violations:** $VIOLATIONS" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY

            # Extract violated files
            DENIED_FILES=$(echo '${{ steps.opa.outputs.deny_result }}' | jq -r '.result[0].expressions[0].value[]')

            echo "### Violated Files:" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            for file in $DENIED_FILES; do
              echo "- ❌ \`$file\`" >> $GITHUB_STEP_SUMMARY
            done

            echo "" >> $GITHUB_STEP_SUMMARY
            echo "### Policy Requirements:" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "All QA test files (.py, .yaml, .yml, .rego, .json) MUST reside in:" >> $GITHUB_STEP_SUMMARY
            echo "- \`02_audit_logging/archives/qa_master_suite/\` (QA Archive)" >> $GITHUB_STEP_SUMMARY
            echo "- \`11_test_simulation/\` (Active Test Directory)" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "**Exceptions:** Only the 5 SoT governance artifacts are exempt." >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "### Action Required:" >> $GITHUB_STEP_SUMMARY
            echo "1. Move test files to an allowed location" >> $GITHUB_STEP_SUMMARY
            echo "2. OR remove from commit" >> $GITHUB_STEP_SUMMARY
            echo "3. Review policy: \`02_audit_logging/archives/qa_master_suite/README.md\`" >> $GITHUB_STEP_SUMMARY
          else
            echo "status=PASS" >> $GITHUB_OUTPUT
            echo "## ✅ QA Policy Compliance" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "**Status:** COMPLIANT" >> $GITHUB_STEP_SUMMARY
            echo "**Violations:** 0" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "All test files are in approved locations." >> $GITHUB_STEP_SUMMARY
          fi

      - name: Generate detailed report
        run: |
          echo "### Policy Enforcement Report" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # Parse OPA report
          REPORT='${{ steps.opa.outputs.report_result }}'
          TOTAL_FILES=$(echo "$REPORT" | jq -r '.result[0].expressions[0].value.total_files')
          QA_FILES=$(echo "$REPORT" | jq -r '.result[0].expressions[0].value.qa_test_files')
          VIOLATIONS=$(echo "$REPORT" | jq -r '.result[0].expressions[0].value.violations')
          STATUS=$(echo "$REPORT" | jq -r '.result[0].expressions[0].value.status')

          echo "| Metric | Value |" >> $GITHUB_STEP_SUMMARY
          echo "|--------|-------|" >> $GITHUB_STEP_SUMMARY
          echo "| Total Files Checked | $TOTAL_FILES |" >> $GITHUB_STEP_SUMMARY
          echo "| QA Test Files | $QA_FILES |" >> $GITHUB_STEP_SUMMARY
          echo "| Violations | $VIOLATIONS |" >> $GITHUB_STEP_SUMMARY
          echo "| Status | $STATUS |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Policy Version:** 1.0.0" >> $GITHUB_STEP_SUMMARY
          echo "**Policy Document:** \`24_meta_orchestration/registry/qa_corpus_policy.yaml\`" >> $GITHUB_STEP_SUMMARY

      - name: Fail on violations
        if: steps.parse.outputs.status == 'FAIL'
        run: |
          echo "::error::QA Policy violations detected. See job summary for details."
          exit 1

      - name: Comment on PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const violations = ${{ steps.opa.outputs.violations }};
            const status = '${{ steps.parse.outputs.status }}';

            let statusEmoji = '✅';
            let statusText = 'COMPLIANT';

            if (status === 'FAIL') {
              statusEmoji = '❌';
              statusText = 'VIOLATIONS DETECTED';
            }

            const deniedFiles = ${{ steps.opa.outputs.deny_result }};
            const deniedList = deniedFiles?.result?.[0]?.expressions?.[0]?.value || [];

            let filesMarkdown = '';
            if (deniedList.length > 0) {
              filesMarkdown = '\n### Violated Files:\n\n';
              deniedList.forEach(file => {
                filesMarkdown += `- ❌ \`${file}\`\n`;
              });

              filesMarkdown += '\n### Action Required:\n\n';
              filesMarkdown += '1. Move test files to an allowed location:\n';
              filesMarkdown += '   - `02_audit_logging/archives/qa_master_suite/` (QA Archive)\n';
              filesMarkdown += '   - `11_test_simulation/` (Active Test Directory)\n';
              filesMarkdown += '2. Review policy: `02_audit_logging/archives/qa_master_suite/README.md`\n';
            }

            const comment = `## ${statusEmoji} QA Policy Check

**Status:** ${statusText}
**Violations:** ${violations}

${filesMarkdown}

---
*Enforced by: \`.github/workflows/qa_policy_check.yml\`*
*Policy: \`23_compliance/policies/qa/qa_policy_enforcer.rego\`*
`;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });

      - name: Upload OPA results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: opa-policy-results
          path: |
            files.json
          retention-days: 90

  summary:
    name: QA Policy Check Summary
    runs-on: ubuntu-latest
    needs: qa-policy-enforcement
    if: always()

    steps:
      - name: Generate summary
        run: |
          RESULT="${{ needs.qa-policy-enforcement.result }}"

          echo "## QA Policy Enforcement Summary"
          echo ""
          echo "### Job Result: $RESULT"
          echo ""

          if [ "$RESULT" == "success" ]; then
            echo "✅ **ALL CHECKS PASSED**"
            echo ""
            echo "All test files comply with the DUAL-LAYER QA Architecture."
            exit 0
          elif [ "$RESULT" == "failure" ]; then
            echo "❌ **POLICY VIOLATIONS DETECTED**"
            echo ""
            echo "Some test files violate the QA policy."
            echo "Review the detailed report above for remediation steps."
            exit 1
          else
            echo "⚠️ **CHECK INCOMPLETE**"
            echo ""
            echo "Policy check could not complete. Please review the logs."
            exit 0
          fi
