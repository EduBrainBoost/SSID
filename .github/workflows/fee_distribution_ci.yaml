name: Fee Distribution & Fairness System CI

on:
  push:
    branches: [main, develop]
    paths:
      - '03_core/fee_distribution_engine.py'
      - '03_core/fairness_engine.py'
      - '12_tooling/cli_calculator.py'
      - '23_compliance/fee_allocation_policy.yaml'
      - '07_governance_legal/reward_distribution_policy.yaml'
      - '11_test_simulation/test_fee_distribution.py'
      - '23_compliance/certificates/fee_fairness_production_certificate_v5_4_3.json'
      - '.github/workflows/fee_distribution_ci.yaml'
  pull_request:
    branches: [main, develop]
    paths:
      - '03_core/fee_distribution_engine.py'
      - '03_core/fairness_engine.py'
      - '12_tooling/cli_calculator.py'
      - '23_compliance/**'
      - '07_governance_legal/**'
      - '11_test_simulation/test_fee_distribution.py'

env:
  PYTHON_VERSION: '3.12'
  DECIMAL_PRECISION: 40

jobs:
  # Job 1: Mathematical Invariants Verification
  verify-mathematical-invariants:
    name: Verify Mathematical Invariants
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install decimal pytest

      - name: Verify exact 3% split (1% dev + 2% system)
        run: |
          python3 << 'EOF'
          from decimal import Decimal, getcontext
          import sys
          sys.path.insert(0, '03_core')

          from fee_distribution_engine import DEVELOPER_PERCENT, SYSTEM_POOL_PERCENT, SYSTEM_SHARES

          getcontext().prec = 40

          # Test 1: Total fee = 3%
          total = DEVELOPER_PERCENT + SYSTEM_POOL_PERCENT
          assert total == Decimal("0.03"), f"Total fee must be 3%, got {total}"

          # Test 2: Developer = 1%
          assert DEVELOPER_PERCENT == Decimal("0.01"), f"Dev share must be 1%, got {DEVELOPER_PERCENT}"

          # Test 3: System pool = 2%
          system_total = sum(SYSTEM_SHARES.values())
          assert system_total == Decimal("0.02"), f"System pool must be 2%, got {system_total}"

          print("✓ All mathematical invariants verified")
          EOF

      - name: Verify 7-pillar normalization
        run: |
          python3 << 'EOF'
          from decimal import Decimal, getcontext
          import sys
          sys.path.insert(0, '03_core')

          from fee_distribution_engine import SYSTEM_SHARES

          getcontext().prec = 40

          # Categories must sum exactly to 2%
          total = sum(SYSTEM_SHARES.values())
          expected = Decimal("0.02")

          assert total == expected, f"Categories must sum to 2%, got {total}"
          assert len(SYSTEM_SHARES) == 7, f"Must have 7 categories, got {len(SYSTEM_SHARES)}"

          print("✓ 7-pillar normalization verified")
          EOF

      - name: Verify no rounding loss
        run: |
          python3 << 'EOF'
          from decimal import Decimal, getcontext
          import sys
          sys.path.insert(0, '03_core')

          from fee_distribution_engine import distribute

          getcontext().prec = 40

          # Test with various amounts
          test_amounts = [
              Decimal("1.00"),
              Decimal("100.00"),
              Decimal("1000.00"),
              Decimal("10000.00"),
              Decimal("0.01")
          ]

          for amount in test_amounts:
              result = distribute(amount)
              total = result["developer_reward"] + sum(result["categories"].values())
              expected = amount * Decimal("0.03")

              assert total == expected, f"Rounding loss detected for {amount}: {total} != {expected}"

          print("✓ No rounding loss verified")
          EOF

  # Job 2: POFI Fairness Engine Tests
  test-pofi-engine:
    name: Test POFI Fairness Engine
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install decimal pytest

      - name: Test POFI v5.4.3
        run: |
          python3 << 'EOF'
          from decimal import Decimal, getcontext
          import sys
          sys.path.insert(0, '03_core')

          from fairness_engine import FairnessEngine

          getcontext().prec = 40

          engine = FairnessEngine()

          # Verify version
          assert engine.VERSION == "5.4.3", f"Expected v5.4.3, got {engine.VERSION}"

          # Verify weights sum to 1.0
          weight_sum = sum(engine.weights.values())
          assert weight_sum == Decimal("1.0"), f"Weights must sum to 1.0, got {weight_sum}"

          # Verify weight distribution
          assert engine.weights["activity"] == Decimal("0.40")
          assert engine.weights["history"] == Decimal("0.35")
          assert engine.weights["reputation"] == Decimal("0.25")

          print("✓ POFI engine v5.4.3 verified")
          EOF

      - name: Test minimum requirements enforcement
        run: |
          python3 << 'EOF'
          from decimal import Decimal, getcontext
          import sys
          import time
          sys.path.insert(0, '03_core')

          from fairness_engine import FairnessEngine

          getcontext().prec = 40

          engine = FairnessEngine()

          # Below minimum activity
          p1 = {
              "activity_count": 0,
              "days_active": 365,
              "reputation_score": 75,
              "last_activity_ts": time.time()
          }
          score1 = engine.calculate_pofi_score(p1)
          assert score1 == Decimal("0"), "Should reject below min activity"

          # Below minimum reputation
          p2 = {
              "activity_count": 100,
              "days_active": 365,
              "reputation_score": 30,
              "last_activity_ts": time.time()
          }
          score2 = engine.calculate_pofi_score(p2)
          assert score2 == Decimal("0"), "Should reject below min reputation"

          print("✓ Minimum requirements enforced")
          EOF

  # Job 3: CLI Calculator Integration
  test-cli-calculator:
    name: Test CLI Calculator
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Test CLI for 1000 EUR
        run: |
          output=$(python 12_tooling/cli_calculator.py 1000)
          echo "$output"

          # Parse JSON output
          dev=$(echo "$output" | python3 -c "import sys, json; print(json.load(sys.stdin)['developer_reward'])")
          sys=$(echo "$output" | python3 -c "import sys, json; print(json.load(sys.stdin)['system_pool_total'])")

          [ "$dev" = "10.00" ] || exit 1
          [ "$sys" = "20.00" ] || exit 1

          echo "✓ CLI calculator verified"

      - name: Test CLI for 100 EUR
        run: |
          output=$(python 12_tooling/cli_calculator.py 100)
          dev=$(echo "$output" | python3 -c "import sys, json; print(json.load(sys.stdin)['developer_reward'])")
          sys=$(echo "$output" | python3 -c "import sys, json; print(json.load(sys.stdin)['system_pool_total'])")

          [ "$dev" = "1.00" ] || exit 1
          [ "$sys" = "2.00" ] || exit 1

          echo "✓ CLI calculator 100 EUR verified"

  # Job 4: E2E Test Suite
  run-e2e-tests:
    name: Run E2E Test Suite
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pytest pytest-cov decimal

      - name: Run all fee distribution tests
        run: |
          cd 11_test_simulation
          python -m pytest test_fee_distribution.py -v --tb=short --no-cov
        env:
          PYTHONDONTWRITEBYTECODE: 1

      - name: Verify 100% test pass rate
        run: |
          cd 11_test_simulation
          result=$(python -m pytest test_fee_distribution.py --no-cov --tb=no -q 2>&1 | tail -1)
          echo "$result"
          echo "$result" | grep -q "24 passed" || exit 1
          echo "✓ 100% test pass rate (24/24)"

  # Job 5: Certificate Validation
  validate-certificate:
    name: Validate Production Certificate
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Validate certificate JSON structure
        run: |
          python3 << 'EOF'
          import json

          with open('23_compliance/certificates/fee_fairness_production_certificate_v5_4_3.json') as f:
              cert = json.load(f)

          # Required fields
          required_fields = [
              'certificate_id',
              'version',
              'status',
              'mathematical_invariants',
              'pofi_fairness_engine',
              'legal_compliance',
              'deployment_checklist'
          ]

          for field in required_fields:
              assert field in cert, f"Missing required field: {field}"

          # Verify version
          assert cert['version'] == '5.4.3', f"Expected v5.4.3, got {cert['version']}"

          # Verify status
          assert cert['status'] == 'PRODUCTION_READY', f"Expected PRODUCTION_READY, got {cert['status']}"

          print("✓ Certificate validated")
          EOF

      - name: Verify certificate invariants
        run: |
          python3 << 'EOF'
          import json
          from decimal import Decimal

          with open('23_compliance/certificates/fee_fairness_production_certificate_v5_4_3.json') as f:
              cert = json.load(f)

          inv = cert['mathematical_invariants']

          # Verify formulas
          assert inv['total_fee_formula'] == 'total_fee = 0.03 * A'
          assert inv['developer_reward_formula'] == 'developer_reward = 0.01 * A'
          assert inv['system_pool_formula'] == 'system_pool = 0.02 * A'

          # Verify precision
          assert inv['precision'] == 'Decimal(40)'

          print("✓ Certificate invariants verified")
          EOF

  # Job 6: Compliance Checks
  compliance-verification:
    name: Compliance Verification
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Verify no PII in code
        run: |
          # Check that no PII-related code exists
          ! grep -r "email\|phone\|address\|ssn\|passport" 03_core/fee_distribution_engine.py 03_core/fairness_engine.py || {
            echo "ERROR: Potential PII detected in code"
            exit 1
          }
          echo "✓ No PII in code"

      - name: Verify GDPR compliance
        run: |
          python3 << 'EOF'
          import json

          with open('23_compliance/certificates/fee_fairness_production_certificate_v5_4_3.json') as f:
              cert = json.load(f)

          # Check GDPR in regulatory framework
          frameworks = cert['legal_compliance']['regulatory_framework']
          assert 'GDPR (General Data Protection Regulation)' in frameworks

          # Check privacy guarantees
          guarantees = cert['legal_compliance']['privacy_guarantees']
          assert 'No PII in motion' in guarantees
          assert 'Privacy-preserving calculations' in guarantees

          print("✓ GDPR compliance verified")
          EOF

      - name: Verify German legal basis
        run: |
          python3 << 'EOF'
          import json

          with open('23_compliance/certificates/fee_fairness_production_certificate_v5_4_3.json') as f:
              cert = json.load(f)

          legal_basis = cert['legal_compliance']['legal_basis']

          # Verify §22 EStG and §11a SGB II
          assert any('§22 EStG' in b for b in legal_basis), "Missing §22 EStG"
          assert any('§11a SGB II' in b for b in legal_basis), "Missing §11a SGB II"

          print("✓ German legal basis verified")
          EOF

  # Job 7: Integration Summary
  integration-summary:
    name: Integration Summary
    runs-on: ubuntu-latest
    needs: [
      verify-mathematical-invariants,
      test-pofi-engine,
      test-cli-calculator,
      run-e2e-tests,
      validate-certificate,
      compliance-verification
    ]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Generate summary
        run: |
          echo "## Fee Distribution & Fairness System CI - Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### ✅ All Checks Passed" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Check | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-------|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| Mathematical Invariants | ✅ Passed |" >> $GITHUB_STEP_SUMMARY
          echo "| POFI Engine v5.4.3 | ✅ Passed |" >> $GITHUB_STEP_SUMMARY
          echo "| CLI Calculator | ✅ Passed |" >> $GITHUB_STEP_SUMMARY
          echo "| E2E Tests (24/24) | ✅ Passed |" >> $GITHUB_STEP_SUMMARY
          echo "| Certificate Validation | ✅ Passed |" >> $GITHUB_STEP_SUMMARY
          echo "| Compliance Verification | ✅ Passed |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Integration Score: 100/100" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Version:** 5.4.3" >> $GITHUB_STEP_SUMMARY
          echo "**Status:** PRODUCTION_READY" >> $GITHUB_STEP_SUMMARY
          echo "**Date:** $(date -u +%Y-%m-%dT%H:%M:%SZ)" >> $GITHUB_STEP_SUMMARY

      - name: Success notification
        run: |
          echo "=========================================="
          echo "✅ Fee Distribution & Fairness System CI"
          echo "=========================================="
          echo "Version: 5.4.3"
          echo "Status: PRODUCTION_READY"
          echo "Integration Score: 100/100"
          echo "Test Pass Rate: 100% (24/24)"
          echo "=========================================="
