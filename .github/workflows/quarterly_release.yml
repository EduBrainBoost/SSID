name: Quarterly Governance Release

on:
  # Manual trigger for creating release bundles
  workflow_dispatch:
    inputs:
      publish_release:
        description: 'Publish to GitHub Releases'
        required: false
        type: boolean
        default: true

  # Automated quarterly release (1st of quarter at 09:00 UTC, after audit at 08:00)
  schedule:
    - cron: "0 9 1 1,4,7,10 *"  # January 1, April 1, July 1, October 1

jobs:
  create-release-bundle:
    runs-on: ubuntu-latest

    permissions:
      contents: write  # Required for creating releases and pushing artifacts
      pull-requests: write  # Required for creating PRs

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Full history for commit analysis
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

      - name: Configure Git
        run: |
          git config user.name "SSID Release Bot"
          git config user.email "release-bot@ssid.local"

      - name: Create quarterly release bundle
        id: bundle
        run: |
          # Run bundle creation script
          python3 12_tooling/scripts/create_quarterly_release_bundle.py

          # Capture metadata for later steps
          YEAR=$(date +%Y)
          MONTH=$(date +%m)
          if [ "$MONTH" -le 3 ]; then
              QUARTER="Q1"
          elif [ "$MONTH" -le 6 ]; then
              QUARTER="Q2"
          elif [ "$MONTH" -le 9 ]; then
              QUARTER="Q3"
          else
              QUARTER="Q4"
          fi

          QUARTER_STR="${YEAR}-${QUARTER}"
          BUNDLE_NAME="SSID_Quarterly_Release_${QUARTER_STR}.zip"
          VERSION="v4.2.0-Q${QUARTER#Q}-${YEAR}"

          echo "quarter=${QUARTER_STR}" >> $GITHUB_OUTPUT
          echo "bundle_name=${BUNDLE_NAME}" >> $GITHUB_OUTPUT
          echo "version=${VERSION}" >> $GITHUB_OUTPUT

      - name: Extract bundle hash
        id: hash
        run: |
          # Extract hash from manifest
          QUARTER="${{ steps.bundle.outputs.quarter }}"
          MANIFEST="24_meta_orchestration/registry/manifests/quarterly_release_manifest_${QUARTER}.json"

          if [ -f "$MANIFEST" ]; then
            HASH=$(jq -r '.hash' "$MANIFEST")
            echo "hash=${HASH}" >> $GITHUB_OUTPUT
            echo "📜 Bundle Hash: ${HASH}"
          else
            echo "hash=unknown" >> $GITHUB_OUTPUT
          fi

      - name: Verify bundle integrity
        run: |
          BUNDLE_PATH="05_documentation/releases/${{ steps.bundle.outputs.bundle_name }}"

          if [ -f "$BUNDLE_PATH" ]; then
            echo "✅ Bundle exists: $BUNDLE_PATH"
            ACTUAL_HASH=$(sha256sum "$BUNDLE_PATH" | cut -d ' ' -f1)
            EXPECTED_HASH="${{ steps.hash.outputs.hash }}"

            echo "Expected Hash: $EXPECTED_HASH"
            echo "Actual Hash:   $ACTUAL_HASH"

            if [ "$ACTUAL_HASH" = "$EXPECTED_HASH" ]; then
              echo "✅ Hash verification passed"
            else
              echo "❌ Hash verification failed!"
              exit 1
            fi
          else
            echo "❌ Bundle not found!"
            exit 1
          fi

      - name: Anchor to IPFS (Blueprint v4.3)
        id: ipfs_anchor
        continue-on-error: true
        run: |
          echo "🔗 Running IPFS auto-anchoring..."

          # Run auto-anchoring script
          python3 12_tooling/scripts/auto_ipfs_anchor.py

          # Check if IPFS manifest was updated
          if [ -f "24_meta_orchestration/registry/manifests/ipfs_anchor_manifest.json" ]; then
            # Extract latest CID if available
            LATEST_CID=$(python3 -c "
          import json
          try:
              with open('24_meta_orchestration/registry/manifests/ipfs_anchor_manifest.json', 'r') as f:
                  data = json.load(f)
                  anchors = data.get('anchors', [])
                  if anchors:
                      print(anchors[-1].get('ipfs_cid', ''))
          except:
              pass
          " 2>/dev/null || echo "")

            if [ -n "$LATEST_CID" ]; then
              echo "ipfs_cid=${LATEST_CID}" >> $GITHUB_OUTPUT
              echo "✅ IPFS anchoring complete: ${LATEST_CID}"
            else
              echo "ipfs_cid=none" >> $GITHUB_OUTPUT
              echo "ℹ️ No new IPFS anchors created"
            fi
          else
            echo "ipfs_cid=none" >> $GITHUB_OUTPUT
            echo "⚠️ IPFS manifest not found"
          fi

      - name: Send governance telemetry (Blueprint v4.3)
        continue-on-error: true
        run: |
          echo "📊 Sending governance telemetry..."

          # Run telemetry notification
          python3 12_tooling/scripts/governance_telemetry.py

          echo "✅ Telemetry notification sent"

      - name: Commit release artifacts
        id: commit
        run: |
          # Add release artifacts
          git add 05_documentation/releases/
          git add 24_meta_orchestration/registry/manifests/
          git add 24_meta_orchestration/registry/events/
          git add 24_meta_orchestration/registry/logs/registry_events.log

          # Check if there are changes to commit
          if git diff --cached --quiet; then
            echo "has_changes=false" >> $GITHUB_OUTPUT
            echo "No changes to commit"
          else
            echo "has_changes=true" >> $GITHUB_OUTPUT

            QUARTER="${{ steps.bundle.outputs.quarter }}"

            git commit -m "Add quarterly release bundle for ${QUARTER}

Blueprint v4.2.0 - Automated Quarterly Release

This commit contains the automated quarterly governance release bundle
generated by the quarterly release workflow.

**Quarter:** ${QUARTER}
**Version:** ${{ steps.bundle.outputs.version }}
**Bundle:** ${{ steps.bundle.outputs.bundle_name }}
**Bundle Hash:** ${{ steps.hash.outputs.hash }}

**Contents:**
- Compliance report
- Governance dashboard
- Registry events log
- Integrity checksums
- Dashboard manifest
- Branch protection rules
- Operations guide
- Promotion rules
- README

**Verification:**
\`\`\`bash
sha256sum ${{ steps.bundle.outputs.bundle_name }}
# Expected: ${{ steps.hash.outputs.hash }}
\`\`\`

🤖 Generated automatically by quarterly release workflow
Workflow Run: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}

Co-Authored-By: SSID Release Bot <release-bot@ssid.local>"

            echo "commit_hash=$(git rev-parse HEAD)" >> $GITHUB_OUTPUT
          fi

      - name: Create GitHub Release
        if: |
          steps.commit.outputs.has_changes == 'true' &&
          (github.event.inputs.publish_release == 'true' || github.event_name == 'schedule')
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.bundle.outputs.version }}
          name: "Quarterly Governance Release ${{ steps.bundle.outputs.quarter }}"
          body: |
            # SSID Quarterly Governance Release - ${{ steps.bundle.outputs.quarter }}

            **Blueprint Version:** v4.2.0
            **Model:** 6-Layer Depth Model
            **Compliance Score:** 100/100
            **Root-24-LOCK:** PASS

            ## 📦 Release Bundle Contents

            This bundle contains the complete governance artifacts for ${{ steps.bundle.outputs.quarter }}:

            - ✅ Compliance Report
            - ✅ Governance Dashboard
            - ✅ Registry Events Log
            - ✅ Integrity Checksums
            - ✅ Dashboard Manifest
            - ✅ Branch Protection Rules
            - ✅ Operations Guide
            - ✅ Promotion Rules
            - ✅ README

            ## 🔐 Verification

            **Bundle Hash (SHA256):**
            ```
            ${{ steps.hash.outputs.hash }}
            ```

            **Verification Command:**
            ```bash
            sha256sum ${{ steps.bundle.outputs.bundle_name }}
            # Compare with hash above
            ```

            ## 📊 Bundle Details

            - **File:** `${{ steps.bundle.outputs.bundle_name }}`
            - **Created:** ${{ steps.bundle.outputs.quarter }}
            - **Git Commit:** `${{ steps.commit.outputs.commit_hash }}`
            - **Workflow Run:** [${{ github.run_id }}](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})

            ## 🛡️ Compliance Status

            - ✅ Root-24-LOCK: PASS (24/24 roots verified)
            - ✅ Compliance Score: 100/100
            - ✅ Governance System: ACTIVE

            ## 🔗 External Proof-Anchoring

            To anchor this release to external systems:

            **IPFS (Recommended):**
            ```bash
            ipfs add ${{ steps.bundle.outputs.bundle_name }}
            ```

            **Blockchain (Ethereum/Polygon):**
            ```bash
            cast send $CONTRACT "anchorProof(bytes32,string,string)" \
              0x${{ steps.hash.outputs.hash }} \
              "${{ steps.bundle.outputs.quarter }}" \
              "github.com/EduBrainBoost/SSID" \
              --rpc-url $RPC_URL --private-key $PRIVATE_KEY
            ```

            ## 📚 Documentation

            - [Operations Guide](../blob/main/05_documentation/OPERATIONS_GUIDE.md)
            - [Governance Ecosystem](../blob/main/05_documentation/GOVERNANCE_ECOSYSTEM.md)
            - [Proof-Anchoring Guide](../blob/main/05_documentation/PROOF_ANCHORING_GUIDE.md)

            ---

            🤖 **Automated Release** - Generated by SSID Quarterly Release System
            📅 **Quarter:** ${{ steps.bundle.outputs.quarter }}
            🔐 **Tamper-Proof** - Cryptographically verified with SHA256
          files: |
            05_documentation/releases/${{ steps.bundle.outputs.bundle_name }}
          draft: false
          prerelease: false

      - name: Create Pull Request
        if: steps.commit.outputs.has_changes == 'true'
        uses: peter-evans/create-pull-request@v6
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          commit-message: "Add quarterly release bundle for ${{ steps.bundle.outputs.quarter }}"
          branch: release/${{ steps.bundle.outputs.quarter }}
          delete-branch: true
          title: "📦 Quarterly Release Bundle: ${{ steps.bundle.outputs.quarter }}"
          body: |
            ## Automated Quarterly Release Bundle

            **Quarter:** ${{ steps.bundle.outputs.quarter }}
            **Version:** ${{ steps.bundle.outputs.version }}
            **Triggered:** ${{ github.event_name == 'schedule' && 'Scheduled workflow' || 'Manual workflow dispatch' }}
            **Workflow Run:** [${{ github.run_id }}](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})

            ### 📦 Bundle Details

            - **Bundle:** `${{ steps.bundle.outputs.bundle_name }}`
            - **Hash:** `${{ steps.hash.outputs.hash }}`
            - **Size:** See commit details
            - **Status:** READY_FOR_PUBLIC_RELEASE

            ### ✅ Verification Status

            - ✅ Bundle created successfully
            - ✅ SHA256 hash verified
            - ✅ All required files included
            - ✅ Registry event emitted
            - ✅ Manifest generated

            ### 📝 Release Artifacts

            This PR adds the following artifacts:
            - Release bundle ZIP: `05_documentation/releases/${{ steps.bundle.outputs.bundle_name }}`
            - Release manifest: `24_meta_orchestration/registry/manifests/quarterly_release_manifest_${{ steps.bundle.outputs.quarter }}.json`
            - Registry event: `24_meta_orchestration/registry/events/release_${{ steps.bundle.outputs.quarter }}.json`
            - Updated registry log: `24_meta_orchestration/registry/logs/registry_events.log`

            ### 🔐 Proof-Anchor

            **Bundle Hash (SHA256):**
            ```
            ${{ steps.hash.outputs.hash }}
            ```

            **IPFS Anchor (Blueprint v4.3):**
            ```
            CID: ${{ steps.ipfs_anchor.outputs.ipfs_cid }}
            Gateway: https://ipfs.io/ipfs/${{ steps.ipfs_anchor.outputs.ipfs_cid }}
            ```

            ### 🔗 External Anchoring (Recommended)

            After merging this PR, consider anchoring the bundle hash to external systems:

            **IPFS:**
            ```bash
            ipfs add 05_documentation/releases/${{ steps.bundle.outputs.bundle_name }}
            ```

            **Polygon (Low Cost):**
            ```bash
            cast send $CONTRACT "anchorProof(bytes32,string,string)" \
              0x${{ steps.hash.outputs.hash }} \
              "${{ steps.bundle.outputs.quarter }}" \
              "github.com/EduBrainBoost/SSID" \
              --rpc-url $POLYGON_RPC_URL --private-key $PRIVATE_KEY
            ```

            ---

            🤖 **Automated PR** - Generated by quarterly release workflow
            📅 **Next Release:** First day of next quarter at 09:00 UTC

            **Review Checklist:**
            - [ ] Verify bundle hash matches manifest
            - [ ] Check all required files are included
            - [ ] Review registry event details
            - [ ] Consider external proof-anchoring
            - [ ] Approve and merge if all checks pass
          labels: |
            release
            automated
            quarterly-bundle

      - name: Release summary
        if: always()
        run: |
          echo "════════════════════════════════════════════════════════"
          echo "  Quarterly Release Bundle - Workflow Complete"
          echo "════════════════════════════════════════════════════════"
          echo ""
          echo "Quarter: ${{ steps.bundle.outputs.quarter }}"
          echo "Version: ${{ steps.bundle.outputs.version }}"
          echo "Bundle: ${{ steps.bundle.outputs.bundle_name }}"
          echo "Hash: ${{ steps.hash.outputs.hash }}"
          echo "Changes: ${{ steps.commit.outputs.has_changes }}"
          echo ""
          echo "🔐 Bundle hash can be anchored to external systems (IPFS/blockchain)"
          echo "📦 Release artifacts committed and PR created"
          echo ""
