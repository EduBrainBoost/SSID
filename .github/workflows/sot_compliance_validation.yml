# SoT Compliance Validation Workflow
# ====================================
#
# Validates all 19 compliance rules with 4 manifestations each
# - SOC2: 7 rules
# - Gaia-X: 6 rules
# - ETSI EN 319 421: 6 rules
#
# Total: 76 manifestation files validated
#
# Author: SSID Compliance Team
# Version: 1.0.0
# Date: 2025-10-17

name: SoT Compliance Validation

on:
  push:
    branches: [ main, develop ]
    paths:
      - '23_compliance/**'
      - '16_codex/contracts/**'
      - '12_tooling/scripts/compliance/**'
      - '11_test_simulation/tests_compliance/**'
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run daily at 02:00 UTC
    - cron: '0 2 * * *'
  workflow_dispatch:

env:
  PYTHON_VERSION: '3.12'
  OPA_VERSION: 'v0.68.0'

jobs:
  # Job 1: Validate SoT Framework Structure
  validate_sot_structure:
    name: Validate SoT Framework Structure
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pytest pyyaml

      - name: Run SoT Framework Test
        run: |
          pytest 11_test_simulation/tests_compliance/test_sot_compliance_framework.py -v --tb=short
        env:
          PYTEST_TIMEOUT: 300

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: sot-framework-test-results
          path: |
            test-results/
            *.log

  # Job 2: Validate OPA Policies
  validate_opa_policies:
    name: Validate OPA Policies (19 Rules)
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install OPA
        run: |
          wget https://github.com/open-policy-agent/opa/releases/download/${{ env.OPA_VERSION }}/opa_linux_amd64_static
          chmod +x opa_linux_amd64_static
          sudo mv opa_linux_amd64_static /usr/local/bin/opa
          opa version

      - name: Run OPA Tests
        run: |
          opa test 23_compliance/policies/ --verbose

      - name: Validate OPA Policies (Syntax Check)
        run: |
          for policy in 23_compliance/policies/*.rego; do
            echo "Validating $policy..."
            opa check "$policy" || exit 1
          done

      - name: Generate OPA Coverage Report
        run: |
          opa test 23_compliance/policies/ --coverage --format=json > opa-coverage.json

      - name: Upload OPA coverage
        uses: actions/upload-artifact@v4
        with:
          name: opa-coverage-report
          path: opa-coverage.json

  # Job 3: Validate SOC2 Rules (7 Rules)
  validate_soc2:
    name: Validate SOC2 Rules (CC1.1-CC7.1)
    runs-on: ubuntu-latest

    strategy:
      matrix:
        rule: [cc1_1, cc2_1, cc3_1, cc4_1, cc5_1, cc6_1, cc7_1]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Run SOC2 ${{ matrix.rule }} Validation
        run: |
          python 12_tooling/scripts/compliance/check_soc2_${{ matrix.rule }}.py --json
        continue-on-error: true

      - name: Archive SOC2 results
        uses: actions/upload-artifact@v4
        with:
          name: soc2-${{ matrix.rule }}-results
          path: |
            compliance-results/
            *.json

  # Job 4: Validate Gaia-X Rules (6 Rules)
  validate_gaia_x:
    name: Validate Gaia-X Rules (GAIA-X-01 to GAIA-X-06)
    runs-on: ubuntu-latest

    strategy:
      matrix:
        rule: [gaia_x_01, gaia_x_02, gaia_x_03, gaia_x_04, gaia_x_05, gaia_x_06]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Run Gaia-X ${{ matrix.rule }} Validation
        run: |
          python 12_tooling/scripts/compliance/check_gaia_x_${{ matrix.rule }}.py --json
        continue-on-error: true

      - name: Archive Gaia-X results
        uses: actions/upload-artifact@v4
        with:
          name: gaia-x-${{ matrix.rule }}-results
          path: |
            compliance-results/
            *.json

  # Job 5: Validate ETSI EN 319 421 Rules (6 Rules)
  validate_etsi:
    name: Validate ETSI EN 319 421 Rules (ETSI-421-01 to ETSI-421-06)
    runs-on: ubuntu-latest

    strategy:
      matrix:
        rule: [etsi_421_01, etsi_421_02, etsi_421_03, etsi_421_04, etsi_421_05, etsi_421_06]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Run ETSI EN 319 421 ${{ matrix.rule }} Validation
        run: |
          python 12_tooling/scripts/compliance/check_etsi_en_319_421_${{ matrix.rule }}.py --json
        continue-on-error: true

      - name: Archive ETSI results
        uses: actions/upload-artifact@v4
        with:
          name: etsi-${{ matrix.rule }}-results
          path: |
            compliance-results/
            *.json

  # Job 6: Generate Compliance Report
  generate_compliance_report:
    name: Generate Compliance Report
    runs-on: ubuntu-latest
    needs: [validate_sot_structure, validate_opa_policies, validate_soc2, validate_gaia_x, validate_etsi]
    if: always()

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts/

      - name: Install dependencies
        run: |
          pip install pyyaml jinja2

      - name: Generate compliance report
        run: |
          python 12_tooling/scripts/compliance/generate_compliance_report.py \
            --input artifacts/ \
            --output compliance-report.md

      - name: Upload compliance report
        uses: actions/upload-artifact@v4
        with:
          name: compliance-report
          path: compliance-report.md

      - name: Comment PR with results
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const report = fs.readFileSync('compliance-report.md', 'utf8');
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: report
            });

  # Job 7: Compliance Gate (Blocking)
  compliance_gate:
    name: Compliance Gate (Pass/Fail)
    runs-on: ubuntu-latest
    needs: [validate_sot_structure, validate_opa_policies]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          pip install pytest pyyaml

      - name: Run Compliance Gate
        run: |
          pytest 11_test_simulation/tests_compliance/test_sot_compliance_framework.py::test_compliance_score_calculation -v
        env:
          FAIL_ON_COMPLIANCE_VIOLATION: 'true'

      - name: Fail if compliance < 100%
        if: failure()
        run: |
          echo "::error::Compliance validation failed. All 19 rules must have 4 manifestations each."
          exit 24  # ROOT-24-LOCK exit code

  # Job 8: Evidence Collection (WORM Storage)
  collect_evidence:
    name: Collect Evidence for Audit Trail
    runs-on: ubuntu-latest
    needs: [validate_soc2, validate_gaia_x, validate_etsi]
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download all validation results
        uses: actions/download-artifact@v4
        with:
          path: validation-results/

      - name: Generate evidence hash
        run: |
          find validation-results/ -type f -exec sha256sum {} \; | sort > evidence-hashes.txt
          sha256sum evidence-hashes.txt > evidence-chain.sha256

      - name: Store evidence in WORM storage
        run: |
          mkdir -p 02_audit_logging/storage/worm/immutable_store/compliance_evidence/
          cp -r validation-results/ 02_audit_logging/storage/worm/immutable_store/compliance_evidence/$(date +%Y%m%d_%H%M%S)/
          cp evidence-chain.sha256 02_audit_logging/storage/worm/immutable_store/compliance_evidence/

      - name: Commit evidence to repository
        run: |
          git config user.name "SSID Compliance Bot"
          git config user.email "compliance-bot@ssid.example.com"
          git add 02_audit_logging/storage/worm/immutable_store/compliance_evidence/
          git commit -m "chore(compliance): Add evidence for compliance validation $(date +%Y-%m-%d)" || true
          git push || true

  # Job 9: Badge Update
  update_compliance_badge:
    name: Update Compliance Badge
    runs-on: ubuntu-latest
    needs: [compliance_gate]
    if: github.ref == 'refs/heads/main' && success()

    steps:
      - name: Create compliance badge
        uses: schneegans/dynamic-badges-action@v1.7.0
        with:
          auth: ${{ secrets.GIST_SECRET }}
          gistID: YOUR_GIST_ID
          filename: ssid-compliance-badge.json
          label: SoT Compliance
          message: 100% (19/19 rules)
          color: green
          namedLogo: checkmarx
