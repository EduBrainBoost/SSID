name: Placeholder Guard CI
# Sprint 2 - Zero Placeholder Enforcement
# Ensures no TODO/pass/assert-true violations in production code

on:
  push:
    branches: [main, develop]
    paths:
      - '**/*.py'
      - '**/*.md'
      - '**/*.sh'
      - '**/*.yaml'
      - '**/*.yml'
  pull_request:
    branches: [main, develop]
  workflow_dispatch:

jobs:
  placeholder-scan:
    name: Scan for Placeholder Violations
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pyyaml

      - name: Run placeholder scan
        id: scan
        run: |
          python 12_tooling/placeholder_guard/placeholder_scan.py . 12_tooling/placeholder_guard/allowlist_paths.yaml > scan_results.json
          SCAN_EXIT=$?

          # Parse results
          VIOLATIONS=$(python -c "import json; data = json.load(open('scan_results.json')); print(len(data['findings']))")

          echo "violations_found=$VIOLATIONS" >> $GITHUB_OUTPUT
          echo "scan_exit_code=$SCAN_EXIT" >> $GITHUB_OUTPUT

          echo "### Placeholder Scan Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Violations Found:** $VIOLATIONS" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          if [ "$VIOLATIONS" -gt 0 ]; then
            echo "**Status:** FAILED - Placeholders detected" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "#### Breakdown:" >> $GITHUB_STEP_SUMMARY
            python -c "
import json
from collections import Counter
data = json.load(open('scan_results.json'))
tags = Counter(f['tag'] for f in data['findings'])
for tag, count in sorted(tags.items()):
    print(f'- {tag}: {count}')
" >> $GITHUB_STEP_SUMMARY
          else
            echo "**Status:** PASSED - No placeholders detected" >> $GITHUB_STEP_SUMMARY
          fi

      - name: Upload scan results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: placeholder-scan-results
          path: scan_results.json
          retention-days: 30

      - name: Generate evidence log
        if: success()
        run: |
          mkdir -p 23_compliance/evidence/ci_runs
          python -c "
import json
from datetime import datetime

evidence = {
    'timestamp': datetime.utcnow().isoformat() + 'Z',
    'workflow': 'ci_placeholder_guard',
    'commit': '${{ github.sha }}',
    'branch': '${{ github.ref_name }}',
    'violations_found': ${{ steps.scan.outputs.violations_found }},
    'status': 'PASS' if ${{ steps.scan.outputs.violations_found }} == 0 else 'FAIL',
    'compliance_requirement': 'Sprint 2 - Zero Placeholder Policy'
}

with open('23_compliance/evidence/ci_runs/placeholder_guard_${{ github.run_id }}.json', 'w') as f:
    json.dump(evidence, f, indent=2)
"

      - name: Check violation threshold
        run: |
          VIOLATIONS=${{ steps.scan.outputs.violations_found }}

          if [ "$VIOLATIONS" -gt 50 ]; then
            echo "ERROR: $VIOLATIONS violations found (threshold: 50)"
            echo "Sprint 2 goal: Reduce placeholders to near-zero"
            exit 1
          elif [ "$VIOLATIONS" -gt 0 ]; then
            echo "WARNING: $VIOLATIONS violations found"
            echo "Target: 0 violations by end of Sprint 2"
            # Don't fail - just warn
            exit 0
          else
            echo "SUCCESS: No placeholder violations detected!"
            exit 0
          fi

  code-quality-check:
    name: Additional Code Quality Checks
    runs-on: ubuntu-latest
    needs: placeholder-scan

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Check for obvious stub files
        run: |
          echo "Checking for stub files..."

          # Find files that are likely stubs (very small)
          find . -name "*.py" -type f -size -50c ! -path "./.git/*" ! -path "./venv/*" | while read file; do
            echo "Potential stub: $file ($(wc -c < "$file") bytes)"
          done

          # Count them
          STUB_COUNT=$(find . -name "*.py" -type f -size -50c ! -path "./.git/*" ! -path "./venv/*" | wc -l)

          echo "Found $STUB_COUNT potential stub files"

          if [ "$STUB_COUNT" -gt 20 ]; then
            echo "WARNING: Many small Python files detected"
            echo "These may be stubs that need implementation"
          fi

      - name: Check for NotImplementedError patterns
        run: |
          echo "Checking for NotImplementedError usage..."

          # Count NotImplementedError occurrences
          NOT_IMPL_COUNT=$(grep -r "NotImplementedError" --include="*.py" . 2>/dev/null | wc -l)

          echo "Found $NOT_IMPL_COUNT NotImplementedError usages"

          if [ "$NOT_IMPL_COUNT" -gt 500 ]; then
            echo "INFO: Many NotImplementedError patterns found"
            echo "These are from automated placeholder remediation (Sprint 2)"
            echo "Will be implemented in Sprint 3+"
          fi

  summary:
    name: CI Summary
    runs-on: ubuntu-latest
    needs: [placeholder-scan, code-quality-check]
    if: always()

    steps:
      - name: Check overall status
        run: |
          SCAN_STATUS="${{ needs.placeholder-scan.result }}"
          QUALITY_STATUS="${{ needs.code-quality-check.result }}"

          echo "## Placeholder Guard CI Summary"
          echo "Scan Status: $SCAN_STATUS"
          echo "Quality Check: $QUALITY_STATUS"

          if [ "$SCAN_STATUS" == "success" ] && [ "$QUALITY_STATUS" == "success" ]; then
            echo "All checks passed!"
            exit 0
          else
            echo "Some checks failed or were skipped"
            exit 1
          fi
