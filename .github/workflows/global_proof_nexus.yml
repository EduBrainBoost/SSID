# ═══════════════════════════════════════════════════════════════════════════════
# SSID Blueprint v5.0 – Global Proof Nexus (Layer 9)
# CI/CD Workflow – Planetary Consensus Aggregation
# ═══════════════════════════════════════════════════════════════════════════════
#
# Version: 5.0.0
# Layer: 9 – Global Proof Nexus (Cross-Ecosystem Consensus)
# Activation: 2026-07-15T10:00:00Z (Time-Gated)
# Hash Algorithm: SHA-512
#
# Compliance: GDPR, eIDAS, MiCA, DORA, AMLD6, Root-24-LOCK
#
# Description:
#   Daily 24-hour planetary synchronization cycle for Layer-9 global proof
#   aggregation. Collects Layer-8 proofs from multiple identity ecosystems
#   (SSID, EUDI, TrustNet, OpenCore, Custom) and generates unified L9 root.
#
# Exit Codes:
#   0 = SUCCESS    – L9 root generated, consensus ≥85%
#   1 = EARLY      – Before activation date (time-gate)
#   2 = PREREQ     – Missing prerequisites
#   3 = FAILED     – Critical error
#   4 = THRESHOLD  – Consensus below 85%
#
# ═══════════════════════════════════════════════════════════════════════════════

name: Global Proof Nexus (v5.0)

on:
  # Daily execution at 00:00 UTC (24-hour Nexus pulse)
  schedule:
    - cron: '0 0 * * *'

  # Manual trigger with force option
  workflow_dispatch:
    inputs:
      force:
        description: 'Run despite time-gate (simulation)'
        type: boolean
        required: false
        default: false

  # Test trigger on relevant file changes
  push:
    branches:
      - main
    paths:
      - '20_foundation/global_proof_nexus_engine.py'
      - '07_governance_legal/contracts/global_proof_nexus.sol'
      - '.github/workflows/global_proof_nexus.yml'
      - '24_meta_orchestration/**'

env:
  BLUEPRINT_VERSION: v5.0.0
  PROOF_LAYER: 9
  PYTHON_VERSION: '3.11'
  ACTIVATION_DATE: '2026-07-15T10:00:00Z'
  HASH_ALGORITHM: SHA-512

jobs:
  # ═══════════════════════════════════════════════════════════════════════════
  # JOB 1: Setup – Time Gate & Epoch Resolution
  # ═══════════════════════════════════════════════════════════════════════════
  setup:
    name: Setup & Time Gate Check
    runs-on: ubuntu-latest
    outputs:
      status: ${{ steps.gate.outputs.status }}
      epoch: ${{ steps.gate.outputs.epoch }}
      timestamp: ${{ steps.gate.outputs.timestamp }}
      exit_code: ${{ steps.gate.outputs.exit_code }}

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Resolve Epoch & Time Gate
        id: gate
        run: |
          NOW=$(date -u +"%Y-%m-%dT%H:%M:%SZ")
          QUARTER=$(( ($(date +%-m) - 1) / 3 + 1 ))
          YEAR=$(date +%Y)
          EPOCH="Q${QUARTER}_${YEAR}"

          echo "timestamp=$NOW" >> $GITHUB_OUTPUT
          echo "epoch=$EPOCH" >> $GITHUB_OUTPUT

          echo "Current Time: $NOW"
          echo "Global Epoch: $EPOCH"
          echo "Activation Date: ${{ env.ACTIVATION_DATE }}"
          echo ""

          # Check force override
          if [[ "${{ inputs.force }}" == "true" ]]; then
            echo "🔓 FORCE MODE: Bypassing time gate (simulation)"
            echo "status=SIMULATION" >> $GITHUB_OUTPUT
            echo "exit_code=0" >> $GITHUB_OUTPUT
            exit 0
          fi

          # Time gate check
          GATE_TS="${{ env.ACTIVATION_DATE }}"
          if [[ "$NOW" < "$GATE_TS" ]]; then
            echo "🕐 TIME GATE: Before activation date"
            echo "status=EARLY" >> $GITHUB_OUTPUT
            echo "exit_code=1" >> $GITHUB_OUTPUT
            echo ""
            echo "Preparation mode active. Verified execution begins: $GATE_TS"
            exit 0
          fi

          echo "✓ Time gate passed – activation date reached"
          echo "status=READY" >> $GITHUB_OUTPUT
          echo "exit_code=0" >> $GITHUB_OUTPUT

      - name: Validate Prerequisites
        if: steps.gate.outputs.status == 'READY' || steps.gate.outputs.status == 'SIMULATION'
        run: |
          echo "Validating Root-24-LOCK structure..."

          # Check required directories
          REQUIRED_DIRS=(
            "20_foundation"
            "07_governance_legal"
            "24_meta_orchestration"
            "02_audit_logging"
            "05_documentation"
            ".github"
          )

          for dir in "${REQUIRED_DIRS[@]}"; do
            if [ ! -d "$dir" ]; then
              echo "❌ ERROR: Missing required directory: $dir"
              exit 2
            fi
          done

          # Check root count (Root-24-LOCK)
          ROOT_COUNT=$(ls -d */ 2>/dev/null | wc -l | xargs)
          if [ "$ROOT_COUNT" -ne 24 ]; then
            echo "⚠️  WARNING: Root-24-LOCK expects 24 directories, found: $ROOT_COUNT"
          else
            echo "✓ Root-24-LOCK validated ($ROOT_COUNT roots)"
          fi

          # Check manifest exists
          if [ ! -f "24_meta_orchestration/registry/manifests/global_proof_manifest_v5.0.json" ]; then
            echo "❌ ERROR: Missing manifest file"
            exit 2
          fi

          echo "✓ All prerequisites validated"

  # ═══════════════════════════════════════════════════════════════════════════
  # JOB 2: Collect Layer-8 Proofs (Multi-Ecosystem Matrix)
  # ═══════════════════════════════════════════════════════════════════════════
  collect-l8:
    name: Collect Layer-8 Proofs (${{ matrix.ecosystem }})
    runs-on: ubuntu-latest
    needs: setup
    if: needs.setup.outputs.status != 'EARLY'

    strategy:
      matrix:
        ecosystem: [ssid, eudi, trustnet, opencore, custom]
      fail-fast: false

    outputs:
      l8_count: ${{ steps.count.outputs.l8_count }}

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Create Directories
        run: |
          mkdir -p 24_meta_orchestration/federation/inbox
          mkdir -p 24_meta_orchestration/consensus
          mkdir -p 24_meta_orchestration/registry/ecosystems/${{ matrix.ecosystem }}

      - name: Fetch Layer-8 Proofs for ${{ matrix.ecosystem }}
        run: |
          echo "═══════════════════════════════════════════════════════════"
          echo "Collecting Layer-8 Proofs: ${{ matrix.ecosystem }}"
          echo "═══════════════════════════════════════════════════════════"

          EPOCH="${{ needs.setup.outputs.epoch }}"
          TIMESTAMP="${{ needs.setup.outputs.timestamp }}"

          # In production: Fetch from ecosystem APIs/IPFS
          # Current: Simulation mode (generate synthetic proofs)

          # Generate deterministic proof hash
          PROOF_HASH=$(echo "layer8_${{ matrix.ecosystem }}_${EPOCH}" | sha256sum | cut -d' ' -f1)

          # Random quality score (80-95%)
          QUALITY=$(awk -v seed=$RANDOM 'BEGIN{srand(seed); print 80 + rand()*15}')

          # Generate Layer-8 proof JSON
          cat > "24_meta_orchestration/federation/inbox/${{ matrix.ecosystem }}_layer8.json" <<EOF
          {
            "ecosystem_id": "${{ matrix.ecosystem }}",
            "layer": 8,
            "proof_hash": "$PROOF_HASH",
            "epoch_id": "${EPOCH}",
            "timestamp": "$TIMESTAMP",
            "trust_weight": $QUALITY,
            "signature": {
              "algorithm": "ed25519",
              "value": "SIMULATED_$(echo $RANDOM | sha256sum | cut -d' ' -f1 | head -c 64)"
            },
            "proof_anchor": {
              "merkle_root": "$(echo ${EPOCH}_${{ matrix.ecosystem }} | sha256sum | cut -d' ' -f1)",
              "federation_count": $(shuf -i 5-15 -n 1),
              "node_count": $(shuf -i 100-500 -n 1),
              "consensus_ratio": 0.$(shuf -i 85-95 -n 1)
            },
            "metadata": {
              "version": "5.0.0",
              "generator": "${{ matrix.ecosystem }}-proof-engine-simulation"
            },
            "simulation": true
          }
          EOF

          echo "✓ Layer-8 proof collected: ${{ matrix.ecosystem }}"
          echo "  Proof Hash: $PROOF_HASH"
          echo "  Trust Weight: $QUALITY"

      - name: Count Collected Proofs
        id: count
        run: |
          COUNT=$(find 24_meta_orchestration/federation/inbox -type f -name "*layer8*.json" 2>/dev/null | wc -l | xargs)
          echo "l8_count=$COUNT" >> $GITHUB_OUTPUT
          echo "Total Layer-8 proofs: $COUNT"

      - name: Upload Layer-8 Proofs
        uses: actions/upload-artifact@v4
        with:
          name: layer8-proofs-${{ matrix.ecosystem }}
          path: 24_meta_orchestration/federation/inbox/*.json
          retention-days: 90

  # ═══════════════════════════════════════════════════════════════════════════
  # JOB 3: Verify Foreign Proofs
  # ═══════════════════════════════════════════════════════════════════════════
  verify-foreign:
    name: Verify Foreign Layer-8 Proofs
    runs-on: ubuntu-latest
    needs: [setup, collect-l8]
    if: needs.setup.outputs.status != 'EARLY'

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Download All Proofs
        uses: actions/download-artifact@v4
        with:
          pattern: layer8-proofs-*
          path: 24_meta_orchestration/federation/inbox
          merge-multiple: true

      - name: Validate Proof Format & Signatures
        run: |
          echo "Validating Layer-8 proof formats..."

          for proof_file in 24_meta_orchestration/federation/inbox/*.json; do
            if [ -f "$proof_file" ]; then
              ECOSYSTEM=$(basename "$proof_file" | cut -d'_' -f1)

              # Check required fields
              jq -e '.ecosystem_id, .layer, .proof_hash, .epoch_id, .timestamp, .trust_weight, .signature' "$proof_file" > /dev/null

              if [ $? -eq 0 ]; then
                HASH=$(jq -r '.proof_hash' "$proof_file")
                TRUST=$(jq -r '.trust_weight' "$proof_file")
                echo "  ✓ $ECOSYSTEM: Valid (hash: ${HASH:0:16}..., trust: $TRUST)"
              else
                echo "  ✗ $ECOSYSTEM: Invalid format"
              fi
            fi
          done

          echo "✓ Validation complete"

  # ═══════════════════════════════════════════════════════════════════════════
  # JOB 4: Aggregate Layer-9 Root (SHA-512)
  # ═══════════════════════════════════════════════════════════════════════════
  aggregate-l9:
    name: Aggregate Layer-9 Root (SHA-512)
    runs-on: ubuntu-latest
    needs: [setup, collect-l8, verify-foreign]
    if: needs.setup.outputs.status != 'EARLY'

    outputs:
      l9_root: ${{ steps.extract.outputs.l9_root }}
      vote_ratio: ${{ steps.extract.outputs.vote_ratio }}
      exit_code: ${{ steps.run_engine.outputs.exit_code }}

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Download All Proofs
        uses: actions/download-artifact@v4
        with:
          pattern: layer8-proofs-*
          path: 24_meta_orchestration/federation/inbox
          merge-multiple: true

      - name: Run Global Proof Nexus Engine
        id: run_engine
        run: |
          echo "═══════════════════════════════════════════════════════════"
          echo "Running Global Proof Nexus Engine (Layer 9, SHA-512)"
          echo "═══════════════════════════════════════════════════════════"

          set +e
          python 20_foundation/global_proof_nexus_engine.py
          EC=$?
          set -e

          echo "exit_code=$EC" >> $GITHUB_OUTPUT

          case $EC in
            0) echo "✓ SUCCESS: Layer-9 root generated, consensus ≥85%" ;;
            1) echo "⏰ EARLY: Time-gated (should not reach here)" ;;
            2) echo "⚠️  PREREQ: Missing prerequisites" ;;
            3) echo "❌ FAILED: Critical error" ;;
            4) echo "⚠️  THRESHOLD: Consensus below 85%" ;;
            *) echo "❓ UNKNOWN: Unexpected exit code $EC" ;;
          esac

          if [ $EC -ne 0 ]; then
            echo "Engine exited with code $EC"
            exit 0  # Don't fail workflow, handle in later jobs
          fi

      - name: Extract Layer-9 Results
        id: extract
        run: |
          LOG="02_audit_logging/reports/global_proof_nexus_log.json"

          if [ -f "$LOG" ]; then
            L9_ROOT=$(jq -r '.[-1].details.l9_root // "N/A"' "$LOG" 2>/dev/null || echo "N/A")
            VOTE_RATIO=$(jq -r '.[-1].details.consensus.consensus_ratio // "N/A"' "$LOG" 2>/dev/null || echo "N/A")

            echo "l9_root=$L9_ROOT" >> $GITHUB_OUTPUT
            echo "vote_ratio=$VOTE_RATIO" >> $GITHUB_OUTPUT

            echo "Layer-9 Root: $L9_ROOT"
            echo "Vote Ratio: $VOTE_RATIO"
          else
            echo "l9_root=N/A" >> $GITHUB_OUTPUT
            echo "vote_ratio=N/A" >> $GITHUB_OUTPUT
            echo "⚠️  No log file found"
          fi

      - name: Upload Layer-9 Proof
        if: steps.run_engine.outputs.exit_code == '0'
        uses: actions/upload-artifact@v4
        with:
          name: l9_proof
          path: |
            24_meta_orchestration/registry/layer9/*.json
          retention-days: 365

      - name: Upload Audit Logs
        uses: actions/upload-artifact@v4
        with:
          name: audit_logs
          path: |
            02_audit_logging/reports/global_proof_nexus_log.json
          retention-days: 90

  # ═══════════════════════════════════════════════════════════════════════════
  # JOB 5: Generate Reports
  # ═══════════════════════════════════════════════════════════════════════════
  report:
    name: Generate Reports
    runs-on: ubuntu-latest
    needs: [setup, aggregate-l9]
    if: needs.setup.outputs.status != 'EARLY'

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Render Summary Report
        run: |
          TS="${{ needs.setup.outputs.timestamp }}"
          EPOCH="${{ needs.setup.outputs.epoch }}"
          L9_ROOT="${{ needs.aggregate-l9.outputs.l9_root }}"
          VOTE_RATIO="${{ needs.aggregate-l9.outputs.vote_ratio }}"
          EXIT_CODE="${{ needs.aggregate-l9.outputs.exit_code }}"

          # Update summary template
          sed -i "s|<L9_ROOT>|${L9_ROOT}|g" 05_documentation/reports/2026-Q3/GLOBAL_NEXUS_SUMMARY.md
          sed -i "s|<VOTE_RATIO>|${VOTE_RATIO}|g" 05_documentation/reports/2026-Q3/GLOBAL_NEXUS_SUMMARY.md
          sed -i "s|<EPOCH_ID>|${EPOCH}|g" 05_documentation/reports/2026-Q3/GLOBAL_NEXUS_SUMMARY.md
          sed -i "s|<TIMESTAMP_UTC>|${TS}|g" 05_documentation/reports/2026-Q3/GLOBAL_NEXUS_SUMMARY.md
          sed -i "s|<EXIT_CODE>|${EXIT_CODE}|g" 05_documentation/reports/2026-Q3/GLOBAL_NEXUS_SUMMARY.md

          echo "✓ Summary report rendered"

      - name: Upload Reports
        uses: actions/upload-artifact@v4
        with:
          name: l9_reports
          path: |
            05_documentation/reports/2026-Q3/*.md
          retention-days: 365

  # ═══════════════════════════════════════════════════════════════════════════
  # JOB 6: Commit & Tag (Exit Code Aware)
  # ═══════════════════════════════════════════════════════════════════════════
  commit-tag:
    name: Commit & Tag Artifacts
    runs-on: ubuntu-latest
    needs: [setup, aggregate-l9, report]
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0

      - name: Configure Git
        run: |
          git config user.name "SSID Bot"
          git config user.email "bot@ssid.global"

      - name: Download Artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Stage Artifacts
        run: |
          # Copy artifacts to repository
          cp -r artifacts/l9_reports/* 05_documentation/reports/2026-Q3/ 2>/dev/null || true
          cp -r artifacts/audit_logs/* 02_audit_logging/reports/ 2>/dev/null || true
          cp -r artifacts/l9_proof/* 24_meta_orchestration/registry/layer9/ 2>/dev/null || true

          # Stage changes
          git add 05_documentation/reports/2026-Q3/*.md || true
          git add 02_audit_logging/reports/global_proof_nexus_log.json || true
          git add 24_meta_orchestration/registry/layer9/*.json || true

      - name: Commit Changes
        id: commit
        run: |
          STATUS="${{ needs.setup.outputs.status }}"
          EXIT_CODE="${{ needs.aggregate-l9.outputs.exit_code }}"
          EPOCH="${{ needs.setup.outputs.epoch }}"

          if [ "$STATUS" == "EARLY" ]; then
            MSG="chore(v5.0): Global Proof Nexus – prep run ($EPOCH, EARLY)"
          elif [ "$EXIT_CODE" == "0" ]; then
            MSG="feat(v5.0): Global Proof Nexus – Layer-9 verified ($EPOCH, SHA-512)"
          else
            MSG="chore(v5.0): Global Proof Nexus – run ($EPOCH, exit: $EXIT_CODE)"
          fi

          git commit -m "$MSG" || echo "Nothing to commit"
          echo "commit_msg=$MSG" >> $GITHUB_OUTPUT

      - name: Create Git Tag
        id: tag
        run: |
          STATUS="${{ needs.setup.outputs.status }}"
          EXIT_CODE="${{ needs.aggregate-l9.outputs.exit_code }}"
          EPOCH="${{ needs.setup.outputs.epoch }}"

          if [ "$STATUS" == "EARLY" ]; then
            TAG="v5.0-global-nexus-prep-${EPOCH}"
            MSG="Blueprint v5.0 – Global Proof Nexus (prep, $EPOCH)"
          elif [ "$EXIT_CODE" == "0" ]; then
            TAG="v5.0-global-nexus-verified-${EPOCH}"
            MSG="Blueprint v5.0 – Global Proof Nexus (verified, $EPOCH, SHA-512)"
          else
            echo "⚠️  Exit code $EXIT_CODE – skipping tag"
            exit 0
          fi

          git tag -a "$TAG" -m "$MSG"
          echo "tag=$TAG" >> $GITHUB_OUTPUT
          echo "✓ Tagged: $TAG"

      - name: Push Changes
        run: |
          git push --follow-tags || echo "⚠️  Push failed (may need permissions)"

  # ═══════════════════════════════════════════════════════════════════════════
  # JOB 7: Notify (Exit Code Routing)
  # ═══════════════════════════════════════════════════════════════════════════
  notify:
    name: Notify & Report Status
    runs-on: ubuntu-latest
    needs: [setup, aggregate-l9, commit-tag]
    if: always()

    steps:
      - name: Determine Notification Type
        id: severity
        run: |
          STATUS="${{ needs.setup.outputs.status }}"
          EXIT_CODE="${{ needs.aggregate-l9.outputs.exit_code }}"

          echo "Status: $STATUS"
          echo "Exit Code: $EXIT_CODE"

          case $EXIT_CODE in
            0)
              echo "severity=success" >> $GITHUB_OUTPUT
              echo "message=✓ SUCCESS: Layer-9 proof generated" >> $GITHUB_OUTPUT
              ;;
            1)
              echo "severity=info" >> $GITHUB_OUTPUT
              echo "message=⏰ EARLY: Time-gated (prep mode)" >> $GITHUB_OUTPUT
              ;;
            2)
              echo "severity=warning" >> $GITHUB_OUTPUT
              echo "message=⚠️  PREREQ: Missing prerequisites" >> $GITHUB_OUTPUT
              ;;
            3)
              echo "severity=error" >> $GITHUB_OUTPUT
              echo "message=❌ FAILED: Critical error" >> $GITHUB_OUTPUT
              ;;
            4)
              echo "severity=warning" >> $GITHUB_OUTPUT
              echo "message=⚠️  THRESHOLD: Consensus below 85%" >> $GITHUB_OUTPUT
              ;;
            *)
              echo "severity=info" >> $GITHUB_OUTPUT
              echo "message=ℹ️  Status: $STATUS" >> $GITHUB_OUTPUT
              ;;
          esac

      - name: Display Summary
        run: |
          echo "═══════════════════════════════════════════════════════════"
          echo "GLOBAL PROOF NEXUS – WORKFLOW SUMMARY"
          echo "═══════════════════════════════════════════════════════════"
          echo ""
          echo "Blueprint: v5.0.0"
          echo "Layer: 9 – Global Proof Nexus"
          echo "Hash Algorithm: SHA-512"
          echo ""
          echo "Status: ${{ needs.setup.outputs.status }}"
          echo "Exit Code: ${{ needs.aggregate-l9.outputs.exit_code }}"
          echo "Epoch: ${{ needs.setup.outputs.epoch }}"
          echo "Timestamp: ${{ needs.setup.outputs.timestamp }}"
          echo ""
          echo "Layer-9 Root: ${{ needs.aggregate-l9.outputs.l9_root }}"
          echo "Vote Ratio: ${{ needs.aggregate-l9.outputs.vote_ratio }}"
          echo ""
          echo "${{ steps.severity.outputs.message }}"
          echo ""
          echo "═══════════════════════════════════════════════════════════"

      # Hooks for external notifications (Slack, Discord, Email, etc.)
      # Can be added here based on severity
