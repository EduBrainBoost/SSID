name: Event Bus - Hash Consistency Verification

on:
  push:
    branches: [main, develop]
    paths:
      - '02_audit_logging/event_bus/**'
      - '02_audit_logging/adapters/**'
      - '02_audit_logging/handlers/**'
      - '02_audit_logging/interfaces/**'
      - '03_core/healthcheck/**'
  pull_request:
    branches: [main]
    paths:
      - '02_audit_logging/**'
  workflow_dispatch:  # Manual trigger

jobs:
  hash_consistency_check:
    name: Verify WORM Hash Consistency (Dual-Mode)
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
          cache: 'pip'

      - name: Install dependencies
        run: |
          pip install --upgrade pip
          pip install pytest pytest-asyncio pyyaml

      - name: Run Dual-Mode Hash Validation
        id: dual_mode_validation
        run: |
          python 02_audit_logging/adapters/dual_mode_logger.py \
            --report 02_audit_logging/validation/hash_consistency_ci.jsonl \
            --limit 1000
        continue-on-error: true

      - name: Parse validation report
        id: parse_report
        run: |
          python - <<'EOF'
          import json
          import sys
          from pathlib import Path

          report_path = Path("02_audit_logging/validation/hash_consistency_ci.jsonl")

          if not report_path.exists():
              print("::error::Validation report not found")
              sys.exit(1)

          # Read and analyze report
          entries = []
          with report_path.open("r") as f:
              for line in f:
                  if line.strip():
                      entries.append(json.loads(line))

          if not entries:
              print("::warning::No validation entries found")
              sys.exit(0)

          # Compute statistics
          total = len(entries)
          matched = sum(1 for e in entries if e.get("hashes_match"))
          mismatched = total - matched
          match_rate = (matched / total * 100) if total > 0 else 0

          # Output to GitHub Actions
          print(f"::set-output name=total::{total}")
          print(f"::set-output name=matched::{matched}")
          print(f"::set-output name=mismatched::{mismatched}")
          print(f"::set-output name=match_rate::{match_rate:.2f}")

          # Summary
          print(f"Validation Summary:")
          print(f"  Total Events: {total}")
          print(f"  Hashes Matched: {matched}")
          print(f"  Hashes Mismatched: {mismatched}")
          print(f"  Match Rate: {match_rate:.2f}%")

          if mismatched > 0:
              print("::error::Hash mismatches detected - BLOCKING MIGRATION")
              sys.exit(1)
          else:
              print("::notice::All hashes match - MIGRATION SAFE")
              sys.exit(0)
          EOF

      - name: Upload validation report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: hash-consistency-report
          path: 02_audit_logging/validation/hash_consistency_ci.jsonl
          retention-days: 30

      - name: Comment PR with results
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const reportPath = '02_audit_logging/validation/hash_consistency_ci.jsonl';

            if (!fs.existsSync(reportPath)) {
              console.log('Report not found, skipping comment');
              return;
            }

            const lines = fs.readFileSync(reportPath, 'utf8').split('\n').filter(l => l.trim());
            const entries = lines.map(l => JSON.parse(l));

            const total = entries.length;
            const matched = entries.filter(e => e.hashes_match).length;
            const mismatched = total - matched;
            const matchRate = (matched / total * 100).toFixed(2);

            const status = mismatched === 0 ? '✅ PASS' : '❌ FAIL';

            const comment = `
            ## Event Bus Hash Consistency Check ${status}

            ### Validation Results

            | Metric | Value |
            |--------|-------|
            | Total Events | ${total} |
            | Hashes Matched | ${matched} |
            | Hashes Mismatched | ${mismatched} |
            | Match Rate | ${matchRate}% |

            ${mismatched === 0
              ? '✅ **Migration Safe**: All WORM hashes match between legacy and new event bus.'
              : '❌ **Migration Blocked**: Hash mismatches detected. Review validation report.'}

            ### Recommendation

            ${mismatched === 0
              ? '**PROCEED** with Phase 2 (Dual-Mode Logging)'
              : '**BLOCK** migration until hash consistency is resolved'}

            📊 [View Full Report](../actions/runs/${context.runId})
            `;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });

      - name: Fail if hash mismatches detected
        if: steps.parse_report.outputs.mismatched > 0
        run: |
          echo "::error::Hash mismatches detected: ${{ steps.parse_report.outputs.mismatched }}"
          echo "::error::Match rate: ${{ steps.parse_report.outputs.match_rate }}%"
          echo "::error::Migration BLOCKED - Review validation report"
          exit 1

  unit_tests:
    name: Event Bus Unit Tests
    runs-on: ubuntu-latest
    timeout-minutes: 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
          cache: 'pip'

      - name: Install dependencies
        run: |
          pip install --upgrade pip
          pip install pytest pytest-asyncio pyyaml

      - name: Run event bus tests
        run: |
          pytest 11_test_simulation/tests_event_bus/ -v --tb=short

  integration_tests:
    name: Phase 1 Integration Tests
    runs-on: ubuntu-latest
    timeout-minutes: 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Install dependencies
        run: |
          pip install --upgrade pip
          pip install pytest pytest-asyncio pyyaml

      - name: Run Phase 1 integration tests
        run: |
          pytest 11_test_simulation/tests_event_bus/test_phase1_integration.py -v -s

  performance_benchmark:
    name: Performance Benchmark
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Install dependencies
        run: |
          pip install --upgrade pip
          pip install pytest pytest-asyncio pytest-benchmark pyyaml

      - name: Run performance benchmarks
        run: |
          pytest 11_test_simulation/tests_event_bus/ -v --benchmark-only || echo "No benchmarks found"

      - name: Upload benchmark results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: benchmark-results
          path: .benchmarks/
          retention-days: 30
