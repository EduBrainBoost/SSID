name: Intent Evolution Gate v3

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch:
  schedule:
    # Run daily at 00:00 UTC to detect accumulated changes
    - cron: '0 0 * * *'

jobs:
  detect-and-evolve:
    runs-on: ubuntu-latest
    permissions:
      contents: write  # For auto-commit of manifest updates
      pull-requests: write  # For creating PR with changes

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Full history for change detection

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pyyaml pytest

      - name: Detect Intent Changes
        id: detect
        run: |
          python 12_tooling/evolution/intent_evolution_guard.py \
            --detect \
            --report > evolution_report.json
          echo "changes_detected=$(cat evolution_report.json | jq '.summary.total_intents')" >> $GITHUB_OUTPUT

      - name: Register Changes
        if: steps.detect.outputs.changes_detected > 0
        run: |
          python 12_tooling/evolution/intent_evolution_guard.py \
            --detect \
            --register

      - name: Auto-Update Manifest
        if: steps.detect.outputs.changes_detected > 0
        run: |
          python 12_tooling/evolution/auto_manifest_updater.py

      - name: Validate OPA Evolution Policy
        if: steps.detect.outputs.changes_detected > 0
        uses: open-policy-agent/setup-opa@v2

      - name: OPA Policy Check
        if: steps.detect.outputs.changes_detected > 0
        run: |
          # Read evolution audit log
          CHANGES=$(cat 02_audit_logging/reports/intent_evolution_audit.jsonl | tail -10 | jq -s '{"changes": .}')

          # Evaluate OPA policy
          echo "$CHANGES" | opa eval \
            -d 23_compliance/policies/opa/intent_evolution.rego \
            -i - \
            "data.intent.evolution.allow"

      - name: Run Intent Coverage Tests
        run: |
          pytest 11_test_simulation/tests_governance/test_intent_evolution.py -v

      - name: Generate Evolution Report
        if: always()
        run: |
          python 12_tooling/evolution/intent_evolution_guard.py --report > \
            02_audit_logging/reports/intent_evolution_report.json

      - name: Upload Evolution Report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: intent-evolution-report
          path: |
            02_audit_logging/reports/intent_evolution_report.json
            02_audit_logging/reports/intent_evolution_audit.jsonl
            24_meta_orchestration/registry/intent_evolution_history.json

      - name: Create PR for Manifest Updates
        if: steps.detect.outputs.changes_detected > 0 && github.event_name == 'schedule'
        uses: peter-evans/create-pull-request@v5
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          commit-message: "chore: Auto-update intent manifest from evolution guard"
          title: "Intent Evolution: Auto-detected changes"
          body: |
            ## Intent Evolution Auto-Update

            This PR contains automatically detected intent changes from the Evolution Guard.

            **Changes Detected:** ${{ steps.detect.outputs.changes_detected }}

            ### Evolution Report
            See artifacts for detailed evolution report.

            ### Validation
            - ✓ OPA Evolution Policy passed
            - ✓ Intent Coverage Tests passed
            - ✓ Manifest backup created

            **Generated by Intent Evolution Guard v3.0**
          branch: intent-evolution-auto-update
          delete-branch: true

  validate-history:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Validate Evolution History
        run: |
          python -c "
          import json
          from pathlib import Path

          history_path = Path('24_meta_orchestration/registry/intent_evolution_history.json')
          if history_path.exists():
              with open(history_path) as f:
                  history = json.load(f)

              # Validate structure
              for path, data in history.items():
                  assert 'intent_id' in data, f'Missing intent_id for {path}'
                  assert 'versions' in data, f'Missing versions for {path}'
                  assert len(data['versions']) > 0, f'No versions for {path}'

                  # Validate semantic versioning
                  for version in data['versions']:
                      v = version['version']
                      parts = v.split('.')
                      assert len(parts) == 3, f'Invalid version format: {v}'

              print(f'✓ Evolution history validated: {len(history)} intents')
          else:
              print('No evolution history found (this is ok for first run)')
          "
