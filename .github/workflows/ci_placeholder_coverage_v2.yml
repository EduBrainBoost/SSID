name: üîí SSID Codex Engine - Placeholder & Coverage (v2)

on:
  push:
    branches: [main, develop]
    paths:
      - '23_compliance/anti_gaming/**'
      - '02_audit_logging/validators/**'
      - '08_identity_score/**'
      - '11_test_simulation/**'
      - '12_tooling/placeholder_guard/**'
      - '.github/workflows/ci_placeholder_coverage_v2.yml'
  pull_request:
    branches: [main, develop]
  workflow_dispatch:

jobs:
  gate-0-placeholder-scan:
    name: "Gate 0: Placeholder Scanner"
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install PyYAML
        run: |
          python -m pip install --upgrade pip
          pip install pyyaml

      - name: Run Placeholder Guard (Critical SoT Areas)
        run: |
          python 12_tooling/placeholder_guard/placeholder_scan_v2.py \
            --critical-only \
            --root . \
            --allowlist 12_tooling/placeholder_guard/allowlist_paths.yaml

      - name: Save Gate 0 Evidence
        if: always()
        run: |
          mkdir -p 24_meta_orchestration/registry/logs
          TIMESTAMP=$(date -u +"%Y-%m-%dT%H:%M:%SZ")
          LOG_FILE="24_meta_orchestration/registry/logs/gate0_${TIMESTAMP}.log"
          echo "gate=0" > "$LOG_FILE"
          echo "name=placeholder_scan" >> "$LOG_FILE"
          echo "status=${{ job.status }}" >> "$LOG_FILE"
          echo "timestamp=${TIMESTAMP}" >> "$LOG_FILE"
          echo "critical_areas=23_compliance/anti_gaming,02_audit_logging/validators,08_identity_score" >> "$LOG_FILE"

  gate-1-coverage-tests:
    name: "Gate 1: Tests + Coverage ‚â•80%"
    runs-on: ubuntu-latest
    needs: gate-0-placeholder-scan
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install test dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pyyaml pytest pytest-cov coverage

      - name: Run tests with coverage enforcement (‚â•80%)
        working-directory: 11_test_simulation
        run: |
          # pytest.ini configured with --cov-fail-under=80
          # Covers: anti_gaming, audit validators, identity_score
          pytest -v --tb=short

      - name: Display coverage report
        if: always()
        working-directory: 11_test_simulation
        run: |
          coverage report --precision=2 --show-missing

      - name: Upload coverage artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: coverage-xml
          path: 23_compliance/evidence/coverage/coverage.xml
          retention-days: 30

      - name: Save Gate 1 Evidence
        if: always()
        run: |
          mkdir -p 24_meta_orchestration/registry/logs
          TIMESTAMP=$(date -u +"%Y-%m-%dT%H:%M:%SZ")
          LOG_FILE="24_meta_orchestration/registry/logs/gate1_${TIMESTAMP}.log"
          echo "gate=1" > "$LOG_FILE"
          echo "name=coverage_tests" >> "$LOG_FILE"
          echo "status=${{ job.status }}" >> "$LOG_FILE"
          echo "timestamp=${TIMESTAMP}" >> "$LOG_FILE"
          echo "threshold=80" >> "$LOG_FILE"

  summary:
    name: "CI Summary"
    runs-on: ubuntu-latest
    needs: [gate-0-placeholder-scan, gate-1-coverage-tests]
    if: always()
    steps:
      - name: Check Gate Results
        run: |
          echo "================================================"
          echo "üîí SSID Codex Engine - CI Summary"
          echo "================================================"
          echo ""
          echo "Gate 0 (Placeholder Scan): ${{ needs.gate-0-placeholder-scan.result }}"
          echo "Gate 1 (Coverage ‚â•80%):    ${{ needs.gate-1-coverage-tests.result }}"
          echo ""

          GATE0="${{ needs.gate-0-placeholder-scan.result }}"
          GATE1="${{ needs.gate-1-coverage-tests.result }}"

          if [[ "$GATE0" != "success" ]]; then
            echo "‚ùå Gate 0 FAILED: Placeholders detected in critical SoT areas"
            echo "   - 23_compliance/anti_gaming/"
            echo "   - 02_audit_logging/validators/"
            echo "   - 08_identity_score/"
            exit 1
          fi

          if [[ "$GATE1" != "success" ]]; then
            echo "‚ùå Gate 1 FAILED: Tests failed or coverage <80%"
            exit 1
          fi

          echo "‚úÖ All gates PASSED"
          echo "‚úÖ Ready for deployment"
          echo ""
          echo "================================================"
