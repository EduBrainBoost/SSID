name: SoT Complete Verification

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  verify:
    runs-on: ubuntu-latest
    timeout-minutes: 30

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Python 3.11
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pyyaml pytest

      - name: Extract Rules (Universal Extractor)
        run: |
          echo "Running Universal Rule Extractor..."
          python 03_core/validators/sot/sot_universal_extractor.py --mode comprehensive
          echo "Extraction complete!"

      - name: Verify Extraction Results
        run: |
          if [ ! -f "16_codex/structure/auto_generated/sot_rules_full.json" ]; then
            echo "ERROR: Registry file not created"
            exit 1
          fi

          if [ ! -f "24_meta_orchestration/registry/sot_merkle_tree.json" ]; then
            echo "ERROR: Merkle tree file not created"
            exit 1
          fi

          echo "Extraction verification passed!"

      - name: Generate Artifacts
        run: |
          echo "Generating all artifacts..."
          python 12_tooling/scripts/generate_sot_artifacts_v3.py
          echo "Artifact generation complete!"

      - name: Verify Artifacts Created
        run: |
          if [ ! -f "16_codex/contracts/sot/sot_contract_complete.yaml" ]; then
            echo "ERROR: Contract not created"
            exit 1
          fi

          if [ ! -f "23_compliance/policies/sot/sot_policy_complete.rego" ]; then
            echo "ERROR: Policy not created"
            exit 1
          fi

          if [ ! -f "03_core/validators/sot/sot_validator_complete.py" ]; then
            echo "ERROR: Validator not created"
            exit 1
          fi

          if [ ! -f "11_test_simulation/tests_compliance/test_sot_complete.py" ]; then
            echo "ERROR: Tests not created"
            exit 1
          fi

          if [ ! -f "12_tooling/cli/sot_validator_complete_cli.py" ]; then
            echo "ERROR: CLI not created"
            exit 1
          fi

          echo "All artifacts verified!"

      - name: Run Validator
        run: |
          echo "Running SoT validator..."
          python 12_tooling/cli/sot_validator_complete_cli.py --verify-all --output validation_results.json
          echo "Validation complete!"

      - name: Run Test Suite
        run: |
          echo "Running test suite..."
          pytest 11_test_simulation/tests_compliance/test_sot_complete.py -v --tb=short
          echo "Tests complete!"

      - name: Run Health Monitor
        run: |
          echo "Running health monitor..."
          python 17_observability/sot_health_monitor_complete.py
          echo "Health check complete!"
        continue-on-error: true

      - name: Check Health Status
        run: |
          if [ -f "02_audit_logging/reports/sot_health_status_complete.json" ]; then
            STATUS=$(python -c "import json; data=json.load(open('02_audit_logging/reports/sot_health_status_complete.json')); print(data['overall_status'])")
            echo "Health Status: $STATUS"

            if [ "$STATUS" = "FAIL" ]; then
              echo "WARNING: Health check failed, but continuing..."
            fi
          else
            echo "WARNING: Health status file not found"
          fi

      - name: Upload Artifacts
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: sot-verification-results
          path: |
            16_codex/structure/auto_generated/sot_rules_full.json
            16_codex/structure/auto_generated/sot_extractor_report.md
            02_audit_logging/reports/sot_extractor_audit.json
            02_audit_logging/reports/sot_health_status_complete.json
            24_meta_orchestration/registry/sot_merkle_tree.json
            validation_results.json
          retention-days: 30

      - name: Generate Summary
        if: always()
        run: |
          echo "## SoT Verification Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          if [ -f "16_codex/structure/auto_generated/sot_rules_full.json" ]; then
            TOTAL_RULES=$(python -c "import json; data=json.load(open('16_codex/structure/auto_generated/sot_rules_full.json')); print(data['metadata']['total_rules'])")
            echo "- **Total Rules Extracted:** $TOTAL_RULES" >> $GITHUB_STEP_SUMMARY
          fi

          if [ -f "24_meta_orchestration/registry/sot_merkle_tree.json" ]; then
            MERKLE_ROOT=$(python -c "import json; data=json.load(open('24_meta_orchestration/registry/sot_merkle_tree.json')); print(data['merkle_root'])")
            echo "- **Merkle Root:** \`$MERKLE_ROOT\`" >> $GITHUB_STEP_SUMMARY
          fi

          if [ -f "02_audit_logging/reports/sot_health_status_complete.json" ]; then
            HEALTH_STATUS=$(python -c "import json; data=json.load(open('02_audit_logging/reports/sot_health_status_complete.json')); print(data['overall_status'])")
            HEALTH_SCORE=$(python -c "import json; data=json.load(open('02_audit_logging/reports/sot_health_status_complete.json')); print(data['score'])")
            echo "- **Health Status:** $HEALTH_STATUS" >> $GITHUB_STEP_SUMMARY
            echo "- **Health Score:** $HEALTH_SCORE%" >> $GITHUB_STEP_SUMMARY
          fi

          echo "" >> $GITHUB_STEP_SUMMARY
          echo "âœ… SoT verification pipeline completed successfully!" >> $GITHUB_STEP_SUMMARY

      - name: Final Status Check
        run: |
          echo "================================================"
          echo "SoT Complete Verification Pipeline - COMPLETE"
          echo "================================================"
          echo ""
          echo "All verification steps completed successfully!"
          echo ""
          echo "Next steps:"
          echo "1. Review artifacts in GitHub Actions artifacts"
          echo "2. Check health status for any warnings"
          echo "3. Implement validation logic for rules"
          echo ""
          echo "================================================"
