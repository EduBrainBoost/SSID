name: Federated Governance Sync

on:
  # Manual trigger for federation synchronization
  workflow_dispatch:
    inputs:
      force_sync:
        description: 'Force sync even if recently synced'
        required: false
        type: boolean
        default: false

  # Automated sync every 6 hours
  schedule:
    - cron: "0 */6 * * *"  # Every 6 hours

  # Trigger after quarterly releases
  workflow_run:
    workflows: ["Quarterly Governance Release"]
    types:
      - completed

jobs:
  federation-sync:
    runs-on: ubuntu-latest

    permissions:
      contents: write  # Required for committing sync results
      pull-requests: write  # Required for creating PRs if needed

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Full history for event analysis
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

      - name: Configure Git
        run: |
          git config user.name "SSID Federation Bot"
          git config user.email "federation-bot@ssid.local"

      - name: Check federation status
        id: fed_status
        run: |
          echo "Checking federation configuration..."

          # Check if federation is enabled
          ENABLED=$(python3 -c "
          import json
          try:
              with open('07_governance_legal/federation_config.json', 'r') as f:
                  config = json.load(f)
                  print(config.get('federation', {}).get('enabled', False))
          except:
              print(False)
          " 2>/dev/null || echo "False")

          echo "enabled=${ENABLED}" >> $GITHUB_OUTPUT

          if [ "$ENABLED" = "True" ]; then
            echo "✅ Federation is enabled"
          else
            echo "⚠️ Federation is disabled"
          fi

      - name: List federated nodes
        if: steps.fed_status.outputs.enabled == 'True'
        run: |
          echo "📋 Listing federated nodes..."
          python3 12_tooling/scripts/federation_sync_manager.py --list-nodes

      - name: Synchronize with federation
        id: sync
        if: steps.fed_status.outputs.enabled == 'True'
        continue-on-error: true
        run: |
          echo "🔄 Initiating federation synchronization..."

          FORCE_FLAG=""
          if [ "${{ github.event.inputs.force_sync }}" = "true" ]; then
            FORCE_FLAG="--force"
            echo "⚡ Force sync enabled"
          fi

          # Run synchronization
          if python3 12_tooling/scripts/federation_sync_manager.py --sync $FORCE_FLAG; then
            echo "sync_status=success" >> $GITHUB_OUTPUT
            echo "✅ Synchronization completed successfully"
          else
            echo "sync_status=failed" >> $GITHUB_OUTPUT
            echo "❌ Synchronization failed"
            exit 1
          fi

      - name: Validate consensus
        if: steps.fed_status.outputs.enabled == 'True' && steps.sync.outputs.sync_status == 'success'
        continue-on-error: true
        run: |
          echo "🔍 Validating consensus..."
          python3 12_tooling/scripts/consensus_validator.py --verify

      - name: Show consensus history
        if: steps.fed_status.outputs.enabled == 'True'
        run: |
          echo "📊 Consensus history (last 5):"
          python3 12_tooling/scripts/consensus_validator.py --show-history --limit 5

      - name: Analyze trust scores
        if: steps.fed_status.outputs.enabled == 'True'
        run: |
          echo "🔐 Node trust analysis:"
          python3 12_tooling/scripts/consensus_validator.py --analyze-trust

      - name: Check for sync changes
        id: changes
        if: steps.fed_status.outputs.enabled == 'True' && steps.sync.outputs.sync_status == 'success'
        run: |
          # Check if federation sync created any changes
          if git diff --quiet 24_meta_orchestration/registry/; then
            echo "has_changes=false" >> $GITHUB_OUTPUT
            echo "ℹ️ No changes from federation sync"
          else
            echo "has_changes=true" >> $GITHUB_OUTPUT
            echo "✅ Federation sync produced changes"
          fi

      - name: Commit federation sync results
        id: commit
        if: |
          steps.fed_status.outputs.enabled == 'True' &&
          steps.sync.outputs.sync_status == 'success' &&
          steps.changes.outputs.has_changes == 'true'
        run: |
          # Add federation-related files
          git add 24_meta_orchestration/registry/logs/registry_events.log
          git add 24_meta_orchestration/registry/manifests/federation_manifest.json
          git add 24_meta_orchestration/registry/events/

          TIMESTAMP=$(date -u +"%Y-%m-%dT%H:%M:%SZ")

          git commit -m "Federation sync: Update from federated nodes

Blueprint v4.4 - Federated Governance Sync

This commit contains synchronized governance events from federated SSID nodes.

**Sync Timestamp:** ${TIMESTAMP}
**Trigger:** ${{ github.event_name == 'schedule' && 'Scheduled sync' || github.event_name == 'workflow_run' && 'Post-release sync' || 'Manual sync' }}
**Workflow Run:** ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}

**Federation Status:**
- Consensus validation: PASSED
- Trust scores: Updated
- Event propagation: COMPLETE

🤖 Generated automatically by federation sync workflow

Co-Authored-By: SSID Federation Bot <federation-bot@ssid.local>"

          echo "commit_hash=$(git rev-parse HEAD)" >> $GITHUB_OUTPUT

          # Push changes
          git push origin main

          echo "✅ Federation sync committed and pushed"

      - name: Create notification
        if: |
          steps.fed_status.outputs.enabled == 'True' &&
          steps.sync.outputs.sync_status == 'success'
        continue-on-error: true
        run: |
          echo "📢 Sending federation sync notification..."

          # Run telemetry notification for federation events
          python3 12_tooling/scripts/governance_telemetry.py

          echo "✅ Notification sent"

      - name: Handle sync failures
        if: |
          steps.fed_status.outputs.enabled == 'True' &&
          steps.sync.outputs.sync_status == 'failed'
        run: |
          echo "⚠️ Federation sync encountered issues"
          echo "Please review the sync logs above"

          # Create issue for failed sync (optional)
          if command -v gh &> /dev/null; then
            gh issue create \
              --title "Federation Sync Failed - $(date +%Y-%m-%d)" \
              --body "The federation synchronization workflow failed.

          **Workflow Run:** ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
          **Timestamp:** $(date -u +"%Y-%m-%dT%H:%M:%SZ")

          Please review the workflow logs and check:
          - Federated node availability
          - Network connectivity
          - Git remote access
          - Consensus validation errors

          cc: @governance-team" \
              --label "federation,sync-failure,automated" || true
          fi

      - name: Sync summary
        if: always()
        run: |
          echo "════════════════════════════════════════════════════════"
          echo "  Federation Sync - Workflow Complete"
          echo "════════════════════════════════════════════════════════"
          echo ""
          echo "Federation Enabled: ${{ steps.fed_status.outputs.enabled }}"
          echo "Sync Status: ${{ steps.sync.outputs.sync_status || 'skipped' }}"
          echo "Changes Detected: ${{ steps.changes.outputs.has_changes || 'N/A' }}"
          echo "Commit Hash: ${{ steps.commit.outputs.commit_hash || 'N/A' }}"
          echo ""
          echo "📚 Documentation: 05_documentation/FEDERATION_GUIDE.md"
          echo "🔧 Configuration: 07_governance_legal/federation_config.json"
          echo ""

  consensus-validation:
    runs-on: ubuntu-latest
    needs: federation-sync
    if: needs.federation-sync.result == 'success'

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Run consensus validation
        run: |
          echo "🔍 Running comprehensive consensus validation..."

          # Verify all local events
          python3 12_tooling/scripts/consensus_validator.py --verify

          echo "✅ Consensus validation complete"

      - name: Generate consensus report
        continue-on-error: true
        run: |
          echo "📊 Generating consensus report..."

          # Create consensus summary
          REPORT_DIR="24_meta_orchestration/registry/reports"
          mkdir -p "$REPORT_DIR"

          REPORT_FILE="${REPORT_DIR}/consensus_report_$(date +%Y%m%d_%H%M%S).json"

          python3 -c "
          import json
          import sys
          from pathlib import Path

          manifest_path = Path('24_meta_orchestration/registry/manifests/federation_manifest.json')
          if manifest_path.exists():
              with open(manifest_path, 'r') as f:
                  manifest = json.load(f)

              report = {
                  'generated_at': '$(date -u +"%Y-%m-%dT%H:%M:%SZ")',
                  'federation_enabled': manifest.get('federation', {}).get('enabled', False),
                  'total_nodes': manifest.get('statistics', {}).get('total_nodes', 0),
                  'consensus_agreements': manifest.get('statistics', {}).get('consensus_agreements', 0),
                  'consensus_disagreements': manifest.get('statistics', {}).get('consensus_disagreements', 0),
                  'last_consensus_check': manifest.get('statistics', {}).get('last_consensus_check'),
                  'consensus_history_count': len(manifest.get('consensus_history', []))
              }

              with open('$REPORT_FILE', 'w') as out:
                  json.dump(report, out, indent=2)

              print(f'✅ Report generated: $REPORT_FILE')
          else:
              print('⚠️ Federation manifest not found')
              sys.exit(1)
          "

          echo "📄 Consensus report: $REPORT_FILE"
