#!/usr/bin/env python3
"""
GENERATED FILE - DO NOT EDIT MANUALLY
============================================================================
Generator: SoTArtefactGenerator
Timestamp: 2025-10-24T15:05:48.240895
Source: all_4_sot_semantic_rules_v2.json
Version: 5.0.0
============================================================================
"""

import pytest
import sys
from pathlib import Path

# Add validators to path
sys.path.insert(0, str(Path(__file__).parent.parent.parent / '03_core' / 'validators' / 'sot'))

from sot_validator_engine import RuleValidationEngine, ValidationResult

class TestSoTValidatorMoSCoW:
    """Test all 4773 SoT rules"""

    @pytest.fixture(scope="class")
    def all_results(self):
        """Run all validations once"""
        return validate_all_sot_rules()


    def test_rule_0001(self, all_results):
        """
        Test RULE-0001: YAML field 'version' must equal '1.0'
        Priority: HIGH
        """
        assert "RULE-0001" in all_results['results'], "Rule RULE-0001 missing"
        result = all_results['results']["RULE-0001"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "HIGH" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0001 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0001 failed"


    def test_rule_0002(self, all_results):
        """
        Test RULE-0002: YAML field 'date' must equal '2025-09-15'
        Priority: MEDIUM
        """
        assert "RULE-0002" in all_results['results'], "Rule RULE-0002 missing"
        result = all_results['results']["RULE-0002"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0002 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0002 failed"


    def test_rule_0003(self, all_results):
        """
        Test RULE-0003: YAML field 'deprecated' must equal 'False'
        Priority: CRITICAL
        """
        assert "RULE-0003" in all_results['results'], "Rule RULE-0003 missing"
        result = all_results['results']["RULE-0003"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0003 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0003 failed"


    def test_rule_0004(self, all_results):
        """
        Test RULE-0004: YAML field 'classification' must equal 'PUBLIC - Token Framework Standards'
        Priority: HIGH
        """
        assert "RULE-0004" in all_results['results'], "Rule RULE-0004 missing"
        result = all_results['results']["RULE-0004"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "HIGH" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0004 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0004 failed"


    def test_rule_0005(self, all_results):
        """
        Test RULE-0005: YAML list 'token_definition.purpose' must contain 3 elements
        Priority: HIGH
        """
        assert "RULE-0005" in all_results['results'], "Rule RULE-0005 missing"
        result = all_results['results']["RULE-0005"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "HIGH" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0005 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0005 failed"


    def test_rule_0006(self, all_results):
        """
        Test RULE-0006: YAML list 'token_definition.explicit_exclusions' must contain 5 elements
        Priority: CRITICAL
        """
        assert "RULE-0006" in all_results['results'], "Rule RULE-0006 missing"
        result = all_results['results']["RULE-0006"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0006 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0006 failed"


    def test_rule_0007(self, all_results):
        """
        Test RULE-0007: YAML field 'token_definition.legal_position' must equal 'Pure utility token for 
        Priority: CRITICAL
        """
        assert "RULE-0007" in all_results['results'], "Rule RULE-0007 missing"
        result = all_results['results']["RULE-0007"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0007 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0007 failed"


    def test_rule_0008(self, all_results):
        """
        Test RULE-0008: YAML field 'technical_specification.blockchain' must equal 'Polygon (EVM Compati
        Priority: HIGH
        """
        assert "RULE-0008" in all_results['results'], "Rule RULE-0008 missing"
        result = all_results['results']["RULE-0008"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "HIGH" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0008 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0008 failed"


    def test_rule_0009(self, all_results):
        """
        Test RULE-0009: YAML field 'technical_specification.standard' must equal 'ERC-20 Compatible'
        Priority: HIGH
        """
        assert "RULE-0009" in all_results['results'], "Rule RULE-0009 missing"
        result = all_results['results']["RULE-0009"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "HIGH" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0009 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0009 failed"


    def test_rule_0010(self, all_results):
        """
        Test RULE-0010: YAML field 'technical_specification.supply_model' must equal 'Fixed cap with def
        Priority: MEDIUM
        """
        assert "RULE-0010" in all_results['results'], "Rule RULE-0010 missing"
        result = all_results['results']["RULE-0010"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0010 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0010 failed"


    def test_rule_0011(self, all_results):
        """
        Test RULE-0011: YAML field 'technical_specification.custody_model' must equal 'Non-custodial by 
        Priority: MEDIUM
        """
        assert "RULE-0011" in all_results['results'], "Rule RULE-0011 missing"
        result = all_results['results']["RULE-0011"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0011 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0011 failed"


    def test_rule_0012(self, all_results):
        """
        Test RULE-0012: YAML field 'technical_specification.smart_contract_automation' must equal 'Full 
        Priority: MEDIUM
        """
        assert "RULE-0012" in all_results['results'], "Rule RULE-0012 missing"
        result = all_results['results']["RULE-0012"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0012 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0012 failed"


    def test_rule_0013(self, all_results):
        """
        Test RULE-0013: YAML field 'fee_structure.scope' must equal 'identity_verification_payments_only
        Priority: MEDIUM
        """
        assert "RULE-0013" in all_results['results'], "Rule RULE-0013 missing"
        result = all_results['results']["RULE-0013"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0013 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0013 failed"


    def test_rule_0014(self, all_results):
        """
        Test RULE-0014: YAML field 'fee_structure.total_fee' must equal '3% of identity verification tra
        Priority: MEDIUM
        """
        assert "RULE-0014" in all_results['results'], "Rule RULE-0014 missing"
        result = all_results['results']["RULE-0014"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0014 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0014 failed"


    def test_rule_0015(self, all_results):
        """
        Test RULE-0015: YAML field 'fee_structure.allocation' must equal '1% dev (direct), 2% system tre
        Priority: MEDIUM
        """
        assert "RULE-0015" in all_results['results'], "Rule RULE-0015 missing"
        result = all_results['results']["RULE-0015"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0015 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0015 failed"


    def test_rule_0016(self, all_results):
        """
        Test RULE-0016: YAML field 'fee_structure.burn_from_system_fee' must equal '50% of 2% with daily
        Priority: MEDIUM
        """
        assert "RULE-0016" in all_results['results'], "Rule RULE-0016 missing"
        result = all_results['results']["RULE-0016"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0016 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0016 failed"


    def test_rule_0017(self, all_results):
        """
        Test RULE-0017: YAML field 'fee_structure.fee_collection' must equal 'Smart contract automated'
        Priority: MEDIUM
        """
        assert "RULE-0017" in all_results['results'], "Rule RULE-0017 missing"
        result = all_results['results']["RULE-0017"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0017 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0017 failed"


    def test_rule_0018(self, all_results):
        """
        Test RULE-0018: YAML field 'fee_structure.no_manual_intervention' must equal 'True'
        Priority: CRITICAL
        """
        assert "RULE-0018" in all_results['results'], "Rule RULE-0018 missing"
        result = all_results['results']["RULE-0018"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0018 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0018 failed"


    def test_rule_0019(self, all_results):
        """
        Test RULE-0019: YAML field 'legal_safe_harbor.security_token' must equal 'False'
        Priority: CRITICAL
        """
        assert "RULE-0019" in all_results['results'], "Rule RULE-0019 missing"
        result = all_results['results']["RULE-0019"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0019 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0019 failed"


    def test_rule_0020(self, all_results):
        """
        Test RULE-0020: YAML field 'legal_safe_harbor.e_money_token' must equal 'False'
        Priority: CRITICAL
        """
        assert "RULE-0020" in all_results['results'], "Rule RULE-0020 missing"
        result = all_results['results']["RULE-0020"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0020 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0020 failed"


    def test_rule_0021(self, all_results):
        """
        Test RULE-0021: YAML field 'legal_safe_harbor.stablecoin' must equal 'False'
        Priority: CRITICAL
        """
        assert "RULE-0021" in all_results['results'], "Rule RULE-0021 missing"
        result = all_results['results']["RULE-0021"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0021 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0021 failed"


    def test_rule_0022(self, all_results):
        """
        Test RULE-0022: YAML field 'legal_safe_harbor.yield_bearing' must equal 'False'
        Priority: CRITICAL
        """
        assert "RULE-0022" in all_results['results'], "Rule RULE-0022 missing"
        result = all_results['results']["RULE-0022"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0022 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0022 failed"


    def test_rule_0023(self, all_results):
        """
        Test RULE-0023: YAML field 'legal_safe_harbor.redemption_rights' must equal 'False'
        Priority: CRITICAL
        """
        assert "RULE-0023" in all_results['results'], "Rule RULE-0023 missing"
        result = all_results['results']["RULE-0023"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0023 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0023 failed"


    def test_rule_0024(self, all_results):
        """
        Test RULE-0024: YAML field 'legal_safe_harbor.passive_income' must equal 'False'
        Priority: CRITICAL
        """
        assert "RULE-0024" in all_results['results'], "Rule RULE-0024 missing"
        result = all_results['results']["RULE-0024"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0024 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0024 failed"


    def test_rule_0025(self, all_results):
        """
        Test RULE-0025: YAML field 'legal_safe_harbor.investment_contract' must equal 'False'
        Priority: CRITICAL
        """
        assert "RULE-0025" in all_results['results'], "Rule RULE-0025 missing"
        result = all_results['results']["RULE-0025"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0025 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0025 failed"


    def test_rule_0026(self, all_results):
        """
        Test RULE-0026: YAML field 'legal_safe_harbor.admin_controls' must equal 'No privileged admin ke
        Priority: CRITICAL
        """
        assert "RULE-0026" in all_results['results'], "Rule RULE-0026 missing"
        result = all_results['results']["RULE-0026"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0026 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0026 failed"


    def test_rule_0027(self, all_results):
        """
        Test RULE-0027: YAML field 'legal_safe_harbor.upgrade_mechanism' must equal 'On-chain proposals 
        Priority: HIGH
        """
        assert "RULE-0027" in all_results['results'], "Rule RULE-0027 missing"
        result = all_results['results']["RULE-0027"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "HIGH" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0027 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0027 failed"


    def test_rule_0028(self, all_results):
        """
        Test RULE-0028: YAML field 'business_model.role' must equal 'Technology publisher and open sourc
        Priority: MEDIUM
        """
        assert "RULE-0028" in all_results['results'], "Rule RULE-0028 missing"
        result = all_results['results']["RULE-0028"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0028 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0028 failed"


    def test_rule_0029(self, all_results):
        """
        Test RULE-0029: YAML list 'business_model.not_role' must contain 4 elements
        Priority: MEDIUM
        """
        assert "RULE-0029" in all_results['results'], "Rule RULE-0029 missing"
        result = all_results['results']["RULE-0029"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0029 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0029 failed"


    def test_rule_0030(self, all_results):
        """
        Test RULE-0030: YAML field 'business_model.user_interactions' must equal 'Direct peer-to-peer vi
        Priority: MEDIUM
        """
        assert "RULE-0030" in all_results['results'], "Rule RULE-0030 missing"
        result = all_results['results']["RULE-0030"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0030 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0030 failed"


    def test_rule_0031(self, all_results):
        """
        Test RULE-0031: YAML field 'business_model.kyc_responsibility' must equal 'Third-party KYC provi
        Priority: MEDIUM
        """
        assert "RULE-0031" in all_results['results'], "Rule RULE-0031 missing"
        result = all_results['results']["RULE-0031"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0031 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0031 failed"


    def test_rule_0032(self, all_results):
        """
        Test RULE-0032: YAML field 'business_model.data_custody' must equal 'Zero personal data on-chain
        Priority: MEDIUM
        """
        assert "RULE-0032" in all_results['results'], "Rule RULE-0032 missing"
        result = all_results['results']["RULE-0032"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0032 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0032 failed"


    def test_rule_0033(self, all_results):
        """
        Test RULE-0033: YAML field 'governance_framework.dao_ready' must equal 'True'
        Priority: CRITICAL
        """
        assert "RULE-0033" in all_results['results'], "Rule RULE-0033 missing"
        result = all_results['results']["RULE-0033"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0033 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0033 failed"


    def test_rule_0034(self, all_results):
        """
        Test RULE-0034: YAML field 'governance_framework.voting_mechanism' must equal 'Token-weighted go
        Priority: HIGH
        """
        assert "RULE-0034" in all_results['results'], "Rule RULE-0034 missing"
        result = all_results['results']["RULE-0034"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "HIGH" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0034 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0034 failed"


    def test_rule_0035(self, all_results):
        """
        Test RULE-0035: YAML field 'governance_framework.proposal_system' must equal 'Snapshot + on-chai
        Priority: MEDIUM
        """
        assert "RULE-0035" in all_results['results'], "Rule RULE-0035 missing"
        result = all_results['results']["RULE-0035"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0035 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0035 failed"


    def test_rule_0036(self, all_results):
        """
        Test RULE-0036: YAML field 'governance_framework.upgrade_authority' must equal 'DAO only (no adm
        Priority: CRITICAL
        """
        assert "RULE-0036" in all_results['results'], "Rule RULE-0036 missing"
        result = all_results['results']["RULE-0036"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0036 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0036 failed"


    def test_rule_0037(self, all_results):
        """
        Test RULE-0037: YAML field 'governance_framework.emergency_procedures' must equal 'Community mul
        Priority: MEDIUM
        """
        assert "RULE-0037" in all_results['results'], "Rule RULE-0037 missing"
        result = all_results['results']["RULE-0037"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0037 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0037 failed"


    def test_rule_0038(self, all_results):
        """
        Test RULE-0038: YAML field 'governance_framework.reference' must equal 'See detailed governance_
        Priority: HIGH
        """
        assert "RULE-0038" in all_results['results'], "Rule RULE-0038 missing"
        result = all_results['results']["RULE-0038"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "HIGH" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0038 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0038 failed"


    def test_rule_0039(self, all_results):
        """
        Test RULE-0039: YAML field 'jurisdictional_compliance.reference' must equal 'See 23_compliance/j
        Priority: CRITICAL
        """
        assert "RULE-0039" in all_results['results'], "Rule RULE-0039 missing"
        result = all_results['results']["RULE-0039"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0039 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0039 failed"


    def test_rule_0040(self, all_results):
        """
        Test RULE-0040: YAML list 'jurisdictional_compliance.blacklist_jurisdictions' must contain 4 ele
        Priority: CRITICAL
        """
        assert "RULE-0040" in all_results['results'], "Rule RULE-0040 missing"
        result = all_results['results']["RULE-0040"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0040 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0040 failed"


    def test_rule_0041(self, all_results):
        """
        Test RULE-0041: YAML list 'jurisdictional_compliance.excluded_entities' must contain 3 elements
        Priority: MEDIUM
        """
        assert "RULE-0041" in all_results['results'], "Rule RULE-0041 missing"
        result = all_results['results']["RULE-0041"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0041 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0041 failed"


    def test_rule_0042(self, all_results):
        """
        Test RULE-0042: YAML list 'jurisdictional_compliance.excluded_markets' must contain 3 elements
        Priority: MEDIUM
        """
        assert "RULE-0042" in all_results['results'], "Rule RULE-0042 missing"
        result = all_results['results']["RULE-0042"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0042 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0042 failed"


    def test_rule_0043(self, all_results):
        """
        Test RULE-0043: YAML field 'jurisdictional_compliance.compliance_basis' must equal 'EU MiCA Arti
        Priority: CRITICAL
        """
        assert "RULE-0043" in all_results['results'], "Rule RULE-0043 missing"
        result = all_results['results']["RULE-0043"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0043 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0043 failed"


    def test_rule_0044(self, all_results):
        """
        Test RULE-0044: YAML field 'jurisdictional_compliance.regulatory_exemptions' must equal 'Utility
        Priority: HIGH
        """
        assert "RULE-0044" in all_results['results'], "Rule RULE-0044 missing"
        result = all_results['results']["RULE-0044"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "HIGH" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0044 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0044 failed"


    def test_rule_0045(self, all_results):
        """
        Test RULE-0045: YAML field 'risk_mitigation.no_fiat_pegging' must equal 'True'
        Priority: CRITICAL
        """
        assert "RULE-0045" in all_results['results'], "Rule RULE-0045 missing"
        result = all_results['results']["RULE-0045"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0045 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0045 failed"


    def test_rule_0046(self, all_results):
        """
        Test RULE-0046: YAML field 'risk_mitigation.no_redemption_mechanism' must equal 'True'
        Priority: CRITICAL
        """
        assert "RULE-0046" in all_results['results'], "Rule RULE-0046 missing"
        result = all_results['results']["RULE-0046"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0046 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0046 failed"


    def test_rule_0047(self, all_results):
        """
        Test RULE-0047: YAML field 'risk_mitigation.no_yield_promises' must equal 'True'
        Priority: CRITICAL
        """
        assert "RULE-0047" in all_results['results'], "Rule RULE-0047 missing"
        result = all_results['results']["RULE-0047"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0047 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0047 failed"


    def test_rule_0048(self, all_results):
        """
        Test RULE-0048: YAML field 'risk_mitigation.no_marketing_investment' must equal 'True'
        Priority: CRITICAL
        """
        assert "RULE-0048" in all_results['results'], "Rule RULE-0048 missing"
        result = all_results['results']["RULE-0048"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0048 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0048 failed"


    def test_rule_0049(self, all_results):
        """
        Test RULE-0049: YAML field 'risk_mitigation.clear_utility_purpose' must equal 'True'
        Priority: CRITICAL
        """
        assert "RULE-0049" in all_results['results'], "Rule RULE-0049 missing"
        result = all_results['results']["RULE-0049"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0049 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0049 failed"


    def test_rule_0050(self, all_results):
        """
        Test RULE-0050: YAML field 'risk_mitigation.open_source_license' must equal 'Apache 2.0'
        Priority: MEDIUM
        """
        assert "RULE-0050" in all_results['results'], "Rule RULE-0050 missing"
        result = all_results['results']["RULE-0050"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0050 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0050 failed"


    def test_rule_0051(self, all_results):
        """
        Test RULE-0051: YAML line: version: "1.0"
        Priority: MEDIUM
        """
        assert "RULE-0051" in all_results['results'], "Rule RULE-0051 missing"
        result = all_results['results']["RULE-0051"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0051 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0051 failed"


    def test_rule_0052(self, all_results):
        """
        Test RULE-0052: YAML line: date: "2025-09-15"
        Priority: MEDIUM
        """
        assert "RULE-0052" in all_results['results'], "Rule RULE-0052 missing"
        result = all_results['results']["RULE-0052"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0052 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0052 failed"


    def test_rule_0053(self, all_results):
        """
        Test RULE-0053: YAML line: deprecated: false
        Priority: MEDIUM
        """
        assert "RULE-0053" in all_results['results'], "Rule RULE-0053 missing"
        result = all_results['results']["RULE-0053"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0053 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0053 failed"


    def test_rule_0054(self, all_results):
        """
        Test RULE-0054: YAML line: classification: "PUBLIC - Token Framework Standards"
        Priority: HIGH
        """
        assert "RULE-0054" in all_results['results'], "Rule RULE-0054 missing"
        result = all_results['results']["RULE-0054"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "HIGH" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0054 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0054 failed"


    def test_rule_0055(self, all_results):
        """
        Test RULE-0055: YAML line: token_definition:
        Priority: MEDIUM
        """
        assert "RULE-0055" in all_results['results'], "Rule RULE-0055 missing"
        result = all_results['results']["RULE-0055"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0055 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0055 failed"


    def test_rule_0056(self, all_results):
        """
        Test RULE-0056: YAML line: purpose: ["utility", "governance", "reward"]
        Priority: MEDIUM
        """
        assert "RULE-0056" in all_results['results'], "Rule RULE-0056 missing"
        result = all_results['results']["RULE-0056"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0056 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0056 failed"


    def test_rule_0057(self, all_results):
        """
        Test RULE-0057: YAML line: explicit_exclusions: ["investment", "security", "e_money", "yield_bea
        Priority: CRITICAL
        """
        assert "RULE-0057" in all_results['results'], "Rule RULE-0057 missing"
        result = all_results['results']["RULE-0057"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0057 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0057 failed"


    def test_rule_0058(self, all_results):
        """
        Test RULE-0058: YAML line: legal_position: "Pure utility token for identity verification service
        Priority: CRITICAL
        """
        assert "RULE-0058" in all_results['results'], "Rule RULE-0058 missing"
        result = all_results['results']["RULE-0058"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0058 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0058 failed"


    def test_rule_0059(self, all_results):
        """
        Test RULE-0059: YAML line: technical_specification:
        Priority: MEDIUM
        """
        assert "RULE-0059" in all_results['results'], "Rule RULE-0059 missing"
        result = all_results['results']["RULE-0059"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0059 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0059 failed"


    def test_rule_0060(self, all_results):
        """
        Test RULE-0060: YAML line: blockchain: "Polygon (EVM Compatible)"
        Priority: MEDIUM
        """
        assert "RULE-0060" in all_results['results'], "Rule RULE-0060 missing"
        result = all_results['results']["RULE-0060"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0060 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0060 failed"


    def test_rule_0061(self, all_results):
        """
        Test RULE-0061: YAML line: standard: "ERC-20 Compatible"
        Priority: HIGH
        """
        assert "RULE-0061" in all_results['results'], "Rule RULE-0061 missing"
        result = all_results['results']["RULE-0061"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "HIGH" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0061 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0061 failed"


    def test_rule_0062(self, all_results):
        """
        Test RULE-0062: YAML line: supply_model: "Fixed cap with deflationary mechanisms"
        Priority: MEDIUM
        """
        assert "RULE-0062" in all_results['results'], "Rule RULE-0062 missing"
        result = all_results['results']["RULE-0062"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0062 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0062 failed"


    def test_rule_0063(self, all_results):
        """
        Test RULE-0063: YAML line: custody_model: "Non-custodial by design"
        Priority: MEDIUM
        """
        assert "RULE-0063" in all_results['results'], "Rule RULE-0063 missing"
        result = all_results['results']["RULE-0063"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0063 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0063 failed"


    def test_rule_0064(self, all_results):
        """
        Test RULE-0064: YAML line: smart_contract_automation: "Full autonomous distribution"
        Priority: MEDIUM
        """
        assert "RULE-0064" in all_results['results'], "Rule RULE-0064 missing"
        result = all_results['results']["RULE-0064"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0064 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0064 failed"


    def test_rule_0065(self, all_results):
        """
        Test RULE-0065: YAML line: fee_structure:
        Priority: MEDIUM
        """
        assert "RULE-0065" in all_results['results'], "Rule RULE-0065 missing"
        result = all_results['results']["RULE-0065"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0065 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0065 failed"


    def test_rule_0066(self, all_results):
        """
        Test RULE-0066: YAML line: scope: "identity_verification_payments_only"
        Priority: MEDIUM
        """
        assert "RULE-0066" in all_results['results'], "Rule RULE-0066 missing"
        result = all_results['results']["RULE-0066"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0066 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0066 failed"


    def test_rule_0067(self, all_results):
        """
        Test RULE-0067: YAML line: total_fee: "3% of identity verification transactions"
        Priority: MEDIUM
        """
        assert "RULE-0067" in all_results['results'], "Rule RULE-0067 missing"
        result = all_results['results']["RULE-0067"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0067 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0067 failed"


    def test_rule_0068(self, all_results):
        """
        Test RULE-0068: YAML line: allocation: "1% dev (direct), 2% system treasury"
        Priority: MEDIUM
        """
        assert "RULE-0068" in all_results['results'], "Rule RULE-0068 missing"
        result = all_results['results']["RULE-0068"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0068 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0068 failed"


    def test_rule_0069(self, all_results):
        """
        Test RULE-0069: YAML line: burn_from_system_fee: "50% of 2% with daily/monthly caps"
        Priority: MEDIUM
        """
        assert "RULE-0069" in all_results['results'], "Rule RULE-0069 missing"
        result = all_results['results']["RULE-0069"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0069 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0069 failed"


    def test_rule_0070(self, all_results):
        """
        Test RULE-0070: YAML line: fee_collection: "Smart contract automated"
        Priority: MEDIUM
        """
        assert "RULE-0070" in all_results['results'], "Rule RULE-0070 missing"
        result = all_results['results']["RULE-0070"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0070 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0070 failed"


    def test_rule_0071(self, all_results):
        """
        Test RULE-0071: YAML line: no_manual_intervention: true
        Priority: MEDIUM
        """
        assert "RULE-0071" in all_results['results'], "Rule RULE-0071 missing"
        result = all_results['results']["RULE-0071"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0071 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0071 failed"


    def test_rule_0072(self, all_results):
        """
        Test RULE-0072: YAML line: legal_safe_harbor:
        Priority: CRITICAL
        """
        assert "RULE-0072" in all_results['results'], "Rule RULE-0072 missing"
        result = all_results['results']["RULE-0072"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0072 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0072 failed"


    def test_rule_0073(self, all_results):
        """
        Test RULE-0073: YAML line: security_token: false
        Priority: CRITICAL
        """
        assert "RULE-0073" in all_results['results'], "Rule RULE-0073 missing"
        result = all_results['results']["RULE-0073"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0073 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0073 failed"


    def test_rule_0074(self, all_results):
        """
        Test RULE-0074: YAML line: e_money_token: false
        Priority: MEDIUM
        """
        assert "RULE-0074" in all_results['results'], "Rule RULE-0074 missing"
        result = all_results['results']["RULE-0074"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0074 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0074 failed"


    def test_rule_0075(self, all_results):
        """
        Test RULE-0075: YAML line: stablecoin: false
        Priority: MEDIUM
        """
        assert "RULE-0075" in all_results['results'], "Rule RULE-0075 missing"
        result = all_results['results']["RULE-0075"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0075 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0075 failed"


    def test_rule_0076(self, all_results):
        """
        Test RULE-0076: YAML line: yield_bearing: false
        Priority: MEDIUM
        """
        assert "RULE-0076" in all_results['results'], "Rule RULE-0076 missing"
        result = all_results['results']["RULE-0076"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0076 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0076 failed"


    def test_rule_0077(self, all_results):
        """
        Test RULE-0077: YAML line: redemption_rights: false
        Priority: MEDIUM
        """
        assert "RULE-0077" in all_results['results'], "Rule RULE-0077 missing"
        result = all_results['results']["RULE-0077"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0077 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0077 failed"


    def test_rule_0078(self, all_results):
        """
        Test RULE-0078: YAML line: passive_income: false
        Priority: MEDIUM
        """
        assert "RULE-0078" in all_results['results'], "Rule RULE-0078 missing"
        result = all_results['results']["RULE-0078"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0078 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0078 failed"


    def test_rule_0079(self, all_results):
        """
        Test RULE-0079: YAML line: investment_contract: false
        Priority: MEDIUM
        """
        assert "RULE-0079" in all_results['results'], "Rule RULE-0079 missing"
        result = all_results['results']["RULE-0079"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0079 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0079 failed"


    def test_rule_0080(self, all_results):
        """
        Test RULE-0080: YAML line: admin_controls: "No privileged admin keys. Proxy owner = DAO Timelock
        Priority: MEDIUM
        """
        assert "RULE-0080" in all_results['results'], "Rule RULE-0080 missing"
        result = all_results['results']["RULE-0080"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0080 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0080 failed"


    def test_rule_0081(self, all_results):
        """
        Test RULE-0081: YAML line: upgrade_mechanism: "On-chain proposals only via DAO governance"
        Priority: MEDIUM
        """
        assert "RULE-0081" in all_results['results'], "Rule RULE-0081 missing"
        result = all_results['results']["RULE-0081"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0081 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0081 failed"


    def test_rule_0082(self, all_results):
        """
        Test RULE-0082: YAML line: business_model:
        Priority: MEDIUM
        """
        assert "RULE-0082" in all_results['results'], "Rule RULE-0082 missing"
        result = all_results['results']["RULE-0082"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0082 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0082 failed"


    def test_rule_0083(self, all_results):
        """
        Test RULE-0083: YAML line: role: "Technology publisher and open source maintainer"
        Priority: MEDIUM
        """
        assert "RULE-0083" in all_results['results'], "Rule RULE-0083 missing"
        result = all_results['results']["RULE-0083"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0083 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0083 failed"


    def test_rule_0084(self, all_results):
        """
        Test RULE-0084: YAML line: not_role: ["payment_service_provider", "custodian", "operator", "exch
        Priority: MEDIUM
        """
        assert "RULE-0084" in all_results['results'], "Rule RULE-0084 missing"
        result = all_results['results']["RULE-0084"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0084 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0084 failed"


    def test_rule_0085(self, all_results):
        """
        Test RULE-0085: YAML line: user_interactions: "Direct peer-to-peer via smart contracts"
        Priority: MEDIUM
        """
        assert "RULE-0085" in all_results['results'], "Rule RULE-0085 missing"
        result = all_results['results']["RULE-0085"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0085 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0085 failed"


    def test_rule_0086(self, all_results):
        """
        Test RULE-0086: YAML line: kyc_responsibility: "Third-party KYC providers (users pay directly)"
        Priority: MEDIUM
        """
        assert "RULE-0086" in all_results['results'], "Rule RULE-0086 missing"
        result = all_results['results']["RULE-0086"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0086 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0086 failed"


    def test_rule_0087(self, all_results):
        """
        Test RULE-0087: YAML line: data_custody: "Zero personal data on-chain"
        Priority: MEDIUM
        """
        assert "RULE-0087" in all_results['results'], "Rule RULE-0087 missing"
        result = all_results['results']["RULE-0087"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0087 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0087 failed"


    def test_rule_0088(self, all_results):
        """
        Test RULE-0088: YAML line: governance_framework:
        Priority: MEDIUM
        """
        assert "RULE-0088" in all_results['results'], "Rule RULE-0088 missing"
        result = all_results['results']["RULE-0088"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0088 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0088 failed"


    def test_rule_0089(self, all_results):
        """
        Test RULE-0089: YAML line: dao_ready: true
        Priority: MEDIUM
        """
        assert "RULE-0089" in all_results['results'], "Rule RULE-0089 missing"
        result = all_results['results']["RULE-0089"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0089 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0089 failed"


    def test_rule_0090(self, all_results):
        """
        Test RULE-0090: YAML line: voting_mechanism: "Token-weighted governance"
        Priority: MEDIUM
        """
        assert "RULE-0090" in all_results['results'], "Rule RULE-0090 missing"
        result = all_results['results']["RULE-0090"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0090 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0090 failed"


    def test_rule_0091(self, all_results):
        """
        Test RULE-0091: YAML line: proposal_system: "Snapshot + on-chain execution"
        Priority: MEDIUM
        """
        assert "RULE-0091" in all_results['results'], "Rule RULE-0091 missing"
        result = all_results['results']["RULE-0091"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0091 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0091 failed"


    def test_rule_0092(self, all_results):
        """
        Test RULE-0092: YAML line: upgrade_authority: "DAO only (no admin keys)"
        Priority: MEDIUM
        """
        assert "RULE-0092" in all_results['results'], "Rule RULE-0092 missing"
        result = all_results['results']["RULE-0092"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0092 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0092 failed"


    def test_rule_0093(self, all_results):
        """
        Test RULE-0093: YAML line: emergency_procedures: "Community multisig"
        Priority: MEDIUM
        """
        assert "RULE-0093" in all_results['results'], "Rule RULE-0093 missing"
        result = all_results['results']["RULE-0093"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0093 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0093 failed"


    def test_rule_0094(self, all_results):
        """
        Test RULE-0094: YAML line: reference: "See detailed governance_parameters section below for quor
        Priority: MEDIUM
        """
        assert "RULE-0094" in all_results['results'], "Rule RULE-0094 missing"
        result = all_results['results']["RULE-0094"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0094 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0094 failed"


    def test_rule_0095(self, all_results):
        """
        Test RULE-0095: YAML line: jurisdictional_compliance:
        Priority: CRITICAL
        """
        assert "RULE-0095" in all_results['results'], "Rule RULE-0095 missing"
        result = all_results['results']["RULE-0095"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0095 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0095 failed"


    def test_rule_0096(self, all_results):
        """
        Test RULE-0096: YAML line: reference: "See 23_compliance/jurisdictions/coverage_matrix.yaml for 
        Priority: CRITICAL
        """
        assert "RULE-0096" in all_results['results'], "Rule RULE-0096 missing"
        result = all_results['results']["RULE-0096"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0096 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0096 failed"


    def test_rule_0097(self, all_results):
        """
        Test RULE-0097: YAML line: blacklist_jurisdictions: ["IR", "KP", "SY", "CU"]
        Priority: MEDIUM
        """
        assert "RULE-0097" in all_results['results'], "Rule RULE-0097 missing"
        result = all_results['results']["RULE-0097"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0097 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0097 failed"


    def test_rule_0098(self, all_results):
        """
        Test RULE-0098: YAML line: excluded_entities:
        Priority: MEDIUM
        """
        assert "RULE-0098" in all_results['results'], "Rule RULE-0098 missing"
        result = all_results['results']["RULE-0098"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0098 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0098 failed"


    def test_rule_0099(self, all_results):
        """
        Test RULE-0099: YAML line: - "RU_designated_entities"
        Priority: MEDIUM
        """
        assert "RULE-0099" in all_results['results'], "Rule RULE-0099 missing"
        result = all_results['results']["RULE-0099"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0099 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0099 failed"


    def test_rule_0100(self, all_results):
        """
        Test RULE-0100: YAML line: - "Belarus_designated_entities"
        Priority: MEDIUM
        """
        assert "RULE-0100" in all_results['results'], "Rule RULE-0100 missing"
        result = all_results['results']["RULE-0100"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0100 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0100 failed"


    def test_rule_0101(self, all_results):
        """
        Test RULE-0101: YAML line: - "Venezuela_government_entities"
        Priority: MEDIUM
        """
        assert "RULE-0101" in all_results['results'], "Rule RULE-0101 missing"
        result = all_results['results']["RULE-0101"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0101 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0101 failed"


    def test_rule_0102(self, all_results):
        """
        Test RULE-0102: YAML line: excluded_markets: ["India", "Pakistan", "Myanmar"]
        Priority: MEDIUM
        """
        assert "RULE-0102" in all_results['results'], "Rule RULE-0102 missing"
        result = all_results['results']["RULE-0102"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0102 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0102 failed"


    def test_rule_0103(self, all_results):
        """
        Test RULE-0103: YAML line: compliance_basis: "EU MiCA Article 3 + US Howey Test"
        Priority: CRITICAL
        """
        assert "RULE-0103" in all_results['results'], "Rule RULE-0103 missing"
        result = all_results['results']["RULE-0103"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0103 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0103 failed"


    def test_rule_0104(self, all_results):
        """
        Test RULE-0104: YAML line: regulatory_exemptions: "Utility token exemption"
        Priority: MEDIUM
        """
        assert "RULE-0104" in all_results['results'], "Rule RULE-0104 missing"
        result = all_results['results']["RULE-0104"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0104 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0104 failed"


    def test_rule_0105(self, all_results):
        """
        Test RULE-0105: YAML line: risk_mitigation:
        Priority: MEDIUM
        """
        assert "RULE-0105" in all_results['results'], "Rule RULE-0105 missing"
        result = all_results['results']["RULE-0105"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0105 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0105 failed"


    def test_rule_0106(self, all_results):
        """
        Test RULE-0106: YAML line: no_fiat_pegging: true
        Priority: MEDIUM
        """
        assert "RULE-0106" in all_results['results'], "Rule RULE-0106 missing"
        result = all_results['results']["RULE-0106"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0106 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0106 failed"


    def test_rule_0107(self, all_results):
        """
        Test RULE-0107: YAML line: no_redemption_mechanism: true
        Priority: MEDIUM
        """
        assert "RULE-0107" in all_results['results'], "Rule RULE-0107 missing"
        result = all_results['results']["RULE-0107"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0107 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0107 failed"


    def test_rule_0108(self, all_results):
        """
        Test RULE-0108: YAML line: no_yield_promises: true
        Priority: MEDIUM
        """
        assert "RULE-0108" in all_results['results'], "Rule RULE-0108 missing"
        result = all_results['results']["RULE-0108"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0108 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0108 failed"


    def test_rule_0109(self, all_results):
        """
        Test RULE-0109: YAML line: no_marketing_investment: true
        Priority: MEDIUM
        """
        assert "RULE-0109" in all_results['results'], "Rule RULE-0109 missing"
        result = all_results['results']["RULE-0109"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0109 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0109 failed"


    def test_rule_0110(self, all_results):
        """
        Test RULE-0110: YAML line: clear_utility_purpose: true
        Priority: MEDIUM
        """
        assert "RULE-0110" in all_results['results'], "Rule RULE-0110 missing"
        result = all_results['results']["RULE-0110"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0110 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0110 failed"


    def test_rule_0111(self, all_results):
        """
        Test RULE-0111: YAML line: open_source_license: "Apache 2.0"
        Priority: MEDIUM
        """
        assert "RULE-0111" in all_results['results'], "Rule RULE-0111 missing"
        result = all_results['results']["RULE-0111"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0111 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0111 failed"


    def test_rule_0112(self, all_results):
        """
        Test RULE-0112: YAML field 'version' must equal '1.0'
        Priority: HIGH
        """
        assert "RULE-0112" in all_results['results'], "Rule RULE-0112 missing"
        result = all_results['results']["RULE-0112"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "HIGH" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0112 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0112 failed"


    def test_rule_0113(self, all_results):
        """
        Test RULE-0113: YAML field 'date' must equal '2025-09-15'
        Priority: MEDIUM
        """
        assert "RULE-0113" in all_results['results'], "Rule RULE-0113 missing"
        result = all_results['results']["RULE-0113"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0113 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0113 failed"


    def test_rule_0114(self, all_results):
        """
        Test RULE-0114: YAML field 'deprecated' must equal 'False'
        Priority: CRITICAL
        """
        assert "RULE-0114" in all_results['results'], "Rule RULE-0114 missing"
        result = all_results['results']["RULE-0114"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0114 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0114 failed"


    def test_rule_0115(self, all_results):
        """
        Test RULE-0115: YAML field 'primary_utilities.identity_verification.description' must equal 'Pay
        Priority: MEDIUM
        """
        assert "RULE-0115" in all_results['results'], "Rule RULE-0115 missing"
        result = all_results['results']["RULE-0115"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0115 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0115 failed"


    def test_rule_0116(self, all_results):
        """
        Test RULE-0116: YAML field 'primary_utilities.identity_verification.smart_contract' must equal '
        Priority: HIGH
        """
        assert "RULE-0116" in all_results['results'], "Rule RULE-0116 missing"
        result = all_results['results']["RULE-0116"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "HIGH" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0116 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0116 failed"


    def test_rule_0117(self, all_results):
        """
        Test RULE-0117: YAML field 'primary_utilities.identity_verification.fee_burn_mechanism' must equ
        Priority: HIGH
        """
        assert "RULE-0117" in all_results['results'], "Rule RULE-0117 missing"
        result = all_results['results']["RULE-0117"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "HIGH" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0117 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0117 failed"


    def test_rule_0118(self, all_results):
        """
        Test RULE-0118: YAML field 'primary_utilities.identity_verification.burn_source_note' must equal
        Priority: MEDIUM
        """
        assert "RULE-0118" in all_results['results'], "Rule RULE-0118 missing"
        result = all_results['results']["RULE-0118"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0118 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0118 failed"


    def test_rule_0119(self, all_results):
        """
        Test RULE-0119: YAML field 'primary_utilities.identity_verification.burn_clarification' must equ
        Priority: CRITICAL
        """
        assert "RULE-0119" in all_results['results'], "Rule RULE-0119 missing"
        result = all_results['results']["RULE-0119"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0119 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0119 failed"


    def test_rule_0120(self, all_results):
        """
        Test RULE-0120: YAML field 'primary_utilities.governance_participation.description' must equal '
        Priority: MEDIUM
        """
        assert "RULE-0120" in all_results['results'], "Rule RULE-0120 missing"
        result = all_results['results']["RULE-0120"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0120 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0120 failed"


    def test_rule_0121(self, all_results):
        """
        Test RULE-0121: YAML field 'primary_utilities.governance_participation.voting_weight' must equal
        Priority: HIGH
        """
        assert "RULE-0121" in all_results['results'], "Rule RULE-0121 missing"
        result = all_results['results']["RULE-0121"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "HIGH" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0121 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0121 failed"


    def test_rule_0122(self, all_results):
        """
        Test RULE-0122: YAML field 'primary_utilities.governance_participation.proposal_threshold' must 
        Priority: MEDIUM
        """
        assert "RULE-0122" in all_results['results'], "Rule RULE-0122 missing"
        result = all_results['results']["RULE-0122"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0122 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0122 failed"


    def test_rule_0123(self, all_results):
        """
        Test RULE-0123: YAML field 'primary_utilities.ecosystem_rewards.description' must equal 'Reward 
        Priority: MEDIUM
        """
        assert "RULE-0123" in all_results['results'], "Rule RULE-0123 missing"
        result = all_results['results']["RULE-0123"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0123 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0123 failed"


    def test_rule_0124(self, all_results):
        """
        Test RULE-0124: YAML field 'primary_utilities.ecosystem_rewards.distribution_method' must equal 
        Priority: MEDIUM
        """
        assert "RULE-0124" in all_results['results'], "Rule RULE-0124 missing"
        result = all_results['results']["RULE-0124"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0124 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0124 failed"


    def test_rule_0125(self, all_results):
        """
        Test RULE-0125: YAML list 'primary_utilities.ecosystem_rewards.reward_pools' must contain 3 elem
        Priority: MEDIUM
        """
        assert "RULE-0125" in all_results['results'], "Rule RULE-0125 missing"
        result = all_results['results']["RULE-0125"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0125 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0125 failed"


    def test_rule_0126(self, all_results):
        """
        Test RULE-0126: YAML field 'primary_utilities.staking_utility.description' must equal 'Stake tok
        Priority: HIGH
        """
        assert "RULE-0126" in all_results['results'], "Rule RULE-0126 missing"
        result = all_results['results']["RULE-0126"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "HIGH" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0126 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0126 failed"


    def test_rule_0127(self, all_results):
        """
        Test RULE-0127: YAML field 'primary_utilities.staking_utility.staking_rewards' must equal 'Servi
        Priority: MEDIUM
        """
        assert "RULE-0127" in all_results['results'], "Rule RULE-0127 missing"
        result = all_results['results']["RULE-0127"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0127 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0127 failed"


    def test_rule_0128(self, all_results):
        """
        Test RULE-0128: YAML field 'primary_utilities.staking_utility.slashing_conditions' must equal 'F
        Priority: CRITICAL
        """
        assert "RULE-0128" in all_results['results'], "Rule RULE-0128 missing"
        result = all_results['results']["RULE-0128"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0128 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0128 failed"


    def test_rule_0129(self, all_results):
        """
        Test RULE-0129: YAML field 'compliance_utilities.audit_payments' must equal 'Pay for compliance 
        Priority: CRITICAL
        """
        assert "RULE-0129" in all_results['results'], "Rule RULE-0129 missing"
        result = all_results['results']["RULE-0129"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0129 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0129 failed"


    def test_rule_0130(self, all_results):
        """
        Test RULE-0130: YAML field 'compliance_utilities.regulatory_reporting' must equal 'Submit regula
        Priority: HIGH
        """
        assert "RULE-0130" in all_results['results'], "Rule RULE-0130 missing"
        result = all_results['results']["RULE-0130"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "HIGH" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0130 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0130 failed"


    def test_rule_0131(self, all_results):
        """
        Test RULE-0131: YAML field 'compliance_utilities.legal_attestations' must equal 'Create verifiab
        Priority: CRITICAL
        """
        assert "RULE-0131" in all_results['results'], "Rule RULE-0131 missing"
        result = all_results['results']["RULE-0131"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0131 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0131 failed"


    def test_rule_0132(self, all_results):
        """
        Test RULE-0132: YAML field 'secondary_utilities.marketplace_access' must equal 'Access to identi
        Priority: MEDIUM
        """
        assert "RULE-0132" in all_results['results'], "Rule RULE-0132 missing"
        result = all_results['results']["RULE-0132"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0132 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0132 failed"


    def test_rule_0133(self, all_results):
        """
        Test RULE-0133: YAML field 'secondary_utilities.premium_features' must equal 'Enhanced verificat
        Priority: MEDIUM
        """
        assert "RULE-0133" in all_results['results'], "Rule RULE-0133 missing"
        result = all_results['results']["RULE-0133"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0133 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0133 failed"


    def test_rule_0134(self, all_results):
        """
        Test RULE-0134: YAML field 'secondary_utilities.api_access' must equal 'Developer API rate limit
        Priority: MEDIUM
        """
        assert "RULE-0134" in all_results['results'], "Rule RULE-0134 missing"
        result = all_results['results']["RULE-0134"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0134 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0134 failed"


    def test_rule_0135(self, all_results):
        """
        Test RULE-0135: YAML field 'secondary_utilities.data_portability' must equal 'Export/import veri
        Priority: MEDIUM
        """
        assert "RULE-0135" in all_results['results'], "Rule RULE-0135 missing"
        result = all_results['results']["RULE-0135"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0135 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0135 failed"


    def test_rule_0136(self, all_results):
        """
        Test RULE-0136: YAML line: version: "1.0"
        Priority: MEDIUM
        """
        assert "RULE-0136" in all_results['results'], "Rule RULE-0136 missing"
        result = all_results['results']["RULE-0136"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0136 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0136 failed"


    def test_rule_0137(self, all_results):
        """
        Test RULE-0137: YAML line: date: "2025-09-15"
        Priority: MEDIUM
        """
        assert "RULE-0137" in all_results['results'], "Rule RULE-0137 missing"
        result = all_results['results']["RULE-0137"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0137 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0137 failed"


    def test_rule_0138(self, all_results):
        """
        Test RULE-0138: YAML line: deprecated: false
        Priority: MEDIUM
        """
        assert "RULE-0138" in all_results['results'], "Rule RULE-0138 missing"
        result = all_results['results']["RULE-0138"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0138 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0138 failed"


    def test_rule_0139(self, all_results):
        """
        Test RULE-0139: YAML line: primary_utilities:
        Priority: MEDIUM
        """
        assert "RULE-0139" in all_results['results'], "Rule RULE-0139 missing"
        result = all_results['results']["RULE-0139"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0139 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0139 failed"


    def test_rule_0140(self, all_results):
        """
        Test RULE-0140: YAML line: identity_verification:
        Priority: MEDIUM
        """
        assert "RULE-0140" in all_results['results'], "Rule RULE-0140 missing"
        result = all_results['results']["RULE-0140"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0140 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0140 failed"


    def test_rule_0141(self, all_results):
        """
        Test RULE-0141: YAML line: description: "Pay for identity score calculations and verifications"
        Priority: MEDIUM
        """
        assert "RULE-0141" in all_results['results'], "Rule RULE-0141 missing"
        result = all_results['results']["RULE-0141"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0141 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0141 failed"


    def test_rule_0142(self, all_results):
        """
        Test RULE-0142: YAML line: smart_contract: "20_foundation/tokenomics/contracts/verification_paym
        Priority: MEDIUM
        """
        assert "RULE-0142" in all_results['results'], "Rule RULE-0142 missing"
        result = all_results['results']["RULE-0142"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0142 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0142 failed"


    def test_rule_0143(self, all_results):
        """
        Test RULE-0143: YAML line: fee_burn_mechanism: "Deflationary token economics"
        Priority: MEDIUM
        """
        assert "RULE-0143" in all_results['results'], "Rule RULE-0143 missing"
        result = all_results['results']["RULE-0143"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0143 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0143 failed"


    def test_rule_0144(self, all_results):
        """
        Test RULE-0144: YAML line: burn_source_note: "Burns originate exclusively from treasury portion 
        Priority: MEDIUM
        """
        assert "RULE-0144" in all_results['results'], "Rule RULE-0144 missing"
        result = all_results['results']["RULE-0144"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0144 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0144 failed"


    def test_rule_0145(self, all_results):
        """
        Test RULE-0145: YAML line: burn_clarification: "No manual/admin burns. Programmatic burns allowe
        Priority: MEDIUM
        """
        assert "RULE-0145" in all_results['results'], "Rule RULE-0145 missing"
        result = all_results['results']["RULE-0145"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0145 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0145 failed"


    def test_rule_0146(self, all_results):
        """
        Test RULE-0146: YAML line: governance_participation:
        Priority: MEDIUM
        """
        assert "RULE-0146" in all_results['results'], "Rule RULE-0146 missing"
        result = all_results['results']["RULE-0146"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0146 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0146 failed"


    def test_rule_0147(self, all_results):
        """
        Test RULE-0147: YAML line: description: "Vote on protocol upgrades and parameter changes"
        Priority: MEDIUM
        """
        assert "RULE-0147" in all_results['results'], "Rule RULE-0147 missing"
        result = all_results['results']["RULE-0147"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0147 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0147 failed"


    def test_rule_0148(self, all_results):
        """
        Test RULE-0148: YAML line: voting_weight: "Linear token holdings"
        Priority: MEDIUM
        """
        assert "RULE-0148" in all_results['results'], "Rule RULE-0148 missing"
        result = all_results['results']["RULE-0148"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0148 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0148 failed"


    def test_rule_0149(self, all_results):
        """
        Test RULE-0149: YAML line: proposal_threshold: "1% of total supply to propose"
        Priority: MEDIUM
        """
        assert "RULE-0149" in all_results['results'], "Rule RULE-0149 missing"
        result = all_results['results']["RULE-0149"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0149 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0149 failed"


    def test_rule_0150(self, all_results):
        """
        Test RULE-0150: YAML line: ecosystem_rewards:
        Priority: MEDIUM
        """
        assert "RULE-0150" in all_results['results'], "Rule RULE-0150 missing"
        result = all_results['results']["RULE-0150"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0150 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0150 failed"


    def test_rule_0151(self, all_results):
        """
        Test RULE-0151: YAML line: description: "Reward validators, contributors, and ecosystem particip
        Priority: MEDIUM
        """
        assert "RULE-0151" in all_results['results'], "Rule RULE-0151 missing"
        result = all_results['results']["RULE-0151"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0151 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0151 failed"


    def test_rule_0152(self, all_results):
        """
        Test RULE-0152: YAML line: distribution_method: "Merit-based allocation via DAO"
        Priority: MEDIUM
        """
        assert "RULE-0152" in all_results['results'], "Rule RULE-0152 missing"
        result = all_results['results']["RULE-0152"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0152 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0152 failed"


    def test_rule_0153(self, all_results):
        """
        Test RULE-0153: YAML line: reward_pools: ["validation", "development", "community"]
        Priority: MEDIUM
        """
        assert "RULE-0153" in all_results['results'], "Rule RULE-0153 missing"
        result = all_results['results']["RULE-0153"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0153 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0153 failed"


    def test_rule_0154(self, all_results):
        """
        Test RULE-0154: YAML line: staking_utility:
        Priority: MEDIUM
        """
        assert "RULE-0154" in all_results['results'], "Rule RULE-0154 missing"
        result = all_results['results']["RULE-0154"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0154 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0154 failed"


    def test_rule_0155(self, all_results):
        """
        Test RULE-0155: YAML line: description: "Stake tokens for enhanced verification services"
        Priority: MEDIUM
        """
        assert "RULE-0155" in all_results['results'], "Rule RULE-0155 missing"
        result = all_results['results']["RULE-0155"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0155 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0155 failed"


    def test_rule_0156(self, all_results):
        """
        Test RULE-0156: YAML line: staking_rewards: "Service fee discounts (not yield)"
        Priority: MEDIUM
        """
        assert "RULE-0156" in all_results['results'], "Rule RULE-0156 missing"
        result = all_results['results']["RULE-0156"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0156 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0156 failed"


    def test_rule_0157(self, all_results):
        """
        Test RULE-0157: YAML line: slashing_conditions: "False verification penalties"
        Priority: MEDIUM
        """
        assert "RULE-0157" in all_results['results'], "Rule RULE-0157 missing"
        result = all_results['results']["RULE-0157"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0157 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0157 failed"


    def test_rule_0158(self, all_results):
        """
        Test RULE-0158: YAML line: compliance_utilities:
        Priority: CRITICAL
        """
        assert "RULE-0158" in all_results['results'], "Rule RULE-0158 missing"
        result = all_results['results']["RULE-0158"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0158 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0158 failed"


    def test_rule_0159(self, all_results):
        """
        Test RULE-0159: YAML line: audit_payments: "Pay for compliance audit services"
        Priority: CRITICAL
        """
        assert "RULE-0159" in all_results['results'], "Rule RULE-0159 missing"
        result = all_results['results']["RULE-0159"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0159 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0159 failed"


    def test_rule_0160(self, all_results):
        """
        Test RULE-0160: YAML line: regulatory_reporting: "Submit regulatory reports with token fees"
        Priority: MEDIUM
        """
        assert "RULE-0160" in all_results['results'], "Rule RULE-0160 missing"
        result = all_results['results']["RULE-0160"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0160 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0160 failed"


    def test_rule_0161(self, all_results):
        """
        Test RULE-0161: YAML line: legal_attestations: "Create verifiable compliance attestations"
        Priority: CRITICAL
        """
        assert "RULE-0161" in all_results['results'], "Rule RULE-0161 missing"
        result = all_results['results']["RULE-0161"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0161 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0161 failed"


    def test_rule_0162(self, all_results):
        """
        Test RULE-0162: YAML line: secondary_utilities:
        Priority: MEDIUM
        """
        assert "RULE-0162" in all_results['results'], "Rule RULE-0162 missing"
        result = all_results['results']["RULE-0162"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0162 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0162 failed"


    def test_rule_0163(self, all_results):
        """
        Test RULE-0163: YAML line: marketplace_access: "Access to identity verification marketplace"
        Priority: MEDIUM
        """
        assert "RULE-0163" in all_results['results'], "Rule RULE-0163 missing"
        result = all_results['results']["RULE-0163"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0163 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0163 failed"


    def test_rule_0164(self, all_results):
        """
        Test RULE-0164: YAML line: premium_features: "Enhanced verification algorithms"
        Priority: MEDIUM
        """
        assert "RULE-0164" in all_results['results'], "Rule RULE-0164 missing"
        result = all_results['results']["RULE-0164"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0164 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0164 failed"


    def test_rule_0165(self, all_results):
        """
        Test RULE-0165: YAML line: api_access: "Developer API rate limiting and access control"
        Priority: MEDIUM
        """
        assert "RULE-0165" in all_results['results'], "Rule RULE-0165 missing"
        result = all_results['results']["RULE-0165"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0165 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0165 failed"


    def test_rule_0166(self, all_results):
        """
        Test RULE-0166: YAML line: data_portability: "Export/import verification data"
        Priority: MEDIUM
        """
        assert "RULE-0166" in all_results['results'], "Rule RULE-0166 missing"
        result = all_results['results']["RULE-0166"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0166 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0166 failed"


    def test_rule_0167(self, all_results):
        """
        Test RULE-0167: YAML field 'version' must equal '1.0'
        Priority: HIGH
        """
        assert "RULE-0167" in all_results['results'], "Rule RULE-0167 missing"
        result = all_results['results']["RULE-0167"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "HIGH" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0167 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0167 failed"


    def test_rule_0168(self, all_results):
        """
        Test RULE-0168: YAML field 'date' must equal '2025-09-21'
        Priority: MEDIUM
        """
        assert "RULE-0168" in all_results['results'], "Rule RULE-0168 missing"
        result = all_results['results']["RULE-0168"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0168 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0168 failed"


    def test_rule_0169(self, all_results):
        """
        Test RULE-0169: YAML field 'deprecated' must equal 'False'
        Priority: CRITICAL
        """
        assert "RULE-0169" in all_results['results'], "Rule RULE-0169 missing"
        result = all_results['results']["RULE-0169"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0169 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0169 failed"


    def test_rule_0170(self, all_results):
        """
        Test RULE-0170: YAML field 'supply_mechanics.total_supply' must equal '1,000,000,000 SSID'
        Priority: MEDIUM
        """
        assert "RULE-0170" in all_results['results'], "Rule RULE-0170 missing"
        result = all_results['results']["RULE-0170"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0170 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0170 failed"


    def test_rule_0171(self, all_results):
        """
        Test RULE-0171: YAML field 'supply_mechanics.initial_distribution.ecosystem_development' must eq
        Priority: MEDIUM
        """
        assert "RULE-0171" in all_results['results'], "Rule RULE-0171 missing"
        result = all_results['results']["RULE-0171"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0171 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0171 failed"


    def test_rule_0172(self, all_results):
        """
        Test RULE-0172: YAML field 'supply_mechanics.initial_distribution.community_rewards' must equal 
        Priority: MEDIUM
        """
        assert "RULE-0172" in all_results['results'], "Rule RULE-0172 missing"
        result = all_results['results']["RULE-0172"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0172 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0172 failed"


    def test_rule_0173(self, all_results):
        """
        Test RULE-0173: YAML field 'supply_mechanics.initial_distribution.team_development' must equal '
        Priority: MEDIUM
        """
        assert "RULE-0173" in all_results['results'], "Rule RULE-0173 missing"
        result = all_results['results']["RULE-0173"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0173 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0173 failed"


    def test_rule_0174(self, all_results):
        """
        Test RULE-0174: YAML field 'supply_mechanics.initial_distribution.partnerships' must equal '10%'
        Priority: MEDIUM
        """
        assert "RULE-0174" in all_results['results'], "Rule RULE-0174 missing"
        result = all_results['results']["RULE-0174"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0174 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0174 failed"


    def test_rule_0175(self, all_results):
        """
        Test RULE-0175: YAML field 'supply_mechanics.initial_distribution.reserve_fund' must equal '10%'
        Priority: MEDIUM
        """
        assert "RULE-0175" in all_results['results'], "Rule RULE-0175 missing"
        result = all_results['results']["RULE-0175"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0175 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0175 failed"


    def test_rule_0176(self, all_results):
        """
        Test RULE-0176: YAML field 'supply_mechanics.deflationary_mechanisms.governance_burning' must eq
        Priority: HIGH
        """
        assert "RULE-0176" in all_results['results'], "Rule RULE-0176 missing"
        result = all_results['results']["RULE-0176"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "HIGH" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0176 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0176 failed"


    def test_rule_0177(self, all_results):
        """
        Test RULE-0177: YAML field 'supply_mechanics.deflationary_mechanisms.staking_slashing' must equa
        Priority: CRITICAL
        """
        assert "RULE-0177" in all_results['results'], "Rule RULE-0177 missing"
        result = all_results['results']["RULE-0177"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0177 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0177 failed"


    def test_rule_0178(self, all_results):
        """
        Test RULE-0178: YAML field 'supply_mechanics.circulation_controls.max_annual_inflation' must equ
        Priority: MEDIUM
        """
        assert "RULE-0178" in all_results['results'], "Rule RULE-0178 missing"
        result = all_results['results']["RULE-0178"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0178 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0178 failed"


    def test_rule_0179(self, all_results):
        """
        Test RULE-0179: YAML field 'supply_mechanics.circulation_controls.team_vesting_schedule' must eq
        Priority: MEDIUM
        """
        assert "RULE-0179" in all_results['results'], "Rule RULE-0179 missing"
        result = all_results['results']["RULE-0179"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0179 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0179 failed"


    def test_rule_0180(self, all_results):
        """
        Test RULE-0180: YAML field 'supply_mechanics.circulation_controls.partnership_unlock' must equal
        Priority: MEDIUM
        """
        assert "RULE-0180" in all_results['results'], "Rule RULE-0180 missing"
        result = all_results['results']["RULE-0180"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0180 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0180 failed"


    def test_rule_0181(self, all_results):
        """
        Test RULE-0181: YAML field 'supply_mechanics.circulation_controls.reserve_governance' must equal
        Priority: HIGH
        """
        assert "RULE-0181" in all_results['results'], "Rule RULE-0181 missing"
        result = all_results['results']["RULE-0181"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "HIGH" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0181 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0181 failed"


    def test_rule_0182(self, all_results):
        """
        Test RULE-0182: YAML field 'fee_routing.system_fees.scope' must equal 'identity_verification_pay
        Priority: MEDIUM
        """
        assert "RULE-0182" in all_results['results'], "Rule RULE-0182 missing"
        result = all_results['results']["RULE-0182"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0182 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0182 failed"


    def test_rule_0183(self, all_results):
        """
        Test RULE-0183: YAML field 'fee_routing.system_fees.note' must equal '3% system fee applies to i
        Priority: MEDIUM
        """
        assert "RULE-0183" in all_results['results'], "Rule RULE-0183 missing"
        result = all_results['results']["RULE-0183"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0183 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0183 failed"


    def test_rule_0184(self, all_results):
        """
        Test RULE-0184: YAML field 'fee_routing.system_fees.total_fee' must equal '3% of verification tr
        Priority: MEDIUM
        """
        assert "RULE-0184" in all_results['results'], "Rule RULE-0184 missing"
        result = all_results['results']["RULE-0184"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0184 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0184 failed"


    def test_rule_0185(self, all_results):
        """
        Test RULE-0185: YAML field 'fee_routing.system_fees.allocation.dev_fee' must equal '1% direct de
        Priority: MEDIUM
        """
        assert "RULE-0185" in all_results['results'], "Rule RULE-0185 missing"
        result = all_results['results']["RULE-0185"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0185 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0185 failed"


    def test_rule_0186(self, all_results):
        """
        Test RULE-0186: YAML field 'fee_routing.system_fees.allocation.system_treasury' must equal '2% s
        Priority: MEDIUM
        """
        assert "RULE-0186" in all_results['results'], "Rule RULE-0186 missing"
        result = all_results['results']["RULE-0186"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0186 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0186 failed"


    def test_rule_0187(self, all_results):
        """
        Test RULE-0187: YAML field 'fee_routing.system_fees.burn_from_system_fee.policy' must equal '50%
        Priority: MEDIUM
        """
        assert "RULE-0187" in all_results['results'], "Rule RULE-0187 missing"
        result = all_results['results']["RULE-0187"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0187 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0187 failed"


    def test_rule_0188(self, all_results):
        """
        Test RULE-0188: YAML field 'fee_routing.system_fees.burn_from_system_fee.base' must equal 'circu
        Priority: MEDIUM
        """
        assert "RULE-0188" in all_results['results'], "Rule RULE-0188 missing"
        result = all_results['results']["RULE-0188"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0188 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0188 failed"


    def test_rule_0189(self, all_results):
        """
        Test RULE-0189: YAML field 'fee_routing.system_fees.burn_from_system_fee.snapshot_time_utc' must
        Priority: MEDIUM
        """
        assert "RULE-0189" in all_results['results'], "Rule RULE-0189 missing"
        result = all_results['results']["RULE-0189"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0189 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0189 failed"


    def test_rule_0190(self, all_results):
        """
        Test RULE-0190: YAML field 'fee_routing.system_fees.burn_from_system_fee.daily_cap_percent_of_ci
        Priority: MEDIUM
        """
        assert "RULE-0190" in all_results['results'], "Rule RULE-0190 missing"
        result = all_results['results']["RULE-0190"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0190 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0190 failed"


    def test_rule_0191(self, all_results):
        """
        Test RULE-0191: YAML field 'fee_routing.system_fees.burn_from_system_fee.monthly_cap_percent_of_
        Priority: MEDIUM
        """
        assert "RULE-0191" in all_results['results'], "Rule RULE-0191 missing"
        result = all_results['results']["RULE-0191"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0191 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0191 failed"


    def test_rule_0192(self, all_results):
        """
        Test RULE-0192: YAML field 'fee_routing.system_fees.burn_from_system_fee.oracle_source' must equ
        Priority: MEDIUM
        """
        assert "RULE-0192" in all_results['results'], "Rule RULE-0192 missing"
        result = all_results['results']["RULE-0192"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0192 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0192 failed"


    def test_rule_0193(self, all_results):
        """
        Test RULE-0193: YAML field 'fee_routing.validator_rewards.source' must equal 'Treasury budget (D
        Priority: MEDIUM
        """
        assert "RULE-0193" in all_results['results'], "Rule RULE-0193 missing"
        result = all_results['results']["RULE-0193"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0193 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0193 failed"


    def test_rule_0194(self, all_results):
        """
        Test RULE-0194: YAML field 'fee_routing.validator_rewards.no_per_transaction_split' must equal '
        Priority: CRITICAL
        """
        assert "RULE-0194" in all_results['results'], "Rule RULE-0194 missing"
        result = all_results['results']["RULE-0194"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0194 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0194 failed"


    def test_rule_0195(self, all_results):
        """
        Test RULE-0195: YAML field 'fee_routing.validator_rewards.note' must equal 'Old fee split (50/25
        Priority: CRITICAL
        """
        assert "RULE-0195" in all_results['results'], "Rule RULE-0195 missing"
        result = all_results['results']["RULE-0195"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0195 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0195 failed"


    def test_rule_0196(self, all_results):
        """
        Test RULE-0196: YAML field 'governance_fees.proposal_deposits' must equal '100% burned if propos
        Priority: MEDIUM
        """
        assert "RULE-0196" in all_results['results'], "Rule RULE-0196 missing"
        result = all_results['results']["RULE-0196"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0196 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0196 failed"


    def test_rule_0197(self, all_results):
        """
        Test RULE-0197: YAML field 'governance_fees.voting_gas' must equal 'Subsidized from treasury fun
        Priority: MEDIUM
        """
        assert "RULE-0197" in all_results['results'], "Rule RULE-0197 missing"
        result = all_results['results']["RULE-0197"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0197 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0197 failed"


    def test_rule_0198(self, all_results):
        """
        Test RULE-0198: YAML field 'governance_controls.authority' must equal 'DAO_only'
        Priority: MEDIUM
        """
        assert "RULE-0198" in all_results['results'], "Rule RULE-0198 missing"
        result = all_results['results']["RULE-0198"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0198 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0198 failed"


    def test_rule_0199(self, all_results):
        """
        Test RULE-0199: YAML field 'governance_controls.reference' must equal '07_governance_legal/gover
        Priority: CRITICAL
        """
        assert "RULE-0199" in all_results['results'], "Rule RULE-0199 missing"
        result = all_results['results']["RULE-0199"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0199 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0199 failed"


    def test_rule_0200(self, all_results):
        """
        Test RULE-0200: YAML field 'governance_controls.note' must equal 'All governance parameters cent
        Priority: HIGH
        """
        assert "RULE-0200" in all_results['results'], "Rule RULE-0200 missing"
        result = all_results['results']["RULE-0200"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "HIGH" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0200 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0200 failed"


    def test_rule_0201(self, all_results):
        """
        Test RULE-0201: YAML field 'staking_mechanics.minimum_stake' must equal '1000 SSID'
        Priority: MEDIUM
        """
        assert "RULE-0201" in all_results['results'], "Rule RULE-0201 missing"
        result = all_results['results']["RULE-0201"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0201 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0201 failed"


    def test_rule_0202(self, all_results):
        """
        Test RULE-0202: YAML field 'staking_mechanics.maximum_discount' must equal '50% fee reduction'
        Priority: MEDIUM
        """
        assert "RULE-0202" in all_results['results'], "Rule RULE-0202 missing"
        result = all_results['results']["RULE-0202"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0202 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0202 failed"


    def test_rule_0203(self, all_results):
        """
        Test RULE-0203: YAML field 'staking_mechanics.slashing_penalty' must equal '5% of staked amount'
        Priority: MEDIUM
        """
        assert "RULE-0203" in all_results['results'], "Rule RULE-0203 missing"
        result = all_results['results']["RULE-0203"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0203 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0203 failed"


    def test_rule_0204(self, all_results):
        """
        Test RULE-0204: YAML field 'staking_mechanics.unstaking_period' must equal '14 days'
        Priority: MEDIUM
        """
        assert "RULE-0204" in all_results['results'], "Rule RULE-0204 missing"
        result = all_results['results']["RULE-0204"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0204 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0204 failed"


    def test_rule_0205(self, all_results):
        """
        Test RULE-0205: YAML field 'staking_mechanics.discount_applies_to' must equal 'user_service_pric
        Priority: MEDIUM
        """
        assert "RULE-0205" in all_results['results'], "Rule RULE-0205 missing"
        result = all_results['results']["RULE-0205"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0205 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0205 failed"


    def test_rule_0206(self, all_results):
        """
        Test RULE-0206: YAML field 'staking_mechanics.system_fee_invariance' must equal 'True'
        Priority: CRITICAL
        """
        assert "RULE-0206" in all_results['results'], "Rule RULE-0206 missing"
        result = all_results['results']["RULE-0206"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0206 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0206 failed"


    def test_rule_0207(self, all_results):
        """
        Test RULE-0207: YAML field 'governance_parameters.proposal_framework.proposal_threshold' must eq
        Priority: MEDIUM
        """
        assert "RULE-0207" in all_results['results'], "Rule RULE-0207 missing"
        result = all_results['results']["RULE-0207"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0207 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0207 failed"


    def test_rule_0208(self, all_results):
        """
        Test RULE-0208: YAML field 'governance_parameters.proposal_framework.proposal_deposit' must equa
        Priority: MEDIUM
        """
        assert "RULE-0208" in all_results['results'], "Rule RULE-0208 missing"
        result = all_results['results']["RULE-0208"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0208 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0208 failed"


    def test_rule_0209(self, all_results):
        """
        Test RULE-0209: YAML list 'governance_parameters.proposal_framework.proposal_types' must contain
        Priority: MEDIUM
        """
        assert "RULE-0209" in all_results['results'], "Rule RULE-0209 missing"
        result = all_results['results']["RULE-0209"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0209 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0209 failed"


    def test_rule_0210(self, all_results):
        """
        Test RULE-0210: YAML field 'governance_parameters.voting_requirements.quorum_standard' must equa
        Priority: HIGH
        """
        assert "RULE-0210" in all_results['results'], "Rule RULE-0210 missing"
        result = all_results['results']["RULE-0210"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "HIGH" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0210 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0210 failed"


    def test_rule_0211(self, all_results):
        """
        Test RULE-0211: YAML field 'governance_parameters.voting_requirements.quorum_protocol_upgrade' m
        Priority: MEDIUM
        """
        assert "RULE-0211" in all_results['results'], "Rule RULE-0211 missing"
        result = all_results['results']["RULE-0211"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0211 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0211 failed"


    def test_rule_0212(self, all_results):
        """
        Test RULE-0212: YAML field 'governance_parameters.voting_requirements.quorum_emergency' must equ
        Priority: MEDIUM
        """
        assert "RULE-0212" in all_results['results'], "Rule RULE-0212 missing"
        result = all_results['results']["RULE-0212"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0212 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0212 failed"


    def test_rule_0213(self, all_results):
        """
        Test RULE-0213: YAML field 'governance_parameters.voting_requirements.simple_majority' must equa
        Priority: MEDIUM
        """
        assert "RULE-0213" in all_results['results'], "Rule RULE-0213 missing"
        result = all_results['results']["RULE-0213"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0213 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0213 failed"


    def test_rule_0214(self, all_results):
        """
        Test RULE-0214: YAML field 'governance_parameters.voting_requirements.supermajority' must equal 
        Priority: MEDIUM
        """
        assert "RULE-0214" in all_results['results'], "Rule RULE-0214 missing"
        result = all_results['results']["RULE-0214"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0214 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0214 failed"


    def test_rule_0215(self, all_results):
        """
        Test RULE-0215: YAML field 'governance_parameters.voting_requirements.emergency_supermajority' m
        Priority: MEDIUM
        """
        assert "RULE-0215" in all_results['results'], "Rule RULE-0215 missing"
        result = all_results['results']["RULE-0215"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0215 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0215 failed"


    def test_rule_0216(self, all_results):
        """
        Test RULE-0216: YAML field 'governance_parameters.timelock_framework.standard_proposals' must eq
        Priority: HIGH
        """
        assert "RULE-0216" in all_results['results'], "Rule RULE-0216 missing"
        result = all_results['results']["RULE-0216"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "HIGH" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0216 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0216 failed"


    def test_rule_0217(self, all_results):
        """
        Test RULE-0217: YAML field 'governance_parameters.timelock_framework.protocol_upgrades' must equ
        Priority: MEDIUM
        """
        assert "RULE-0217" in all_results['results'], "Rule RULE-0217 missing"
        result = all_results['results']["RULE-0217"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0217 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0217 failed"


    def test_rule_0218(self, all_results):
        """
        Test RULE-0218: YAML field 'governance_parameters.timelock_framework.parameter_changes' must equ
        Priority: MEDIUM
        """
        assert "RULE-0218" in all_results['results'], "Rule RULE-0218 missing"
        result = all_results['results']["RULE-0218"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0218 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0218 failed"


    def test_rule_0219(self, all_results):
        """
        Test RULE-0219: YAML field 'governance_parameters.timelock_framework.emergency_proposals' must e
        Priority: CRITICAL
        """
        assert "RULE-0219" in all_results['results'], "Rule RULE-0219 missing"
        result = all_results['results']["RULE-0219"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0219 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0219 failed"


    def test_rule_0220(self, all_results):
        """
        Test RULE-0220: YAML field 'governance_parameters.timelock_framework.treasury_allocations' must 
        Priority: MEDIUM
        """
        assert "RULE-0220" in all_results['results'], "Rule RULE-0220 missing"
        result = all_results['results']["RULE-0220"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0220 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0220 failed"


    def test_rule_0221(self, all_results):
        """
        Test RULE-0221: YAML field 'governance_parameters.voting_periods.standard_voting' must equal '7 
        Priority: HIGH
        """
        assert "RULE-0221" in all_results['results'], "Rule RULE-0221 missing"
        result = all_results['results']["RULE-0221"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "HIGH" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0221 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0221 failed"


    def test_rule_0222(self, all_results):
        """
        Test RULE-0222: YAML field 'governance_parameters.voting_periods.protocol_upgrade_voting' must e
        Priority: MEDIUM
        """
        assert "RULE-0222" in all_results['results'], "Rule RULE-0222 missing"
        result = all_results['results']["RULE-0222"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0222 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0222 failed"


    def test_rule_0223(self, all_results):
        """
        Test RULE-0223: YAML field 'governance_parameters.voting_periods.emergency_voting' must equal '2
        Priority: CRITICAL
        """
        assert "RULE-0223" in all_results['results'], "Rule RULE-0223 missing"
        result = all_results['results']["RULE-0223"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0223 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0223 failed"


    def test_rule_0224(self, all_results):
        """
        Test RULE-0224: YAML field 'governance_parameters.voting_periods.parameter_voting' must equal '5
        Priority: MEDIUM
        """
        assert "RULE-0224" in all_results['results'], "Rule RULE-0224 missing"
        result = all_results['results']["RULE-0224"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0224 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0224 failed"


    def test_rule_0225(self, all_results):
        """
        Test RULE-0225: YAML field 'governance_parameters.delegation_system.delegation_enabled' must equ
        Priority: CRITICAL
        """
        assert "RULE-0225" in all_results['results'], "Rule RULE-0225 missing"
        result = all_results['results']["RULE-0225"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0225 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0225 failed"


    def test_rule_0226(self, all_results):
        """
        Test RULE-0226: YAML field 'governance_parameters.delegation_system.self_delegation_default' mus
        Priority: CRITICAL
        """
        assert "RULE-0226" in all_results['results'], "Rule RULE-0226 missing"
        result = all_results['results']["RULE-0226"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0226 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0226 failed"


    def test_rule_0227(self, all_results):
        """
        Test RULE-0227: YAML field 'governance_parameters.delegation_system.delegation_changes' must equ
        Priority: MEDIUM
        """
        assert "RULE-0227" in all_results['results'], "Rule RULE-0227 missing"
        result = all_results['results']["RULE-0227"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0227 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0227 failed"


    def test_rule_0228(self, all_results):
        """
        Test RULE-0228: YAML field 'governance_parameters.delegation_system.vote_weight_calculation' mus
        Priority: HIGH
        """
        assert "RULE-0228" in all_results['results'], "Rule RULE-0228 missing"
        result = all_results['results']["RULE-0228"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "HIGH" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0228 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0228 failed"


    def test_rule_0229(self, all_results):
        """
        Test RULE-0229: YAML field 'governance_parameters.governance_rewards.voter_participation_rewards
        Priority: MEDIUM
        """
        assert "RULE-0229" in all_results['results'], "Rule RULE-0229 missing"
        result = all_results['results']["RULE-0229"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0229 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0229 failed"


    def test_rule_0230(self, all_results):
        """
        Test RULE-0230: YAML field 'governance_parameters.governance_rewards.proposal_creator_rewards' m
        Priority: MEDIUM
        """
        assert "RULE-0230" in all_results['results'], "Rule RULE-0230 missing"
        result = all_results['results']["RULE-0230"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0230 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0230 failed"


    def test_rule_0231(self, all_results):
        """
        Test RULE-0231: YAML field 'governance_parameters.governance_rewards.delegate_rewards' must equa
        Priority: MEDIUM
        """
        assert "RULE-0231" in all_results['results'], "Rule RULE-0231 missing"
        result = all_results['results']["RULE-0231"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0231 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0231 failed"


    def test_rule_0232(self, all_results):
        """
        Test RULE-0232: YAML field 'governance_parameters.governance_rewards.minimum_participation' must
        Priority: MEDIUM
        """
        assert "RULE-0232" in all_results['results'], "Rule RULE-0232 missing"
        result = all_results['results']["RULE-0232"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0232 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0232 failed"


    def test_rule_0233(self, all_results):
        """
        Test RULE-0233: YAML line: version: "1.0"
        Priority: MEDIUM
        """
        assert "RULE-0233" in all_results['results'], "Rule RULE-0233 missing"
        result = all_results['results']["RULE-0233"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0233 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0233 failed"


    def test_rule_0234(self, all_results):
        """
        Test RULE-0234: YAML line: date: "2025-09-21"
        Priority: MEDIUM
        """
        assert "RULE-0234" in all_results['results'], "Rule RULE-0234 missing"
        result = all_results['results']["RULE-0234"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0234 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0234 failed"


    def test_rule_0235(self, all_results):
        """
        Test RULE-0235: YAML line: deprecated: false
        Priority: MEDIUM
        """
        assert "RULE-0235" in all_results['results'], "Rule RULE-0235 missing"
        result = all_results['results']["RULE-0235"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0235 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0235 failed"


    def test_rule_0236(self, all_results):
        """
        Test RULE-0236: YAML line: supply_mechanics:
        Priority: MEDIUM
        """
        assert "RULE-0236" in all_results['results'], "Rule RULE-0236 missing"
        result = all_results['results']["RULE-0236"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0236 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0236 failed"


    def test_rule_0237(self, all_results):
        """
        Test RULE-0237: YAML line: total_supply: "1,000,000,000 SSID"
        Priority: MEDIUM
        """
        assert "RULE-0237" in all_results['results'], "Rule RULE-0237 missing"
        result = all_results['results']["RULE-0237"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0237 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0237 failed"


    def test_rule_0238(self, all_results):
        """
        Test RULE-0238: YAML line: initial_distribution:
        Priority: MEDIUM
        """
        assert "RULE-0238" in all_results['results'], "Rule RULE-0238 missing"
        result = all_results['results']["RULE-0238"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0238 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0238 failed"


    def test_rule_0239(self, all_results):
        """
        Test RULE-0239: YAML line: ecosystem_development: "40%" # 400M tokens
        Priority: MEDIUM
        """
        assert "RULE-0239" in all_results['results'], "Rule RULE-0239 missing"
        result = all_results['results']["RULE-0239"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0239 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0239 failed"


    def test_rule_0240(self, all_results):
        """
        Test RULE-0240: YAML line: community_rewards: "25%"    # 250M tokens
        Priority: MEDIUM
        """
        assert "RULE-0240" in all_results['results'], "Rule RULE-0240 missing"
        result = all_results['results']["RULE-0240"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0240 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0240 failed"


    def test_rule_0241(self, all_results):
        """
        Test RULE-0241: YAML line: team_development: "15%"     # 150M tokens (4-year vesting)
        Priority: MEDIUM
        """
        assert "RULE-0241" in all_results['results'], "Rule RULE-0241 missing"
        result = all_results['results']["RULE-0241"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0241 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0241 failed"


    def test_rule_0242(self, all_results):
        """
        Test RULE-0242: YAML line: partnerships: "10%"         # 100M tokens
        Priority: MEDIUM
        """
        assert "RULE-0242" in all_results['results'], "Rule RULE-0242 missing"
        result = all_results['results']["RULE-0242"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0242 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0242 failed"


    def test_rule_0243(self, all_results):
        """
        Test RULE-0243: YAML line: reserve_fund: "10%"         # 100M tokens
        Priority: MEDIUM
        """
        assert "RULE-0243" in all_results['results'], "Rule RULE-0243 missing"
        result = all_results['results']["RULE-0243"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0243 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0243 failed"


    def test_rule_0244(self, all_results):
        """
        Test RULE-0244: YAML line: deflationary_mechanisms:
        Priority: MEDIUM
        """
        assert "RULE-0244" in all_results['results'], "Rule RULE-0244 missing"
        result = all_results['results']["RULE-0244"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0244 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0244 failed"


    def test_rule_0245(self, all_results):
        """
        Test RULE-0245: YAML line: governance_burning: "Unsuccessful proposals burn deposit"
        Priority: MEDIUM
        """
        assert "RULE-0245" in all_results['results'], "Rule RULE-0245 missing"
        result = all_results['results']["RULE-0245"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0245 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0245 failed"


    def test_rule_0246(self, all_results):
        """
        Test RULE-0246: YAML line: staking_slashing: "Penalties for false verification or equivocation"
        Priority: MEDIUM
        """
        assert "RULE-0246" in all_results['results'], "Rule RULE-0246 missing"
        result = all_results['results']["RULE-0246"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0246 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0246 failed"


    def test_rule_0247(self, all_results):
        """
        Test RULE-0247: YAML line: circulation_controls:
        Priority: MEDIUM
        """
        assert "RULE-0247" in all_results['results'], "Rule RULE-0247 missing"
        result = all_results['results']["RULE-0247"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0247 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0247 failed"


    def test_rule_0248(self, all_results):
        """
        Test RULE-0248: YAML line: max_annual_inflation: "0%" # Fixed supply
        Priority: MEDIUM
        """
        assert "RULE-0248" in all_results['results'], "Rule RULE-0248 missing"
        result = all_results['results']["RULE-0248"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0248 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0248 failed"


    def test_rule_0249(self, all_results):
        """
        Test RULE-0249: YAML line: team_vesting_schedule: "25% per year over 4 years"
        Priority: MEDIUM
        """
        assert "RULE-0249" in all_results['results'], "Rule RULE-0249 missing"
        result = all_results['results']["RULE-0249"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0249 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0249 failed"


    def test_rule_0250(self, all_results):
        """
        Test RULE-0250: YAML line: partnership_unlock: "Milestone-based"
        Priority: MEDIUM
        """
        assert "RULE-0250" in all_results['results'], "Rule RULE-0250 missing"
        result = all_results['results']["RULE-0250"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0250 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0250 failed"


    def test_rule_0251(self, all_results):
        """
        Test RULE-0251: YAML line: reserve_governance: "DAO-controlled release only"
        Priority: MEDIUM
        """
        assert "RULE-0251" in all_results['results'], "Rule RULE-0251 missing"
        result = all_results['results']["RULE-0251"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0251 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0251 failed"


    def test_rule_0252(self, all_results):
        """
        Test RULE-0252: YAML line: fee_routing:
        Priority: MEDIUM
        """
        assert "RULE-0252" in all_results['results'], "Rule RULE-0252 missing"
        result = all_results['results']["RULE-0252"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0252 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0252 failed"


    def test_rule_0253(self, all_results):
        """
        Test RULE-0253: YAML line: system_fees:
        Priority: MEDIUM
        """
        assert "RULE-0253" in all_results['results'], "Rule RULE-0253 missing"
        result = all_results['results']["RULE-0253"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0253 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0253 failed"


    def test_rule_0254(self, all_results):
        """
        Test RULE-0254: YAML line: scope: "identity_verification_payments_only"
        Priority: MEDIUM
        """
        assert "RULE-0254" in all_results['results'], "Rule RULE-0254 missing"
        result = all_results['results']["RULE-0254"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0254 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0254 failed"


    def test_rule_0255(self, all_results):
        """
        Test RULE-0255: YAML line: note: "3% system fee applies to identity verification transactions on
        Priority: MEDIUM
        """
        assert "RULE-0255" in all_results['results'], "Rule RULE-0255 missing"
        result = all_results['results']["RULE-0255"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0255 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0255 failed"


    def test_rule_0256(self, all_results):
        """
        Test RULE-0256: YAML line: total_fee: "3% of verification transaction value"
        Priority: MEDIUM
        """
        assert "RULE-0256" in all_results['results'], "Rule RULE-0256 missing"
        result = all_results['results']["RULE-0256"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0256 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0256 failed"


    def test_rule_0257(self, all_results):
        """
        Test RULE-0257: YAML line: allocation:
        Priority: MEDIUM
        """
        assert "RULE-0257" in all_results['results'], "Rule RULE-0257 missing"
        result = all_results['results']["RULE-0257"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0257 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0257 failed"


    def test_rule_0258(self, all_results):
        """
        Test RULE-0258: YAML line: dev_fee: "1% direct developer reward"
        Priority: MEDIUM
        """
        assert "RULE-0258" in all_results['results'], "Rule RULE-0258 missing"
        result = all_results['results']["RULE-0258"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0258 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0258 failed"


    def test_rule_0259(self, all_results):
        """
        Test RULE-0259: YAML line: system_treasury: "2% system treasury"
        Priority: MEDIUM
        """
        assert "RULE-0259" in all_results['results'], "Rule RULE-0259 missing"
        result = all_results['results']["RULE-0259"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0259 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0259 failed"


    def test_rule_0260(self, all_results):
        """
        Test RULE-0260: YAML line: burn_from_system_fee:
        Priority: MEDIUM
        """
        assert "RULE-0260" in all_results['results'], "Rule RULE-0260 missing"
        result = all_results['results']["RULE-0260"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0260 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0260 failed"


    def test_rule_0261(self, all_results):
        """
        Test RULE-0261: YAML line: policy: "50% of treasury share burned"
        Priority: MEDIUM
        """
        assert "RULE-0261" in all_results['results'], "Rule RULE-0261 missing"
        result = all_results['results']["RULE-0261"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0261 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0261 failed"


    def test_rule_0262(self, all_results):
        """
        Test RULE-0262: YAML line: base: "circulating_supply_snapshot"
        Priority: MEDIUM
        """
        assert "RULE-0262" in all_results['results'], "Rule RULE-0262 missing"
        result = all_results['results']["RULE-0262"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0262 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0262 failed"


    def test_rule_0263(self, all_results):
        """
        Test RULE-0263: YAML line: snapshot_time_utc: "00:00:00"
        Priority: MEDIUM
        """
        assert "RULE-0263" in all_results['results'], "Rule RULE-0263 missing"
        result = all_results['results']["RULE-0263"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0263 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0263 failed"


    def test_rule_0264(self, all_results):
        """
        Test RULE-0264: YAML line: daily_cap_percent_of_circ: "0.5"
        Priority: MEDIUM
        """
        assert "RULE-0264" in all_results['results'], "Rule RULE-0264 missing"
        result = all_results['results']["RULE-0264"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0264 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0264 failed"


    def test_rule_0265(self, all_results):
        """
        Test RULE-0265: YAML line: monthly_cap_percent_of_circ: "2.0"
        Priority: MEDIUM
        """
        assert "RULE-0265" in all_results['results'], "Rule RULE-0265 missing"
        result = all_results['results']["RULE-0265"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0265 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0265 failed"


    def test_rule_0266(self, all_results):
        """
        Test RULE-0266: YAML line: oracle_source: "on-chain circulating supply oracle (DAO-controlled)"
        Priority: MEDIUM
        """
        assert "RULE-0266" in all_results['results'], "Rule RULE-0266 missing"
        result = all_results['results']["RULE-0266"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0266 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0266 failed"


    def test_rule_0267(self, all_results):
        """
        Test RULE-0267: YAML line: validator_rewards:
        Priority: MEDIUM
        """
        assert "RULE-0267" in all_results['results'], "Rule RULE-0267 missing"
        result = all_results['results']["RULE-0267"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0267 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0267 failed"


    def test_rule_0268(self, all_results):
        """
        Test RULE-0268: YAML line: source: "Treasury budget (DAO-decided monthly allocation)"
        Priority: MEDIUM
        """
        assert "RULE-0268" in all_results['results'], "Rule RULE-0268 missing"
        result = all_results['results']["RULE-0268"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0268 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0268 failed"


    def test_rule_0269(self, all_results):
        """
        Test RULE-0269: YAML line: no_per_transaction_split: true
        Priority: MEDIUM
        """
        assert "RULE-0269" in all_results['results'], "Rule RULE-0269 missing"
        result = all_results['results']["RULE-0269"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0269 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0269 failed"


    def test_rule_0270(self, all_results):
        """
        Test RULE-0270: YAML line: note: "Old fee split (50/25/15/10) is deprecated and replaced by fixe
        Priority: MEDIUM
        """
        assert "RULE-0270" in all_results['results'], "Rule RULE-0270 missing"
        result = all_results['results']["RULE-0270"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0270 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0270 failed"


    def test_rule_0271(self, all_results):
        """
        Test RULE-0271: YAML line: governance_fees:
        Priority: MEDIUM
        """
        assert "RULE-0271" in all_results['results'], "Rule RULE-0271 missing"
        result = all_results['results']["RULE-0271"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0271 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0271 failed"


    def test_rule_0272(self, all_results):
        """
        Test RULE-0272: YAML line: proposal_deposits: "100% burned if proposal fails"
        Priority: MEDIUM
        """
        assert "RULE-0272" in all_results['results'], "Rule RULE-0272 missing"
        result = all_results['results']["RULE-0272"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0272 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0272 failed"


    def test_rule_0273(self, all_results):
        """
        Test RULE-0273: YAML line: voting_gas: "Subsidized from treasury fund"
        Priority: MEDIUM
        """
        assert "RULE-0273" in all_results['results'], "Rule RULE-0273 missing"
        result = all_results['results']["RULE-0273"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0273 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0273 failed"


    def test_rule_0274(self, all_results):
        """
        Test RULE-0274: YAML line: governance_controls:
        Priority: MEDIUM
        """
        assert "RULE-0274" in all_results['results'], "Rule RULE-0274 missing"
        result = all_results['results']["RULE-0274"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0274 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0274 failed"


    def test_rule_0275(self, all_results):
        """
        Test RULE-0275: YAML line: authority: "DAO_only"
        Priority: MEDIUM
        """
        assert "RULE-0275" in all_results['results'], "Rule RULE-0275 missing"
        result = all_results['results']["RULE-0275"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0275 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0275 failed"


    def test_rule_0276(self, all_results):
        """
        Test RULE-0276: YAML line: reference: "07_governance_legal/governance_defaults.yaml"
        Priority: CRITICAL
        """
        assert "RULE-0276" in all_results['results'], "Rule RULE-0276 missing"
        result = all_results['results']["RULE-0276"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0276 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0276 failed"


    def test_rule_0277(self, all_results):
        """
        Test RULE-0277: YAML line: note: "All governance parameters centrally defined - see governance_p
        Priority: MEDIUM
        """
        assert "RULE-0277" in all_results['results'], "Rule RULE-0277 missing"
        result = all_results['results']["RULE-0277"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0277 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0277 failed"


    def test_rule_0278(self, all_results):
        """
        Test RULE-0278: YAML line: staking_mechanics:
        Priority: MEDIUM
        """
        assert "RULE-0278" in all_results['results'], "Rule RULE-0278 missing"
        result = all_results['results']["RULE-0278"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0278 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0278 failed"


    def test_rule_0279(self, all_results):
        """
        Test RULE-0279: YAML line: minimum_stake: "1000 SSID"
        Priority: MEDIUM
        """
        assert "RULE-0279" in all_results['results'], "Rule RULE-0279 missing"
        result = all_results['results']["RULE-0279"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0279 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0279 failed"


    def test_rule_0280(self, all_results):
        """
        Test RULE-0280: YAML line: maximum_discount: "50% fee reduction"
        Priority: MEDIUM
        """
        assert "RULE-0280" in all_results['results'], "Rule RULE-0280 missing"
        result = all_results['results']["RULE-0280"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0280 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0280 failed"


    def test_rule_0281(self, all_results):
        """
        Test RULE-0281: YAML line: slashing_penalty: "5% of staked amount"
        Priority: MEDIUM
        """
        assert "RULE-0281" in all_results['results'], "Rule RULE-0281 missing"
        result = all_results['results']["RULE-0281"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0281 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0281 failed"


    def test_rule_0282(self, all_results):
        """
        Test RULE-0282: YAML line: unstaking_period: "14 days"
        Priority: MEDIUM
        """
        assert "RULE-0282" in all_results['results'], "Rule RULE-0282 missing"
        result = all_results['results']["RULE-0282"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0282 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0282 failed"


    def test_rule_0283(self, all_results):
        """
        Test RULE-0283: YAML line: discount_applies_to: "user_service_price_only"
        Priority: MEDIUM
        """
        assert "RULE-0283" in all_results['results'], "Rule RULE-0283 missing"
        result = all_results['results']["RULE-0283"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0283 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0283 failed"


    def test_rule_0284(self, all_results):
        """
        Test RULE-0284: YAML line: system_fee_invariance: true
        Priority: MEDIUM
        """
        assert "RULE-0284" in all_results['results'], "Rule RULE-0284 missing"
        result = all_results['results']["RULE-0284"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0284 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0284 failed"


    def test_rule_0285(self, all_results):
        """
        Test RULE-0285: YAML line: governance_parameters:
        Priority: MEDIUM
        """
        assert "RULE-0285" in all_results['results'], "Rule RULE-0285 missing"
        result = all_results['results']["RULE-0285"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0285 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0285 failed"


    def test_rule_0286(self, all_results):
        """
        Test RULE-0286: YAML line: proposal_framework:
        Priority: MEDIUM
        """
        assert "RULE-0286" in all_results['results'], "Rule RULE-0286 missing"
        result = all_results['results']["RULE-0286"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0286 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0286 failed"


    def test_rule_0287(self, all_results):
        """
        Test RULE-0287: YAML line: proposal_threshold: "1% of total supply (10,000,000 SSID)"
        Priority: MEDIUM
        """
        assert "RULE-0287" in all_results['results'], "Rule RULE-0287 missing"
        result = all_results['results']["RULE-0287"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0287 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0287 failed"


    def test_rule_0288(self, all_results):
        """
        Test RULE-0288: YAML line: proposal_deposit: "10,000 SSID (burned if proposal fails)"
        Priority: MEDIUM
        """
        assert "RULE-0288" in all_results['results'], "Rule RULE-0288 missing"
        result = all_results['results']["RULE-0288"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0288 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0288 failed"


    def test_rule_0289(self, all_results):
        """
        Test RULE-0289: YAML line: proposal_types:
        Priority: MEDIUM
        """
        assert "RULE-0289" in all_results['results'], "Rule RULE-0289 missing"
        result = all_results['results']["RULE-0289"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0289 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0289 failed"


    def test_rule_0290(self, all_results):
        """
        Test RULE-0290: YAML line: - "Protocol upgrades (requires supermajority)"
        Priority: MEDIUM
        """
        assert "RULE-0290" in all_results['results'], "Rule RULE-0290 missing"
        result = all_results['results']["RULE-0290"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0290 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0290 failed"


    def test_rule_0291(self, all_results):
        """
        Test RULE-0291: YAML line: - "Parameter changes (requires simple majority)"
        Priority: MEDIUM
        """
        assert "RULE-0291" in all_results['results'], "Rule RULE-0291 missing"
        result = all_results['results']["RULE-0291"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0291 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0291 failed"


    def test_rule_0292(self, all_results):
        """
        Test RULE-0292: YAML line: - "Treasury allocation (requires quorum + majority)"
        Priority: MEDIUM
        """
        assert "RULE-0292" in all_results['results'], "Rule RULE-0292 missing"
        result = all_results['results']["RULE-0292"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0292 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0292 failed"


    def test_rule_0293(self, all_results):
        """
        Test RULE-0293: YAML line: - "Emergency proposals (expedited process)"
        Priority: MEDIUM
        """
        assert "RULE-0293" in all_results['results'], "Rule RULE-0293 missing"
        result = all_results['results']["RULE-0293"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0293 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0293 failed"


    def test_rule_0294(self, all_results):
        """
        Test RULE-0294: YAML line: voting_requirements:
        Priority: MEDIUM
        """
        assert "RULE-0294" in all_results['results'], "Rule RULE-0294 missing"
        result = all_results['results']["RULE-0294"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0294 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0294 failed"


    def test_rule_0295(self, all_results):
        """
        Test RULE-0295: YAML line: quorum_standard: "4% of circulating supply"
        Priority: HIGH
        """
        assert "RULE-0295" in all_results['results'], "Rule RULE-0295 missing"
        result = all_results['results']["RULE-0295"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "HIGH" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0295 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0295 failed"


    def test_rule_0296(self, all_results):
        """
        Test RULE-0296: YAML line: quorum_protocol_upgrade: "8% of circulating supply"
        Priority: MEDIUM
        """
        assert "RULE-0296" in all_results['results'], "Rule RULE-0296 missing"
        result = all_results['results']["RULE-0296"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0296 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0296 failed"


    def test_rule_0297(self, all_results):
        """
        Test RULE-0297: YAML line: quorum_emergency: "2% of circulating supply"
        Priority: MEDIUM
        """
        assert "RULE-0297" in all_results['results'], "Rule RULE-0297 missing"
        result = all_results['results']["RULE-0297"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0297 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0297 failed"


    def test_rule_0298(self, all_results):
        """
        Test RULE-0298: YAML line: simple_majority: "50% + 1 of votes cast"
        Priority: MEDIUM
        """
        assert "RULE-0298" in all_results['results'], "Rule RULE-0298 missing"
        result = all_results['results']["RULE-0298"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0298 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0298 failed"


    def test_rule_0299(self, all_results):
        """
        Test RULE-0299: YAML line: supermajority: "66.7% of votes cast"
        Priority: MEDIUM
        """
        assert "RULE-0299" in all_results['results'], "Rule RULE-0299 missing"
        result = all_results['results']["RULE-0299"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0299 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0299 failed"


    def test_rule_0300(self, all_results):
        """
        Test RULE-0300: YAML line: emergency_supermajority: "75% of votes cast"
        Priority: MEDIUM
        """
        assert "RULE-0300" in all_results['results'], "Rule RULE-0300 missing"
        result = all_results['results']["RULE-0300"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0300 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0300 failed"


    def test_rule_0301(self, all_results):
        """
        Test RULE-0301: YAML line: timelock_framework:
        Priority: MEDIUM
        """
        assert "RULE-0301" in all_results['results'], "Rule RULE-0301 missing"
        result = all_results['results']["RULE-0301"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0301 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0301 failed"


    def test_rule_0302(self, all_results):
        """
        Test RULE-0302: YAML line: standard_proposals: "48 hours minimum execution delay"
        Priority: HIGH
        """
        assert "RULE-0302" in all_results['results'], "Rule RULE-0302 missing"
        result = all_results['results']["RULE-0302"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "HIGH" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0302 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0302 failed"


    def test_rule_0303(self, all_results):
        """
        Test RULE-0303: YAML line: protocol_upgrades: "168 hours (7 days) execution delay"
        Priority: MEDIUM
        """
        assert "RULE-0303" in all_results['results'], "Rule RULE-0303 missing"
        result = all_results['results']["RULE-0303"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0303 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0303 failed"


    def test_rule_0304(self, all_results):
        """
        Test RULE-0304: YAML line: parameter_changes: "24 hours execution delay"
        Priority: MEDIUM
        """
        assert "RULE-0304" in all_results['results'], "Rule RULE-0304 missing"
        result = all_results['results']["RULE-0304"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0304 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0304 failed"


    def test_rule_0305(self, all_results):
        """
        Test RULE-0305: YAML line: emergency_proposals: "6 hours execution delay (security only)"
        Priority: CRITICAL
        """
        assert "RULE-0305" in all_results['results'], "Rule RULE-0305 missing"
        result = all_results['results']["RULE-0305"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0305 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0305 failed"


    def test_rule_0306(self, all_results):
        """
        Test RULE-0306: YAML line: treasury_allocations: "72 hours execution delay"
        Priority: MEDIUM
        """
        assert "RULE-0306" in all_results['results'], "Rule RULE-0306 missing"
        result = all_results['results']["RULE-0306"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0306 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0306 failed"


    def test_rule_0307(self, all_results):
        """
        Test RULE-0307: YAML line: voting_periods:
        Priority: MEDIUM
        """
        assert "RULE-0307" in all_results['results'], "Rule RULE-0307 missing"
        result = all_results['results']["RULE-0307"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0307 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0307 failed"


    def test_rule_0308(self, all_results):
        """
        Test RULE-0308: YAML line: standard_voting: "7 days (168 hours)"
        Priority: HIGH
        """
        assert "RULE-0308" in all_results['results'], "Rule RULE-0308 missing"
        result = all_results['results']["RULE-0308"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "HIGH" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0308 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0308 failed"


    def test_rule_0309(self, all_results):
        """
        Test RULE-0309: YAML line: protocol_upgrade_voting: "14 days (336 hours)"
        Priority: MEDIUM
        """
        assert "RULE-0309" in all_results['results'], "Rule RULE-0309 missing"
        result = all_results['results']["RULE-0309"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0309 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0309 failed"


    def test_rule_0310(self, all_results):
        """
        Test RULE-0310: YAML line: emergency_voting: "24 hours (security issues only)"
        Priority: CRITICAL
        """
        assert "RULE-0310" in all_results['results'], "Rule RULE-0310 missing"
        result = all_results['results']["RULE-0310"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0310 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0310 failed"


    def test_rule_0311(self, all_results):
        """
        Test RULE-0311: YAML line: parameter_voting: "5 days (120 hours)"
        Priority: MEDIUM
        """
        assert "RULE-0311" in all_results['results'], "Rule RULE-0311 missing"
        result = all_results['results']["RULE-0311"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0311 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0311 failed"


    def test_rule_0312(self, all_results):
        """
        Test RULE-0312: YAML line: delegation_system:
        Priority: MEDIUM
        """
        assert "RULE-0312" in all_results['results'], "Rule RULE-0312 missing"
        result = all_results['results']["RULE-0312"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0312 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0312 failed"


    def test_rule_0313(self, all_results):
        """
        Test RULE-0313: YAML line: delegation_enabled: true
        Priority: MEDIUM
        """
        assert "RULE-0313" in all_results['results'], "Rule RULE-0313 missing"
        result = all_results['results']["RULE-0313"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0313 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0313 failed"


    def test_rule_0314(self, all_results):
        """
        Test RULE-0314: YAML line: self_delegation_default: true
        Priority: MEDIUM
        """
        assert "RULE-0314" in all_results['results'], "Rule RULE-0314 missing"
        result = all_results['results']["RULE-0314"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0314 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0314 failed"


    def test_rule_0315(self, all_results):
        """
        Test RULE-0315: YAML line: delegation_changes: "Immediate effect"
        Priority: MEDIUM
        """
        assert "RULE-0315" in all_results['results'], "Rule RULE-0315 missing"
        result = all_results['results']["RULE-0315"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0315 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0315 failed"


    def test_rule_0316(self, all_results):
        """
        Test RULE-0316: YAML line: vote_weight_calculation: "Token balance + delegated tokens"
        Priority: MEDIUM
        """
        assert "RULE-0316" in all_results['results'], "Rule RULE-0316 missing"
        result = all_results['results']["RULE-0316"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0316 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0316 failed"


    def test_rule_0317(self, all_results):
        """
        Test RULE-0317: YAML line: governance_rewards:
        Priority: MEDIUM
        """
        assert "RULE-0317" in all_results['results'], "Rule RULE-0317 missing"
        result = all_results['results']["RULE-0317"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0317 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0317 failed"


    def test_rule_0318(self, all_results):
        """
        Test RULE-0318: YAML line: voter_participation_rewards: "0.1% of treasury per quarter"
        Priority: MEDIUM
        """
        assert "RULE-0318" in all_results['results'], "Rule RULE-0318 missing"
        result = all_results['results']["RULE-0318"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0318 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0318 failed"


    def test_rule_0319(self, all_results):
        """
        Test RULE-0319: YAML line: proposal_creator_rewards: "1000 SSID for successful proposals"
        Priority: MEDIUM
        """
        assert "RULE-0319" in all_results['results'], "Rule RULE-0319 missing"
        result = all_results['results']["RULE-0319"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0319 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0319 failed"


    def test_rule_0320(self, all_results):
        """
        Test RULE-0320: YAML line: delegate_rewards: "Based on participation and performance"
        Priority: MEDIUM
        """
        assert "RULE-0320" in all_results['results'], "Rule RULE-0320 missing"
        result = all_results['results']["RULE-0320"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0320 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0320 failed"


    def test_rule_0321(self, all_results):
        """
        Test RULE-0321: YAML line: minimum_participation: "10% of voting power for rewards"
        Priority: MEDIUM
        """
        assert "RULE-0321" in all_results['results'], "Rule RULE-0321 missing"
        result = all_results['results']["RULE-0321"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0321 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0321 failed"


    def test_rule_0322(self, all_results):
        """
        Test RULE-0322: YAML field 'version' must equal '1.0'
        Priority: HIGH
        """
        assert "RULE-0322" in all_results['results'], "Rule RULE-0322 missing"
        result = all_results['results']["RULE-0322"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "HIGH" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0322 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0322 failed"


    def test_rule_0323(self, all_results):
        """
        Test RULE-0323: YAML field 'date' must equal '2025-09-15'
        Priority: MEDIUM
        """
        assert "RULE-0323" in all_results['results'], "Rule RULE-0323 missing"
        result = all_results['results']["RULE-0323"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0323 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0323 failed"


    def test_rule_0324(self, all_results):
        """
        Test RULE-0324: YAML field 'deprecated' must equal 'False'
        Priority: CRITICAL
        """
        assert "RULE-0324" in all_results['results'], "Rule RULE-0324 missing"
        result = all_results['results']["RULE-0324"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0324 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0324 failed"


    def test_rule_0325(self, all_results):
        """
        Test RULE-0325: YAML field 'quality_standards.accuracy_threshold' must equal '95% minimum'
        Priority: MEDIUM
        """
        assert "RULE-0325" in all_results['results'], "Rule RULE-0325 missing"
        result = all_results['results']["RULE-0325"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0325 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0325 failed"


    def test_rule_0326(self, all_results):
        """
        Test RULE-0326: YAML field 'quality_standards.consistency_score' must equal '90% minimum across 
        Priority: MEDIUM
        """
        assert "RULE-0326" in all_results['results'], "Rule RULE-0326 missing"
        result = all_results['results']["RULE-0326"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0326 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0326 failed"


    def test_rule_0327(self, all_results):
        """
        Test RULE-0327: YAML field 'quality_standards.cultural_appropriateness' must equal 'Native speak
        Priority: MEDIUM
        """
        assert "RULE-0327" in all_results['results'], "Rule RULE-0327 missing"
        result = all_results['results']["RULE-0327"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0327 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0327 failed"


    def test_rule_0328(self, all_results):
        """
        Test RULE-0328: YAML field 'quality_standards.technical_precision' must equal 'Zero tolerance fo
        Priority: MEDIUM
        """
        assert "RULE-0328" in all_results['results'], "Rule RULE-0328 missing"
        result = all_results['results']["RULE-0328"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0328 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0328 failed"


    def test_rule_0329(self, all_results):
        """
        Test RULE-0329: YAML field 'translation_workflow.step_1' must equal 'Machine translation (DeepL/
        Priority: MEDIUM
        """
        assert "RULE-0329" in all_results['results'], "Rule RULE-0329 missing"
        result = all_results['results']["RULE-0329"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0329 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0329 failed"


    def test_rule_0330(self, all_results):
        """
        Test RULE-0330: YAML field 'translation_workflow.step_2' must equal 'Technical review by bilingu
        Priority: MEDIUM
        """
        assert "RULE-0330" in all_results['results'], "Rule RULE-0330 missing"
        result = all_results['results']["RULE-0330"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0330 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0330 failed"


    def test_rule_0331(self, all_results):
        """
        Test RULE-0331: YAML field 'translation_workflow.step_3' must equal 'Native speaker validation'
        Priority: MEDIUM
        """
        assert "RULE-0331" in all_results['results'], "Rule RULE-0331 missing"
        result = all_results['results']["RULE-0331"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0331 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0331 failed"


    def test_rule_0332(self, all_results):
        """
        Test RULE-0332: YAML field 'translation_workflow.step_4' must equal 'Cultural appropriateness ch
        Priority: MEDIUM
        """
        assert "RULE-0332" in all_results['results'], "Rule RULE-0332 missing"
        result = all_results['results']["RULE-0332"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0332 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0332 failed"


    def test_rule_0333(self, all_results):
        """
        Test RULE-0333: YAML field 'translation_workflow.step_5' must equal 'Final quality assurance'
        Priority: MEDIUM
        """
        assert "RULE-0333" in all_results['results'], "Rule RULE-0333 missing"
        result = all_results['results']["RULE-0333"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0333 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0333 failed"


    def test_rule_0334(self, all_results):
        """
        Test RULE-0334: YAML field 'maintenance_schedule.major_updates' must equal 'Full retranslation w
        Priority: MEDIUM
        """
        assert "RULE-0334" in all_results['results'], "Rule RULE-0334 missing"
        result = all_results['results']["RULE-0334"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0334 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0334 failed"


    def test_rule_0335(self, all_results):
        """
        Test RULE-0335: YAML field 'maintenance_schedule.minor_updates' must equal 'Translation within 1
        Priority: MEDIUM
        """
        assert "RULE-0335" in all_results['results'], "Rule RULE-0335 missing"
        result = all_results['results']["RULE-0335"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0335 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0335 failed"


    def test_rule_0336(self, all_results):
        """
        Test RULE-0336: YAML field 'maintenance_schedule.urgent_updates' must equal 'Translation within 
        Priority: MEDIUM
        """
        assert "RULE-0336" in all_results['results'], "Rule RULE-0336 missing"
        result = all_results['results']["RULE-0336"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0336 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0336 failed"


    def test_rule_0337(self, all_results):
        """
        Test RULE-0337: YAML field 'maintenance_schedule.quarterly_review' must equal 'Full consistency 
        Priority: MEDIUM
        """
        assert "RULE-0337" in all_results['results'], "Rule RULE-0337 missing"
        result = all_results['results']["RULE-0337"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0337 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0337 failed"


    def test_rule_0338(self, all_results):
        """
        Test RULE-0338: YAML field 'specialized_terminology.legal_terms' must equal 'Certified legal tra
        Priority: CRITICAL
        """
        assert "RULE-0338" in all_results['results'], "Rule RULE-0338 missing"
        result = all_results['results']["RULE-0338"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0338 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0338 failed"


    def test_rule_0339(self, all_results):
        """
        Test RULE-0339: YAML field 'specialized_terminology.regulatory_terms' must equal 'Compliance exp
        Priority: CRITICAL
        """
        assert "RULE-0339" in all_results['results'], "Rule RULE-0339 missing"
        result = all_results['results']["RULE-0339"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0339 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0339 failed"


    def test_rule_0340(self, all_results):
        """
        Test RULE-0340: YAML field 'specialized_terminology.technical_terms' must equal 'Technical subje
        Priority: MEDIUM
        """
        assert "RULE-0340" in all_results['results'], "Rule RULE-0340 missing"
        result = all_results['results']["RULE-0340"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0340 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0340 failed"


    def test_rule_0341(self, all_results):
        """
        Test RULE-0341: YAML field 'specialized_terminology.business_terms' must equal 'Local business c
        Priority: MEDIUM
        """
        assert "RULE-0341" in all_results['results'], "Rule RULE-0341 missing"
        result = all_results['results']["RULE-0341"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0341 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0341 failed"


    def test_rule_0342(self, all_results):
        """
        Test RULE-0342: YAML line: version: "1.0"
        Priority: MEDIUM
        """
        assert "RULE-0342" in all_results['results'], "Rule RULE-0342 missing"
        result = all_results['results']["RULE-0342"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0342 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0342 failed"


    def test_rule_0343(self, all_results):
        """
        Test RULE-0343: YAML line: date: "2025-09-15"
        Priority: MEDIUM
        """
        assert "RULE-0343" in all_results['results'], "Rule RULE-0343 missing"
        result = all_results['results']["RULE-0343"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0343 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0343 failed"


    def test_rule_0344(self, all_results):
        """
        Test RULE-0344: YAML line: deprecated: false
        Priority: MEDIUM
        """
        assert "RULE-0344" in all_results['results'], "Rule RULE-0344 missing"
        result = all_results['results']["RULE-0344"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0344 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0344 failed"


    def test_rule_0345(self, all_results):
        """
        Test RULE-0345: YAML line: quality_standards:
        Priority: HIGH
        """
        assert "RULE-0345" in all_results['results'], "Rule RULE-0345 missing"
        result = all_results['results']["RULE-0345"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "HIGH" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0345 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0345 failed"


    def test_rule_0346(self, all_results):
        """
        Test RULE-0346: YAML line: accuracy_threshold: "95% minimum"
        Priority: MEDIUM
        """
        assert "RULE-0346" in all_results['results'], "Rule RULE-0346 missing"
        result = all_results['results']["RULE-0346"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0346 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0346 failed"


    def test_rule_0347(self, all_results):
        """
        Test RULE-0347: YAML line: consistency_score: "90% minimum across documents"
        Priority: MEDIUM
        """
        assert "RULE-0347" in all_results['results'], "Rule RULE-0347 missing"
        result = all_results['results']["RULE-0347"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0347 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0347 failed"


    def test_rule_0348(self, all_results):
        """
        Test RULE-0348: YAML line: cultural_appropriateness: "Native speaker validation required"
        Priority: CRITICAL
        """
        assert "RULE-0348" in all_results['results'], "Rule RULE-0348 missing"
        result = all_results['results']["RULE-0348"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0348 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0348 failed"


    def test_rule_0349(self, all_results):
        """
        Test RULE-0349: YAML line: technical_precision: "Zero tolerance for technical term errors"
        Priority: MEDIUM
        """
        assert "RULE-0349" in all_results['results'], "Rule RULE-0349 missing"
        result = all_results['results']["RULE-0349"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0349 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0349 failed"


    def test_rule_0350(self, all_results):
        """
        Test RULE-0350: YAML line: translation_workflow:
        Priority: MEDIUM
        """
        assert "RULE-0350" in all_results['results'], "Rule RULE-0350 missing"
        result = all_results['results']["RULE-0350"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0350 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0350 failed"


    def test_rule_0351(self, all_results):
        """
        Test RULE-0351: YAML line: step_1: "Machine translation (DeepL/Google)"
        Priority: MEDIUM
        """
        assert "RULE-0351" in all_results['results'], "Rule RULE-0351 missing"
        result = all_results['results']["RULE-0351"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0351 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0351 failed"


    def test_rule_0352(self, all_results):
        """
        Test RULE-0352: YAML line: step_2: "Technical review by bilingual expert"
        Priority: MEDIUM
        """
        assert "RULE-0352" in all_results['results'], "Rule RULE-0352 missing"
        result = all_results['results']["RULE-0352"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0352 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0352 failed"


    def test_rule_0353(self, all_results):
        """
        Test RULE-0353: YAML line: step_3: "Native speaker validation"
        Priority: MEDIUM
        """
        assert "RULE-0353" in all_results['results'], "Rule RULE-0353 missing"
        result = all_results['results']["RULE-0353"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0353 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0353 failed"


    def test_rule_0354(self, all_results):
        """
        Test RULE-0354: YAML line: step_4: "Cultural appropriateness check"
        Priority: MEDIUM
        """
        assert "RULE-0354" in all_results['results'], "Rule RULE-0354 missing"
        result = all_results['results']["RULE-0354"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0354 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0354 failed"


    def test_rule_0355(self, all_results):
        """
        Test RULE-0355: YAML line: step_5: "Final quality assurance"
        Priority: MEDIUM
        """
        assert "RULE-0355" in all_results['results'], "Rule RULE-0355 missing"
        result = all_results['results']["RULE-0355"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0355 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0355 failed"


    def test_rule_0356(self, all_results):
        """
        Test RULE-0356: YAML line: maintenance_schedule:
        Priority: MEDIUM
        """
        assert "RULE-0356" in all_results['results'], "Rule RULE-0356 missing"
        result = all_results['results']["RULE-0356"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0356 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0356 failed"


    def test_rule_0357(self, all_results):
        """
        Test RULE-0357: YAML line: major_updates: "Full retranslation within 30 days"
        Priority: MEDIUM
        """
        assert "RULE-0357" in all_results['results'], "Rule RULE-0357 missing"
        result = all_results['results']["RULE-0357"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0357 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0357 failed"


    def test_rule_0358(self, all_results):
        """
        Test RULE-0358: YAML line: minor_updates: "Translation within 14 days"
        Priority: MEDIUM
        """
        assert "RULE-0358" in all_results['results'], "Rule RULE-0358 missing"
        result = all_results['results']["RULE-0358"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0358 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0358 failed"


    def test_rule_0359(self, all_results):
        """
        Test RULE-0359: YAML line: urgent_updates: "Translation within 48 hours"
        Priority: MEDIUM
        """
        assert "RULE-0359" in all_results['results'], "Rule RULE-0359 missing"
        result = all_results['results']["RULE-0359"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0359 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0359 failed"


    def test_rule_0360(self, all_results):
        """
        Test RULE-0360: YAML line: quarterly_review: "Full consistency check"
        Priority: MEDIUM
        """
        assert "RULE-0360" in all_results['results'], "Rule RULE-0360 missing"
        result = all_results['results']["RULE-0360"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0360 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0360 failed"


    def test_rule_0361(self, all_results):
        """
        Test RULE-0361: YAML line: specialized_terminology:
        Priority: MEDIUM
        """
        assert "RULE-0361" in all_results['results'], "Rule RULE-0361 missing"
        result = all_results['results']["RULE-0361"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0361 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0361 failed"


    def test_rule_0362(self, all_results):
        """
        Test RULE-0362: YAML line: legal_terms: "Certified legal translator required"
        Priority: CRITICAL
        """
        assert "RULE-0362" in all_results['results'], "Rule RULE-0362 missing"
        result = all_results['results']["RULE-0362"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0362 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0362 failed"


    def test_rule_0363(self, all_results):
        """
        Test RULE-0363: YAML line: regulatory_terms: "Compliance expert validation"
        Priority: CRITICAL
        """
        assert "RULE-0363" in all_results['results'], "Rule RULE-0363 missing"
        result = all_results['results']["RULE-0363"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0363 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0363 failed"


    def test_rule_0364(self, all_results):
        """
        Test RULE-0364: YAML line: technical_terms: "Technical subject matter expert review"
        Priority: MEDIUM
        """
        assert "RULE-0364" in all_results['results'], "Rule RULE-0364 missing"
        result = all_results['results']["RULE-0364"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0364 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0364 failed"


    def test_rule_0365(self, all_results):
        """
        Test RULE-0365: YAML line: business_terms: "Local business context validation"
        Priority: MEDIUM
        """
        assert "RULE-0365" in all_results['results'], "Rule RULE-0365 missing"
        result = all_results['results']["RULE-0365"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0365 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0365 failed"


    def test_rule_0366(self, all_results):
        """
        Test RULE-0366: YAML field 'version' must equal '1.0'
        Priority: HIGH
        """
        assert "RULE-0366" in all_results['results'], "Rule RULE-0366 missing"
        result = all_results['results']["RULE-0366"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "HIGH" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0366 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0366 failed"


    def test_rule_0367(self, all_results):
        """
        Test RULE-0367: YAML field 'date' must equal '2025-09-15'
        Priority: MEDIUM
        """
        assert "RULE-0367" in all_results['results'], "Rule RULE-0367 missing"
        result = all_results['results']["RULE-0367"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0367 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0367 failed"


    def test_rule_0368(self, all_results):
        """
        Test RULE-0368: YAML field 'deprecated' must equal 'False'
        Priority: CRITICAL
        """
        assert "RULE-0368" in all_results['results'], "Rule RULE-0368 missing"
        result = all_results['results']["RULE-0368"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0368 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0368 failed"


    def test_rule_0369(self, all_results):
        """
        Test RULE-0369: YAML field 'classification' must equal 'PUBLIC - Legal Disclaimers'
        Priority: CRITICAL
        """
        assert "RULE-0369" in all_results['results'], "Rule RULE-0369 missing"
        result = all_results['results']["RULE-0369"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0369 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0369 failed"


    def test_rule_0370(self, all_results):
        """
        Test RULE-0370: YAML field 'investment_disclaimers.no_public_offer' must equal 'True'
        Priority: CRITICAL
        """
        assert "RULE-0370" in all_results['results'], "Rule RULE-0370 missing"
        result = all_results['results']["RULE-0370"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0370 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0370 failed"


    def test_rule_0371(self, all_results):
        """
        Test RULE-0371: YAML field 'investment_disclaimers.no_investment_vehicle' must equal 'True'
        Priority: CRITICAL
        """
        assert "RULE-0371" in all_results['results'], "Rule RULE-0371 missing"
        result = all_results['results']["RULE-0371"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0371 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0371 failed"


    def test_rule_0372(self, all_results):
        """
        Test RULE-0372: YAML field 'investment_disclaimers.no_yield_promises' must equal 'True'
        Priority: CRITICAL
        """
        assert "RULE-0372" in all_results['results'], "Rule RULE-0372 missing"
        result = all_results['results']["RULE-0372"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0372 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0372 failed"


    def test_rule_0373(self, all_results):
        """
        Test RULE-0373: YAML field 'investment_disclaimers.no_custody_services' must equal 'True'
        Priority: CRITICAL
        """
        assert "RULE-0373" in all_results['results'], "Rule RULE-0373 missing"
        result = all_results['results']["RULE-0373"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0373 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0373 failed"


    def test_rule_0374(self, all_results):
        """
        Test RULE-0374: YAML field 'investment_disclaimers.no_financial_advice' must equal 'True'
        Priority: CRITICAL
        """
        assert "RULE-0374" in all_results['results'], "Rule RULE-0374 missing"
        result = all_results['results']["RULE-0374"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0374 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0374 failed"


    def test_rule_0375(self, all_results):
        """
        Test RULE-0375: YAML field 'investment_disclaimers.no_solicitation' must equal 'True'
        Priority: CRITICAL
        """
        assert "RULE-0375" in all_results['results'], "Rule RULE-0375 missing"
        result = all_results['results']["RULE-0375"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0375 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0375 failed"


    def test_rule_0376(self, all_results):
        """
        Test RULE-0376: YAML field 'legal_position.framework_purpose' must equal 'Technical and complian
        Priority: CRITICAL
        """
        assert "RULE-0376" in all_results['results'], "Rule RULE-0376 missing"
        result = all_results['results']["RULE-0376"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0376 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0376 failed"


    def test_rule_0377(self, all_results):
        """
        Test RULE-0377: YAML field 'legal_position.token_purpose' must equal 'Pure utility for identity 
        Priority: HIGH
        """
        assert "RULE-0377" in all_results['results'], "Rule RULE-0377 missing"
        result = all_results['results']["RULE-0377"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "HIGH" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0377 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0377 failed"


    def test_rule_0378(self, all_results):
        """
        Test RULE-0378: YAML field 'legal_position.business_model' must equal 'Open source technology pu
        Priority: MEDIUM
        """
        assert "RULE-0378" in all_results['results'], "Rule RULE-0378 missing"
        result = all_results['results']["RULE-0378"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0378 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0378 failed"


    def test_rule_0379(self, all_results):
        """
        Test RULE-0379: YAML field 'legal_position.revenue_source' must equal 'Development services and 
        Priority: MEDIUM
        """
        assert "RULE-0379" in all_results['results'], "Rule RULE-0379 missing"
        result = all_results['results']["RULE-0379"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0379 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0379 failed"


    def test_rule_0380(self, all_results):
        """
        Test RULE-0380: YAML list 'prohibited_representations' must contain 6 elements
        Priority: HIGH
        """
        assert "RULE-0380" in all_results['results'], "Rule RULE-0380 missing"
        result = all_results['results']["RULE-0380"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "HIGH" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0380 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0380 failed"


    def test_rule_0381(self, all_results):
        """
        Test RULE-0381: YAML field 'compliance_statements.securities_law' must equal 'Not a security und
        Priority: CRITICAL
        """
        assert "RULE-0381" in all_results['results'], "Rule RULE-0381 missing"
        result = all_results['results']["RULE-0381"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0381 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0381 failed"


    def test_rule_0382(self, all_results):
        """
        Test RULE-0382: YAML field 'compliance_statements.money_transmission' must equal 'No money trans
        Priority: MEDIUM
        """
        assert "RULE-0382" in all_results['results'], "Rule RULE-0382 missing"
        result = all_results['results']["RULE-0382"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0382 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0382 failed"


    def test_rule_0383(self, all_results):
        """
        Test RULE-0383: YAML field 'compliance_statements.banking_services' must equal 'No banking or cu
        Priority: MEDIUM
        """
        assert "RULE-0383" in all_results['results'], "Rule RULE-0383 missing"
        result = all_results['results']["RULE-0383"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0383 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0383 failed"


    def test_rule_0384(self, all_results):
        """
        Test RULE-0384: YAML field 'compliance_statements.investment_advice' must equal 'No investment o
        Priority: MEDIUM
        """
        assert "RULE-0384" in all_results['results'], "Rule RULE-0384 missing"
        result = all_results['results']["RULE-0384"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0384 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0384 failed"


    def test_rule_0385(self, all_results):
        """
        Test RULE-0385: YAML field 'user_responsibilities.regulatory_compliance' must equal 'Users respo
        Priority: CRITICAL
        """
        assert "RULE-0385" in all_results['results'], "Rule RULE-0385 missing"
        result = all_results['results']["RULE-0385"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0385 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0385 failed"


    def test_rule_0386(self, all_results):
        """
        Test RULE-0386: YAML field 'user_responsibilities.tax_obligations' must equal 'Users responsible
        Priority: MEDIUM
        """
        assert "RULE-0386" in all_results['results'], "Rule RULE-0386 missing"
        result = all_results['results']["RULE-0386"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0386 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0386 failed"


    def test_rule_0387(self, all_results):
        """
        Test RULE-0387: YAML field 'user_responsibilities.legal_validation' must equal 'Independent lega
        Priority: CRITICAL
        """
        assert "RULE-0387" in all_results['results'], "Rule RULE-0387 missing"
        result = all_results['results']["RULE-0387"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0387 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0387 failed"


    def test_rule_0388(self, all_results):
        """
        Test RULE-0388: YAML field 'user_responsibilities.risk_assessment' must equal 'Users must assess
        Priority: CRITICAL
        """
        assert "RULE-0388" in all_results['results'], "Rule RULE-0388 missing"
        result = all_results['results']["RULE-0388"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0388 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0388 failed"


    def test_rule_0389(self, all_results):
        """
        Test RULE-0389: YAML field 'regulatory_safe_harbor.eu_mica_compliance' must equal 'Utility token
        Priority: CRITICAL
        """
        assert "RULE-0389" in all_results['results'], "Rule RULE-0389 missing"
        result = all_results['results']["RULE-0389"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0389 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0389 failed"


    def test_rule_0390(self, all_results):
        """
        Test RULE-0390: YAML field 'regulatory_safe_harbor.us_securities_law' must equal 'No securities 
        Priority: MEDIUM
        """
        assert "RULE-0390" in all_results['results'], "Rule RULE-0390 missing"
        result = all_results['results']["RULE-0390"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0390 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0390 failed"


    def test_rule_0391(self, all_results):
        """
        Test RULE-0391: YAML field 'regulatory_safe_harbor.uk_fca_compliance' must equal 'No regulated f
        Priority: CRITICAL
        """
        assert "RULE-0391" in all_results['results'], "Rule RULE-0391 missing"
        result = all_results['results']["RULE-0391"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0391 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0391 failed"


    def test_rule_0392(self, all_results):
        """
        Test RULE-0392: YAML field 'regulatory_safe_harbor.singapore_mas' must equal 'Software license e
        Priority: MEDIUM
        """
        assert "RULE-0392" in all_results['results'], "Rule RULE-0392 missing"
        result = all_results['results']["RULE-0392"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0392 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0392 failed"


    def test_rule_0393(self, all_results):
        """
        Test RULE-0393: YAML field 'regulatory_safe_harbor.switzerland_finma' must equal 'Technology pro
        Priority: MEDIUM
        """
        assert "RULE-0393" in all_results['results'], "Rule RULE-0393 missing"
        result = all_results['results']["RULE-0393"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0393 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0393 failed"


    def test_rule_0394(self, all_results):
        """
        Test RULE-0394: YAML line: version: "1.0"
        Priority: MEDIUM
        """
        assert "RULE-0394" in all_results['results'], "Rule RULE-0394 missing"
        result = all_results['results']["RULE-0394"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0394 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0394 failed"


    def test_rule_0395(self, all_results):
        """
        Test RULE-0395: YAML line: date: "2025-09-15"
        Priority: MEDIUM
        """
        assert "RULE-0395" in all_results['results'], "Rule RULE-0395 missing"
        result = all_results['results']["RULE-0395"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0395 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0395 failed"


    def test_rule_0396(self, all_results):
        """
        Test RULE-0396: YAML line: deprecated: false
        Priority: MEDIUM
        """
        assert "RULE-0396" in all_results['results'], "Rule RULE-0396 missing"
        result = all_results['results']["RULE-0396"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0396 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0396 failed"


    def test_rule_0397(self, all_results):
        """
        Test RULE-0397: YAML line: classification: "PUBLIC - Legal Disclaimers"
        Priority: CRITICAL
        """
        assert "RULE-0397" in all_results['results'], "Rule RULE-0397 missing"
        result = all_results['results']["RULE-0397"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0397 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0397 failed"


    def test_rule_0398(self, all_results):
        """
        Test RULE-0398: YAML line: investment_disclaimers:
        Priority: MEDIUM
        """
        assert "RULE-0398" in all_results['results'], "Rule RULE-0398 missing"
        result = all_results['results']["RULE-0398"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0398 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0398 failed"


    def test_rule_0399(self, all_results):
        """
        Test RULE-0399: YAML line: no_public_offer: true
        Priority: MEDIUM
        """
        assert "RULE-0399" in all_results['results'], "Rule RULE-0399 missing"
        result = all_results['results']["RULE-0399"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0399 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0399 failed"


    def test_rule_0400(self, all_results):
        """
        Test RULE-0400: YAML line: no_investment_vehicle: true
        Priority: MEDIUM
        """
        assert "RULE-0400" in all_results['results'], "Rule RULE-0400 missing"
        result = all_results['results']["RULE-0400"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0400 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0400 failed"


    def test_rule_0401(self, all_results):
        """
        Test RULE-0401: YAML line: no_yield_promises: true
        Priority: MEDIUM
        """
        assert "RULE-0401" in all_results['results'], "Rule RULE-0401 missing"
        result = all_results['results']["RULE-0401"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0401 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0401 failed"


    def test_rule_0402(self, all_results):
        """
        Test RULE-0402: YAML line: no_custody_services: true
        Priority: MEDIUM
        """
        assert "RULE-0402" in all_results['results'], "Rule RULE-0402 missing"
        result = all_results['results']["RULE-0402"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0402 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0402 failed"


    def test_rule_0403(self, all_results):
        """
        Test RULE-0403: YAML line: no_financial_advice: true
        Priority: MEDIUM
        """
        assert "RULE-0403" in all_results['results'], "Rule RULE-0403 missing"
        result = all_results['results']["RULE-0403"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0403 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0403 failed"


    def test_rule_0404(self, all_results):
        """
        Test RULE-0404: YAML line: no_solicitation: true
        Priority: MEDIUM
        """
        assert "RULE-0404" in all_results['results'], "Rule RULE-0404 missing"
        result = all_results['results']["RULE-0404"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0404 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0404 failed"


    def test_rule_0405(self, all_results):
        """
        Test RULE-0405: YAML line: legal_position:
        Priority: CRITICAL
        """
        assert "RULE-0405" in all_results['results'], "Rule RULE-0405 missing"
        result = all_results['results']["RULE-0405"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0405 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0405 failed"


    def test_rule_0406(self, all_results):
        """
        Test RULE-0406: YAML line: framework_purpose: "Technical and compliance documentation only"
        Priority: CRITICAL
        """
        assert "RULE-0406" in all_results['results'], "Rule RULE-0406 missing"
        result = all_results['results']["RULE-0406"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0406 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0406 failed"


    def test_rule_0407(self, all_results):
        """
        Test RULE-0407: YAML line: token_purpose: "Pure utility for identity verification services"
        Priority: MEDIUM
        """
        assert "RULE-0407" in all_results['results'], "Rule RULE-0407 missing"
        result = all_results['results']["RULE-0407"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0407 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0407 failed"


    def test_rule_0408(self, all_results):
        """
        Test RULE-0408: YAML line: business_model: "Open source technology publisher"
        Priority: MEDIUM
        """
        assert "RULE-0408" in all_results['results'], "Rule RULE-0408 missing"
        result = all_results['results']["RULE-0408"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0408 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0408 failed"


    def test_rule_0409(self, all_results):
        """
        Test RULE-0409: YAML line: revenue_source: "Development services and consulting only"
        Priority: MEDIUM
        """
        assert "RULE-0409" in all_results['results'], "Rule RULE-0409 missing"
        result = all_results['results']["RULE-0409"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0409 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0409 failed"


    def test_rule_0410(self, all_results):
        """
        Test RULE-0410: YAML line: prohibited_representations:
        Priority: MEDIUM
        """
        assert "RULE-0410" in all_results['results'], "Rule RULE-0410 missing"
        result = all_results['results']["RULE-0410"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0410 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0410 failed"


    def test_rule_0411(self, all_results):
        """
        Test RULE-0411: YAML line: - "Investment opportunity"
        Priority: MEDIUM
        """
        assert "RULE-0411" in all_results['results'], "Rule RULE-0411 missing"
        result = all_results['results']["RULE-0411"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0411 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0411 failed"


    def test_rule_0412(self, all_results):
        """
        Test RULE-0412: YAML line: - "Expected returns or yields"
        Priority: MEDIUM
        """
        assert "RULE-0412" in all_results['results'], "Rule RULE-0412 missing"
        result = all_results['results']["RULE-0412"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0412 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0412 failed"


    def test_rule_0413(self, all_results):
        """
        Test RULE-0413: YAML line: - "Token price appreciation"
        Priority: MEDIUM
        """
        assert "RULE-0413" in all_results['results'], "Rule RULE-0413 missing"
        result = all_results['results']["RULE-0413"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0413 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0413 failed"


    def test_rule_0414(self, all_results):
        """
        Test RULE-0414: YAML line: - "Passive income generation"
        Priority: MEDIUM
        """
        assert "RULE-0414" in all_results['results'], "Rule RULE-0414 missing"
        result = all_results['results']["RULE-0414"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0414 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0414 failed"


    def test_rule_0415(self, all_results):
        """
        Test RULE-0415: YAML line: - "Securities offering"
        Priority: MEDIUM
        """
        assert "RULE-0415" in all_results['results'], "Rule RULE-0415 missing"
        result = all_results['results']["RULE-0415"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0415 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0415 failed"


    def test_rule_0416(self, all_results):
        """
        Test RULE-0416: YAML line: - "Financial services provision"
        Priority: MEDIUM
        """
        assert "RULE-0416" in all_results['results'], "Rule RULE-0416 missing"
        result = all_results['results']["RULE-0416"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0416 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0416 failed"


    def test_rule_0417(self, all_results):
        """
        Test RULE-0417: YAML line: compliance_statements:
        Priority: CRITICAL
        """
        assert "RULE-0417" in all_results['results'], "Rule RULE-0417 missing"
        result = all_results['results']["RULE-0417"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0417 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0417 failed"


    def test_rule_0418(self, all_results):
        """
        Test RULE-0418: YAML line: securities_law: "Not a security under applicable securities laws"
        Priority: CRITICAL
        """
        assert "RULE-0418" in all_results['results'], "Rule RULE-0418 missing"
        result = all_results['results']["RULE-0418"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0418 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0418 failed"


    def test_rule_0419(self, all_results):
        """
        Test RULE-0419: YAML line: money_transmission: "No money transmission services provided"
        Priority: MEDIUM
        """
        assert "RULE-0419" in all_results['results'], "Rule RULE-0419 missing"
        result = all_results['results']["RULE-0419"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0419 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0419 failed"


    def test_rule_0420(self, all_results):
        """
        Test RULE-0420: YAML line: banking_services: "No banking or custodial services offered"
        Priority: MEDIUM
        """
        assert "RULE-0420" in all_results['results'], "Rule RULE-0420 missing"
        result = all_results['results']["RULE-0420"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0420 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0420 failed"


    def test_rule_0421(self, all_results):
        """
        Test RULE-0421: YAML line: investment_advice: "No investment or financial advice provided"
        Priority: MEDIUM
        """
        assert "RULE-0421" in all_results['results'], "Rule RULE-0421 missing"
        result = all_results['results']["RULE-0421"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0421 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0421 failed"


    def test_rule_0422(self, all_results):
        """
        Test RULE-0422: YAML line: user_responsibilities:
        Priority: MEDIUM
        """
        assert "RULE-0422" in all_results['results'], "Rule RULE-0422 missing"
        result = all_results['results']["RULE-0422"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0422 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0422 failed"


    def test_rule_0423(self, all_results):
        """
        Test RULE-0423: YAML line: regulatory_compliance: "Users responsible for local compliance"
        Priority: CRITICAL
        """
        assert "RULE-0423" in all_results['results'], "Rule RULE-0423 missing"
        result = all_results['results']["RULE-0423"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0423 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0423 failed"


    def test_rule_0424(self, all_results):
        """
        Test RULE-0424: YAML line: tax_obligations: "Users responsible for tax reporting"
        Priority: MEDIUM
        """
        assert "RULE-0424" in all_results['results'], "Rule RULE-0424 missing"
        result = all_results['results']["RULE-0424"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0424 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0424 failed"


    def test_rule_0425(self, all_results):
        """
        Test RULE-0425: YAML line: legal_validation: "Independent legal review required"
        Priority: CRITICAL
        """
        assert "RULE-0425" in all_results['results'], "Rule RULE-0425 missing"
        result = all_results['results']["RULE-0425"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0425 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0425 failed"


    def test_rule_0426(self, all_results):
        """
        Test RULE-0426: YAML line: risk_assessment: "Users must assess own risk tolerance"
        Priority: CRITICAL
        """
        assert "RULE-0426" in all_results['results'], "Rule RULE-0426 missing"
        result = all_results['results']["RULE-0426"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0426 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0426 failed"


    def test_rule_0427(self, all_results):
        """
        Test RULE-0427: YAML line: regulatory_safe_harbor:
        Priority: MEDIUM
        """
        assert "RULE-0427" in all_results['results'], "Rule RULE-0427 missing"
        result = all_results['results']["RULE-0427"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0427 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0427 failed"


    def test_rule_0428(self, all_results):
        """
        Test RULE-0428: YAML line: eu_mica_compliance: "Utility token exemption under Article 3"
        Priority: CRITICAL
        """
        assert "RULE-0428" in all_results['results'], "Rule RULE-0428 missing"
        result = all_results['results']["RULE-0428"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0428 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0428 failed"


    def test_rule_0429(self, all_results):
        """
        Test RULE-0429: YAML line: us_securities_law: "No securities offering under Howey Test"
        Priority: MEDIUM
        """
        assert "RULE-0429" in all_results['results'], "Rule RULE-0429 missing"
        result = all_results['results']["RULE-0429"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0429 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0429 failed"


    def test_rule_0430(self, all_results):
        """
        Test RULE-0430: YAML line: uk_fca_compliance: "No regulated financial services provided"
        Priority: CRITICAL
        """
        assert "RULE-0430" in all_results['results'], "Rule RULE-0430 missing"
        result = all_results['results']["RULE-0430"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0430 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0430 failed"


    def test_rule_0431(self, all_results):
        """
        Test RULE-0431: YAML line: singapore_mas: "Software license exemption maintained"
        Priority: MEDIUM
        """
        assert "RULE-0431" in all_results['results'], "Rule RULE-0431 missing"
        result = all_results['results']["RULE-0431"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0431 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0431 failed"


    def test_rule_0432(self, all_results):
        """
        Test RULE-0432: YAML line: switzerland_finma: "Technology provider classification"
        Priority: MEDIUM
        """
        assert "RULE-0432" in all_results['results'], "Rule RULE-0432 missing"
        result = all_results['results']["RULE-0432"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0432 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0432 failed"


    def test_rule_0433(self, all_results):
        """
        Test RULE-0433: YAML field 'version' must equal '1.0'
        Priority: HIGH
        """
        assert "RULE-0433" in all_results['results'], "Rule RULE-0433 missing"
        result = all_results['results']["RULE-0433"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "HIGH" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0433 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0433 failed"


    def test_rule_0434(self, all_results):
        """
        Test RULE-0434: YAML field 'date' must equal '2025-09-15'
        Priority: MEDIUM
        """
        assert "RULE-0434" in all_results['results'], "Rule RULE-0434 missing"
        result = all_results['results']["RULE-0434"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0434 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0434 failed"


    def test_rule_0435(self, all_results):
        """
        Test RULE-0435: YAML field 'deprecated' must equal 'False'
        Priority: CRITICAL
        """
        assert "RULE-0435" in all_results['results'], "Rule RULE-0435 missing"
        result = all_results['results']["RULE-0435"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0435 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0435 failed"


    def test_rule_0436(self, all_results):
        """
        Test RULE-0436: YAML field 'classification' must equal 'CONFIDENTIAL - Partnership Strategy'
        Priority: MEDIUM
        """
        assert "RULE-0436" in all_results['results'], "Rule RULE-0436 missing"
        result = all_results['results']["RULE-0436"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0436 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0436 failed"


    def test_rule_0437(self, all_results):
        """
        Test RULE-0437: YAML field 'partnership_tiers.tier_1_strategic.description' must equal 'Fortune 
        Priority: MEDIUM
        """
        assert "RULE-0437" in all_results['results'], "Rule RULE-0437 missing"
        result = all_results['results']["RULE-0437"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0437 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0437 failed"


    def test_rule_0438(self, all_results):
        """
        Test RULE-0438: YAML list 'partnership_tiers.tier_1_strategic.benefits' must contain 3 elements
        Priority: MEDIUM
        """
        assert "RULE-0438" in all_results['results'], "Rule RULE-0438 missing"
        result = all_results['results']["RULE-0438"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0438 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0438 failed"


    def test_rule_0439(self, all_results):
        """
        Test RULE-0439: YAML list 'partnership_tiers.tier_1_strategic.requirements' must contain 3 eleme
        Priority: CRITICAL
        """
        assert "RULE-0439" in all_results['results'], "Rule RULE-0439 missing"
        result = all_results['results']["RULE-0439"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0439 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0439 failed"


    def test_rule_0440(self, all_results):
        """
        Test RULE-0440: YAML field 'partnership_tiers.tier_2_specialized.description' must equal 'Compli
        Priority: CRITICAL
        """
        assert "RULE-0440" in all_results['results'], "Rule RULE-0440 missing"
        result = all_results['results']["RULE-0440"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0440 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0440 failed"


    def test_rule_0441(self, all_results):
        """
        Test RULE-0441: YAML list 'partnership_tiers.tier_2_specialized.benefits' must contain 3 element
        Priority: MEDIUM
        """
        assert "RULE-0441" in all_results['results'], "Rule RULE-0441 missing"
        result = all_results['results']["RULE-0441"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0441 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0441 failed"


    def test_rule_0442(self, all_results):
        """
        Test RULE-0442: YAML list 'partnership_tiers.tier_2_specialized.requirements' must contain 2 ele
        Priority: CRITICAL
        """
        assert "RULE-0442" in all_results['results'], "Rule RULE-0442 missing"
        result = all_results['results']["RULE-0442"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0442 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0442 failed"


    def test_rule_0443(self, all_results):
        """
        Test RULE-0443: YAML field 'partnership_tiers.tier_3_technology.description' must equal 'Technol
        Priority: MEDIUM
        """
        assert "RULE-0443" in all_results['results'], "Rule RULE-0443 missing"
        result = all_results['results']["RULE-0443"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0443 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0443 failed"


    def test_rule_0444(self, all_results):
        """
        Test RULE-0444: YAML list 'partnership_tiers.tier_3_technology.benefits' must contain 3 elements
        Priority: MEDIUM
        """
        assert "RULE-0444" in all_results['results'], "Rule RULE-0444 missing"
        result = all_results['results']["RULE-0444"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0444 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0444 failed"


    def test_rule_0445(self, all_results):
        """
        Test RULE-0445: YAML list 'partnership_tiers.tier_3_technology.requirements' must contain 2 elem
        Priority: MEDIUM
        """
        assert "RULE-0445" in all_results['results'], "Rule RULE-0445 missing"
        result = all_results['results']["RULE-0445"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0445 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0445 failed"


    def test_rule_0446(self, all_results):
        """
        Test RULE-0446: YAML field 'partnership_benefits.revenue_sharing' must equal 'Performance-based 
        Priority: MEDIUM
        """
        assert "RULE-0446" in all_results['results'], "Rule RULE-0446 missing"
        result = all_results['results']["RULE-0446"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0446 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0446 failed"


    def test_rule_0447(self, all_results):
        """
        Test RULE-0447: YAML field 'partnership_benefits.technical_support' must equal 'Dedicated techni
        Priority: MEDIUM
        """
        assert "RULE-0447" in all_results['results'], "Rule RULE-0447 missing"
        result = all_results['results']["RULE-0447"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0447 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0447 failed"


    def test_rule_0448(self, all_results):
        """
        Test RULE-0448: YAML field 'partnership_benefits.marketing_support' must equal 'Co-marketing and
        Priority: MEDIUM
        """
        assert "RULE-0448" in all_results['results'], "Rule RULE-0448 missing"
        result = all_results['results']["RULE-0448"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0448 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0448 failed"


    def test_rule_0449(self, all_results):
        """
        Test RULE-0449: YAML field 'partnership_benefits.training_programs' must equal 'Comprehensive ce
        Priority: MEDIUM
        """
        assert "RULE-0449" in all_results['results'], "Rule RULE-0449 missing"
        result = all_results['results']["RULE-0449"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0449 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0449 failed"


    def test_rule_0450(self, all_results):
        """
        Test RULE-0450: YAML field 'partnership_requirements.legal_compliance' must equal 'Full regulato
        Priority: CRITICAL
        """
        assert "RULE-0450" in all_results['results'], "Rule RULE-0450 missing"
        result = all_results['results']["RULE-0450"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0450 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0450 failed"


    def test_rule_0451(self, all_results):
        """
        Test RULE-0451: YAML field 'partnership_requirements.technical_competence' must equal 'Demonstra
        Priority: MEDIUM
        """
        assert "RULE-0451" in all_results['results'], "Rule RULE-0451 missing"
        result = all_results['results']["RULE-0451"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0451 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0451 failed"


    def test_rule_0452(self, all_results):
        """
        Test RULE-0452: YAML field 'partnership_requirements.business_ethics' must equal 'Adherence to S
        Priority: MEDIUM
        """
        assert "RULE-0452" in all_results['results'], "Rule RULE-0452 missing"
        result = all_results['results']["RULE-0452"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0452 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0452 failed"


    def test_rule_0453(self, all_results):
        """
        Test RULE-0453: YAML field 'partnership_requirements.confidentiality' must equal 'Execution of c
        Priority: MEDIUM
        """
        assert "RULE-0453" in all_results['results'], "Rule RULE-0453 missing"
        result = all_results['results']["RULE-0453"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0453 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0453 failed"


    def test_rule_0454(self, all_results):
        """
        Test RULE-0454: YAML line: version: "1.0"
        Priority: MEDIUM
        """
        assert "RULE-0454" in all_results['results'], "Rule RULE-0454 missing"
        result = all_results['results']["RULE-0454"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0454 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0454 failed"


    def test_rule_0455(self, all_results):
        """
        Test RULE-0455: YAML line: date: "2025-09-15"
        Priority: MEDIUM
        """
        assert "RULE-0455" in all_results['results'], "Rule RULE-0455 missing"
        result = all_results['results']["RULE-0455"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0455 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0455 failed"


    def test_rule_0456(self, all_results):
        """
        Test RULE-0456: YAML line: deprecated: false
        Priority: MEDIUM
        """
        assert "RULE-0456" in all_results['results'], "Rule RULE-0456 missing"
        result = all_results['results']["RULE-0456"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0456 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0456 failed"


    def test_rule_0457(self, all_results):
        """
        Test RULE-0457: YAML line: classification: "CONFIDENTIAL - Partnership Strategy"
        Priority: MEDIUM
        """
        assert "RULE-0457" in all_results['results'], "Rule RULE-0457 missing"
        result = all_results['results']["RULE-0457"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0457 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0457 failed"


    def test_rule_0458(self, all_results):
        """
        Test RULE-0458: YAML line: partnership_tiers:
        Priority: MEDIUM
        """
        assert "RULE-0458" in all_results['results'], "Rule RULE-0458 missing"
        result = all_results['results']["RULE-0458"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0458 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0458 failed"


    def test_rule_0459(self, all_results):
        """
        Test RULE-0459: YAML line: tier_1_strategic:
        Priority: MEDIUM
        """
        assert "RULE-0459" in all_results['results'], "Rule RULE-0459 missing"
        result = all_results['results']["RULE-0459"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0459 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0459 failed"


    def test_rule_0460(self, all_results):
        """
        Test RULE-0460: YAML line: description: "Fortune 500 implementation partners"
        Priority: MEDIUM
        """
        assert "RULE-0460" in all_results['results'], "Rule RULE-0460 missing"
        result = all_results['results']["RULE-0460"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0460 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0460 failed"


    def test_rule_0461(self, all_results):
        """
        Test RULE-0461: YAML line: benefits: ["Priority support", "Custom implementations", "Co-marketin
        Priority: MEDIUM
        """
        assert "RULE-0461" in all_results['results'], "Rule RULE-0461 missing"
        result = all_results['results']["RULE-0461"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0461 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0461 failed"


    def test_rule_0462(self, all_results):
        """
        Test RULE-0462: YAML line: requirements: ["$10M+ revenue", "Compliance expertise", "Global prese
        Priority: CRITICAL
        """
        assert "RULE-0462" in all_results['results'], "Rule RULE-0462 missing"
        result = all_results['results']["RULE-0462"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0462 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0462 failed"


    def test_rule_0463(self, all_results):
        """
        Test RULE-0463: YAML line: tier_2_specialized:
        Priority: MEDIUM
        """
        assert "RULE-0463" in all_results['results'], "Rule RULE-0463 missing"
        result = all_results['results']["RULE-0463"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0463 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0463 failed"


    def test_rule_0464(self, all_results):
        """
        Test RULE-0464: YAML line: description: "Compliance and consulting firms"
        Priority: CRITICAL
        """
        assert "RULE-0464" in all_results['results'], "Rule RULE-0464 missing"
        result = all_results['results']["RULE-0464"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0464 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0464 failed"


    def test_rule_0465(self, all_results):
        """
        Test RULE-0465: YAML line: benefits: ["Certification programs", "Training access", "Referral fee
        Priority: MEDIUM
        """
        assert "RULE-0465" in all_results['results'], "Rule RULE-0465 missing"
        result = all_results['results']["RULE-0465"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0465 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0465 failed"


    def test_rule_0466(self, all_results):
        """
        Test RULE-0466: YAML line: requirements: ["Compliance credentials", "Technical capabilities"]
        Priority: CRITICAL
        """
        assert "RULE-0466" in all_results['results'], "Rule RULE-0466 missing"
        result = all_results['results']["RULE-0466"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0466 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0466 failed"


    def test_rule_0467(self, all_results):
        """
        Test RULE-0467: YAML line: tier_3_technology:
        Priority: MEDIUM
        """
        assert "RULE-0467" in all_results['results'], "Rule RULE-0467 missing"
        result = all_results['results']["RULE-0467"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0467 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0467 failed"


    def test_rule_0468(self, all_results):
        """
        Test RULE-0468: YAML line: description: "Technology integration partners"
        Priority: MEDIUM
        """
        assert "RULE-0468" in all_results['results'], "Rule RULE-0468 missing"
        result = all_results['results']["RULE-0468"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0468 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0468 failed"


    def test_rule_0469(self, all_results):
        """
        Test RULE-0469: YAML line: benefits: ["Technical support", "Integration frameworks", "Joint deve
        Priority: MEDIUM
        """
        assert "RULE-0469" in all_results['results'], "Rule RULE-0469 missing"
        result = all_results['results']["RULE-0469"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0469 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0469 failed"


    def test_rule_0470(self, all_results):
        """
        Test RULE-0470: YAML line: requirements: ["Technical expertise", "Market presence"]
        Priority: MEDIUM
        """
        assert "RULE-0470" in all_results['results'], "Rule RULE-0470 missing"
        result = all_results['results']["RULE-0470"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0470 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0470 failed"


    def test_rule_0471(self, all_results):
        """
        Test RULE-0471: YAML line: partnership_benefits:
        Priority: MEDIUM
        """
        assert "RULE-0471" in all_results['results'], "Rule RULE-0471 missing"
        result = all_results['results']["RULE-0471"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0471 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0471 failed"


    def test_rule_0472(self, all_results):
        """
        Test RULE-0472: YAML line: revenue_sharing: "Performance-based fees for successful implementatio
        Priority: MEDIUM
        """
        assert "RULE-0472" in all_results['results'], "Rule RULE-0472 missing"
        result = all_results['results']["RULE-0472"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0472 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0472 failed"


    def test_rule_0473(self, all_results):
        """
        Test RULE-0473: YAML line: technical_support: "Dedicated technical account management"
        Priority: MEDIUM
        """
        assert "RULE-0473" in all_results['results'], "Rule RULE-0473 missing"
        result = all_results['results']["RULE-0473"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0473 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0473 failed"


    def test_rule_0474(self, all_results):
        """
        Test RULE-0474: YAML line: marketing_support: "Co-marketing and lead generation programs"
        Priority: MEDIUM
        """
        assert "RULE-0474" in all_results['results'], "Rule RULE-0474 missing"
        result = all_results['results']["RULE-0474"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0474 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0474 failed"


    def test_rule_0475(self, all_results):
        """
        Test RULE-0475: YAML line: training_programs: "Comprehensive certification and training"
        Priority: MEDIUM
        """
        assert "RULE-0475" in all_results['results'], "Rule RULE-0475 missing"
        result = all_results['results']["RULE-0475"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0475 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0475 failed"


    def test_rule_0476(self, all_results):
        """
        Test RULE-0476: YAML line: partnership_requirements:
        Priority: MEDIUM
        """
        assert "RULE-0476" in all_results['results'], "Rule RULE-0476 missing"
        result = all_results['results']["RULE-0476"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0476 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0476 failed"


    def test_rule_0477(self, all_results):
        """
        Test RULE-0477: YAML line: legal_compliance: "Full regulatory compliance in operating jurisdicti
        Priority: CRITICAL
        """
        assert "RULE-0477" in all_results['results'], "Rule RULE-0477 missing"
        result = all_results['results']["RULE-0477"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0477 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0477 failed"


    def test_rule_0478(self, all_results):
        """
        Test RULE-0478: YAML line: technical_competence: "Demonstrated technical implementation capabili
        Priority: MEDIUM
        """
        assert "RULE-0478" in all_results['results'], "Rule RULE-0478 missing"
        result = all_results['results']["RULE-0478"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0478 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0478 failed"


    def test_rule_0479(self, all_results):
        """
        Test RULE-0479: YAML line: business_ethics: "Adherence to SSID code of conduct"
        Priority: MEDIUM
        """
        assert "RULE-0479" in all_results['results'], "Rule RULE-0479 missing"
        result = all_results['results']["RULE-0479"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0479 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0479 failed"


    def test_rule_0480(self, all_results):
        """
        Test RULE-0480: YAML line: confidentiality: "Execution of comprehensive NDAs"
        Priority: MEDIUM
        """
        assert "RULE-0480" in all_results['results'], "Rule RULE-0480 missing"
        result = all_results['results']["RULE-0480"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0480 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0480 failed"


    def test_rule_0481(self, all_results):
        """
        Test RULE-0481: YAML field 'version' must equal '1.0'
        Priority: HIGH
        """
        assert "RULE-0481" in all_results['results'], "Rule RULE-0481 missing"
        result = all_results['results']["RULE-0481"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "HIGH" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0481 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0481 failed"


    def test_rule_0482(self, all_results):
        """
        Test RULE-0482: YAML field 'date' must equal '2025-09-15'
        Priority: MEDIUM
        """
        assert "RULE-0482" in all_results['results'], "Rule RULE-0482 missing"
        result = all_results['results']["RULE-0482"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0482 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0482 failed"


    def test_rule_0483(self, all_results):
        """
        Test RULE-0483: YAML field 'deprecated' must equal 'False'
        Priority: CRITICAL
        """
        assert "RULE-0483" in all_results['results'], "Rule RULE-0483 missing"
        result = all_results['results']["RULE-0483"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0483 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0483 failed"


    def test_rule_0484(self, all_results):
        """
        Test RULE-0484: YAML field 'classification' must equal 'PUBLIC - Version Management'
        Priority: HIGH
        """
        assert "RULE-0484" in all_results['results'], "Rule RULE-0484 missing"
        result = all_results['results']["RULE-0484"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "HIGH" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0484 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0484 failed"


    def test_rule_0485(self, all_results):
        """
        Test RULE-0485: YAML field 'versioning_scheme.format' must equal 'MAJOR.MINOR.PATCH'
        Priority: MEDIUM
        """
        assert "RULE-0485" in all_results['results'], "Rule RULE-0485 missing"
        result = all_results['results']["RULE-0485"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0485 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0485 failed"


    def test_rule_0486(self, all_results):
        """
        Test RULE-0486: YAML field 'versioning_scheme.major_changes' must equal 'Breaking compliance mat
        Priority: CRITICAL
        """
        assert "RULE-0486" in all_results['results'], "Rule RULE-0486 missing"
        result = all_results['results']["RULE-0486"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0486 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0486 failed"


    def test_rule_0487(self, all_results):
        """
        Test RULE-0487: YAML field 'versioning_scheme.minor_changes' must equal 'New jurisdiction additi
        Priority: MEDIUM
        """
        assert "RULE-0487" in all_results['results'], "Rule RULE-0487 missing"
        result = all_results['results']["RULE-0487"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0487 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0487 failed"


    def test_rule_0488(self, all_results):
        """
        Test RULE-0488: YAML field 'versioning_scheme.patch_changes' must equal 'Bug fixes, documentatio
        Priority: MEDIUM
        """
        assert "RULE-0488" in all_results['results'], "Rule RULE-0488 missing"
        result = all_results['results']["RULE-0488"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0488 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0488 failed"


    def test_rule_0489(self, all_results):
        """
        Test RULE-0489: YAML field 'current_version.version' must equal '4.1.0'
        Priority: HIGH
        """
        assert "RULE-0489" in all_results['results'], "Rule RULE-0489 missing"
        result = all_results['results']["RULE-0489"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "HIGH" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0489 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0489 failed"


    def test_rule_0490(self, all_results):
        """
        Test RULE-0490: YAML field 'current_version.release_date' must equal '2025-09-15'
        Priority: MEDIUM
        """
        assert "RULE-0490" in all_results['results'], "Rule RULE-0490 missing"
        result = all_results['results']["RULE-0490"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0490 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0490 failed"


    def test_rule_0491(self, all_results):
        """
        Test RULE-0491: YAML field 'current_version.codename' must equal 'Global Enterprise Ready'
        Priority: MEDIUM
        """
        assert "RULE-0491" in all_results['results'], "Rule RULE-0491 missing"
        result = all_results['results']["RULE-0491"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0491 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0491 failed"


    def test_rule_0492(self, all_results):
        """
        Test RULE-0492: YAML field 'current_version.lts_status' must equal 'True'
        Priority: CRITICAL
        """
        assert "RULE-0492" in all_results['results'], "Rule RULE-0492 missing"
        result = all_results['results']["RULE-0492"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0492 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0492 failed"


    def test_rule_0493(self, all_results):
        """
        Test RULE-0493: YAML list 'compatibility_matrix.supported_versions' must contain 3 elements
        Priority: HIGH
        """
        assert "RULE-0493" in all_results['results'], "Rule RULE-0493 missing"
        result = all_results['results']["RULE-0493"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "HIGH" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0493 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0493 failed"


    def test_rule_0494(self, all_results):
        """
        Test RULE-0494: YAML list 'compatibility_matrix.deprecated_versions' must contain 2 elements
        Priority: CRITICAL
        """
        assert "RULE-0494" in all_results['results'], "Rule RULE-0494 missing"
        result = all_results['results']["RULE-0494"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0494 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0494 failed"


    def test_rule_0495(self, all_results):
        """
        Test RULE-0495: YAML list 'compatibility_matrix.end_of_life' must contain 3 elements
        Priority: MEDIUM
        """
        assert "RULE-0495" in all_results['results'], "Rule RULE-0495 missing"
        result = all_results['results']["RULE-0495"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0495 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0495 failed"


    def test_rule_0496(self, all_results):
        """
        Test RULE-0496: YAML field 'deprecation_process.advance_notice' must equal '6 months minimum'
        Priority: MEDIUM
        """
        assert "RULE-0496" in all_results['results'], "Rule RULE-0496 missing"
        result = all_results['results']["RULE-0496"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0496 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0496 failed"


    def test_rule_0497(self, all_results):
        """
        Test RULE-0497: YAML field 'deprecation_process.migration_guide' must equal 'Provided for all br
        Priority: MEDIUM
        """
        assert "RULE-0497" in all_results['results'], "Rule RULE-0497 missing"
        result = all_results['results']["RULE-0497"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0497 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0497 failed"


    def test_rule_0498(self, all_results):
        """
        Test RULE-0498: YAML field 'deprecation_process.support_period' must equal '12 months post-depre
        Priority: MEDIUM
        """
        assert "RULE-0498" in all_results['results'], "Rule RULE-0498 missing"
        result = all_results['results']["RULE-0498"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0498 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0498 failed"


    def test_rule_0499(self, all_results):
        """
        Test RULE-0499: YAML field 'deprecation_process.emergency_patches' must equal '18 months for cri
        Priority: CRITICAL
        """
        assert "RULE-0499" in all_results['results'], "Rule RULE-0499 missing"
        result = all_results['results']["RULE-0499"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0499 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0499 failed"


    def test_rule_0500(self, all_results):
        """
        Test RULE-0500: YAML field 'badge_validity.tied_to_version' must equal 'True'
        Priority: CRITICAL
        """
        assert "RULE-0500" in all_results['results'], "Rule RULE-0500 missing"
        result = all_results['results']["RULE-0500"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0500 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0500 failed"


    def test_rule_0501(self, all_results):
        """
        Test RULE-0501: YAML field 'badge_validity.expiration_policy' must equal 'Major version changes 
        Priority: HIGH
        """
        assert "RULE-0501" in all_results['results'], "Rule RULE-0501 missing"
        result = all_results['results']["RULE-0501"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "HIGH" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0501 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0501 failed"


    def test_rule_0502(self, all_results):
        """
        Test RULE-0502: YAML field 'badge_validity.grace_period' must equal '3 months for version migrat
        Priority: HIGH
        """
        assert "RULE-0502" in all_results['results'], "Rule RULE-0502 missing"
        result = all_results['results']["RULE-0502"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "HIGH" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0502 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0502 failed"


    def test_rule_0503(self, all_results):
        """
        Test RULE-0503: YAML field 'badge_validity.compatibility_check' must equal 'Automated validation
        Priority: MEDIUM
        """
        assert "RULE-0503" in all_results['results'], "Rule RULE-0503 missing"
        result = all_results['results']["RULE-0503"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0503 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0503 failed"


    def test_rule_0504(self, all_results):
        """
        Test RULE-0504: YAML list 'lts_support.lts_versions' must contain 2 elements
        Priority: HIGH
        """
        assert "RULE-0504" in all_results['results'], "Rule RULE-0504 missing"
        result = all_results['results']["RULE-0504"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "HIGH" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0504 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0504 failed"


    def test_rule_0505(self, all_results):
        """
        Test RULE-0505: YAML field 'lts_support.support_duration' must equal '3 years minimum'
        Priority: MEDIUM
        """
        assert "RULE-0505" in all_results['results'], "Rule RULE-0505 missing"
        result = all_results['results']["RULE-0505"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0505 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0505 failed"


    def test_rule_0506(self, all_results):
        """
        Test RULE-0506: YAML field 'lts_support.security_patches' must equal '5 years minimum'
        Priority: CRITICAL
        """
        assert "RULE-0506" in all_results['results'], "Rule RULE-0506 missing"
        result = all_results['results']["RULE-0506"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0506 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0506 failed"


    def test_rule_0507(self, all_results):
        """
        Test RULE-0507: YAML field 'lts_support.enterprise_support' must equal 'Custom SLA available'
        Priority: MEDIUM
        """
        assert "RULE-0507" in all_results['results'], "Rule RULE-0507 missing"
        result = all_results['results']["RULE-0507"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0507 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0507 failed"


    def test_rule_0508(self, all_results):
        """
        Test RULE-0508: YAML field 'version_history.v4_1_0.release_date' must equal '2025-09-15'
        Priority: MEDIUM
        """
        assert "RULE-0508" in all_results['results'], "Rule RULE-0508 missing"
        result = all_results['results']["RULE-0508"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0508 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0508 failed"


    def test_rule_0509(self, all_results):
        """
        Test RULE-0509: YAML list 'version_history.v4_1_0.features' must contain 3 elements
        Priority: HIGH
        """
        assert "RULE-0509" in all_results['results'], "Rule RULE-0509 missing"
        result = all_results['results']["RULE-0509"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "HIGH" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0509 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0509 failed"


    def test_rule_0510(self, all_results):
        """
        Test RULE-0510: YAML field 'version_history.v4_1_0.status' must equal 'Current LTS'
        Priority: MEDIUM
        """
        assert "RULE-0510" in all_results['results'], "Rule RULE-0510 missing"
        result = all_results['results']["RULE-0510"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0510 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0510 failed"


    def test_rule_0511(self, all_results):
        """
        Test RULE-0511: YAML field 'version_history.v4_0_0.release_date' must equal '2025-09-01'
        Priority: MEDIUM
        """
        assert "RULE-0511" in all_results['results'], "Rule RULE-0511 missing"
        result = all_results['results']["RULE-0511"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0511 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0511 failed"


    def test_rule_0512(self, all_results):
        """
        Test RULE-0512: YAML list 'version_history.v4_0_0.features' must contain 3 elements
        Priority: MEDIUM
        """
        assert "RULE-0512" in all_results['results'], "Rule RULE-0512 missing"
        result = all_results['results']["RULE-0512"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0512 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0512 failed"


    def test_rule_0513(self, all_results):
        """
        Test RULE-0513: YAML field 'version_history.v4_0_0.status' must equal 'Supported'
        Priority: MEDIUM
        """
        assert "RULE-0513" in all_results['results'], "Rule RULE-0513 missing"
        result = all_results['results']["RULE-0513"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0513 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0513 failed"


    def test_rule_0514(self, all_results):
        """
        Test RULE-0514: YAML field 'version_history.v3_2_0.release_date' must equal '2025-06-01'
        Priority: MEDIUM
        """
        assert "RULE-0514" in all_results['results'], "Rule RULE-0514 missing"
        result = all_results['results']["RULE-0514"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0514 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0514 failed"


    def test_rule_0515(self, all_results):
        """
        Test RULE-0515: YAML list 'version_history.v3_2_0.features' must contain 3 elements
        Priority: CRITICAL
        """
        assert "RULE-0515" in all_results['results'], "Rule RULE-0515 missing"
        result = all_results['results']["RULE-0515"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0515 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0515 failed"


    def test_rule_0516(self, all_results):
        """
        Test RULE-0516: YAML field 'version_history.v3_2_0.status' must equal 'LTS Maintenance'
        Priority: MEDIUM
        """
        assert "RULE-0516" in all_results['results'], "Rule RULE-0516 missing"
        result = all_results['results']["RULE-0516"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0516 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0516 failed"


    def test_rule_0517(self, all_results):
        """
        Test RULE-0517: YAML line: version: "1.0"
        Priority: MEDIUM
        """
        assert "RULE-0517" in all_results['results'], "Rule RULE-0517 missing"
        result = all_results['results']["RULE-0517"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0517 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0517 failed"


    def test_rule_0518(self, all_results):
        """
        Test RULE-0518: YAML line: date: "2025-09-15"
        Priority: MEDIUM
        """
        assert "RULE-0518" in all_results['results'], "Rule RULE-0518 missing"
        result = all_results['results']["RULE-0518"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0518 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0518 failed"


    def test_rule_0519(self, all_results):
        """
        Test RULE-0519: YAML line: deprecated: false
        Priority: MEDIUM
        """
        assert "RULE-0519" in all_results['results'], "Rule RULE-0519 missing"
        result = all_results['results']["RULE-0519"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0519 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0519 failed"


    def test_rule_0520(self, all_results):
        """
        Test RULE-0520: YAML line: classification: "PUBLIC - Version Management"
        Priority: MEDIUM
        """
        assert "RULE-0520" in all_results['results'], "Rule RULE-0520 missing"
        result = all_results['results']["RULE-0520"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0520 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0520 failed"


    def test_rule_0521(self, all_results):
        """
        Test RULE-0521: YAML line: versioning_scheme:
        Priority: MEDIUM
        """
        assert "RULE-0521" in all_results['results'], "Rule RULE-0521 missing"
        result = all_results['results']["RULE-0521"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0521 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0521 failed"


    def test_rule_0522(self, all_results):
        """
        Test RULE-0522: YAML line: format: "MAJOR.MINOR.PATCH"
        Priority: MEDIUM
        """
        assert "RULE-0522" in all_results['results'], "Rule RULE-0522 missing"
        result = all_results['results']["RULE-0522"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0522 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0522 failed"


    def test_rule_0523(self, all_results):
        """
        Test RULE-0523: YAML line: major_changes: "Breaking compliance matrix changes"
        Priority: CRITICAL
        """
        assert "RULE-0523" in all_results['results'], "Rule RULE-0523 missing"
        result = all_results['results']["RULE-0523"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0523 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0523 failed"


    def test_rule_0524(self, all_results):
        """
        Test RULE-0524: YAML line: minor_changes: "New jurisdiction additions, enhancement features"
        Priority: MEDIUM
        """
        assert "RULE-0524" in all_results['results'], "Rule RULE-0524 missing"
        result = all_results['results']["RULE-0524"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0524 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0524 failed"


    def test_rule_0525(self, all_results):
        """
        Test RULE-0525: YAML line: patch_changes: "Bug fixes, documentation updates"
        Priority: MEDIUM
        """
        assert "RULE-0525" in all_results['results'], "Rule RULE-0525 missing"
        result = all_results['results']["RULE-0525"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0525 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0525 failed"


    def test_rule_0526(self, all_results):
        """
        Test RULE-0526: YAML line: current_version:
        Priority: MEDIUM
        """
        assert "RULE-0526" in all_results['results'], "Rule RULE-0526 missing"
        result = all_results['results']["RULE-0526"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0526 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0526 failed"


    def test_rule_0527(self, all_results):
        """
        Test RULE-0527: YAML line: version: "4.1.0"
        Priority: MEDIUM
        """
        assert "RULE-0527" in all_results['results'], "Rule RULE-0527 missing"
        result = all_results['results']["RULE-0527"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0527 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0527 failed"


    def test_rule_0528(self, all_results):
        """
        Test RULE-0528: YAML line: release_date: "2025-09-15"
        Priority: MEDIUM
        """
        assert "RULE-0528" in all_results['results'], "Rule RULE-0528 missing"
        result = all_results['results']["RULE-0528"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0528 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0528 failed"


    def test_rule_0529(self, all_results):
        """
        Test RULE-0529: YAML line: codename: "Global Enterprise Ready"
        Priority: MEDIUM
        """
        assert "RULE-0529" in all_results['results'], "Rule RULE-0529 missing"
        result = all_results['results']["RULE-0529"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0529 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0529 failed"


    def test_rule_0530(self, all_results):
        """
        Test RULE-0530: YAML line: lts_status: true
        Priority: MEDIUM
        """
        assert "RULE-0530" in all_results['results'], "Rule RULE-0530 missing"
        result = all_results['results']["RULE-0530"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0530 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0530 failed"


    def test_rule_0531(self, all_results):
        """
        Test RULE-0531: YAML line: compatibility_matrix:
        Priority: MEDIUM
        """
        assert "RULE-0531" in all_results['results'], "Rule RULE-0531 missing"
        result = all_results['results']["RULE-0531"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0531 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0531 failed"


    def test_rule_0532(self, all_results):
        """
        Test RULE-0532: YAML line: supported_versions: ["4.1.x", "4.0.x", "3.2.x"]
        Priority: MEDIUM
        """
        assert "RULE-0532" in all_results['results'], "Rule RULE-0532 missing"
        result = all_results['results']["RULE-0532"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0532 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0532 failed"


    def test_rule_0533(self, all_results):
        """
        Test RULE-0533: YAML line: deprecated_versions: ["3.1.x", "3.0.x"]
        Priority: MEDIUM
        """
        assert "RULE-0533" in all_results['results'], "Rule RULE-0533 missing"
        result = all_results['results']["RULE-0533"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0533 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0533 failed"


    def test_rule_0534(self, all_results):
        """
        Test RULE-0534: YAML line: end_of_life: ["2.x.x", "1.x.x", "0.x.x"]
        Priority: MEDIUM
        """
        assert "RULE-0534" in all_results['results'], "Rule RULE-0534 missing"
        result = all_results['results']["RULE-0534"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0534 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0534 failed"


    def test_rule_0535(self, all_results):
        """
        Test RULE-0535: YAML line: deprecation_process:
        Priority: MEDIUM
        """
        assert "RULE-0535" in all_results['results'], "Rule RULE-0535 missing"
        result = all_results['results']["RULE-0535"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0535 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0535 failed"


    def test_rule_0536(self, all_results):
        """
        Test RULE-0536: YAML line: advance_notice: "6 months minimum"
        Priority: MEDIUM
        """
        assert "RULE-0536" in all_results['results'], "Rule RULE-0536 missing"
        result = all_results['results']["RULE-0536"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0536 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0536 failed"


    def test_rule_0537(self, all_results):
        """
        Test RULE-0537: YAML line: migration_guide: "Provided for all breaking changes"
        Priority: MEDIUM
        """
        assert "RULE-0537" in all_results['results'], "Rule RULE-0537 missing"
        result = all_results['results']["RULE-0537"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0537 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0537 failed"


    def test_rule_0538(self, all_results):
        """
        Test RULE-0538: YAML line: support_period: "12 months post-deprecation"
        Priority: MEDIUM
        """
        assert "RULE-0538" in all_results['results'], "Rule RULE-0538 missing"
        result = all_results['results']["RULE-0538"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0538 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0538 failed"


    def test_rule_0539(self, all_results):
        """
        Test RULE-0539: YAML line: emergency_patches: "18 months for critical security issues"
        Priority: CRITICAL
        """
        assert "RULE-0539" in all_results['results'], "Rule RULE-0539 missing"
        result = all_results['results']["RULE-0539"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0539 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0539 failed"


    def test_rule_0540(self, all_results):
        """
        Test RULE-0540: YAML line: badge_validity:
        Priority: MEDIUM
        """
        assert "RULE-0540" in all_results['results'], "Rule RULE-0540 missing"
        result = all_results['results']["RULE-0540"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0540 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0540 failed"


    def test_rule_0541(self, all_results):
        """
        Test RULE-0541: YAML line: tied_to_version: true
        Priority: MEDIUM
        """
        assert "RULE-0541" in all_results['results'], "Rule RULE-0541 missing"
        result = all_results['results']["RULE-0541"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0541 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0541 failed"


    def test_rule_0542(self, all_results):
        """
        Test RULE-0542: YAML line: expiration_policy: "Major version changes require re-validation"
        Priority: MEDIUM
        """
        assert "RULE-0542" in all_results['results'], "Rule RULE-0542 missing"
        result = all_results['results']["RULE-0542"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0542 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0542 failed"


    def test_rule_0543(self, all_results):
        """
        Test RULE-0543: YAML line: grace_period: "3 months for version migration"
        Priority: MEDIUM
        """
        assert "RULE-0543" in all_results['results'], "Rule RULE-0543 missing"
        result = all_results['results']["RULE-0543"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0543 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0543 failed"


    def test_rule_0544(self, all_results):
        """
        Test RULE-0544: YAML line: compatibility_check: "Automated validation in CI/CD"
        Priority: MEDIUM
        """
        assert "RULE-0544" in all_results['results'], "Rule RULE-0544 missing"
        result = all_results['results']["RULE-0544"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0544 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0544 failed"


    def test_rule_0545(self, all_results):
        """
        Test RULE-0545: YAML line: lts_support:
        Priority: MEDIUM
        """
        assert "RULE-0545" in all_results['results'], "Rule RULE-0545 missing"
        result = all_results['results']["RULE-0545"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0545 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0545 failed"


    def test_rule_0546(self, all_results):
        """
        Test RULE-0546: YAML line: lts_versions: ["4.1.x", "3.2.x"]
        Priority: MEDIUM
        """
        assert "RULE-0546" in all_results['results'], "Rule RULE-0546 missing"
        result = all_results['results']["RULE-0546"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0546 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0546 failed"


    def test_rule_0547(self, all_results):
        """
        Test RULE-0547: YAML line: support_duration: "3 years minimum"
        Priority: MEDIUM
        """
        assert "RULE-0547" in all_results['results'], "Rule RULE-0547 missing"
        result = all_results['results']["RULE-0547"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0547 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0547 failed"


    def test_rule_0548(self, all_results):
        """
        Test RULE-0548: YAML line: security_patches: "5 years minimum"
        Priority: CRITICAL
        """
        assert "RULE-0548" in all_results['results'], "Rule RULE-0548 missing"
        result = all_results['results']["RULE-0548"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0548 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0548 failed"


    def test_rule_0549(self, all_results):
        """
        Test RULE-0549: YAML line: enterprise_support: "Custom SLA available"
        Priority: MEDIUM
        """
        assert "RULE-0549" in all_results['results'], "Rule RULE-0549 missing"
        result = all_results['results']["RULE-0549"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0549 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0549 failed"


    def test_rule_0550(self, all_results):
        """
        Test RULE-0550: YAML line: version_history:
        Priority: MEDIUM
        """
        assert "RULE-0550" in all_results['results'], "Rule RULE-0550 missing"
        result = all_results['results']["RULE-0550"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0550 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0550 failed"


    def test_rule_0551(self, all_results):
        """
        Test RULE-0551: YAML line: v4_1_0:
        Priority: MEDIUM
        """
        assert "RULE-0551" in all_results['results'], "Rule RULE-0551 missing"
        result = all_results['results']["RULE-0551"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0551 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0551 failed"


    def test_rule_0552(self, all_results):
        """
        Test RULE-0552: YAML line: release_date: "2025-09-15"
        Priority: MEDIUM
        """
        assert "RULE-0552" in all_results['results'], "Rule RULE-0552 missing"
        result = all_results['results']["RULE-0552"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0552 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0552 failed"


    def test_rule_0553(self, all_results):
        """
        Test RULE-0553: YAML line: features: ["Token framework", "Global market ready", "Multi-language 
        Priority: MEDIUM
        """
        assert "RULE-0553" in all_results['results'], "Rule RULE-0553 missing"
        result = all_results['results']["RULE-0553"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0553 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0553 failed"


    def test_rule_0554(self, all_results):
        """
        Test RULE-0554: YAML line: status: "Current LTS"
        Priority: MEDIUM
        """
        assert "RULE-0554" in all_results['results'], "Rule RULE-0554 missing"
        result = all_results['results']["RULE-0554"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0554 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0554 failed"


    def test_rule_0555(self, all_results):
        """
        Test RULE-0555: YAML line: v4_0_0:
        Priority: MEDIUM
        """
        assert "RULE-0555" in all_results['results'], "Rule RULE-0555 missing"
        result = all_results['results']["RULE-0555"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0555 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0555 failed"


    def test_rule_0556(self, all_results):
        """
        Test RULE-0556: YAML line: release_date: "2025-09-01"
        Priority: MEDIUM
        """
        assert "RULE-0556" in all_results['results'], "Rule RULE-0556 missing"
        result = all_results['results']["RULE-0556"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0556 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0556 failed"


    def test_rule_0557(self, all_results):
        """
        Test RULE-0557: YAML line: features: ["Enterprise enhanced", "Anti-gaming controls", "OpenCore i
        Priority: MEDIUM
        """
        assert "RULE-0557" in all_results['results'], "Rule RULE-0557 missing"
        result = all_results['results']["RULE-0557"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0557 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0557 failed"


    def test_rule_0558(self, all_results):
        """
        Test RULE-0558: YAML line: status: "Supported"
        Priority: MEDIUM
        """
        assert "RULE-0558" in all_results['results'], "Rule RULE-0558 missing"
        result = all_results['results']["RULE-0558"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0558 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0558 failed"


    def test_rule_0559(self, all_results):
        """
        Test RULE-0559: YAML line: v3_2_0:
        Priority: MEDIUM
        """
        assert "RULE-0559" in all_results['results'], "Rule RULE-0559 missing"
        result = all_results['results']["RULE-0559"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0559 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0559 failed"


    def test_rule_0560(self, all_results):
        """
        Test RULE-0560: YAML line: release_date: "2025-06-01"
        Priority: MEDIUM
        """
        assert "RULE-0560" in all_results['results'], "Rule RULE-0560 missing"
        result = all_results['results']["RULE-0560"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0560 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0560 failed"


    def test_rule_0561(self, all_results):
        """
        Test RULE-0561: YAML line: features: ["Compliance matrix v2", "Review frameworks", "EU regulatio
        Priority: CRITICAL
        """
        assert "RULE-0561" in all_results['results'], "Rule RULE-0561 missing"
        result = all_results['results']["RULE-0561"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0561 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0561 failed"


    def test_rule_0562(self, all_results):
        """
        Test RULE-0562: YAML line: status: "LTS Maintenance"
        Priority: MEDIUM
        """
        assert "RULE-0562" in all_results['results'], "Rule RULE-0562 missing"
        result = all_results['results']["RULE-0562"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0562 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0562 failed"


    def test_rule_0563(self, all_results):
        """
        Test RULE-0563: YAML field 'version' must equal '1.0'
        Priority: HIGH
        """
        assert "RULE-0563" in all_results['results'], "Rule RULE-0563 missing"
        result = all_results['results']["RULE-0563"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "HIGH" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0563 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0563 failed"


    def test_rule_0564(self, all_results):
        """
        Test RULE-0564: YAML field 'date' must equal '2025-09-15'
        Priority: MEDIUM
        """
        assert "RULE-0564" in all_results['results'], "Rule RULE-0564 missing"
        result = all_results['results']["RULE-0564"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0564 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0564 failed"


    def test_rule_0565(self, all_results):
        """
        Test RULE-0565: YAML field 'deprecated' must equal 'False'
        Priority: CRITICAL
        """
        assert "RULE-0565" in all_results['results'], "Rule RULE-0565 missing"
        result = all_results['results']["RULE-0565"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0565 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0565 failed"


    def test_rule_0566(self, all_results):
        """
        Test RULE-0566: YAML field 'release_schedule.major_releases' must equal 'Annual (Q4)'
        Priority: MEDIUM
        """
        assert "RULE-0566" in all_results['results'], "Rule RULE-0566 missing"
        result = all_results['results']["RULE-0566"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0566 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0566 failed"


    def test_rule_0567(self, all_results):
        """
        Test RULE-0567: YAML field 'release_schedule.minor_releases' must equal 'Quarterly'
        Priority: MEDIUM
        """
        assert "RULE-0567" in all_results['results'], "Rule RULE-0567 missing"
        result = all_results['results']["RULE-0567"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0567 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0567 failed"


    def test_rule_0568(self, all_results):
        """
        Test RULE-0568: YAML field 'release_schedule.patch_releases' must equal 'Monthly or as needed'
        Priority: MEDIUM
        """
        assert "RULE-0568" in all_results['results'], "Rule RULE-0568 missing"
        result = all_results['results']["RULE-0568"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0568 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0568 failed"


    def test_rule_0569(self, all_results):
        """
        Test RULE-0569: YAML field 'release_schedule.security_releases' must equal 'Immediate (within 24
        Priority: CRITICAL
        """
        assert "RULE-0569" in all_results['results'], "Rule RULE-0569 missing"
        result = all_results['results']["RULE-0569"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0569 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0569 failed"


    def test_rule_0570(self, all_results):
        """
        Test RULE-0570: YAML field 'release_process.development_phase' must equal 'Feature development a
        Priority: MEDIUM
        """
        assert "RULE-0570" in all_results['results'], "Rule RULE-0570 missing"
        result = all_results['results']["RULE-0570"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0570 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0570 failed"


    def test_rule_0571(self, all_results):
        """
        Test RULE-0571: YAML field 'release_process.beta_phase' must equal 'Community testing and feedba
        Priority: MEDIUM
        """
        assert "RULE-0571" in all_results['results'], "Rule RULE-0571 missing"
        result = all_results['results']["RULE-0571"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0571 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0571 failed"


    def test_rule_0572(self, all_results):
        """
        Test RULE-0572: YAML field 'release_process.release_candidate' must equal 'Final validation and 
        Priority: MEDIUM
        """
        assert "RULE-0572" in all_results['results'], "Rule RULE-0572 missing"
        result = all_results['results']["RULE-0572"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0572 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0572 failed"


    def test_rule_0573(self, all_results):
        """
        Test RULE-0573: YAML field 'release_process.stable_release' must equal 'Production ready with fu
        Priority: MEDIUM
        """
        assert "RULE-0573" in all_results['results'], "Rule RULE-0573 missing"
        result = all_results['results']["RULE-0573"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0573 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0573 failed"


    def test_rule_0574(self, all_results):
        """
        Test RULE-0574: YAML list 'quality_gates' must contain 8 elements
        Priority: CRITICAL
        """
        assert "RULE-0574" in all_results['results'], "Rule RULE-0574 missing"
        result = all_results['results']["RULE-0574"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0574 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0574 failed"


    def test_rule_0575(self, all_results):
        """
        Test RULE-0575: YAML field 'world_market_readiness.regulatory_validation' must equal 'All Tier 1
        Priority: MEDIUM
        """
        assert "RULE-0575" in all_results['results'], "Rule RULE-0575 missing"
        result = all_results['results']["RULE-0575"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0575 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0575 failed"


    def test_rule_0576(self, all_results):
        """
        Test RULE-0576: YAML field 'world_market_readiness.translation_completion' must equal 'Primary l
        Priority: MEDIUM
        """
        assert "RULE-0576" in all_results['results'], "Rule RULE-0576 missing"
        result = all_results['results']["RULE-0576"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0576 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0576 failed"


    def test_rule_0577(self, all_results):
        """
        Test RULE-0577: YAML field 'world_market_readiness.enterprise_testing' must equal 'Beta testing 
        Priority: MEDIUM
        """
        assert "RULE-0577" in all_results['results'], "Rule RULE-0577 missing"
        result = all_results['results']["RULE-0577"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0577 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0577 failed"


    def test_rule_0578(self, all_results):
        """
        Test RULE-0578: YAML field 'world_market_readiness.compliance_certification' must equal 'Third-p
        Priority: CRITICAL
        """
        assert "RULE-0578" in all_results['results'], "Rule RULE-0578 missing"
        result = all_results['results']["RULE-0578"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0578 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0578 failed"


    def test_rule_0579(self, all_results):
        """
        Test RULE-0579: YAML field 'world_market_readiness.legal_clearance' must equal 'Multi-jurisdicti
        Priority: CRITICAL
        """
        assert "RULE-0579" in all_results['results'], "Rule RULE-0579 missing"
        result = all_results['results']["RULE-0579"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0579 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0579 failed"


    def test_rule_0580(self, all_results):
        """
        Test RULE-0580: YAML field 'communication_strategy.release_notes' must equal 'Comprehensive chan
        Priority: MEDIUM
        """
        assert "RULE-0580" in all_results['results'], "Rule RULE-0580 missing"
        result = all_results['results']["RULE-0580"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0580 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0580 failed"


    def test_rule_0581(self, all_results):
        """
        Test RULE-0581: YAML field 'communication_strategy.migration_guides' must equal 'Step-by-step up
        Priority: MEDIUM
        """
        assert "RULE-0581" in all_results['results'], "Rule RULE-0581 missing"
        result = all_results['results']["RULE-0581"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0581 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0581 failed"


    def test_rule_0582(self, all_results):
        """
        Test RULE-0582: YAML field 'communication_strategy.webinars' must equal 'Release overview and Q&
        Priority: MEDIUM
        """
        assert "RULE-0582" in all_results['results'], "Rule RULE-0582 missing"
        result = all_results['results']["RULE-0582"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0582 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0582 failed"


    def test_rule_0583(self, all_results):
        """
        Test RULE-0583: YAML field 'communication_strategy.enterprise_briefings' must equal 'Dedicated e
        Priority: MEDIUM
        """
        assert "RULE-0583" in all_results['results'], "Rule RULE-0583 missing"
        result = all_results['results']["RULE-0583"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0583 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0583 failed"


    def test_rule_0584(self, all_results):
        """
        Test RULE-0584: YAML field 'communication_strategy.community_updates' must equal 'Open source co
        Priority: MEDIUM
        """
        assert "RULE-0584" in all_results['results'], "Rule RULE-0584 missing"
        result = all_results['results']["RULE-0584"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0584 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0584 failed"


    def test_rule_0585(self, all_results):
        """
        Test RULE-0585: YAML field 'communication_strategy.press_releases' must equal 'Major version ann
        Priority: HIGH
        """
        assert "RULE-0585" in all_results['results'], "Rule RULE-0585 missing"
        result = all_results['results']["RULE-0585"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "HIGH" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0585 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0585 failed"


    def test_rule_0586(self, all_results):
        """
        Test RULE-0586: YAML line: version: "1.0"
        Priority: MEDIUM
        """
        assert "RULE-0586" in all_results['results'], "Rule RULE-0586 missing"
        result = all_results['results']["RULE-0586"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0586 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0586 failed"


    def test_rule_0587(self, all_results):
        """
        Test RULE-0587: YAML line: date: "2025-09-15"
        Priority: MEDIUM
        """
        assert "RULE-0587" in all_results['results'], "Rule RULE-0587 missing"
        result = all_results['results']["RULE-0587"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0587 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0587 failed"


    def test_rule_0588(self, all_results):
        """
        Test RULE-0588: YAML line: deprecated: false
        Priority: MEDIUM
        """
        assert "RULE-0588" in all_results['results'], "Rule RULE-0588 missing"
        result = all_results['results']["RULE-0588"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0588 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0588 failed"


    def test_rule_0589(self, all_results):
        """
        Test RULE-0589: YAML line: release_schedule:
        Priority: MEDIUM
        """
        assert "RULE-0589" in all_results['results'], "Rule RULE-0589 missing"
        result = all_results['results']["RULE-0589"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0589 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0589 failed"


    def test_rule_0590(self, all_results):
        """
        Test RULE-0590: YAML line: major_releases: "Annual (Q4)"
        Priority: MEDIUM
        """
        assert "RULE-0590" in all_results['results'], "Rule RULE-0590 missing"
        result = all_results['results']["RULE-0590"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0590 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0590 failed"


    def test_rule_0591(self, all_results):
        """
        Test RULE-0591: YAML line: minor_releases: "Quarterly"
        Priority: MEDIUM
        """
        assert "RULE-0591" in all_results['results'], "Rule RULE-0591 missing"
        result = all_results['results']["RULE-0591"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0591 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0591 failed"


    def test_rule_0592(self, all_results):
        """
        Test RULE-0592: YAML line: patch_releases: "Monthly or as needed"
        Priority: MEDIUM
        """
        assert "RULE-0592" in all_results['results'], "Rule RULE-0592 missing"
        result = all_results['results']["RULE-0592"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0592 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0592 failed"


    def test_rule_0593(self, all_results):
        """
        Test RULE-0593: YAML line: security_releases: "Immediate (within 24-48 hours)"
        Priority: CRITICAL
        """
        assert "RULE-0593" in all_results['results'], "Rule RULE-0593 missing"
        result = all_results['results']["RULE-0593"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0593 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0593 failed"


    def test_rule_0594(self, all_results):
        """
        Test RULE-0594: YAML line: release_process:
        Priority: MEDIUM
        """
        assert "RULE-0594" in all_results['results'], "Rule RULE-0594 missing"
        result = all_results['results']["RULE-0594"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0594 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0594 failed"


    def test_rule_0595(self, all_results):
        """
        Test RULE-0595: YAML line: development_phase: "Feature development and testing (8 weeks)"
        Priority: MEDIUM
        """
        assert "RULE-0595" in all_results['results'], "Rule RULE-0595 missing"
        result = all_results['results']["RULE-0595"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0595 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0595 failed"


    def test_rule_0596(self, all_results):
        """
        Test RULE-0596: YAML line: beta_phase: "Community testing and feedback (4 weeks)"
        Priority: MEDIUM
        """
        assert "RULE-0596" in all_results['results'], "Rule RULE-0596 missing"
        result = all_results['results']["RULE-0596"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0596 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0596 failed"


    def test_rule_0597(self, all_results):
        """
        Test RULE-0597: YAML line: release_candidate: "Final validation and approval (2 weeks)"
        Priority: MEDIUM
        """
        assert "RULE-0597" in all_results['results'], "Rule RULE-0597 missing"
        result = all_results['results']["RULE-0597"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0597 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0597 failed"


    def test_rule_0598(self, all_results):
        """
        Test RULE-0598: YAML line: stable_release: "Production ready with full support"
        Priority: MEDIUM
        """
        assert "RULE-0598" in all_results['results'], "Rule RULE-0598 missing"
        result = all_results['results']["RULE-0598"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0598 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0598 failed"


    def test_rule_0599(self, all_results):
        """
        Test RULE-0599: YAML line: quality_gates:
        Priority: MEDIUM
        """
        assert "RULE-0599" in all_results['results'], "Rule RULE-0599 missing"
        result = all_results['results']["RULE-0599"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0599 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0599 failed"


    def test_rule_0600(self, all_results):
        """
        Test RULE-0600: YAML line: - "100% structure compliance validation"
        Priority: CRITICAL
        """
        assert "RULE-0600" in all_results['results'], "Rule RULE-0600 missing"
        result = all_results['results']["RULE-0600"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0600 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0600 failed"


    def test_rule_0601(self, all_results):
        """
        Test RULE-0601: YAML line: - "All automated tests passing (>95% coverage)"
        Priority: MEDIUM
        """
        assert "RULE-0601" in all_results['results'], "Rule RULE-0601 missing"
        result = all_results['results']["RULE-0601"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0601 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0601 failed"


    def test_rule_0602(self, all_results):
        """
        Test RULE-0602: YAML line: - "Security audit completion"
        Priority: CRITICAL
        """
        assert "RULE-0602" in all_results['results'], "Rule RULE-0602 missing"
        result = all_results['results']["RULE-0602"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0602 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0602 failed"


    def test_rule_0603(self, all_results):
        """
        Test RULE-0603: YAML line: - "Documentation updates (all languages)"
        Priority: MEDIUM
        """
        assert "RULE-0603" in all_results['results'], "Rule RULE-0603 missing"
        result = all_results['results']["RULE-0603"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0603 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0603 failed"


    def test_rule_0604(self, all_results):
        """
        Test RULE-0604: YAML line: - "Backwards compatibility verification"
        Priority: MEDIUM
        """
        assert "RULE-0604" in all_results['results'], "Rule RULE-0604 missing"
        result = all_results['results']["RULE-0604"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0604 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0604 failed"


    def test_rule_0605(self, all_results):
        """
        Test RULE-0605: YAML line: - "Performance benchmarks met"
        Priority: MEDIUM
        """
        assert "RULE-0605" in all_results['results'], "Rule RULE-0605 missing"
        result = all_results['results']["RULE-0605"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0605 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0605 failed"


    def test_rule_0606(self, all_results):
        """
        Test RULE-0606: YAML line: - "Enterprise beta validation"
        Priority: MEDIUM
        """
        assert "RULE-0606" in all_results['results'], "Rule RULE-0606 missing"
        result = all_results['results']["RULE-0606"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0606 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0606 failed"


    def test_rule_0607(self, all_results):
        """
        Test RULE-0607: YAML line: - "Legal review completion"
        Priority: CRITICAL
        """
        assert "RULE-0607" in all_results['results'], "Rule RULE-0607 missing"
        result = all_results['results']["RULE-0607"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0607 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0607 failed"


    def test_rule_0608(self, all_results):
        """
        Test RULE-0608: YAML line: world_market_readiness:
        Priority: MEDIUM
        """
        assert "RULE-0608" in all_results['results'], "Rule RULE-0608 missing"
        result = all_results['results']["RULE-0608"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0608 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0608 failed"


    def test_rule_0609(self, all_results):
        """
        Test RULE-0609: YAML line: regulatory_validation: "All Tier 1 jurisdictions reviewed"
        Priority: MEDIUM
        """
        assert "RULE-0609" in all_results['results'], "Rule RULE-0609 missing"
        result = all_results['results']["RULE-0609"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0609 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0609 failed"


    def test_rule_0610(self, all_results):
        """
        Test RULE-0610: YAML line: translation_completion: "Primary languages (EN/DE/ZH/ES) updated"
        Priority: MEDIUM
        """
        assert "RULE-0610" in all_results['results'], "Rule RULE-0610 missing"
        result = all_results['results']["RULE-0610"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0610 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0610 failed"


    def test_rule_0611(self, all_results):
        """
        Test RULE-0611: YAML line: enterprise_testing: "Beta testing with 5+ enterprise partners"
        Priority: MEDIUM
        """
        assert "RULE-0611" in all_results['results'], "Rule RULE-0611 missing"
        result = all_results['results']["RULE-0611"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0611 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0611 failed"


    def test_rule_0612(self, all_results):
        """
        Test RULE-0612: YAML line: compliance_certification: "Third-party audit completion"
        Priority: CRITICAL
        """
        assert "RULE-0612" in all_results['results'], "Rule RULE-0612 missing"
        result = all_results['results']["RULE-0612"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0612 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0612 failed"


    def test_rule_0613(self, all_results):
        """
        Test RULE-0613: YAML line: legal_clearance: "Multi-jurisdiction legal review"
        Priority: CRITICAL
        """
        assert "RULE-0613" in all_results['results'], "Rule RULE-0613 missing"
        result = all_results['results']["RULE-0613"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0613 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0613 failed"


    def test_rule_0614(self, all_results):
        """
        Test RULE-0614: YAML line: communication_strategy:
        Priority: MEDIUM
        """
        assert "RULE-0614" in all_results['results'], "Rule RULE-0614 missing"
        result = all_results['results']["RULE-0614"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0614 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0614 failed"


    def test_rule_0615(self, all_results):
        """
        Test RULE-0615: YAML line: release_notes: "Comprehensive changelog with business impact"
        Priority: MEDIUM
        """
        assert "RULE-0615" in all_results['results'], "Rule RULE-0615 missing"
        result = all_results['results']["RULE-0615"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0615 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0615 failed"


    def test_rule_0616(self, all_results):
        """
        Test RULE-0616: YAML line: migration_guides: "Step-by-step upgrade instructions"
        Priority: MEDIUM
        """
        assert "RULE-0616" in all_results['results'], "Rule RULE-0616 missing"
        result = all_results['results']["RULE-0616"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0616 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0616 failed"


    def test_rule_0617(self, all_results):
        """
        Test RULE-0617: YAML line: webinars: "Release overview and Q&A sessions"
        Priority: MEDIUM
        """
        assert "RULE-0617" in all_results['results'], "Rule RULE-0617 missing"
        result = all_results['results']["RULE-0617"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0617 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0617 failed"


    def test_rule_0618(self, all_results):
        """
        Test RULE-0618: YAML line: enterprise_briefings: "Dedicated enterprise customer communications"
        Priority: MEDIUM
        """
        assert "RULE-0618" in all_results['results'], "Rule RULE-0618 missing"
        result = all_results['results']["RULE-0618"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0618 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0618 failed"


    def test_rule_0619(self, all_results):
        """
        Test RULE-0619: YAML line: community_updates: "Open source community announcements"
        Priority: MEDIUM
        """
        assert "RULE-0619" in all_results['results'], "Rule RULE-0619 missing"
        result = all_results['results']["RULE-0619"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0619 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0619 failed"


    def test_rule_0620(self, all_results):
        """
        Test RULE-0620: YAML line: press_releases: "Major version announcements"
        Priority: MEDIUM
        """
        assert "RULE-0620" in all_results['results'], "Rule RULE-0620 missing"
        result = all_results['results']["RULE-0620"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0620 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0620 failed"


    def test_rule_0621(self, all_results):
        """
        Test RULE-0621: YAML field 'version' must equal '1.0'
        Priority: HIGH
        """
        assert "RULE-0621" in all_results['results'], "Rule RULE-0621 missing"
        result = all_results['results']["RULE-0621"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "HIGH" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0621 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0621 failed"


    def test_rule_0622(self, all_results):
        """
        Test RULE-0622: YAML field 'date' must equal '2025-09-15'
        Priority: MEDIUM
        """
        assert "RULE-0622" in all_results['results'], "Rule RULE-0622 missing"
        result = all_results['results']["RULE-0622"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0622 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0622 failed"


    def test_rule_0623(self, all_results):
        """
        Test RULE-0623: YAML field 'deprecated' must equal 'False'
        Priority: CRITICAL
        """
        assert "RULE-0623" in all_results['results'], "Rule RULE-0623 missing"
        result = all_results['results']["RULE-0623"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0623 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0623 failed"


    def test_rule_0624(self, all_results):
        """
        Test RULE-0624: YAML field 'deprecation_framework.deprecation_notice_period' must equal '6 month
        Priority: MEDIUM
        """
        assert "RULE-0624" in all_results['results'], "Rule RULE-0624 missing"
        result = all_results['results']["RULE-0624"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0624 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0624 failed"


    def test_rule_0625(self, all_results):
        """
        Test RULE-0625: YAML field 'deprecation_framework.support_period' must equal '12 months post-dep
        Priority: MEDIUM
        """
        assert "RULE-0625" in all_results['results'], "Rule RULE-0625 missing"
        result = all_results['results']["RULE-0625"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0625 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0625 failed"


    def test_rule_0626(self, all_results):
        """
        Test RULE-0626: YAML field 'deprecation_framework.security_support' must equal '18 months for cr
        Priority: CRITICAL
        """
        assert "RULE-0626" in all_results['results'], "Rule RULE-0626 missing"
        result = all_results['results']["RULE-0626"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0626 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0626 failed"


    def test_rule_0627(self, all_results):
        """
        Test RULE-0627: YAML field 'deprecation_framework.enterprise_support' must equal '24 months with
        Priority: MEDIUM
        """
        assert "RULE-0627" in all_results['results'], "Rule RULE-0627 missing"
        result = all_results['results']["RULE-0627"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0627 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0627 failed"


    def test_rule_0628(self, all_results):
        """
        Test RULE-0628: YAML field 'deprecation_process.phase_1_announcement' must equal 'Initial deprec
        Priority: MEDIUM
        """
        assert "RULE-0628" in all_results['results'], "Rule RULE-0628 missing"
        result = all_results['results']["RULE-0628"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0628 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0628 failed"


    def test_rule_0629(self, all_results):
        """
        Test RULE-0629: YAML field 'deprecation_process.phase_2_warnings' must equal 'Active warnings in
        Priority: MEDIUM
        """
        assert "RULE-0629" in all_results['results'], "Rule RULE-0629 missing"
        result = all_results['results']["RULE-0629"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0629 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0629 failed"


    def test_rule_0630(self, all_results):
        """
        Test RULE-0630: YAML field 'deprecation_process.phase_3_sunset' must equal 'Feature removal (dep
        Priority: MEDIUM
        """
        assert "RULE-0630" in all_results['results'], "Rule RULE-0630 missing"
        result = all_results['results']["RULE-0630"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0630 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0630 failed"


    def test_rule_0631(self, all_results):
        """
        Test RULE-0631: YAML field 'deprecation_process.phase_4_support' must equal 'Limited support per
        Priority: MEDIUM
        """
        assert "RULE-0631" in all_results['results'], "Rule RULE-0631 missing"
        result = all_results['results']["RULE-0631"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0631 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0631 failed"


    def test_rule_0632(self, all_results):
        """
        Test RULE-0632: YAML field 'deprecation_process.phase_5_eol' must equal 'End of life (18-24 mont
        Priority: MEDIUM
        """
        assert "RULE-0632" in all_results['results'], "Rule RULE-0632 missing"
        result = all_results['results']["RULE-0632"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0632 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0632 failed"


    def test_rule_0633(self, all_results):
        """
        Test RULE-0633: YAML field 'communication_channels.github_issues' must equal 'Deprecation tracki
        Priority: MEDIUM
        """
        assert "RULE-0633" in all_results['results'], "Rule RULE-0633 missing"
        result = all_results['results']["RULE-0633"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0633 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0633 failed"


    def test_rule_0634(self, all_results):
        """
        Test RULE-0634: YAML field 'communication_channels.documentation' must equal 'Prominent deprecat
        Priority: MEDIUM
        """
        assert "RULE-0634" in all_results['results'], "Rule RULE-0634 missing"
        result = all_results['results']["RULE-0634"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0634 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0634 failed"


    def test_rule_0635(self, all_results):
        """
        Test RULE-0635: YAML field 'communication_channels.release_notes' must equal 'Deprecation announ
        Priority: MEDIUM
        """
        assert "RULE-0635" in all_results['results'], "Rule RULE-0635 missing"
        result = all_results['results']["RULE-0635"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0635 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0635 failed"


    def test_rule_0636(self, all_results):
        """
        Test RULE-0636: YAML field 'communication_channels.enterprise_notifications' must equal 'Direct 
        Priority: MEDIUM
        """
        assert "RULE-0636" in all_results['results'], "Rule RULE-0636 missing"
        result = all_results['results']["RULE-0636"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0636 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0636 failed"


    def test_rule_0637(self, all_results):
        """
        Test RULE-0637: YAML field 'communication_channels.community_forums' must equal 'Community discu
        Priority: MEDIUM
        """
        assert "RULE-0637" in all_results['results'], "Rule RULE-0637 missing"
        result = all_results['results']["RULE-0637"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0637 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0637 failed"


    def test_rule_0638(self, all_results):
        """
        Test RULE-0638: YAML field 'migration_support.automated_tools' must equal 'Migration scripts and
        Priority: MEDIUM
        """
        assert "RULE-0638" in all_results['results'], "Rule RULE-0638 missing"
        result = all_results['results']["RULE-0638"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0638 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0638 failed"


    def test_rule_0639(self, all_results):
        """
        Test RULE-0639: YAML field 'migration_support.documentation' must equal 'Step-by-step migration 
        Priority: MEDIUM
        """
        assert "RULE-0639" in all_results['results'], "Rule RULE-0639 missing"
        result = all_results['results']["RULE-0639"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0639 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0639 failed"


    def test_rule_0640(self, all_results):
        """
        Test RULE-0640: YAML field 'migration_support.community_support' must equal 'Forum support for m
        Priority: MEDIUM
        """
        assert "RULE-0640" in all_results['results'], "Rule RULE-0640 missing"
        result = all_results['results']["RULE-0640"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0640 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0640 failed"


    def test_rule_0641(self, all_results):
        """
        Test RULE-0641: YAML field 'migration_support.enterprise_services' must equal 'Professional migr
        Priority: MEDIUM
        """
        assert "RULE-0641" in all_results['results'], "Rule RULE-0641 missing"
        result = all_results['results']["RULE-0641"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0641 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0641 failed"


    def test_rule_0642(self, all_results):
        """
        Test RULE-0642: YAML field 'migration_support.training_materials' must equal 'Video tutorials an
        Priority: MEDIUM
        """
        assert "RULE-0642" in all_results['results'], "Rule RULE-0642 missing"
        result = all_results['results']["RULE-0642"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0642 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0642 failed"


    def test_rule_0643(self, all_results):
        """
        Test RULE-0643: YAML line: version: "1.0"
        Priority: MEDIUM
        """
        assert "RULE-0643" in all_results['results'], "Rule RULE-0643 missing"
        result = all_results['results']["RULE-0643"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0643 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0643 failed"


    def test_rule_0644(self, all_results):
        """
        Test RULE-0644: YAML line: date: "2025-09-15"
        Priority: MEDIUM
        """
        assert "RULE-0644" in all_results['results'], "Rule RULE-0644 missing"
        result = all_results['results']["RULE-0644"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0644 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0644 failed"


    def test_rule_0645(self, all_results):
        """
        Test RULE-0645: YAML line: deprecated: false
        Priority: MEDIUM
        """
        assert "RULE-0645" in all_results['results'], "Rule RULE-0645 missing"
        result = all_results['results']["RULE-0645"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0645 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0645 failed"


    def test_rule_0646(self, all_results):
        """
        Test RULE-0646: YAML line: deprecation_framework:
        Priority: MEDIUM
        """
        assert "RULE-0646" in all_results['results'], "Rule RULE-0646 missing"
        result = all_results['results']["RULE-0646"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0646 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0646 failed"


    def test_rule_0647(self, all_results):
        """
        Test RULE-0647: YAML line: deprecation_notice_period: "6 months minimum"
        Priority: MEDIUM
        """
        assert "RULE-0647" in all_results['results'], "Rule RULE-0647 missing"
        result = all_results['results']["RULE-0647"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0647 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0647 failed"


    def test_rule_0648(self, all_results):
        """
        Test RULE-0648: YAML line: support_period: "12 months post-deprecation"
        Priority: MEDIUM
        """
        assert "RULE-0648" in all_results['results'], "Rule RULE-0648 missing"
        result = all_results['results']["RULE-0648"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0648 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0648 failed"


    def test_rule_0649(self, all_results):
        """
        Test RULE-0649: YAML line: security_support: "18 months for critical issues"
        Priority: CRITICAL
        """
        assert "RULE-0649" in all_results['results'], "Rule RULE-0649 missing"
        result = all_results['results']["RULE-0649"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0649 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0649 failed"


    def test_rule_0650(self, all_results):
        """
        Test RULE-0650: YAML line: enterprise_support: "24 months with custom SLA"
        Priority: MEDIUM
        """
        assert "RULE-0650" in all_results['results'], "Rule RULE-0650 missing"
        result = all_results['results']["RULE-0650"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0650 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0650 failed"


    def test_rule_0651(self, all_results):
        """
        Test RULE-0651: YAML line: deprecation_process:
        Priority: MEDIUM
        """
        assert "RULE-0651" in all_results['results'], "Rule RULE-0651 missing"
        result = all_results['results']["RULE-0651"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0651 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0651 failed"


    def test_rule_0652(self, all_results):
        """
        Test RULE-0652: YAML line: phase_1_announcement: "Initial deprecation notice (6 months prior)"
        Priority: MEDIUM
        """
        assert "RULE-0652" in all_results['results'], "Rule RULE-0652 missing"
        result = all_results['results']["RULE-0652"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0652 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0652 failed"


    def test_rule_0653(self, all_results):
        """
        Test RULE-0653: YAML line: phase_2_warnings: "Active warnings in system (3 months prior)"
        Priority: MEDIUM
        """
        assert "RULE-0653" in all_results['results'], "Rule RULE-0653 missing"
        result = all_results['results']["RULE-0653"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0653 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0653 failed"


    def test_rule_0654(self, all_results):
        """
        Test RULE-0654: YAML line: phase_3_sunset: "Feature removal (deprecation date)"
        Priority: MEDIUM
        """
        assert "RULE-0654" in all_results['results'], "Rule RULE-0654 missing"
        result = all_results['results']["RULE-0654"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0654 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0654 failed"


    def test_rule_0655(self, all_results):
        """
        Test RULE-0655: YAML line: phase_4_support: "Limited support period (12 months)"
        Priority: MEDIUM
        """
        assert "RULE-0655" in all_results['results'], "Rule RULE-0655 missing"
        result = all_results['results']["RULE-0655"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0655 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0655 failed"


    def test_rule_0656(self, all_results):
        """
        Test RULE-0656: YAML line: phase_5_eol: "End of life (18-24 months)"
        Priority: MEDIUM
        """
        assert "RULE-0656" in all_results['results'], "Rule RULE-0656 missing"
        result = all_results['results']["RULE-0656"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0656 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0656 failed"


    def test_rule_0657(self, all_results):
        """
        Test RULE-0657: YAML line: communication_channels:
        Priority: MEDIUM
        """
        assert "RULE-0657" in all_results['results'], "Rule RULE-0657 missing"
        result = all_results['results']["RULE-0657"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0657 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0657 failed"


    def test_rule_0658(self, all_results):
        """
        Test RULE-0658: YAML line: github_issues: "Deprecation tracking issues"
        Priority: MEDIUM
        """
        assert "RULE-0658" in all_results['results'], "Rule RULE-0658 missing"
        result = all_results['results']["RULE-0658"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0658 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0658 failed"


    def test_rule_0659(self, all_results):
        """
        Test RULE-0659: YAML line: documentation: "Prominent deprecation notices"
        Priority: MEDIUM
        """
        assert "RULE-0659" in all_results['results'], "Rule RULE-0659 missing"
        result = all_results['results']["RULE-0659"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0659 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0659 failed"


    def test_rule_0660(self, all_results):
        """
        Test RULE-0660: YAML line: release_notes: "Deprecation announcements"
        Priority: MEDIUM
        """
        assert "RULE-0660" in all_results['results'], "Rule RULE-0660 missing"
        result = all_results['results']["RULE-0660"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0660 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0660 failed"


    def test_rule_0661(self, all_results):
        """
        Test RULE-0661: YAML line: enterprise_notifications: "Direct customer communications"
        Priority: MEDIUM
        """
        assert "RULE-0661" in all_results['results'], "Rule RULE-0661 missing"
        result = all_results['results']["RULE-0661"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0661 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0661 failed"


    def test_rule_0662(self, all_results):
        """
        Test RULE-0662: YAML line: community_forums: "Community discussions and support"
        Priority: MEDIUM
        """
        assert "RULE-0662" in all_results['results'], "Rule RULE-0662 missing"
        result = all_results['results']["RULE-0662"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0662 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0662 failed"


    def test_rule_0663(self, all_results):
        """
        Test RULE-0663: YAML line: migration_support:
        Priority: MEDIUM
        """
        assert "RULE-0663" in all_results['results'], "Rule RULE-0663 missing"
        result = all_results['results']["RULE-0663"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0663 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0663 failed"


    def test_rule_0664(self, all_results):
        """
        Test RULE-0664: YAML line: automated_tools: "Migration scripts and tools provided"
        Priority: MEDIUM
        """
        assert "RULE-0664" in all_results['results'], "Rule RULE-0664 missing"
        result = all_results['results']["RULE-0664"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0664 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0664 failed"


    def test_rule_0665(self, all_results):
        """
        Test RULE-0665: YAML line: documentation: "Step-by-step migration guides"
        Priority: MEDIUM
        """
        assert "RULE-0665" in all_results['results'], "Rule RULE-0665 missing"
        result = all_results['results']["RULE-0665"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0665 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0665 failed"


    def test_rule_0666(self, all_results):
        """
        Test RULE-0666: YAML line: community_support: "Forum support for migrations"
        Priority: MEDIUM
        """
        assert "RULE-0666" in all_results['results'], "Rule RULE-0666 missing"
        result = all_results['results']["RULE-0666"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0666 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0666 failed"


    def test_rule_0667(self, all_results):
        """
        Test RULE-0667: YAML line: enterprise_services: "Professional migration services"
        Priority: MEDIUM
        """
        assert "RULE-0667" in all_results['results'], "Rule RULE-0667 missing"
        result = all_results['results']["RULE-0667"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0667 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0667 failed"


    def test_rule_0668(self, all_results):
        """
        Test RULE-0668: YAML line: training_materials: "Video tutorials and webinars"
        Priority: MEDIUM
        """
        assert "RULE-0668" in all_results['results'], "Rule RULE-0668 missing"
        result = all_results['results']["RULE-0668"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0668 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0668 failed"


    def test_rule_0669(self, all_results):
        """
        Test RULE-0669: YAML field 'version' must equal '1.0'
        Priority: HIGH
        """
        assert "RULE-0669" in all_results['results'], "Rule RULE-0669 missing"
        result = all_results['results']["RULE-0669"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "HIGH" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0669 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0669 failed"


    def test_rule_0670(self, all_results):
        """
        Test RULE-0670: YAML field 'date' must equal '2025-09-15'
        Priority: MEDIUM
        """
        assert "RULE-0670" in all_results['results'], "Rule RULE-0670 missing"
        result = all_results['results']["RULE-0670"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0670 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0670 failed"


    def test_rule_0671(self, all_results):
        """
        Test RULE-0671: YAML field 'deprecated' must equal 'False'
        Priority: CRITICAL
        """
        assert "RULE-0671" in all_results['results'], "Rule RULE-0671 missing"
        result = all_results['results']["RULE-0671"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0671 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0671 failed"


    def test_rule_0672(self, all_results):
        """
        Test RULE-0672: YAML field 'classification' must equal 'CONFIDENTIAL - Business Strategy'
        Priority: MEDIUM
        """
        assert "RULE-0672" in all_results['results'], "Rule RULE-0672 missing"
        result = all_results['results']["RULE-0672"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0672 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0672 failed"


    def test_rule_0673(self, all_results):
        """
        Test RULE-0673: YAML list 'market_prioritization.immediate_focus.jurisdictions' must contain 5 e
        Priority: MEDIUM
        """
        assert "RULE-0673" in all_results['results'], "Rule RULE-0673 missing"
        result = all_results['results']["RULE-0673"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0673 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0673 failed"


    def test_rule_0674(self, all_results):
        """
        Test RULE-0674: YAML field 'market_prioritization.immediate_focus.rationale' must equal 'Establi
        Priority: MEDIUM
        """
        assert "RULE-0674" in all_results['results'], "Rule RULE-0674 missing"
        result = all_results['results']["RULE-0674"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0674 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0674 failed"


    def test_rule_0675(self, all_results):
        """
        Test RULE-0675: YAML field 'market_prioritization.immediate_focus.timeline' must equal '2025-202
        Priority: MEDIUM
        """
        assert "RULE-0675" in all_results['results'], "Rule RULE-0675 missing"
        result = all_results['results']["RULE-0675"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0675 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0675 failed"


    def test_rule_0676(self, all_results):
        """
        Test RULE-0676: YAML field 'market_prioritization.immediate_focus.investment' must equal '€2.5M 
        Priority: MEDIUM
        """
        assert "RULE-0676" in all_results['results'], "Rule RULE-0676 missing"
        result = all_results['results']["RULE-0676"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0676 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0676 failed"


    def test_rule_0677(self, all_results):
        """
        Test RULE-0677: YAML list 'market_prioritization.near_term.jurisdictions' must contain 4 element
        Priority: MEDIUM
        """
        assert "RULE-0677" in all_results['results'], "Rule RULE-0677 missing"
        result = all_results['results']["RULE-0677"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0677 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0677 failed"


    def test_rule_0678(self, all_results):
        """
        Test RULE-0678: YAML field 'market_prioritization.near_term.rationale' must equal 'Stable regula
        Priority: MEDIUM
        """
        assert "RULE-0678" in all_results['results'], "Rule RULE-0678 missing"
        result = all_results['results']["RULE-0678"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0678 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0678 failed"


    def test_rule_0679(self, all_results):
        """
        Test RULE-0679: YAML field 'market_prioritization.near_term.timeline' must equal '2026-2027'
        Priority: MEDIUM
        """
        assert "RULE-0679" in all_results['results'], "Rule RULE-0679 missing"
        result = all_results['results']["RULE-0679"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0679 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0679 failed"


    def test_rule_0680(self, all_results):
        """
        Test RULE-0680: YAML field 'market_prioritization.near_term.investment' must equal '€1.8M total'
        Priority: MEDIUM
        """
        assert "RULE-0680" in all_results['results'], "Rule RULE-0680 missing"
        result = all_results['results']["RULE-0680"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0680 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0680 failed"


    def test_rule_0681(self, all_results):
        """
        Test RULE-0681: YAML list 'market_prioritization.medium_term.jurisdictions' must contain 4 eleme
        Priority: MEDIUM
        """
        assert "RULE-0681" in all_results['results'], "Rule RULE-0681 missing"
        result = all_results['results']["RULE-0681"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0681 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0681 failed"


    def test_rule_0682(self, all_results):
        """
        Test RULE-0682: YAML field 'market_prioritization.medium_term.rationale' must equal 'Emerging re
        Priority: MEDIUM
        """
        assert "RULE-0682" in all_results['results'], "Rule RULE-0682 missing"
        result = all_results['results']["RULE-0682"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0682 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0682 failed"


    def test_rule_0683(self, all_results):
        """
        Test RULE-0683: YAML field 'market_prioritization.medium_term.timeline' must equal '2027-2028'
        Priority: MEDIUM
        """
        assert "RULE-0683" in all_results['results'], "Rule RULE-0683 missing"
        result = all_results['results']["RULE-0683"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0683 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0683 failed"


    def test_rule_0684(self, all_results):
        """
        Test RULE-0684: YAML field 'market_prioritization.medium_term.investment' must equal '€1.2M tota
        Priority: MEDIUM
        """
        assert "RULE-0684" in all_results['results'], "Rule RULE-0684 missing"
        result = all_results['results']["RULE-0684"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0684 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0684 failed"


    def test_rule_0685(self, all_results):
        """
        Test RULE-0685: YAML list 'market_prioritization.long_term.jurisdictions' must contain 4 element
        Priority: MEDIUM
        """
        assert "RULE-0685" in all_results['results'], "Rule RULE-0685 missing"
        result = all_results['results']["RULE-0685"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0685 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0685 failed"


    def test_rule_0686(self, all_results):
        """
        Test RULE-0686: YAML field 'market_prioritization.long_term.rationale' must equal 'Future growth
        Priority: MEDIUM
        """
        assert "RULE-0686" in all_results['results'], "Rule RULE-0686 missing"
        result = all_results['results']["RULE-0686"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0686 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0686 failed"


    def test_rule_0687(self, all_results):
        """
        Test RULE-0687: YAML field 'market_prioritization.long_term.timeline' must equal '2028+'
        Priority: MEDIUM
        """
        assert "RULE-0687" in all_results['results'], "Rule RULE-0687 missing"
        result = all_results['results']["RULE-0687"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0687 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0687 failed"


    def test_rule_0688(self, all_results):
        """
        Test RULE-0688: YAML field 'market_prioritization.long_term.investment' must equal '€2.0M total'
        Priority: MEDIUM
        """
        assert "RULE-0688" in all_results['results'], "Rule RULE-0688 missing"
        result = all_results['results']["RULE-0688"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0688 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0688 failed"


    def test_rule_0689(self, all_results):
        """
        Test RULE-0689: YAML field 'entry_requirements.regulatory_assessment.timeline' must equal '3-6 m
        Priority: MEDIUM
        """
        assert "RULE-0689" in all_results['results'], "Rule RULE-0689 missing"
        result = all_results['results']["RULE-0689"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0689 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0689 failed"


    def test_rule_0690(self, all_results):
        """
        Test RULE-0690: YAML field 'entry_requirements.regulatory_assessment.cost' must equal '€50K-200K
        Priority: MEDIUM
        """
        assert "RULE-0690" in all_results['results'], "Rule RULE-0690 missing"
        result = all_results['results']["RULE-0690"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0690 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0690 failed"


    def test_rule_0691(self, all_results):
        """
        Test RULE-0691: YAML list 'entry_requirements.regulatory_assessment.deliverables' must contain 3
        Priority: MEDIUM
        """
        assert "RULE-0691" in all_results['results'], "Rule RULE-0691 missing"
        result = all_results['results']["RULE-0691"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0691 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0691 failed"


    def test_rule_0692(self, all_results):
        """
        Test RULE-0692: YAML field 'entry_requirements.local_legal_counsel.requirement' must equal 'Mand
        Priority: MEDIUM
        """
        assert "RULE-0692" in all_results['results'], "Rule RULE-0692 missing"
        result = all_results['results']["RULE-0692"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0692 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0692 failed"


    def test_rule_0693(self, all_results):
        """
        Test RULE-0693: YAML list 'entry_requirements.local_legal_counsel.selection_criteria' must conta
        Priority: MEDIUM
        """
        assert "RULE-0693" in all_results['results'], "Rule RULE-0693 missing"
        result = all_results['results']["RULE-0693"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0693 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0693 failed"


    def test_rule_0694(self, all_results):
        """
        Test RULE-0694: YAML field 'entry_requirements.local_legal_counsel.budget' must equal '€100K-500
        Priority: MEDIUM
        """
        assert "RULE-0694" in all_results['results'], "Rule RULE-0694 missing"
        result = all_results['results']["RULE-0694"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0694 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0694 failed"


    def test_rule_0695(self, all_results):
        """
        Test RULE-0695: YAML field 'entry_requirements.compliance_implementation.timeline' must equal '6
        Priority: MEDIUM
        """
        assert "RULE-0695" in all_results['results'], "Rule RULE-0695 missing"
        result = all_results['results']["RULE-0695"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0695 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0695 failed"


    def test_rule_0696(self, all_results):
        """
        Test RULE-0696: YAML field 'entry_requirements.compliance_implementation.resources' must equal '
        Priority: CRITICAL
        """
        assert "RULE-0696" in all_results['results'], "Rule RULE-0696 missing"
        result = all_results['results']["RULE-0696"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0696 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0696 failed"


    def test_rule_0697(self, all_results):
        """
        Test RULE-0697: YAML field 'entry_requirements.compliance_implementation.cost' must equal '€200K
        Priority: MEDIUM
        """
        assert "RULE-0697" in all_results['results'], "Rule RULE-0697 missing"
        result = all_results['results']["RULE-0697"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0697 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0697 failed"


    def test_rule_0698(self, all_results):
        """
        Test RULE-0698: YAML field 'entry_requirements.local_partnerships.requirement' must equal 'Recom
        Priority: MEDIUM
        """
        assert "RULE-0698" in all_results['results'], "Rule RULE-0698 missing"
        result = all_results['results']["RULE-0698"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0698 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0698 failed"


    def test_rule_0699(self, all_results):
        """
        Test RULE-0699: YAML list 'entry_requirements.local_partnerships.partner_types' must contain 3 e
        Priority: CRITICAL
        """
        assert "RULE-0699" in all_results['results'], "Rule RULE-0699 missing"
        result = all_results['results']["RULE-0699"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0699 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0699 failed"


    def test_rule_0700(self, all_results):
        """
        Test RULE-0700: YAML field 'risk_assessment_framework.regulatory_risk.low' must equal 'Establish
        Priority: MEDIUM
        """
        assert "RULE-0700" in all_results['results'], "Rule RULE-0700 missing"
        result = all_results['results']["RULE-0700"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0700 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0700 failed"


    def test_rule_0701(self, all_results):
        """
        Test RULE-0701: YAML field 'risk_assessment_framework.regulatory_risk.medium' must equal 'Evolvi
        Priority: MEDIUM
        """
        assert "RULE-0701" in all_results['results'], "Rule RULE-0701 missing"
        result = all_results['results']["RULE-0701"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0701 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0701 failed"


    def test_rule_0702(self, all_results):
        """
        Test RULE-0702: YAML field 'risk_assessment_framework.regulatory_risk.high' must equal 'Unclear 
        Priority: MEDIUM
        """
        assert "RULE-0702" in all_results['results'], "Rule RULE-0702 missing"
        result = all_results['results']["RULE-0702"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0702 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0702 failed"


    def test_rule_0703(self, all_results):
        """
        Test RULE-0703: YAML field 'risk_assessment_framework.regulatory_risk.prohibitive' must equal 'N
        Priority: MEDIUM
        """
        assert "RULE-0703" in all_results['results'], "Rule RULE-0703 missing"
        result = all_results['results']["RULE-0703"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0703 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0703 failed"


    def test_rule_0704(self, all_results):
        """
        Test RULE-0704: YAML list 'risk_assessment_framework.compliance_cost.estimation_factors' must co
        Priority: MEDIUM
        """
        assert "RULE-0704" in all_results['results'], "Rule RULE-0704 missing"
        result = all_results['results']["RULE-0704"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0704 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0704 failed"


    def test_rule_0705(self, all_results):
        """
        Test RULE-0705: YAML list 'risk_assessment_framework.compliance_cost.cost_categories' must conta
        Priority: CRITICAL
        """
        assert "RULE-0705" in all_results['results'], "Rule RULE-0705 missing"
        result = all_results['results']["RULE-0705"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0705 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0705 failed"


    def test_rule_0706(self, all_results):
        """
        Test RULE-0706: YAML list 'risk_assessment_framework.time_to_market.factors' must contain 3 elem
        Priority: MEDIUM
        """
        assert "RULE-0706" in all_results['results'], "Rule RULE-0706 missing"
        result = all_results['results']["RULE-0706"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0706 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0706 failed"


    def test_rule_0707(self, all_results):
        """
        Test RULE-0707: YAML list 'risk_assessment_framework.time_to_market.typical_ranges' must contain
        Priority: MEDIUM
        """
        assert "RULE-0707" in all_results['results'], "Rule RULE-0707 missing"
        result = all_results['results']["RULE-0707"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0707 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0707 failed"


    def test_rule_0708(self, all_results):
        """
        Test RULE-0708: YAML list 'risk_assessment_framework.business_opportunity.assessment_criteria' m
        Priority: MEDIUM
        """
        assert "RULE-0708" in all_results['results'], "Rule RULE-0708 missing"
        result = all_results['results']["RULE-0708"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0708 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0708 failed"


    def test_rule_0709(self, all_results):
        """
        Test RULE-0709: YAML field 'risk_assessment_framework.business_opportunity.roi_calculation' must
        Priority: MEDIUM
        """
        assert "RULE-0709" in all_results['results'], "Rule RULE-0709 missing"
        result = all_results['results']["RULE-0709"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0709 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0709 failed"


    def test_rule_0710(self, all_results):
        """
        Test RULE-0710: YAML list 'risk_assessment_framework.competitive_landscape.analysis_scope' must 
        Priority: MEDIUM
        """
        assert "RULE-0710" in all_results['results'], "Rule RULE-0710 missing"
        result = all_results['results']["RULE-0710"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0710 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0710 failed"


    def test_rule_0711(self, all_results):
        """
        Test RULE-0711: YAML line: version: "1.0"
        Priority: MEDIUM
        """
        assert "RULE-0711" in all_results['results'], "Rule RULE-0711 missing"
        result = all_results['results']["RULE-0711"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0711 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0711 failed"


    def test_rule_0712(self, all_results):
        """
        Test RULE-0712: YAML line: date: "2025-09-15"
        Priority: MEDIUM
        """
        assert "RULE-0712" in all_results['results'], "Rule RULE-0712 missing"
        result = all_results['results']["RULE-0712"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0712 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0712 failed"


    def test_rule_0713(self, all_results):
        """
        Test RULE-0713: YAML line: deprecated: false
        Priority: MEDIUM
        """
        assert "RULE-0713" in all_results['results'], "Rule RULE-0713 missing"
        result = all_results['results']["RULE-0713"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0713 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0713 failed"


    def test_rule_0714(self, all_results):
        """
        Test RULE-0714: YAML line: classification: "CONFIDENTIAL - Business Strategy"
        Priority: MEDIUM
        """
        assert "RULE-0714" in all_results['results'], "Rule RULE-0714 missing"
        result = all_results['results']["RULE-0714"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0714 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0714 failed"


    def test_rule_0715(self, all_results):
        """
        Test RULE-0715: YAML line: market_prioritization:
        Priority: MEDIUM
        """
        assert "RULE-0715" in all_results['results'], "Rule RULE-0715 missing"
        result = all_results['results']["RULE-0715"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0715 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0715 failed"


    def test_rule_0716(self, all_results):
        """
        Test RULE-0716: YAML line: immediate_focus:
        Priority: MEDIUM
        """
        assert "RULE-0716" in all_results['results'], "Rule RULE-0716 missing"
        result = all_results['results']["RULE-0716"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0716 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0716 failed"


    def test_rule_0717(self, all_results):
        """
        Test RULE-0717: YAML line: jurisdictions: ["EU", "US", "UK", "Singapore", "Switzerland"]
        Priority: MEDIUM
        """
        assert "RULE-0717" in all_results['results'], "Rule RULE-0717 missing"
        result = all_results['results']["RULE-0717"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0717 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0717 failed"


    def test_rule_0718(self, all_results):
        """
        Test RULE-0718: YAML line: rationale: "Established regulatory frameworks, high business value"
        Priority: MEDIUM
        """
        assert "RULE-0718" in all_results['results'], "Rule RULE-0718 missing"
        result = all_results['results']["RULE-0718"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0718 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0718 failed"


    def test_rule_0719(self, all_results):
        """
        Test RULE-0719: YAML line: timeline: "2025-2026"
        Priority: MEDIUM
        """
        assert "RULE-0719" in all_results['results'], "Rule RULE-0719 missing"
        result = all_results['results']["RULE-0719"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0719 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0719 failed"


    def test_rule_0720(self, all_results):
        """
        Test RULE-0720: YAML line: investment: "€2.5M total"
        Priority: MEDIUM
        """
        assert "RULE-0720" in all_results['results'], "Rule RULE-0720 missing"
        result = all_results['results']["RULE-0720"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0720 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0720 failed"


    def test_rule_0721(self, all_results):
        """
        Test RULE-0721: YAML line: near_term:
        Priority: MEDIUM
        """
        assert "RULE-0721" in all_results['results'], "Rule RULE-0721 missing"
        result = all_results['results']["RULE-0721"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0721 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0721 failed"


    def test_rule_0722(self, all_results):
        """
        Test RULE-0722: YAML line: jurisdictions: ["Canada", "Australia", "Japan", "Hong Kong"]
        Priority: MEDIUM
        """
        assert "RULE-0722" in all_results['results'], "Rule RULE-0722 missing"
        result = all_results['results']["RULE-0722"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0722 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0722 failed"


    def test_rule_0723(self, all_results):
        """
        Test RULE-0723: YAML line: rationale: "Stable regulatory environment, strategic partnerships"
        Priority: MEDIUM
        """
        assert "RULE-0723" in all_results['results'], "Rule RULE-0723 missing"
        result = all_results['results']["RULE-0723"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0723 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0723 failed"


    def test_rule_0724(self, all_results):
        """
        Test RULE-0724: YAML line: timeline: "2026-2027"
        Priority: MEDIUM
        """
        assert "RULE-0724" in all_results['results'], "Rule RULE-0724 missing"
        result = all_results['results']["RULE-0724"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0724 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0724 failed"


    def test_rule_0725(self, all_results):
        """
        Test RULE-0725: YAML line: investment: "€1.8M total"
        Priority: MEDIUM
        """
        assert "RULE-0725" in all_results['results'], "Rule RULE-0725 missing"
        result = all_results['results']["RULE-0725"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0725 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0725 failed"


    def test_rule_0726(self, all_results):
        """
        Test RULE-0726: YAML line: medium_term:
        Priority: MEDIUM
        """
        assert "RULE-0726" in all_results['results'], "Rule RULE-0726 missing"
        result = all_results['results']["RULE-0726"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0726 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0726 failed"


    def test_rule_0727(self, all_results):
        """
        Test RULE-0727: YAML line: jurisdictions: ["Brazil", "South Korea", "UAE", "Bahrain"]
        Priority: MEDIUM
        """
        assert "RULE-0727" in all_results['results'], "Rule RULE-0727 missing"
        result = all_results['results']["RULE-0727"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0727 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0727 failed"


    def test_rule_0728(self, all_results):
        """
        Test RULE-0728: YAML line: rationale: "Emerging regulatory clarity, growth opportunities"
        Priority: MEDIUM
        """
        assert "RULE-0728" in all_results['results'], "Rule RULE-0728 missing"
        result = all_results['results']["RULE-0728"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0728 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0728 failed"


    def test_rule_0729(self, all_results):
        """
        Test RULE-0729: YAML line: timeline: "2027-2028"
        Priority: MEDIUM
        """
        assert "RULE-0729" in all_results['results'], "Rule RULE-0729 missing"
        result = all_results['results']["RULE-0729"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0729 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0729 failed"


    def test_rule_0730(self, all_results):
        """
        Test RULE-0730: YAML line: investment: "€1.2M total"
        Priority: MEDIUM
        """
        assert "RULE-0730" in all_results['results'], "Rule RULE-0730 missing"
        result = all_results['results']["RULE-0730"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0730 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0730 failed"


    def test_rule_0731(self, all_results):
        """
        Test RULE-0731: YAML line: long_term:
        Priority: MEDIUM
        """
        assert "RULE-0731" in all_results['results'], "Rule RULE-0731 missing"
        result = all_results['results']["RULE-0731"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0731 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0731 failed"


    def test_rule_0732(self, all_results):
        """
        Test RULE-0732: YAML line: jurisdictions: ["Nigeria", "India", "Indonesia", "Mexico"]
        Priority: MEDIUM
        """
        assert "RULE-0732" in all_results['results'], "Rule RULE-0732 missing"
        result = all_results['results']["RULE-0732"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0732 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0732 failed"


    def test_rule_0733(self, all_results):
        """
        Test RULE-0733: YAML line: rationale: "Future growth markets, regulatory development"
        Priority: MEDIUM
        """
        assert "RULE-0733" in all_results['results'], "Rule RULE-0733 missing"
        result = all_results['results']["RULE-0733"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0733 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0733 failed"


    def test_rule_0734(self, all_results):
        """
        Test RULE-0734: YAML line: timeline: "2028+"
        Priority: MEDIUM
        """
        assert "RULE-0734" in all_results['results'], "Rule RULE-0734 missing"
        result = all_results['results']["RULE-0734"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0734 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0734 failed"


    def test_rule_0735(self, all_results):
        """
        Test RULE-0735: YAML line: investment: "€2.0M total"
        Priority: MEDIUM
        """
        assert "RULE-0735" in all_results['results'], "Rule RULE-0735 missing"
        result = all_results['results']["RULE-0735"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0735 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0735 failed"


    def test_rule_0736(self, all_results):
        """
        Test RULE-0736: YAML line: entry_requirements:
        Priority: MEDIUM
        """
        assert "RULE-0736" in all_results['results'], "Rule RULE-0736 missing"
        result = all_results['results']["RULE-0736"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0736 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0736 failed"


    def test_rule_0737(self, all_results):
        """
        Test RULE-0737: YAML line: regulatory_assessment:
        Priority: MEDIUM
        """
        assert "RULE-0737" in all_results['results'], "Rule RULE-0737 missing"
        result = all_results['results']["RULE-0737"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0737 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0737 failed"


    def test_rule_0738(self, all_results):
        """
        Test RULE-0738: YAML line: timeline: "3-6 months lead time"
        Priority: MEDIUM
        """
        assert "RULE-0738" in all_results['results'], "Rule RULE-0738 missing"
        result = all_results['results']["RULE-0738"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0738 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0738 failed"


    def test_rule_0739(self, all_results):
        """
        Test RULE-0739: YAML line: cost: "€50K-200K per jurisdiction"
        Priority: MEDIUM
        """
        assert "RULE-0739" in all_results['results'], "Rule RULE-0739 missing"
        result = all_results['results']["RULE-0739"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0739 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0739 failed"


    def test_rule_0740(self, all_results):
        """
        Test RULE-0740: YAML line: deliverables: ["Gap analysis", "Implementation plan", "Risk assessmen
        Priority: MEDIUM
        """
        assert "RULE-0740" in all_results['results'], "Rule RULE-0740 missing"
        result = all_results['results']["RULE-0740"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0740 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0740 failed"


    def test_rule_0741(self, all_results):
        """
        Test RULE-0741: YAML line: local_legal_counsel:
        Priority: CRITICAL
        """
        assert "RULE-0741" in all_results['results'], "Rule RULE-0741 missing"
        result = all_results['results']["RULE-0741"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0741 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0741 failed"


    def test_rule_0742(self, all_results):
        """
        Test RULE-0742: YAML line: requirement: "Mandatory for Tier 1 markets"
        Priority: CRITICAL
        """
        assert "RULE-0742" in all_results['results'], "Rule RULE-0742 missing"
        result = all_results['results']["RULE-0742"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0742 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0742 failed"


    def test_rule_0743(self, all_results):
        """
        Test RULE-0743: YAML line: selection_criteria: ["Regulatory expertise", "Local presence", "Track
        Priority: MEDIUM
        """
        assert "RULE-0743" in all_results['results'], "Rule RULE-0743 missing"
        result = all_results['results']["RULE-0743"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0743 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0743 failed"


    def test_rule_0744(self, all_results):
        """
        Test RULE-0744: YAML line: budget: "€100K-500K per jurisdiction"
        Priority: MEDIUM
        """
        assert "RULE-0744" in all_results['results'], "Rule RULE-0744 missing"
        result = all_results['results']["RULE-0744"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0744 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0744 failed"


    def test_rule_0745(self, all_results):
        """
        Test RULE-0745: YAML line: compliance_implementation:
        Priority: CRITICAL
        """
        assert "RULE-0745" in all_results['results'], "Rule RULE-0745 missing"
        result = all_results['results']["RULE-0745"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0745 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0745 failed"


    def test_rule_0746(self, all_results):
        """
        Test RULE-0746: YAML line: timeline: "6-12 months"
        Priority: MEDIUM
        """
        assert "RULE-0746" in all_results['results'], "Rule RULE-0746 missing"
        result = all_results['results']["RULE-0746"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0746 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0746 failed"


    def test_rule_0747(self, all_results):
        """
        Test RULE-0747: YAML line: resources: "2-5 FTE compliance specialists"
        Priority: CRITICAL
        """
        assert "RULE-0747" in all_results['results'], "Rule RULE-0747 missing"
        result = all_results['results']["RULE-0747"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0747 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0747 failed"


    def test_rule_0748(self, all_results):
        """
        Test RULE-0748: YAML line: cost: "€200K-1M per jurisdiction"
        Priority: MEDIUM
        """
        assert "RULE-0748" in all_results['results'], "Rule RULE-0748 missing"
        result = all_results['results']["RULE-0748"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0748 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0748 failed"


    def test_rule_0749(self, all_results):
        """
        Test RULE-0749: YAML line: local_partnerships:
        Priority: MEDIUM
        """
        assert "RULE-0749" in all_results['results'], "Rule RULE-0749 missing"
        result = all_results['results']["RULE-0749"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0749 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0749 failed"


    def test_rule_0750(self, all_results):
        """
        Test RULE-0750: YAML line: requirement: "Recommended for complex jurisdictions"
        Priority: HIGH
        """
        assert "RULE-0750" in all_results['results'], "Rule RULE-0750 missing"
        result = all_results['results']["RULE-0750"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "HIGH" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0750 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0750 failed"


    def test_rule_0751(self, all_results):
        """
        Test RULE-0751: YAML line: partner_types: ["Legal firms", "Compliance consultants", "Technology 
        Priority: CRITICAL
        """
        assert "RULE-0751" in all_results['results'], "Rule RULE-0751 missing"
        result = all_results['results']["RULE-0751"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0751 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0751 failed"


    def test_rule_0752(self, all_results):
        """
        Test RULE-0752: YAML line: risk_assessment_framework:
        Priority: MEDIUM
        """
        assert "RULE-0752" in all_results['results'], "Rule RULE-0752 missing"
        result = all_results['results']["RULE-0752"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0752 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0752 failed"


    def test_rule_0753(self, all_results):
        """
        Test RULE-0753: YAML line: regulatory_risk:
        Priority: MEDIUM
        """
        assert "RULE-0753" in all_results['results'], "Rule RULE-0753 missing"
        result = all_results['results']["RULE-0753"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0753 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0753 failed"


    def test_rule_0754(self, all_results):
        """
        Test RULE-0754: YAML line: low: "Established framework, clear guidance"
        Priority: MEDIUM
        """
        assert "RULE-0754" in all_results['results'], "Rule RULE-0754 missing"
        result = all_results['results']["RULE-0754"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0754 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0754 failed"


    def test_rule_0755(self, all_results):
        """
        Test RULE-0755: YAML line: medium: "Evolving framework, some uncertainty"
        Priority: MEDIUM
        """
        assert "RULE-0755" in all_results['results'], "Rule RULE-0755 missing"
        result = all_results['results']["RULE-0755"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0755 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0755 failed"


    def test_rule_0756(self, all_results):
        """
        Test RULE-0756: YAML line: high: "Unclear framework, significant regulatory risk"
        Priority: MEDIUM
        """
        assert "RULE-0756" in all_results['results'], "Rule RULE-0756 missing"
        result = all_results['results']["RULE-0756"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0756 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0756 failed"


    def test_rule_0757(self, all_results):
        """
        Test RULE-0757: YAML line: prohibitive: "No framework or hostile environment"
        Priority: MEDIUM
        """
        assert "RULE-0757" in all_results['results'], "Rule RULE-0757 missing"
        result = all_results['results']["RULE-0757"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0757 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0757 failed"


    def test_rule_0758(self, all_results):
        """
        Test RULE-0758: YAML line: compliance_cost:
        Priority: CRITICAL
        """
        assert "RULE-0758" in all_results['results'], "Rule RULE-0758 missing"
        result = all_results['results']["RULE-0758"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0758 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0758 failed"


    def test_rule_0759(self, all_results):
        """
        Test RULE-0759: YAML line: estimation_factors: ["Regulatory complexity", "Local requirements", "
        Priority: MEDIUM
        """
        assert "RULE-0759" in all_results['results'], "Rule RULE-0759 missing"
        result = all_results['results']["RULE-0759"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0759 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0759 failed"


    def test_rule_0760(self, all_results):
        """
        Test RULE-0760: YAML line: cost_categories: ["Legal", "Technical", "Operational", "Ongoing maint
        Priority: CRITICAL
        """
        assert "RULE-0760" in all_results['results'], "Rule RULE-0760 missing"
        result = all_results['results']["RULE-0760"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0760 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0760 failed"


    def test_rule_0761(self, all_results):
        """
        Test RULE-0761: YAML line: time_to_market:
        Priority: MEDIUM
        """
        assert "RULE-0761" in all_results['results'], "Rule RULE-0761 missing"
        result = all_results['results']["RULE-0761"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0761 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0761 failed"


    def test_rule_0762(self, all_results):
        """
        Test RULE-0762: YAML line: factors: ["Regulatory approval timeline", "Implementation complexity"
        Priority: MEDIUM
        """
        assert "RULE-0762" in all_results['results'], "Rule RULE-0762 missing"
        result = all_results['results']["RULE-0762"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0762 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0762 failed"


    def test_rule_0763(self, all_results):
        """
        Test RULE-0763: YAML line: typical_ranges: ["6-12 months (established)", "12-24 months (emerging
        Priority: MEDIUM
        """
        assert "RULE-0763" in all_results['results'], "Rule RULE-0763 missing"
        result = all_results['results']["RULE-0763"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0763 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0763 failed"


    def test_rule_0764(self, all_results):
        """
        Test RULE-0764: YAML line: business_opportunity:
        Priority: MEDIUM
        """
        assert "RULE-0764" in all_results['results'], "Rule RULE-0764 missing"
        result = all_results['results']["RULE-0764"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0764 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0764 failed"


    def test_rule_0765(self, all_results):
        """
        Test RULE-0765: YAML line: assessment_criteria: ["Market size", "Revenue potential", "Strategic 
        Priority: MEDIUM
        """
        assert "RULE-0765" in all_results['results'], "Rule RULE-0765 missing"
        result = all_results['results']["RULE-0765"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0765 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0765 failed"


    def test_rule_0766(self, all_results):
        """
        Test RULE-0766: YAML line: roi_calculation: "5-year NPV analysis required"
        Priority: CRITICAL
        """
        assert "RULE-0766" in all_results['results'], "Rule RULE-0766 missing"
        result = all_results['results']["RULE-0766"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0766 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0766 failed"


    def test_rule_0767(self, all_results):
        """
        Test RULE-0767: YAML line: competitive_landscape:
        Priority: MEDIUM
        """
        assert "RULE-0767" in all_results['results'], "Rule RULE-0767 missing"
        result = all_results['results']["RULE-0767"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0767 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0767 failed"


    def test_rule_0768(self, all_results):
        """
        Test RULE-0768: YAML line: analysis_scope: ["Existing players", "Barriers to entry", "Regulatory
        Priority: MEDIUM
        """
        assert "RULE-0768" in all_results['results'], "Rule RULE-0768 missing"
        result = all_results['results']["RULE-0768"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0768 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0768 failed"


    def test_rule_0769(self, all_results):
        """
        Test RULE-0769: YAML field 'version' must equal '1.0'
        Priority: HIGH
        """
        assert "RULE-0769" in all_results['results'], "Rule RULE-0769 missing"
        result = all_results['results']["RULE-0769"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "HIGH" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0769 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0769 failed"


    def test_rule_0770(self, all_results):
        """
        Test RULE-0770: YAML field 'date' must equal '2025-09-15'
        Priority: MEDIUM
        """
        assert "RULE-0770" in all_results['results'], "Rule RULE-0770 missing"
        result = all_results['results']["RULE-0770"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0770 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0770 failed"


    def test_rule_0771(self, all_results):
        """
        Test RULE-0771: YAML field 'deprecated' must equal 'False'
        Priority: CRITICAL
        """
        assert "RULE-0771" in all_results['results'], "Rule RULE-0771 missing"
        result = all_results['results']["RULE-0771"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0771 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0771 failed"


    def test_rule_0772(self, all_results):
        """
        Test RULE-0772: YAML field 'classification' must equal 'CONFIDENTIAL - Regulatory Intelligence'
        Priority: MEDIUM
        """
        assert "RULE-0772" in all_results['results'], "Rule RULE-0772 missing"
        result = all_results['results']["RULE-0772"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0772 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0772 failed"


    def test_rule_0773(self, all_results):
        """
        Test RULE-0773: YAML field 'monitoring_scope.tier_1_markets.monitoring_frequency' must equal 'Da
        Priority: MEDIUM
        """
        assert "RULE-0773" in all_results['results'], "Rule RULE-0773 missing"
        result = all_results['results']["RULE-0773"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0773 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0773 failed"


    def test_rule_0774(self, all_results):
        """
        Test RULE-0774: YAML list 'monitoring_scope.tier_1_markets.sources' must contain 3 elements
        Priority: CRITICAL
        """
        assert "RULE-0774" in all_results['results'], "Rule RULE-0774 missing"
        result = all_results['results']["RULE-0774"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0774 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0774 failed"


    def test_rule_0775(self, all_results):
        """
        Test RULE-0775: YAML field 'monitoring_scope.tier_1_markets.alert_threshold' must equal 'Immedia
        Priority: MEDIUM
        """
        assert "RULE-0775" in all_results['results'], "Rule RULE-0775 missing"
        result = all_results['results']["RULE-0775"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0775 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0775 failed"


    def test_rule_0776(self, all_results):
        """
        Test RULE-0776: YAML field 'monitoring_scope.tier_2_markets.monitoring_frequency' must equal 'We
        Priority: MEDIUM
        """
        assert "RULE-0776" in all_results['results'], "Rule RULE-0776 missing"
        result = all_results['results']["RULE-0776"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0776 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0776 failed"


    def test_rule_0777(self, all_results):
        """
        Test RULE-0777: YAML list 'monitoring_scope.tier_2_markets.sources' must contain 3 elements
        Priority: CRITICAL
        """
        assert "RULE-0777" in all_results['results'], "Rule RULE-0777 missing"
        result = all_results['results']["RULE-0777"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0777 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0777 failed"


    def test_rule_0778(self, all_results):
        """
        Test RULE-0778: YAML field 'monitoring_scope.tier_2_markets.alert_threshold' must equal 'Within 
        Priority: MEDIUM
        """
        assert "RULE-0778" in all_results['results'], "Rule RULE-0778 missing"
        result = all_results['results']["RULE-0778"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0778 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0778 failed"


    def test_rule_0779(self, all_results):
        """
        Test RULE-0779: YAML field 'monitoring_scope.tier_3_markets.monitoring_frequency' must equal 'Mo
        Priority: MEDIUM
        """
        assert "RULE-0779" in all_results['results'], "Rule RULE-0779 missing"
        result = all_results['results']["RULE-0779"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0779 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0779 failed"


    def test_rule_0780(self, all_results):
        """
        Test RULE-0780: YAML list 'monitoring_scope.tier_3_markets.sources' must contain 3 elements
        Priority: CRITICAL
        """
        assert "RULE-0780" in all_results['results'], "Rule RULE-0780 missing"
        result = all_results['results']["RULE-0780"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0780 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0780 failed"


    def test_rule_0781(self, all_results):
        """
        Test RULE-0781: YAML field 'monitoring_scope.tier_3_markets.alert_threshold' must equal 'Within 
        Priority: MEDIUM
        """
        assert "RULE-0781" in all_results['results'], "Rule RULE-0781 missing"
        result = all_results['results']["RULE-0781"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0781 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0781 failed"


    def test_rule_0782(self, all_results):
        """
        Test RULE-0782: YAML list 'intelligence_sources.primary_sources' must contain 4 elements
        Priority: CRITICAL
        """
        assert "RULE-0782" in all_results['results'], "Rule RULE-0782 missing"
        result = all_results['results']["RULE-0782"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0782 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0782 failed"


    def test_rule_0783(self, all_results):
        """
        Test RULE-0783: YAML list 'intelligence_sources.secondary_sources' must contain 4 elements
        Priority: CRITICAL
        """
        assert "RULE-0783" in all_results['results'], "Rule RULE-0783 missing"
        result = all_results['results']["RULE-0783"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0783 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0783 failed"


    def test_rule_0784(self, all_results):
        """
        Test RULE-0784: YAML list 'intelligence_sources.intelligence_partners' must contain 4 elements
        Priority: CRITICAL
        """
        assert "RULE-0784" in all_results['results'], "Rule RULE-0784 missing"
        result = all_results['results']["RULE-0784"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0784 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0784 failed"


    def test_rule_0785(self, all_results):
        """
        Test RULE-0785: YAML field 'alert_framework.critical_alerts.criteria' must equal 'Material impac
        Priority: CRITICAL
        """
        assert "RULE-0785" in all_results['results'], "Rule RULE-0785 missing"
        result = all_results['results']["RULE-0785"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0785 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0785 failed"


    def test_rule_0786(self, all_results):
        """
        Test RULE-0786: YAML field 'alert_framework.critical_alerts.response_time' must equal 'Immediate
        Priority: MEDIUM
        """
        assert "RULE-0786" in all_results['results'], "Rule RULE-0786 missing"
        result = all_results['results']["RULE-0786"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0786 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0786 failed"


    def test_rule_0787(self, all_results):
        """
        Test RULE-0787: YAML field 'alert_framework.critical_alerts.escalation' must equal 'C-suite and 
        Priority: MEDIUM
        """
        assert "RULE-0787" in all_results['results'], "Rule RULE-0787 missing"
        result = all_results['results']["RULE-0787"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0787 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0787 failed"


    def test_rule_0788(self, all_results):
        """
        Test RULE-0788: YAML field 'alert_framework.high_priority.criteria' must equal 'Significant regu
        Priority: CRITICAL
        """
        assert "RULE-0788" in all_results['results'], "Rule RULE-0788 missing"
        result = all_results['results']["RULE-0788"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0788 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0788 failed"


    def test_rule_0789(self, all_results):
        """
        Test RULE-0789: YAML field 'alert_framework.high_priority.response_time' must equal 'Within 24 h
        Priority: MEDIUM
        """
        assert "RULE-0789" in all_results['results'], "Rule RULE-0789 missing"
        result = all_results['results']["RULE-0789"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0789 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0789 failed"


    def test_rule_0790(self, all_results):
        """
        Test RULE-0790: YAML field 'alert_framework.high_priority.escalation' must equal 'Compliance com
        Priority: CRITICAL
        """
        assert "RULE-0790" in all_results['results'], "Rule RULE-0790 missing"
        result = all_results['results']["RULE-0790"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0790 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0790 failed"


    def test_rule_0791(self, all_results):
        """
        Test RULE-0791: YAML field 'alert_framework.medium_priority.criteria' must equal 'Regulatory dev
        Priority: MEDIUM
        """
        assert "RULE-0791" in all_results['results'], "Rule RULE-0791 missing"
        result = all_results['results']["RULE-0791"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0791 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0791 failed"


    def test_rule_0792(self, all_results):
        """
        Test RULE-0792: YAML field 'alert_framework.medium_priority.response_time' must equal 'Within 1 
        Priority: MEDIUM
        """
        assert "RULE-0792" in all_results['results'], "Rule RULE-0792 missing"
        result = all_results['results']["RULE-0792"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0792 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0792 failed"


    def test_rule_0793(self, all_results):
        """
        Test RULE-0793: YAML field 'alert_framework.medium_priority.escalation' must equal 'Compliance t
        Priority: CRITICAL
        """
        assert "RULE-0793" in all_results['results'], "Rule RULE-0793 missing"
        result = all_results['results']["RULE-0793"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0793 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0793 failed"


    def test_rule_0794(self, all_results):
        """
        Test RULE-0794: YAML field 'alert_framework.low_priority.criteria' must equal 'General regulator
        Priority: MEDIUM
        """
        assert "RULE-0794" in all_results['results'], "Rule RULE-0794 missing"
        result = all_results['results']["RULE-0794"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0794 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0794 failed"


    def test_rule_0795(self, all_results):
        """
        Test RULE-0795: YAML field 'alert_framework.low_priority.response_time' must equal 'Monthly revi
        Priority: MEDIUM
        """
        assert "RULE-0795" in all_results['results'], "Rule RULE-0795 missing"
        result = all_results['results']["RULE-0795"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0795 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0795 failed"


    def test_rule_0796(self, all_results):
        """
        Test RULE-0796: YAML field 'alert_framework.low_priority.escalation' must equal 'Routine reporti
        Priority: MEDIUM
        """
        assert "RULE-0796" in all_results['results'], "Rule RULE-0796 missing"
        result = all_results['results']["RULE-0796"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0796 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0796 failed"


    def test_rule_0797(self, all_results):
        """
        Test RULE-0797: YAML list 'impact_assessment.assessment_criteria' must contain 5 elements
        Priority: CRITICAL
        """
        assert "RULE-0797" in all_results['results'], "Rule RULE-0797 missing"
        result = all_results['results']["RULE-0797"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0797 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0797 failed"


    def test_rule_0798(self, all_results):
        """
        Test RULE-0798: YAML list 'impact_assessment.response_planning' must contain 5 elements
        Priority: CRITICAL
        """
        assert "RULE-0798" in all_results['results'], "Rule RULE-0798 missing"
        result = all_results['results']["RULE-0798"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0798 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0798 failed"


    def test_rule_0799(self, all_results):
        """
        Test RULE-0799: YAML line: version: "1.0"
        Priority: MEDIUM
        """
        assert "RULE-0799" in all_results['results'], "Rule RULE-0799 missing"
        result = all_results['results']["RULE-0799"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0799 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0799 failed"


    def test_rule_0800(self, all_results):
        """
        Test RULE-0800: YAML line: date: "2025-09-15"
        Priority: MEDIUM
        """
        assert "RULE-0800" in all_results['results'], "Rule RULE-0800 missing"
        result = all_results['results']["RULE-0800"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0800 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0800 failed"


    def test_rule_0801(self, all_results):
        """
        Test RULE-0801: YAML line: deprecated: false
        Priority: MEDIUM
        """
        assert "RULE-0801" in all_results['results'], "Rule RULE-0801 missing"
        result = all_results['results']["RULE-0801"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0801 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0801 failed"


    def test_rule_0802(self, all_results):
        """
        Test RULE-0802: YAML line: classification: "CONFIDENTIAL - Regulatory Intelligence"
        Priority: MEDIUM
        """
        assert "RULE-0802" in all_results['results'], "Rule RULE-0802 missing"
        result = all_results['results']["RULE-0802"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0802 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0802 failed"


    def test_rule_0803(self, all_results):
        """
        Test RULE-0803: YAML line: monitoring_scope:
        Priority: MEDIUM
        """
        assert "RULE-0803" in all_results['results'], "Rule RULE-0803 missing"
        result = all_results['results']["RULE-0803"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0803 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0803 failed"


    def test_rule_0804(self, all_results):
        """
        Test RULE-0804: YAML line: tier_1_markets:
        Priority: MEDIUM
        """
        assert "RULE-0804" in all_results['results'], "Rule RULE-0804 missing"
        result = all_results['results']["RULE-0804"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0804 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0804 failed"


    def test_rule_0805(self, all_results):
        """
        Test RULE-0805: YAML line: monitoring_frequency: "Daily"
        Priority: MEDIUM
        """
        assert "RULE-0805" in all_results['results'], "Rule RULE-0805 missing"
        result = all_results['results']["RULE-0805"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0805 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0805 failed"


    def test_rule_0806(self, all_results):
        """
        Test RULE-0806: YAML line: sources: ["Official regulators", "Legal databases", "Industry publica
        Priority: CRITICAL
        """
        assert "RULE-0806" in all_results['results'], "Rule RULE-0806 missing"
        result = all_results['results']["RULE-0806"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0806 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0806 failed"


    def test_rule_0807(self, all_results):
        """
        Test RULE-0807: YAML line: alert_threshold: "Immediate for material changes"
        Priority: MEDIUM
        """
        assert "RULE-0807" in all_results['results'], "Rule RULE-0807 missing"
        result = all_results['results']["RULE-0807"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0807 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0807 failed"


    def test_rule_0808(self, all_results):
        """
        Test RULE-0808: YAML line: tier_2_markets:
        Priority: MEDIUM
        """
        assert "RULE-0808" in all_results['results'], "Rule RULE-0808 missing"
        result = all_results['results']["RULE-0808"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0808 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0808 failed"


    def test_rule_0809(self, all_results):
        """
        Test RULE-0809: YAML line: monitoring_frequency: "Weekly"
        Priority: MEDIUM
        """
        assert "RULE-0809" in all_results['results'], "Rule RULE-0809 missing"
        result = all_results['results']["RULE-0809"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0809 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0809 failed"


    def test_rule_0810(self, all_results):
        """
        Test RULE-0810: YAML line: sources: ["Regulatory websites", "Legal newsletters", "Local partners
        Priority: CRITICAL
        """
        assert "RULE-0810" in all_results['results'], "Rule RULE-0810 missing"
        result = all_results['results']["RULE-0810"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0810 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0810 failed"


    def test_rule_0811(self, all_results):
        """
        Test RULE-0811: YAML line: alert_threshold: "Within 48 hours"
        Priority: MEDIUM
        """
        assert "RULE-0811" in all_results['results'], "Rule RULE-0811 missing"
        result = all_results['results']["RULE-0811"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0811 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0811 failed"


    def test_rule_0812(self, all_results):
        """
        Test RULE-0812: YAML line: tier_3_markets:
        Priority: MEDIUM
        """
        assert "RULE-0812" in all_results['results'], "Rule RULE-0812 missing"
        result = all_results['results']["RULE-0812"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0812 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0812 failed"


    def test_rule_0813(self, all_results):
        """
        Test RULE-0813: YAML line: monitoring_frequency: "Monthly"
        Priority: MEDIUM
        """
        assert "RULE-0813" in all_results['results'], "Rule RULE-0813 missing"
        result = all_results['results']["RULE-0813"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0813 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0813 failed"


    def test_rule_0814(self, all_results):
        """
        Test RULE-0814: YAML line: sources: ["Industry reports", "Legal summaries", "Partner updates"]
        Priority: CRITICAL
        """
        assert "RULE-0814" in all_results['results'], "Rule RULE-0814 missing"
        result = all_results['results']["RULE-0814"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0814 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0814 failed"


    def test_rule_0815(self, all_results):
        """
        Test RULE-0815: YAML line: alert_threshold: "Within 1 week"
        Priority: MEDIUM
        """
        assert "RULE-0815" in all_results['results'], "Rule RULE-0815 missing"
        result = all_results['results']["RULE-0815"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0815 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0815 failed"


    def test_rule_0816(self, all_results):
        """
        Test RULE-0816: YAML line: intelligence_sources:
        Priority: MEDIUM
        """
        assert "RULE-0816" in all_results['results'], "Rule RULE-0816 missing"
        result = all_results['results']["RULE-0816"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0816 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0816 failed"


    def test_rule_0817(self, all_results):
        """
        Test RULE-0817: YAML line: primary_sources:
        Priority: MEDIUM
        """
        assert "RULE-0817" in all_results['results'], "Rule RULE-0817 missing"
        result = all_results['results']["RULE-0817"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0817 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0817 failed"


    def test_rule_0818(self, all_results):
        """
        Test RULE-0818: YAML line: - "Regulatory agency websites and publications"
        Priority: MEDIUM
        """
        assert "RULE-0818" in all_results['results'], "Rule RULE-0818 missing"
        result = all_results['results']["RULE-0818"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0818 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0818 failed"


    def test_rule_0819(self, all_results):
        """
        Test RULE-0819: YAML line: - "Official government announcements"
        Priority: MEDIUM
        """
        assert "RULE-0819" in all_results['results'], "Rule RULE-0819 missing"
        result = all_results['results']["RULE-0819"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0819 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0819 failed"


    def test_rule_0820(self, all_results):
        """
        Test RULE-0820: YAML line: - "Legislative databases and parliamentary records"
        Priority: MEDIUM
        """
        assert "RULE-0820" in all_results['results'], "Rule RULE-0820 missing"
        result = all_results['results']["RULE-0820"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0820 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0820 failed"


    def test_rule_0821(self, all_results):
        """
        Test RULE-0821: YAML line: - "Court decisions and legal precedents"
        Priority: CRITICAL
        """
        assert "RULE-0821" in all_results['results'], "Rule RULE-0821 missing"
        result = all_results['results']["RULE-0821"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0821 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0821 failed"


    def test_rule_0822(self, all_results):
        """
        Test RULE-0822: YAML line: secondary_sources:
        Priority: MEDIUM
        """
        assert "RULE-0822" in all_results['results'], "Rule RULE-0822 missing"
        result = all_results['results']["RULE-0822"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0822 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0822 failed"


    def test_rule_0823(self, all_results):
        """
        Test RULE-0823: YAML line: - "Legal and compliance industry publications"
        Priority: CRITICAL
        """
        assert "RULE-0823" in all_results['results'], "Rule RULE-0823 missing"
        result = all_results['results']["RULE-0823"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0823 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0823 failed"


    def test_rule_0824(self, all_results):
        """
        Test RULE-0824: YAML line: - "Professional services firm updates"
        Priority: MEDIUM
        """
        assert "RULE-0824" in all_results['results'], "Rule RULE-0824 missing"
        result = all_results['results']["RULE-0824"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0824 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0824 failed"


    def test_rule_0825(self, all_results):
        """
        Test RULE-0825: YAML line: - "Industry association communications"
        Priority: MEDIUM
        """
        assert "RULE-0825" in all_results['results'], "Rule RULE-0825 missing"
        result = all_results['results']["RULE-0825"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0825 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0825 failed"


    def test_rule_0826(self, all_results):
        """
        Test RULE-0826: YAML line: - "Academic research and analysis"
        Priority: MEDIUM
        """
        assert "RULE-0826" in all_results['results'], "Rule RULE-0826 missing"
        result = all_results['results']["RULE-0826"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0826 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0826 failed"


    def test_rule_0827(self, all_results):
        """
        Test RULE-0827: YAML line: intelligence_partners:
        Priority: MEDIUM
        """
        assert "RULE-0827" in all_results['results'], "Rule RULE-0827 missing"
        result = all_results['results']["RULE-0827"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0827 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0827 failed"


    def test_rule_0828(self, all_results):
        """
        Test RULE-0828: YAML line: - "Thomson Reuters Regulatory Intelligence"
        Priority: MEDIUM
        """
        assert "RULE-0828" in all_results['results'], "Rule RULE-0828 missing"
        result = all_results['results']["RULE-0828"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0828 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0828 failed"


    def test_rule_0829(self, all_results):
        """
        Test RULE-0829: YAML line: - "Compliance.ai regulatory monitoring"
        Priority: CRITICAL
        """
        assert "RULE-0829" in all_results['results'], "Rule RULE-0829 missing"
        result = all_results['results']["RULE-0829"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0829 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0829 failed"


    def test_rule_0830(self, all_results):
        """
        Test RULE-0830: YAML line: - "Local legal counsel networks"
        Priority: CRITICAL
        """
        assert "RULE-0830" in all_results['results'], "Rule RULE-0830 missing"
        result = all_results['results']["RULE-0830"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0830 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0830 failed"


    def test_rule_0831(self, all_results):
        """
        Test RULE-0831: YAML line: - "Industry regulatory associations"
        Priority: MEDIUM
        """
        assert "RULE-0831" in all_results['results'], "Rule RULE-0831 missing"
        result = all_results['results']["RULE-0831"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0831 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0831 failed"


    def test_rule_0832(self, all_results):
        """
        Test RULE-0832: YAML line: alert_framework:
        Priority: MEDIUM
        """
        assert "RULE-0832" in all_results['results'], "Rule RULE-0832 missing"
        result = all_results['results']["RULE-0832"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0832 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0832 failed"


    def test_rule_0833(self, all_results):
        """
        Test RULE-0833: YAML line: critical_alerts:
        Priority: CRITICAL
        """
        assert "RULE-0833" in all_results['results'], "Rule RULE-0833 missing"
        result = all_results['results']["RULE-0833"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0833 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0833 failed"


    def test_rule_0834(self, all_results):
        """
        Test RULE-0834: YAML line: criteria: "Material impact on business operations or compliance"
        Priority: CRITICAL
        """
        assert "RULE-0834" in all_results['results'], "Rule RULE-0834 missing"
        result = all_results['results']["RULE-0834"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0834 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0834 failed"


    def test_rule_0835(self, all_results):
        """
        Test RULE-0835: YAML line: response_time: "Immediate (within 2 hours)"
        Priority: MEDIUM
        """
        assert "RULE-0835" in all_results['results'], "Rule RULE-0835 missing"
        result = all_results['results']["RULE-0835"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0835 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0835 failed"


    def test_rule_0836(self, all_results):
        """
        Test RULE-0836: YAML line: escalation: "C-suite and board notification"
        Priority: MEDIUM
        """
        assert "RULE-0836" in all_results['results'], "Rule RULE-0836 missing"
        result = all_results['results']["RULE-0836"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0836 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0836 failed"


    def test_rule_0837(self, all_results):
        """
        Test RULE-0837: YAML line: high_priority:
        Priority: MEDIUM
        """
        assert "RULE-0837" in all_results['results'], "Rule RULE-0837 missing"
        result = all_results['results']["RULE-0837"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0837 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0837 failed"


    def test_rule_0838(self, all_results):
        """
        Test RULE-0838: YAML line: criteria: "Significant regulatory changes affecting compliance strate
        Priority: CRITICAL
        """
        assert "RULE-0838" in all_results['results'], "Rule RULE-0838 missing"
        result = all_results['results']["RULE-0838"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0838 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0838 failed"


    def test_rule_0839(self, all_results):
        """
        Test RULE-0839: YAML line: response_time: "Within 24 hours"
        Priority: MEDIUM
        """
        assert "RULE-0839" in all_results['results'], "Rule RULE-0839 missing"
        result = all_results['results']["RULE-0839"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0839 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0839 failed"


    def test_rule_0840(self, all_results):
        """
        Test RULE-0840: YAML line: escalation: "Compliance committee notification"
        Priority: CRITICAL
        """
        assert "RULE-0840" in all_results['results'], "Rule RULE-0840 missing"
        result = all_results['results']["RULE-0840"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0840 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0840 failed"


    def test_rule_0841(self, all_results):
        """
        Test RULE-0841: YAML line: medium_priority:
        Priority: MEDIUM
        """
        assert "RULE-0841" in all_results['results'], "Rule RULE-0841 missing"
        result = all_results['results']["RULE-0841"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0841 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0841 failed"


    def test_rule_0842(self, all_results):
        """
        Test RULE-0842: YAML line: criteria: "Regulatory developments requiring monitoring"
        Priority: MEDIUM
        """
        assert "RULE-0842" in all_results['results'], "Rule RULE-0842 missing"
        result = all_results['results']["RULE-0842"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0842 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0842 failed"


    def test_rule_0843(self, all_results):
        """
        Test RULE-0843: YAML line: response_time: "Within 1 week"
        Priority: MEDIUM
        """
        assert "RULE-0843" in all_results['results'], "Rule RULE-0843 missing"
        result = all_results['results']["RULE-0843"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0843 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0843 failed"


    def test_rule_0844(self, all_results):
        """
        Test RULE-0844: YAML line: escalation: "Compliance team review"
        Priority: CRITICAL
        """
        assert "RULE-0844" in all_results['results'], "Rule RULE-0844 missing"
        result = all_results['results']["RULE-0844"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0844 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0844 failed"


    def test_rule_0845(self, all_results):
        """
        Test RULE-0845: YAML line: low_priority:
        Priority: MEDIUM
        """
        assert "RULE-0845" in all_results['results'], "Rule RULE-0845 missing"
        result = all_results['results']["RULE-0845"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0845 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0845 failed"


    def test_rule_0846(self, all_results):
        """
        Test RULE-0846: YAML line: criteria: "General regulatory updates and trends"
        Priority: MEDIUM
        """
        assert "RULE-0846" in all_results['results'], "Rule RULE-0846 missing"
        result = all_results['results']["RULE-0846"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0846 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0846 failed"


    def test_rule_0847(self, all_results):
        """
        Test RULE-0847: YAML line: response_time: "Monthly review cycle"
        Priority: MEDIUM
        """
        assert "RULE-0847" in all_results['results'], "Rule RULE-0847 missing"
        result = all_results['results']["RULE-0847"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0847 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0847 failed"


    def test_rule_0848(self, all_results):
        """
        Test RULE-0848: YAML line: escalation: "Routine reporting"
        Priority: MEDIUM
        """
        assert "RULE-0848" in all_results['results'], "Rule RULE-0848 missing"
        result = all_results['results']["RULE-0848"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0848 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0848 failed"


    def test_rule_0849(self, all_results):
        """
        Test RULE-0849: YAML line: impact_assessment:
        Priority: MEDIUM
        """
        assert "RULE-0849" in all_results['results'], "Rule RULE-0849 missing"
        result = all_results['results']["RULE-0849"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0849 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0849 failed"


    def test_rule_0850(self, all_results):
        """
        Test RULE-0850: YAML line: assessment_criteria:
        Priority: MEDIUM
        """
        assert "RULE-0850" in all_results['results'], "Rule RULE-0850 missing"
        result = all_results['results']["RULE-0850"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0850 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0850 failed"


    def test_rule_0851(self, all_results):
        """
        Test RULE-0851: YAML line: - "Direct compliance obligations"
        Priority: CRITICAL
        """
        assert "RULE-0851" in all_results['results'], "Rule RULE-0851 missing"
        result = all_results['results']["RULE-0851"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0851 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0851 failed"


    def test_rule_0852(self, all_results):
        """
        Test RULE-0852: YAML line: - "Business model implications"
        Priority: MEDIUM
        """
        assert "RULE-0852" in all_results['results'], "Rule RULE-0852 missing"
        result = all_results['results']["RULE-0852"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0852 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0852 failed"


    def test_rule_0853(self, all_results):
        """
        Test RULE-0853: YAML line: - "Competitive impact"
        Priority: MEDIUM
        """
        assert "RULE-0853" in all_results['results'], "Rule RULE-0853 missing"
        result = all_results['results']["RULE-0853"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0853 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0853 failed"


    def test_rule_0854(self, all_results):
        """
        Test RULE-0854: YAML line: - "Implementation costs"
        Priority: MEDIUM
        """
        assert "RULE-0854" in all_results['results'], "Rule RULE-0854 missing"
        result = all_results['results']["RULE-0854"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0854 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0854 failed"


    def test_rule_0855(self, all_results):
        """
        Test RULE-0855: YAML line: - "Timeline requirements"
        Priority: MEDIUM
        """
        assert "RULE-0855" in all_results['results'], "Rule RULE-0855 missing"
        result = all_results['results']["RULE-0855"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0855 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0855 failed"


    def test_rule_0856(self, all_results):
        """
        Test RULE-0856: YAML line: response_planning:
        Priority: MEDIUM
        """
        assert "RULE-0856" in all_results['results'], "Rule RULE-0856 missing"
        result = all_results['results']["RULE-0856"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0856 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0856 failed"


    def test_rule_0857(self, all_results):
        """
        Test RULE-0857: YAML line: - "Compliance gap analysis"
        Priority: CRITICAL
        """
        assert "RULE-0857" in all_results['results'], "Rule RULE-0857 missing"
        result = all_results['results']["RULE-0857"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0857 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0857 failed"


    def test_rule_0858(self, all_results):
        """
        Test RULE-0858: YAML line: - "Implementation roadmap"
        Priority: MEDIUM
        """
        assert "RULE-0858" in all_results['results'], "Rule RULE-0858 missing"
        result = all_results['results']["RULE-0858"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0858 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0858 failed"


    def test_rule_0859(self, all_results):
        """
        Test RULE-0859: YAML line: - "Resource requirements"
        Priority: MEDIUM
        """
        assert "RULE-0859" in all_results['results'], "Rule RULE-0859 missing"
        result = all_results['results']["RULE-0859"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0859 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0859 failed"


    def test_rule_0860(self, all_results):
        """
        Test RULE-0860: YAML line: - "Risk mitigation strategies"
        Priority: MEDIUM
        """
        assert "RULE-0860" in all_results['results'], "Rule RULE-0860 missing"
        result = all_results['results']["RULE-0860"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0860 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0860 failed"


    def test_rule_0861(self, all_results):
        """
        Test RULE-0861: YAML line: - "Stakeholder communications"
        Priority: MEDIUM
        """
        assert "RULE-0861" in all_results['results'], "Rule RULE-0861 missing"
        result = all_results['results']["RULE-0861"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0861 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0861 failed"


    def test_rule_0862(self, all_results):
        """
        Test RULE-0862: YAML field 'version' must equal '1.0'
        Priority: HIGH
        """
        assert "RULE-0862" in all_results['results'], "Rule RULE-0862 missing"
        result = all_results['results']["RULE-0862"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "HIGH" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0862 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0862 failed"


    def test_rule_0863(self, all_results):
        """
        Test RULE-0863: YAML field 'date' must equal '2025-09-15'
        Priority: MEDIUM
        """
        assert "RULE-0863" in all_results['results'], "Rule RULE-0863 missing"
        result = all_results['results']["RULE-0863"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0863 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0863 failed"


    def test_rule_0864(self, all_results):
        """
        Test RULE-0864: YAML field 'deprecated' must equal 'False'
        Priority: CRITICAL
        """
        assert "RULE-0864" in all_results['results'], "Rule RULE-0864 missing"
        result = all_results['results']["RULE-0864"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0864 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0864 failed"


    def test_rule_0865(self, all_results):
        """
        Test RULE-0865: YAML field 'ai_compatible' must equal 'True'
        Priority: CRITICAL
        """
        assert "RULE-0865" in all_results['results'], "Rule RULE-0865 missing"
        result = all_results['results']["RULE-0865"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0865 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0865 failed"


    def test_rule_0866(self, all_results):
        """
        Test RULE-0866: YAML field 'llm_interpretable' must equal 'True'
        Priority: CRITICAL
        """
        assert "RULE-0866" in all_results['results'], "Rule RULE-0866 missing"
        result = all_results['results']["RULE-0866"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0866 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0866 failed"


    def test_rule_0867(self, all_results):
        """
        Test RULE-0867: YAML field 'classification' must equal 'CONFIDENTIAL - Enterprise AI Integration
        Priority: MEDIUM
        """
        assert "RULE-0867" in all_results['results'], "Rule RULE-0867 missing"
        result = all_results['results']["RULE-0867"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0867 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0867 failed"


    def test_rule_0868(self, all_results):
        """
        Test RULE-0868: YAML field 'ai_integration.policy_bots.enabled' must equal 'True'
        Priority: CRITICAL
        """
        assert "RULE-0868" in all_results['results'], "Rule RULE-0868 missing"
        result = all_results['results']["RULE-0868"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0868 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0868 failed"


    def test_rule_0869(self, all_results):
        """
        Test RULE-0869: YAML field 'ai_integration.policy_bots.description' must equal 'Automated policy
        Priority: CRITICAL
        """
        assert "RULE-0869" in all_results['results'], "Rule RULE-0869 missing"
        result = all_results['results']["RULE-0869"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0869 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0869 failed"


    def test_rule_0870(self, all_results):
        """
        Test RULE-0870: YAML list 'ai_integration.policy_bots.compatible_models' must contain 4 elements
        Priority: MEDIUM
        """
        assert "RULE-0870" in all_results['results'], "Rule RULE-0870 missing"
        result = all_results['results']["RULE-0870"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0870 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0870 failed"


    def test_rule_0871(self, all_results):
        """
        Test RULE-0871: YAML field 'ai_integration.policy_bots.api_endpoints' must equal '23_compliance/
        Priority: CRITICAL
        """
        assert "RULE-0871" in all_results['results'], "Rule RULE-0871 missing"
        result = all_results['results']["RULE-0871"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0871 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0871 failed"


    def test_rule_0872(self, all_results):
        """
        Test RULE-0872: YAML field 'ai_integration.policy_bots.enterprise_models' must equal 'internal_l
        Priority: MEDIUM
        """
        assert "RULE-0872" in all_results['results'], "Rule RULE-0872 missing"
        result = all_results['results']["RULE-0872"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0872 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0872 failed"


    def test_rule_0873(self, all_results):
        """
        Test RULE-0873: YAML field 'ai_integration.realtime_checks.enabled' must equal 'True'
        Priority: CRITICAL
        """
        assert "RULE-0873" in all_results['results'], "Rule RULE-0873 missing"
        result = all_results['results']["RULE-0873"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0873 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0873 failed"


    def test_rule_0874(self, all_results):
        """
        Test RULE-0874: YAML field 'ai_integration.realtime_checks.description' must equal 'Continuous c
        Priority: CRITICAL
        """
        assert "RULE-0874" in all_results['results'], "Rule RULE-0874 missing"
        result = all_results['results']["RULE-0874"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0874 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0874 failed"


    def test_rule_0875(self, all_results):
        """
        Test RULE-0875: YAML field 'ai_integration.realtime_checks.check_frequency' must equal 'commit-b
        Priority: MEDIUM
        """
        assert "RULE-0875" in all_results['results'], "Rule RULE-0875 missing"
        result = all_results['results']["RULE-0875"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0875 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0875 failed"


    def test_rule_0876(self, all_results):
        """
        Test RULE-0876: YAML field 'ai_integration.realtime_checks.alert_threshold' must equal 'medium'
        Priority: MEDIUM
        """
        assert "RULE-0876" in all_results['results'], "Rule RULE-0876 missing"
        result = all_results['results']["RULE-0876"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0876 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0876 failed"


    def test_rule_0877(self, all_results):
        """
        Test RULE-0877: YAML field 'ai_integration.realtime_checks.integration_path' must equal '24_meta
        Priority: MEDIUM
        """
        assert "RULE-0877" in all_results['results'], "Rule RULE-0877 missing"
        result = all_results['results']["RULE-0877"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0877 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0877 failed"


    def test_rule_0878(self, all_results):
        """
        Test RULE-0878: YAML field 'ai_integration.realtime_checks.business_escalation' must equal 'auto
        Priority: CRITICAL
        """
        assert "RULE-0878" in all_results['results'], "Rule RULE-0878 missing"
        result = all_results['results']["RULE-0878"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0878 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0878 failed"


    def test_rule_0879(self, all_results):
        """
        Test RULE-0879: YAML field 'ai_integration.natural_language_queries.enabled' must equal 'True'
        Priority: CRITICAL
        """
        assert "RULE-0879" in all_results['results'], "Rule RULE-0879 missing"
        result = all_results['results']["RULE-0879"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0879 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0879 failed"


    def test_rule_0880(self, all_results):
        """
        Test RULE-0880: YAML field 'ai_integration.natural_language_queries.description' must equal 'Ask
        Priority: CRITICAL
        """
        assert "RULE-0880" in all_results['results'], "Rule RULE-0880 missing"
        result = all_results['results']["RULE-0880"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0880 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0880 failed"


    def test_rule_0881(self, all_results):
        """
        Test RULE-0881: YAML list 'ai_integration.natural_language_queries.examples' must contain 4 elem
        Priority: CRITICAL
        """
        assert "RULE-0881" in all_results['results'], "Rule RULE-0881 missing"
        result = all_results['results']["RULE-0881"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0881 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0881 failed"


    def test_rule_0882(self, all_results):
        """
        Test RULE-0882: YAML field 'ai_integration.natural_language_queries.query_processor' must equal 
        Priority: CRITICAL
        """
        assert "RULE-0882" in all_results['results'], "Rule RULE-0882 missing"
        result = all_results['results']["RULE-0882"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0882 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0882 failed"


    def test_rule_0883(self, all_results):
        """
        Test RULE-0883: YAML field 'ai_integration.natural_language_queries.business_intelligence' must 
        Priority: MEDIUM
        """
        assert "RULE-0883" in all_results['results'], "Rule RULE-0883 missing"
        result = all_results['results']["RULE-0883"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0883 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0883 failed"


    def test_rule_0884(self, all_results):
        """
        Test RULE-0884: YAML field 'ai_integration.machine_readable_comments.format' must equal 'structu
        Priority: MEDIUM
        """
        assert "RULE-0884" in all_results['results'], "Rule RULE-0884 missing"
        result = all_results['results']["RULE-0884"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0884 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0884 failed"


    def test_rule_0885(self, all_results):
        """
        Test RULE-0885: YAML list 'ai_integration.machine_readable_comments.ai_tags' must contain 4 elem
        Priority: CRITICAL
        """
        assert "RULE-0885" in all_results['results'], "Rule RULE-0885 missing"
        result = all_results['results']["RULE-0885"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0885 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0885 failed"


    def test_rule_0886(self, all_results):
        """
        Test RULE-0886: YAML field 'ai_integration.machine_readable_comments.schema' must equal '23_comp
        Priority: CRITICAL
        """
        assert "RULE-0886" in all_results['results'], "Rule RULE-0886 missing"
        result = all_results['results']["RULE-0886"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0886 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0886 failed"


    def test_rule_0887(self, all_results):
        """
        Test RULE-0887: YAML field 'policy_automation.auto_policy_updates.enabled' must equal 'False'
        Priority: CRITICAL
        """
        assert "RULE-0887" in all_results['results'], "Rule RULE-0887 missing"
        result = all_results['results']["RULE-0887"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0887 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0887 failed"


    def test_rule_0888(self, all_results):
        """
        Test RULE-0888: YAML field 'policy_automation.auto_policy_updates.description' must equal 'AI-dr
        Priority: MEDIUM
        """
        assert "RULE-0888" in all_results['results'], "Rule RULE-0888 missing"
        result = all_results['results']["RULE-0888"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0888 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0888 failed"


    def test_rule_0889(self, all_results):
        """
        Test RULE-0889: YAML field 'policy_automation.auto_policy_updates.human_approval_required' must 
        Priority: CRITICAL
        """
        assert "RULE-0889" in all_results['results'], "Rule RULE-0889 missing"
        result = all_results['results']["RULE-0889"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0889 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0889 failed"


    def test_rule_0890(self, all_results):
        """
        Test RULE-0890: YAML field 'policy_automation.auto_policy_updates.business_review_required' must
        Priority: CRITICAL
        """
        assert "RULE-0890" in all_results['results'], "Rule RULE-0890 missing"
        result = all_results['results']["RULE-0890"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0890 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0890 failed"


    def test_rule_0891(self, all_results):
        """
        Test RULE-0891: YAML field 'policy_automation.auto_policy_updates.review_threshold' must equal '
        Priority: MEDIUM
        """
        assert "RULE-0891" in all_results['results'], "Rule RULE-0891 missing"
        result = all_results['results']["RULE-0891"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0891 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0891 failed"


    def test_rule_0892(self, all_results):
        """
        Test RULE-0892: YAML field 'policy_automation.compliance_chatbot.enabled' must equal 'True'
        Priority: CRITICAL
        """
        assert "RULE-0892" in all_results['results'], "Rule RULE-0892 missing"
        result = all_results['results']["RULE-0892"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0892 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0892 failed"


    def test_rule_0893(self, all_results):
        """
        Test RULE-0893: YAML field 'policy_automation.compliance_chatbot.description' must equal 'AI ass
        Priority: CRITICAL
        """
        assert "RULE-0893" in all_results['results'], "Rule RULE-0893 missing"
        result = all_results['results']["RULE-0893"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0893 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0893 failed"


    def test_rule_0894(self, all_results):
        """
        Test RULE-0894: YAML field 'policy_automation.compliance_chatbot.knowledge_base' must equal '23_
        Priority: CRITICAL
        """
        assert "RULE-0894" in all_results['results'], "Rule RULE-0894 missing"
        result = all_results['results']["RULE-0894"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0894 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0894 failed"


    def test_rule_0895(self, all_results):
        """
        Test RULE-0895: YAML field 'policy_automation.compliance_chatbot.update_frequency' must equal 'w
        Priority: MEDIUM
        """
        assert "RULE-0895" in all_results['results'], "Rule RULE-0895 missing"
        result = all_results['results']["RULE-0895"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0895 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0895 failed"


    def test_rule_0896(self, all_results):
        """
        Test RULE-0896: YAML field 'policy_automation.compliance_chatbot.business_context' must equal 'c
        Priority: MEDIUM
        """
        assert "RULE-0896" in all_results['results'], "Rule RULE-0896 missing"
        result = all_results['results']["RULE-0896"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0896 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0896 failed"


    def test_rule_0897(self, all_results):
        """
        Test RULE-0897: YAML field 'policy_automation.risk_assessment_ai.enabled' must equal 'True'
        Priority: CRITICAL
        """
        assert "RULE-0897" in all_results['results'], "Rule RULE-0897 missing"
        result = all_results['results']["RULE-0897"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0897 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0897 failed"


    def test_rule_0898(self, all_results):
        """
        Test RULE-0898: YAML field 'policy_automation.risk_assessment_ai.description' must equal 'AI-pow
        Priority: MEDIUM
        """
        assert "RULE-0898" in all_results['results'], "Rule RULE-0898 missing"
        result = all_results['results']["RULE-0898"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0898 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0898 failed"


    def test_rule_0899(self, all_results):
        """
        Test RULE-0899: YAML field 'policy_automation.risk_assessment_ai.model_path' must equal '07_gove
        Priority: CRITICAL
        """
        assert "RULE-0899" in all_results['results'], "Rule RULE-0899 missing"
        result = all_results['results']["RULE-0899"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0899 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0899 failed"


    def test_rule_0900(self, all_results):
        """
        Test RULE-0900: YAML field 'policy_automation.risk_assessment_ai.confidence_threshold' must equa
        Priority: MEDIUM
        """
        assert "RULE-0900" in all_results['results'], "Rule RULE-0900 missing"
        result = all_results['results']["RULE-0900"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0900 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0900 failed"


    def test_rule_0901(self, all_results):
        """
        Test RULE-0901: YAML field 'policy_automation.risk_assessment_ai.human_review_required' must equ
        Priority: CRITICAL
        """
        assert "RULE-0901" in all_results['results'], "Rule RULE-0901 missing"
        result = all_results['results']["RULE-0901"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0901 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0901 failed"


    def test_rule_0902(self, all_results):
        """
        Test RULE-0902: YAML field 'policy_automation.risk_assessment_ai.business_impact_analysis' must 
        Priority: CRITICAL
        """
        assert "RULE-0902" in all_results['results'], "Rule RULE-0902 missing"
        result = all_results['results']["RULE-0902"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0902 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0902 failed"


    def test_rule_0903(self, all_results):
        """
        Test RULE-0903: YAML line: version: "1.0"
        Priority: MEDIUM
        """
        assert "RULE-0903" in all_results['results'], "Rule RULE-0903 missing"
        result = all_results['results']["RULE-0903"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0903 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0903 failed"


    def test_rule_0904(self, all_results):
        """
        Test RULE-0904: YAML line: date: "2025-09-15"
        Priority: MEDIUM
        """
        assert "RULE-0904" in all_results['results'], "Rule RULE-0904 missing"
        result = all_results['results']["RULE-0904"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0904 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0904 failed"


    def test_rule_0905(self, all_results):
        """
        Test RULE-0905: YAML line: deprecated: false
        Priority: MEDIUM
        """
        assert "RULE-0905" in all_results['results'], "Rule RULE-0905 missing"
        result = all_results['results']["RULE-0905"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0905 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0905 failed"


    def test_rule_0906(self, all_results):
        """
        Test RULE-0906: YAML line: ai_compatible: true
        Priority: MEDIUM
        """
        assert "RULE-0906" in all_results['results'], "Rule RULE-0906 missing"
        result = all_results['results']["RULE-0906"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0906 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0906 failed"


    def test_rule_0907(self, all_results):
        """
        Test RULE-0907: YAML line: llm_interpretable: true
        Priority: MEDIUM
        """
        assert "RULE-0907" in all_results['results'], "Rule RULE-0907 missing"
        result = all_results['results']["RULE-0907"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0907 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0907 failed"


    def test_rule_0908(self, all_results):
        """
        Test RULE-0908: YAML line: classification: "CONFIDENTIAL - Enterprise AI Integration"
        Priority: MEDIUM
        """
        assert "RULE-0908" in all_results['results'], "Rule RULE-0908 missing"
        result = all_results['results']["RULE-0908"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0908 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0908 failed"


    def test_rule_0909(self, all_results):
        """
        Test RULE-0909: YAML line: ai_integration:
        Priority: MEDIUM
        """
        assert "RULE-0909" in all_results['results'], "Rule RULE-0909 missing"
        result = all_results['results']["RULE-0909"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0909 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0909 failed"


    def test_rule_0910(self, all_results):
        """
        Test RULE-0910: YAML line: policy_bots:
        Priority: MEDIUM
        """
        assert "RULE-0910" in all_results['results'], "Rule RULE-0910 missing"
        result = all_results['results']["RULE-0910"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0910 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0910 failed"


    def test_rule_0911(self, all_results):
        """
        Test RULE-0911: YAML line: enabled: true
        Priority: MEDIUM
        """
        assert "RULE-0911" in all_results['results'], "Rule RULE-0911 missing"
        result = all_results['results']["RULE-0911"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0911 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0911 failed"


    def test_rule_0912(self, all_results):
        """
        Test RULE-0912: YAML line: description: "Automated policy validation and compliance checking"
        Priority: CRITICAL
        """
        assert "RULE-0912" in all_results['results'], "Rule RULE-0912 missing"
        result = all_results['results']["RULE-0912"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0912 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0912 failed"


    def test_rule_0913(self, all_results):
        """
        Test RULE-0913: YAML line: compatible_models: ["GPT-4+", "Claude-3+", "Gemini-Pro", "Custom LLMs
        Priority: MEDIUM
        """
        assert "RULE-0913" in all_results['results'], "Rule RULE-0913 missing"
        result = all_results['results']["RULE-0913"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0913 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0913 failed"


    def test_rule_0914(self, all_results):
        """
        Test RULE-0914: YAML line: api_endpoints: "23_compliance/ai_ml_ready/api/policy_validation.json"
        Priority: CRITICAL
        """
        assert "RULE-0914" in all_results['results'], "Rule RULE-0914 missing"
        result = all_results['results']["RULE-0914"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0914 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0914 failed"


    def test_rule_0915(self, all_results):
        """
        Test RULE-0915: YAML line: enterprise_models: "internal_llm_endpoints"
        Priority: MEDIUM
        """
        assert "RULE-0915" in all_results['results'], "Rule RULE-0915 missing"
        result = all_results['results']["RULE-0915"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0915 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0915 failed"


    def test_rule_0916(self, all_results):
        """
        Test RULE-0916: YAML line: realtime_checks:
        Priority: MEDIUM
        """
        assert "RULE-0916" in all_results['results'], "Rule RULE-0916 missing"
        result = all_results['results']["RULE-0916"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0916 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0916 failed"


    def test_rule_0917(self, all_results):
        """
        Test RULE-0917: YAML line: enabled: true
        Priority: MEDIUM
        """
        assert "RULE-0917" in all_results['results'], "Rule RULE-0917 missing"
        result = all_results['results']["RULE-0917"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0917 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0917 failed"


    def test_rule_0918(self, all_results):
        """
        Test RULE-0918: YAML line: description: "Continuous compliance monitoring via AI agents"
        Priority: CRITICAL
        """
        assert "RULE-0918" in all_results['results'], "Rule RULE-0918 missing"
        result = all_results['results']["RULE-0918"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0918 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0918 failed"


    def test_rule_0919(self, all_results):
        """
        Test RULE-0919: YAML line: check_frequency: "commit-based"
        Priority: MEDIUM
        """
        assert "RULE-0919" in all_results['results'], "Rule RULE-0919 missing"
        result = all_results['results']["RULE-0919"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0919 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0919 failed"


    def test_rule_0920(self, all_results):
        """
        Test RULE-0920: YAML line: alert_threshold: "medium"
        Priority: MEDIUM
        """
        assert "RULE-0920" in all_results['results'], "Rule RULE-0920 missing"
        result = all_results['results']["RULE-0920"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0920 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0920 failed"


    def test_rule_0921(self, all_results):
        """
        Test RULE-0921: YAML line: integration_path: "24_meta_orchestration/triggers/ci/ai_agents/"
        Priority: MEDIUM
        """
        assert "RULE-0921" in all_results['results'], "Rule RULE-0921 missing"
        result = all_results['results']["RULE-0921"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0921 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0921 failed"


    def test_rule_0922(self, all_results):
        """
        Test RULE-0922: YAML line: business_escalation: "auto_escalate_critical"
        Priority: CRITICAL
        """
        assert "RULE-0922" in all_results['results'], "Rule RULE-0922 missing"
        result = all_results['results']["RULE-0922"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0922 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0922 failed"


    def test_rule_0923(self, all_results):
        """
        Test RULE-0923: YAML line: natural_language_queries:
        Priority: MEDIUM
        """
        assert "RULE-0923" in all_results['results'], "Rule RULE-0923 missing"
        result = all_results['results']["RULE-0923"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0923 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0923 failed"


    def test_rule_0924(self, all_results):
        """
        Test RULE-0924: YAML line: enabled: true
        Priority: MEDIUM
        """
        assert "RULE-0924" in all_results['results'], "Rule RULE-0924 missing"
        result = all_results['results']["RULE-0924"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0924 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0924 failed"


    def test_rule_0925(self, all_results):
        """
        Test RULE-0925: YAML line: description: "Ask compliance questions in natural language"
        Priority: CRITICAL
        """
        assert "RULE-0925" in all_results['results'], "Rule RULE-0925 missing"
        result = all_results['results']["RULE-0925"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0925 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0925 failed"


    def test_rule_0926(self, all_results):
        """
        Test RULE-0926: YAML line: examples:
        Priority: MEDIUM
        """
        assert "RULE-0926" in all_results['results'], "Rule RULE-0926 missing"
        result = all_results['results']["RULE-0926"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0926 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0926 failed"


    def test_rule_0927(self, all_results):
        """
        Test RULE-0927: YAML line: - "What's our current GDPR compliance status?"
        Priority: CRITICAL
        """
        assert "RULE-0927" in all_results['results'], "Rule RULE-0927 missing"
        result = all_results['results']["RULE-0927"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0927 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0927 failed"


    def test_rule_0928(self, all_results):
        """
        Test RULE-0928: YAML line: - "Which modules need SOC2 updates?"
        Priority: MEDIUM
        """
        assert "RULE-0928" in all_results['results'], "Rule RULE-0928 missing"
        result = all_results['results']["RULE-0928"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0928 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0928 failed"


    def test_rule_0929(self, all_results):
        """
        Test RULE-0929: YAML line: - "Show me regulatory changes since v1.0"
        Priority: MEDIUM
        """
        assert "RULE-0929" in all_results['results'], "Rule RULE-0929 missing"
        result = all_results['results']["RULE-0929"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0929 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0929 failed"


    def test_rule_0930(self, all_results):
        """
        Test RULE-0930: YAML line: - "Analyze business impact of new EU regulations"
        Priority: MEDIUM
        """
        assert "RULE-0930" in all_results['results'], "Rule RULE-0930 missing"
        result = all_results['results']["RULE-0930"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0930 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0930 failed"


    def test_rule_0931(self, all_results):
        """
        Test RULE-0931: YAML line: query_processor: "01_ai_layer/compliance_query_processor/"
        Priority: CRITICAL
        """
        assert "RULE-0931" in all_results['results'], "Rule RULE-0931 missing"
        result = all_results['results']["RULE-0931"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0931 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0931 failed"


    def test_rule_0932(self, all_results):
        """
        Test RULE-0932: YAML line: business_intelligence: "competitive_analysis_enabled"
        Priority: MEDIUM
        """
        assert "RULE-0932" in all_results['results'], "Rule RULE-0932 missing"
        result = all_results['results']["RULE-0932"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0932 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0932 failed"


    def test_rule_0933(self, all_results):
        """
        Test RULE-0933: YAML line: machine_readable_comments:
        Priority: MEDIUM
        """
        assert "RULE-0933" in all_results['results'], "Rule RULE-0933 missing"
        result = all_results['results']["RULE-0933"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0933 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0933 failed"


    def test_rule_0934(self, all_results):
        """
        Test RULE-0934: YAML line: format: "structured_yaml_comments"
        Priority: MEDIUM
        """
        assert "RULE-0934" in all_results['results'], "Rule RULE-0934 missing"
        result = all_results['results']["RULE-0934"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0934 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0934 failed"


    def test_rule_0935(self, all_results):
        """
        Test RULE-0935: YAML line: ai_tags: ["#AI_INTERPRETABLE", "#LLM_FRIENDLY", "#BOT_READABLE", "#BU
        Priority: CRITICAL
        """
        assert "RULE-0935" in all_results['results'], "Rule RULE-0935 missing"
        result = all_results['results']["RULE-0935"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0935 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0935 failed"


    def test_rule_0936(self, all_results):
        """
        Test RULE-0936: YAML line: schema: "23_compliance/ai_ml_ready/schemas/comment_schema.json"
        Priority: CRITICAL
        """
        assert "RULE-0936" in all_results['results'], "Rule RULE-0936 missing"
        result = all_results['results']["RULE-0936"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0936 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0936 failed"


    def test_rule_0937(self, all_results):
        """
        Test RULE-0937: YAML line: policy_automation:
        Priority: MEDIUM
        """
        assert "RULE-0937" in all_results['results'], "Rule RULE-0937 missing"
        result = all_results['results']["RULE-0937"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0937 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0937 failed"


    def test_rule_0938(self, all_results):
        """
        Test RULE-0938: YAML line: auto_policy_updates:
        Priority: MEDIUM
        """
        assert "RULE-0938" in all_results['results'], "Rule RULE-0938 missing"
        result = all_results['results']["RULE-0938"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0938 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0938 failed"


    def test_rule_0939(self, all_results):
        """
        Test RULE-0939: YAML line: enabled: false  # Optional feature - Enterprise manual override
        Priority: MEDIUM
        """
        assert "RULE-0939" in all_results['results'], "Rule RULE-0939 missing"
        result = all_results['results']["RULE-0939"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0939 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0939 failed"


    def test_rule_0940(self, all_results):
        """
        Test RULE-0940: YAML line: description: "AI-driven policy suggestions with business review"
        Priority: MEDIUM
        """
        assert "RULE-0940" in all_results['results'], "Rule RULE-0940 missing"
        result = all_results['results']["RULE-0940"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0940 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0940 failed"


    def test_rule_0941(self, all_results):
        """
        Test RULE-0941: YAML line: human_approval_required: true
        Priority: CRITICAL
        """
        assert "RULE-0941" in all_results['results'], "Rule RULE-0941 missing"
        result = all_results['results']["RULE-0941"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0941 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0941 failed"


    def test_rule_0942(self, all_results):
        """
        Test RULE-0942: YAML line: business_review_required: true
        Priority: CRITICAL
        """
        assert "RULE-0942" in all_results['results'], "Rule RULE-0942 missing"
        result = all_results['results']["RULE-0942"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0942 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0942 failed"


    def test_rule_0943(self, all_results):
        """
        Test RULE-0943: YAML line: review_threshold: "all_changes"
        Priority: MEDIUM
        """
        assert "RULE-0943" in all_results['results'], "Rule RULE-0943 missing"
        result = all_results['results']["RULE-0943"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0943 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0943 failed"


    def test_rule_0944(self, all_results):
        """
        Test RULE-0944: YAML line: compliance_chatbot:
        Priority: CRITICAL
        """
        assert "RULE-0944" in all_results['results'], "Rule RULE-0944 missing"
        result = all_results['results']["RULE-0944"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0944 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0944 failed"


    def test_rule_0945(self, all_results):
        """
        Test RULE-0945: YAML line: enabled: true
        Priority: MEDIUM
        """
        assert "RULE-0945" in all_results['results'], "Rule RULE-0945 missing"
        result = all_results['results']["RULE-0945"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0945 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0945 failed"


    def test_rule_0946(self, all_results):
        """
        Test RULE-0946: YAML line: description: "AI assistant for compliance questions"
        Priority: CRITICAL
        """
        assert "RULE-0946" in all_results['results'], "Rule RULE-0946 missing"
        result = all_results['results']["RULE-0946"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0946 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0946 failed"


    def test_rule_0947(self, all_results):
        """
        Test RULE-0947: YAML line: knowledge_base: "23_compliance/ai_ml_ready/knowledge_base/"
        Priority: CRITICAL
        """
        assert "RULE-0947" in all_results['results'], "Rule RULE-0947 missing"
        result = all_results['results']["RULE-0947"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0947 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0947 failed"


    def test_rule_0948(self, all_results):
        """
        Test RULE-0948: YAML line: update_frequency: "weekly"
        Priority: MEDIUM
        """
        assert "RULE-0948" in all_results['results'], "Rule RULE-0948 missing"
        result = all_results['results']["RULE-0948"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0948 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0948 failed"


    def test_rule_0949(self, all_results):
        """
        Test RULE-0949: YAML line: business_context: "competitive_intelligence_integrated"
        Priority: MEDIUM
        """
        assert "RULE-0949" in all_results['results'], "Rule RULE-0949 missing"
        result = all_results['results']["RULE-0949"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0949 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0949 failed"


    def test_rule_0950(self, all_results):
        """
        Test RULE-0950: YAML line: risk_assessment_ai:
        Priority: MEDIUM
        """
        assert "RULE-0950" in all_results['results'], "Rule RULE-0950 missing"
        result = all_results['results']["RULE-0950"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0950 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0950 failed"


    def test_rule_0951(self, all_results):
        """
        Test RULE-0951: YAML line: enabled: true
        Priority: MEDIUM
        """
        assert "RULE-0951" in all_results['results'], "Rule RULE-0951 missing"
        result = all_results['results']["RULE-0951"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0951 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0951 failed"


    def test_rule_0952(self, all_results):
        """
        Test RULE-0952: YAML line: description: "AI-powered risk assessment for policy changes"
        Priority: MEDIUM
        """
        assert "RULE-0952" in all_results['results'], "Rule RULE-0952 missing"
        result = all_results['results']["RULE-0952"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0952 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0952 failed"


    def test_rule_0953(self, all_results):
        """
        Test RULE-0953: YAML line: model_path: "07_governance_legal/ai_risk_models/"
        Priority: CRITICAL
        """
        assert "RULE-0953" in all_results['results'], "Rule RULE-0953 missing"
        result = all_results['results']["RULE-0953"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0953 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0953 failed"


    def test_rule_0954(self, all_results):
        """
        Test RULE-0954: YAML line: confidence_threshold: 0.85
        Priority: MEDIUM
        """
        assert "RULE-0954" in all_results['results'], "Rule RULE-0954 missing"
        result = all_results['results']["RULE-0954"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0954 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0954 failed"


    def test_rule_0955(self, all_results):
        """
        Test RULE-0955: YAML line: human_review_required: true
        Priority: CRITICAL
        """
        assert "RULE-0955" in all_results['results'], "Rule RULE-0955 missing"
        result = all_results['results']["RULE-0955"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0955 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0955 failed"


    def test_rule_0956(self, all_results):
        """
        Test RULE-0956: YAML line: business_impact_analysis: true
        Priority: MEDIUM
        """
        assert "RULE-0956" in all_results['results'], "Rule RULE-0956 missing"
        result = all_results['results']["RULE-0956"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0956 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0956 failed"


    def test_rule_0957(self, all_results):
        """
        Test RULE-0957: YAML field 'version' must equal '1.0'
        Priority: HIGH
        """
        assert "RULE-0957" in all_results['results'], "Rule RULE-0957 missing"
        result = all_results['results']["RULE-0957"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "HIGH" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0957 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0957 failed"


    def test_rule_0958(self, all_results):
        """
        Test RULE-0958: YAML field 'date' must equal '2025-09-15'
        Priority: MEDIUM
        """
        assert "RULE-0958" in all_results['results'], "Rule RULE-0958 missing"
        result = all_results['results']["RULE-0958"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0958 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0958 failed"


    def test_rule_0959(self, all_results):
        """
        Test RULE-0959: YAML field 'deprecated' must equal 'False'
        Priority: CRITICAL
        """
        assert "RULE-0959" in all_results['results'], "Rule RULE-0959 missing"
        result = all_results['results']["RULE-0959"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0959 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0959 failed"


    def test_rule_0960(self, all_results):
        """
        Test RULE-0960: YAML field 'classification' must equal 'CONFIDENTIAL - Enterprise Data Strategy'
        Priority: MEDIUM
        """
        assert "RULE-0960" in all_results['results'], "Rule RULE-0960 missing"
        result = all_results['results']["RULE-0960"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0960 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0960 failed"


    def test_rule_0961(self, all_results):
        """
        Test RULE-0961: YAML field 'export_formats.openapi.version' must equal '3.0.3'
        Priority: HIGH
        """
        assert "RULE-0961" in all_results['results'], "Rule RULE-0961 missing"
        result = all_results['results']["RULE-0961"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "HIGH" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0961 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0961 failed"


    def test_rule_0962(self, all_results):
        """
        Test RULE-0962: YAML field 'export_formats.openapi.endpoint' must equal '/api/v1/compliance/expo
        Priority: CRITICAL
        """
        assert "RULE-0962" in all_results['results'], "Rule RULE-0962 missing"
        result = all_results['results']["RULE-0962"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0962 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0962 failed"


    def test_rule_0963(self, all_results):
        """
        Test RULE-0963: YAML field 'export_formats.openapi.schema_path' must equal '10_interoperability/
        Priority: CRITICAL
        """
        assert "RULE-0963" in all_results['results'], "Rule RULE-0963 missing"
        result = all_results['results']["RULE-0963"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0963 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0963 failed"


    def test_rule_0964(self, all_results):
        """
        Test RULE-0964: YAML field 'export_formats.openapi.business_sensitive_fields' must equal 'filter
        Priority: MEDIUM
        """
        assert "RULE-0964" in all_results['results'], "Rule RULE-0964 missing"
        result = all_results['results']["RULE-0964"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0964 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0964 failed"


    def test_rule_0965(self, all_results):
        """
        Test RULE-0965: YAML field 'export_formats.json_schema.version' must equal 'draft-07'
        Priority: HIGH
        """
        assert "RULE-0965" in all_results['results'], "Rule RULE-0965 missing"
        result = all_results['results']["RULE-0965"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "HIGH" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0965 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0965 failed"


    def test_rule_0966(self, all_results):
        """
        Test RULE-0966: YAML field 'export_formats.json_schema.endpoint' must equal '/api/v1/compliance/
        Priority: CRITICAL
        """
        assert "RULE-0966" in all_results['results'], "Rule RULE-0966 missing"
        result = all_results['results']["RULE-0966"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0966 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0966 failed"


    def test_rule_0967(self, all_results):
        """
        Test RULE-0967: YAML field 'export_formats.json_schema.schema_path' must equal '10_interoperabil
        Priority: CRITICAL
        """
        assert "RULE-0967" in all_results['results'], "Rule RULE-0967 missing"
        result = all_results['results']["RULE-0967"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0967 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0967 failed"


    def test_rule_0968(self, all_results):
        """
        Test RULE-0968: YAML field 'export_formats.json_schema.enterprise_extensions' must equal 'True'
        Priority: CRITICAL
        """
        assert "RULE-0968" in all_results['results'], "Rule RULE-0968 missing"
        result = all_results['results']["RULE-0968"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0968 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0968 failed"


    def test_rule_0969(self, all_results):
        """
        Test RULE-0969: YAML field 'export_formats.graphql.enabled' must equal 'True'
        Priority: CRITICAL
        """
        assert "RULE-0969" in all_results['results'], "Rule RULE-0969 missing"
        result = all_results['results']["RULE-0969"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0969 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0969 failed"


    def test_rule_0970(self, all_results):
        """
        Test RULE-0970: YAML field 'export_formats.graphql.endpoint' must equal '/api/v1/compliance/grap
        Priority: CRITICAL
        """
        assert "RULE-0970" in all_results['results'], "Rule RULE-0970 missing"
        result = all_results['results']["RULE-0970"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0970 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0970 failed"


    def test_rule_0971(self, all_results):
        """
        Test RULE-0971: YAML field 'export_formats.graphql.schema_path' must equal '10_interoperability/
        Priority: CRITICAL
        """
        assert "RULE-0971" in all_results['results'], "Rule RULE-0971 missing"
        result = all_results['results']["RULE-0971"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0971 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0971 failed"


    def test_rule_0972(self, all_results):
        """
        Test RULE-0972: YAML field 'export_formats.graphql.introspection_enabled' must equal 'True'
        Priority: CRITICAL
        """
        assert "RULE-0972" in all_results['results'], "Rule RULE-0972 missing"
        result = all_results['results']["RULE-0972"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0972 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0972 failed"


    def test_rule_0973(self, all_results):
        """
        Test RULE-0973: YAML field 'export_formats.graphql.business_rules_layer' must equal 'integrated'
        Priority: MEDIUM
        """
        assert "RULE-0973" in all_results['results'], "Rule RULE-0973 missing"
        result = all_results['results']["RULE-0973"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0973 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0973 failed"


    def test_rule_0974(self, all_results):
        """
        Test RULE-0974: YAML field 'export_formats.rdf_turtle.enabled' must equal 'True'
        Priority: CRITICAL
        """
        assert "RULE-0974" in all_results['results'], "Rule RULE-0974 missing"
        result = all_results['results']["RULE-0974"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0974 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0974 failed"


    def test_rule_0975(self, all_results):
        """
        Test RULE-0975: YAML field 'export_formats.rdf_turtle.namespace' must equal 'https://ssid.org/co
        Priority: CRITICAL
        """
        assert "RULE-0975" in all_results['results'], "Rule RULE-0975 missing"
        result = all_results['results']["RULE-0975"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0975 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0975 failed"


    def test_rule_0976(self, all_results):
        """
        Test RULE-0976: YAML field 'export_formats.rdf_turtle.endpoint' must equal '/api/v1/compliance/e
        Priority: CRITICAL
        """
        assert "RULE-0976" in all_results['results'], "Rule RULE-0976 missing"
        result = all_results['results']["RULE-0976"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0976 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0976 failed"


    def test_rule_0977(self, all_results):
        """
        Test RULE-0977: YAML field 'export_formats.rdf_turtle.ontology_path' must equal '10_interoperabi
        Priority: CRITICAL
        """
        assert "RULE-0977" in all_results['results'], "Rule RULE-0977 missing"
        result = all_results['results']["RULE-0977"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0977 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0977 failed"


    def test_rule_0978(self, all_results):
        """
        Test RULE-0978: YAML list 'import_capabilities.frameworks_supported' must contain 7 elements
        Priority: CRITICAL
        """
        assert "RULE-0978" in all_results['results'], "Rule RULE-0978 missing"
        result = all_results['results']["RULE-0978"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0978 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0978 failed"


    def test_rule_0979(self, all_results):
        """
        Test RULE-0979: YAML field 'import_capabilities.mapping_engine.path' must equal '10_interoperabi
        Priority: MEDIUM
        """
        assert "RULE-0979" in all_results['results'], "Rule RULE-0979 missing"
        result = all_results['results']["RULE-0979"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0979 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0979 failed"


    def test_rule_0980(self, all_results):
        """
        Test RULE-0980: YAML field 'import_capabilities.mapping_engine.ai_assisted' must equal 'True'
        Priority: CRITICAL
        """
        assert "RULE-0980" in all_results['results'], "Rule RULE-0980 missing"
        result = all_results['results']["RULE-0980"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0980 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0980 failed"


    def test_rule_0981(self, all_results):
        """
        Test RULE-0981: YAML field 'import_capabilities.mapping_engine.confidence_scoring' must equal 'T
        Priority: CRITICAL
        """
        assert "RULE-0981" in all_results['results'], "Rule RULE-0981 missing"
        result = all_results['results']["RULE-0981"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0981 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0981 failed"


    def test_rule_0982(self, all_results):
        """
        Test RULE-0982: YAML field 'import_capabilities.mapping_engine.human_validation_required' must e
        Priority: CRITICAL
        """
        assert "RULE-0982" in all_results['results'], "Rule RULE-0982 missing"
        result = all_results['results']["RULE-0982"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0982 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0982 failed"


    def test_rule_0983(self, all_results):
        """
        Test RULE-0983: YAML field 'import_capabilities.mapping_engine.business_rule_validation' must eq
        Priority: CRITICAL
        """
        assert "RULE-0983" in all_results['results'], "Rule RULE-0983 missing"
        result = all_results['results']["RULE-0983"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0983 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0983 failed"


    def test_rule_0984(self, all_results):
        """
        Test RULE-0984: YAML field 'import_capabilities.bulk_import.enabled' must equal 'True'
        Priority: CRITICAL
        """
        assert "RULE-0984" in all_results['results'], "Rule RULE-0984 missing"
        result = all_results['results']["RULE-0984"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0984 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0984 failed"


    def test_rule_0985(self, all_results):
        """
        Test RULE-0985: YAML field 'import_capabilities.bulk_import.max_file_size' must equal '100MB'
        Priority: MEDIUM
        """
        assert "RULE-0985" in all_results['results'], "Rule RULE-0985 missing"
        result = all_results['results']["RULE-0985"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0985 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0985 failed"


    def test_rule_0986(self, all_results):
        """
        Test RULE-0986: YAML list 'import_capabilities.bulk_import.supported_formats' must contain 5 ele
        Priority: MEDIUM
        """
        assert "RULE-0986" in all_results['results'], "Rule RULE-0986 missing"
        result = all_results['results']["RULE-0986"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0986 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0986 failed"


    def test_rule_0987(self, all_results):
        """
        Test RULE-0987: YAML field 'import_capabilities.bulk_import.validation_required' must equal 'Tru
        Priority: CRITICAL
        """
        assert "RULE-0987" in all_results['results'], "Rule RULE-0987 missing"
        result = all_results['results']["RULE-0987"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0987 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0987 failed"


    def test_rule_0988(self, all_results):
        """
        Test RULE-0988: YAML field 'import_capabilities.bulk_import.enterprise_audit_trail' must equal '
        Priority: CRITICAL
        """
        assert "RULE-0988" in all_results['results'], "Rule RULE-0988 missing"
        result = all_results['results']["RULE-0988"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0988 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0988 failed"


    def test_rule_0989(self, all_results):
        """
        Test RULE-0989: YAML field 'portability_guarantees.no_vendor_lockin' must equal 'True'
        Priority: CRITICAL
        """
        assert "RULE-0989" in all_results['results'], "Rule RULE-0989 missing"
        result = all_results['results']["RULE-0989"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0989 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0989 failed"


    def test_rule_0990(self, all_results):
        """
        Test RULE-0990: YAML field 'portability_guarantees.full_data_export' must equal 'True'
        Priority: CRITICAL
        """
        assert "RULE-0990" in all_results['results'], "Rule RULE-0990 missing"
        result = all_results['results']["RULE-0990"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0990 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0990 failed"


    def test_rule_0991(self, all_results):
        """
        Test RULE-0991: YAML field 'portability_guarantees.schema_versioning' must equal 'True'
        Priority: CRITICAL
        """
        assert "RULE-0991" in all_results['results'], "Rule RULE-0991 missing"
        result = all_results['results']["RULE-0991"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0991 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0991 failed"


    def test_rule_0992(self, all_results):
        """
        Test RULE-0992: YAML field 'portability_guarantees.migration_assistance' must equal 'True'
        Priority: CRITICAL
        """
        assert "RULE-0992" in all_results['results'], "Rule RULE-0992 missing"
        result = all_results['results']["RULE-0992"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0992 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0992 failed"


    def test_rule_0993(self, all_results):
        """
        Test RULE-0993: YAML field 'portability_guarantees.api_stability_promise' must equal '2_years_mi
        Priority: MEDIUM
        """
        assert "RULE-0993" in all_results['results'], "Rule RULE-0993 missing"
        result = all_results['results']["RULE-0993"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0993 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0993 failed"


    def test_rule_0994(self, all_results):
        """
        Test RULE-0994: YAML field 'portability_guarantees.enterprise_support' must equal '5_years_guara
        Priority: MEDIUM
        """
        assert "RULE-0994" in all_results['results'], "Rule RULE-0994 missing"
        result = all_results['results']["RULE-0994"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0994 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0994 failed"


    def test_rule_0995(self, all_results):
        """
        Test RULE-0995: YAML line: version: "1.0"
        Priority: MEDIUM
        """
        assert "RULE-0995" in all_results['results'], "Rule RULE-0995 missing"
        result = all_results['results']["RULE-0995"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0995 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0995 failed"


    def test_rule_0996(self, all_results):
        """
        Test RULE-0996: YAML line: date: "2025-09-15"
        Priority: MEDIUM
        """
        assert "RULE-0996" in all_results['results'], "Rule RULE-0996 missing"
        result = all_results['results']["RULE-0996"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0996 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0996 failed"


    def test_rule_0997(self, all_results):
        """
        Test RULE-0997: YAML line: deprecated: false
        Priority: MEDIUM
        """
        assert "RULE-0997" in all_results['results'], "Rule RULE-0997 missing"
        result = all_results['results']["RULE-0997"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0997 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0997 failed"


    def test_rule_0998(self, all_results):
        """
        Test RULE-0998: YAML line: classification: "CONFIDENTIAL - Enterprise Data Strategy"
        Priority: MEDIUM
        """
        assert "RULE-0998" in all_results['results'], "Rule RULE-0998 missing"
        result = all_results['results']["RULE-0998"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0998 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0998 failed"


    def test_rule_0999(self, all_results):
        """
        Test RULE-0999: YAML line: export_formats:
        Priority: MEDIUM
        """
        assert "RULE-0999" in all_results['results'], "Rule RULE-0999 missing"
        result = all_results['results']["RULE-0999"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-0999 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-0999 failed"


    def test_rule_1000(self, all_results):
        """
        Test RULE-1000: YAML line: openapi:
        Priority: MEDIUM
        """
        assert "RULE-1000" in all_results['results'], "Rule RULE-1000 missing"
        result = all_results['results']["RULE-1000"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1000 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1000 failed"


    def test_rule_1001(self, all_results):
        """
        Test RULE-1001: YAML line: version: "3.0.3"
        Priority: MEDIUM
        """
        assert "RULE-1001" in all_results['results'], "Rule RULE-1001 missing"
        result = all_results['results']["RULE-1001"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1001 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1001 failed"


    def test_rule_1002(self, all_results):
        """
        Test RULE-1002: YAML line: endpoint: "/api/v1/compliance/export/openapi"
        Priority: CRITICAL
        """
        assert "RULE-1002" in all_results['results'], "Rule RULE-1002 missing"
        result = all_results['results']["RULE-1002"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1002 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1002 failed"


    def test_rule_1003(self, all_results):
        """
        Test RULE-1003: YAML line: schema_path: "10_interoperability/schemas/compliance_openapi.yaml"
        Priority: CRITICAL
        """
        assert "RULE-1003" in all_results['results'], "Rule RULE-1003 missing"
        result = all_results['results']["RULE-1003"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1003 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1003 failed"


    def test_rule_1004(self, all_results):
        """
        Test RULE-1004: YAML line: business_sensitive_fields: "filtered"
        Priority: MEDIUM
        """
        assert "RULE-1004" in all_results['results'], "Rule RULE-1004 missing"
        result = all_results['results']["RULE-1004"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1004 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1004 failed"


    def test_rule_1005(self, all_results):
        """
        Test RULE-1005: YAML line: json_schema:
        Priority: MEDIUM
        """
        assert "RULE-1005" in all_results['results'], "Rule RULE-1005 missing"
        result = all_results['results']["RULE-1005"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1005 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1005 failed"


    def test_rule_1006(self, all_results):
        """
        Test RULE-1006: YAML line: version: "draft-07"
        Priority: MEDIUM
        """
        assert "RULE-1006" in all_results['results'], "Rule RULE-1006 missing"
        result = all_results['results']["RULE-1006"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1006 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1006 failed"


    def test_rule_1007(self, all_results):
        """
        Test RULE-1007: YAML line: endpoint: "/api/v1/compliance/export/json-schema"
        Priority: CRITICAL
        """
        assert "RULE-1007" in all_results['results'], "Rule RULE-1007 missing"
        result = all_results['results']["RULE-1007"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1007 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1007 failed"


    def test_rule_1008(self, all_results):
        """
        Test RULE-1008: YAML line: schema_path: "10_interoperability/schemas/compliance_jsonschema.json"
        Priority: CRITICAL
        """
        assert "RULE-1008" in all_results['results'], "Rule RULE-1008 missing"
        result = all_results['results']["RULE-1008"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1008 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1008 failed"


    def test_rule_1009(self, all_results):
        """
        Test RULE-1009: YAML line: enterprise_extensions: true
        Priority: MEDIUM
        """
        assert "RULE-1009" in all_results['results'], "Rule RULE-1009 missing"
        result = all_results['results']["RULE-1009"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1009 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1009 failed"


    def test_rule_1010(self, all_results):
        """
        Test RULE-1010: YAML line: graphql:
        Priority: MEDIUM
        """
        assert "RULE-1010" in all_results['results'], "Rule RULE-1010 missing"
        result = all_results['results']["RULE-1010"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1010 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1010 failed"


    def test_rule_1011(self, all_results):
        """
        Test RULE-1011: YAML line: enabled: true
        Priority: MEDIUM
        """
        assert "RULE-1011" in all_results['results'], "Rule RULE-1011 missing"
        result = all_results['results']["RULE-1011"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1011 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1011 failed"


    def test_rule_1012(self, all_results):
        """
        Test RULE-1012: YAML line: endpoint: "/api/v1/compliance/graphql"
        Priority: CRITICAL
        """
        assert "RULE-1012" in all_results['results'], "Rule RULE-1012 missing"
        result = all_results['results']["RULE-1012"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1012 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1012 failed"


    def test_rule_1013(self, all_results):
        """
        Test RULE-1013: YAML line: schema_path: "10_interoperability/schemas/compliance.graphql"
        Priority: CRITICAL
        """
        assert "RULE-1013" in all_results['results'], "Rule RULE-1013 missing"
        result = all_results['results']["RULE-1013"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1013 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1013 failed"


    def test_rule_1014(self, all_results):
        """
        Test RULE-1014: YAML line: introspection_enabled: true
        Priority: MEDIUM
        """
        assert "RULE-1014" in all_results['results'], "Rule RULE-1014 missing"
        result = all_results['results']["RULE-1014"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1014 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1014 failed"


    def test_rule_1015(self, all_results):
        """
        Test RULE-1015: YAML line: business_rules_layer: "integrated"
        Priority: MEDIUM
        """
        assert "RULE-1015" in all_results['results'], "Rule RULE-1015 missing"
        result = all_results['results']["RULE-1015"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1015 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1015 failed"


    def test_rule_1016(self, all_results):
        """
        Test RULE-1016: YAML line: rdf_turtle:
        Priority: MEDIUM
        """
        assert "RULE-1016" in all_results['results'], "Rule RULE-1016 missing"
        result = all_results['results']["RULE-1016"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1016 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1016 failed"


    def test_rule_1017(self, all_results):
        """
        Test RULE-1017: YAML line: enabled: true
        Priority: MEDIUM
        """
        assert "RULE-1017" in all_results['results'], "Rule RULE-1017 missing"
        result = all_results['results']["RULE-1017"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1017 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1017 failed"


    def test_rule_1018(self, all_results):
        """
        Test RULE-1018: YAML line: namespace: "https://ssid.org/compliance/vocab#"
        Priority: CRITICAL
        """
        assert "RULE-1018" in all_results['results'], "Rule RULE-1018 missing"
        result = all_results['results']["RULE-1018"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1018 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1018 failed"


    def test_rule_1019(self, all_results):
        """
        Test RULE-1019: YAML line: endpoint: "/api/v1/compliance/export/rdf"
        Priority: CRITICAL
        """
        assert "RULE-1019" in all_results['results'], "Rule RULE-1019 missing"
        result = all_results['results']["RULE-1019"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1019 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1019 failed"


    def test_rule_1020(self, all_results):
        """
        Test RULE-1020: YAML line: ontology_path: "10_interoperability/ontologies/ssid_compliance.ttl"
        Priority: CRITICAL
        """
        assert "RULE-1020" in all_results['results'], "Rule RULE-1020 missing"
        result = all_results['results']["RULE-1020"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1020 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1020 failed"


    def test_rule_1021(self, all_results):
        """
        Test RULE-1021: YAML line: import_capabilities:
        Priority: MEDIUM
        """
        assert "RULE-1021" in all_results['results'], "Rule RULE-1021 missing"
        result = all_results['results']["RULE-1021"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1021 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1021 failed"


    def test_rule_1022(self, all_results):
        """
        Test RULE-1022: YAML line: frameworks_supported:
        Priority: MEDIUM
        """
        assert "RULE-1022" in all_results['results'], "Rule RULE-1022 missing"
        result = all_results['results']["RULE-1022"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1022 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1022 failed"


    def test_rule_1023(self, all_results):
        """
        Test RULE-1023: YAML line: - "ISO 27001 (XML/JSON)"
        Priority: MEDIUM
        """
        assert "RULE-1023" in all_results['results'], "Rule RULE-1023 missing"
        result = all_results['results']["RULE-1023"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1023 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1023 failed"


    def test_rule_1024(self, all_results):
        """
        Test RULE-1024: YAML line: - "SOC2 (YAML/JSON)"
        Priority: MEDIUM
        """
        assert "RULE-1024" in all_results['results'], "Rule RULE-1024 missing"
        result = all_results['results']["RULE-1024"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1024 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1024 failed"


    def test_rule_1025(self, all_results):
        """
        Test RULE-1025: YAML line: - "NIST (XML/RDF)"
        Priority: MEDIUM
        """
        assert "RULE-1025" in all_results['results'], "Rule RULE-1025 missing"
        result = all_results['results']["RULE-1025"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1025 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1025 failed"


    def test_rule_1026(self, all_results):
        """
        Test RULE-1026: YAML line: - "GDPR Compliance (JSON-LD)"
        Priority: CRITICAL
        """
        assert "RULE-1026" in all_results['results'], "Rule RULE-1026 missing"
        result = all_results['results']["RULE-1026"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1026 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1026 failed"


    def test_rule_1027(self, all_results):
        """
        Test RULE-1027: YAML line: - "PCI-DSS (XML)"
        Priority: MEDIUM
        """
        assert "RULE-1027" in all_results['results'], "Rule RULE-1027 missing"
        result = all_results['results']["RULE-1027"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1027 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1027 failed"


    def test_rule_1028(self, all_results):
        """
        Test RULE-1028: YAML line: - "MiCA (EU Custom Format)"
        Priority: MEDIUM
        """
        assert "RULE-1028" in all_results['results'], "Rule RULE-1028 missing"
        result = all_results['results']["RULE-1028"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1028 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1028 failed"


    def test_rule_1029(self, all_results):
        """
        Test RULE-1029: YAML line: - "Custom Enterprise Formats"
        Priority: MEDIUM
        """
        assert "RULE-1029" in all_results['results'], "Rule RULE-1029 missing"
        result = all_results['results']["RULE-1029"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1029 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1029 failed"


    def test_rule_1030(self, all_results):
        """
        Test RULE-1030: YAML line: mapping_engine:
        Priority: MEDIUM
        """
        assert "RULE-1030" in all_results['results'], "Rule RULE-1030 missing"
        result = all_results['results']["RULE-1030"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1030 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1030 failed"


    def test_rule_1031(self, all_results):
        """
        Test RULE-1031: YAML line: path: "10_interoperability/mapping_engine/"
        Priority: MEDIUM
        """
        assert "RULE-1031" in all_results['results'], "Rule RULE-1031 missing"
        result = all_results['results']["RULE-1031"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1031 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1031 failed"


    def test_rule_1032(self, all_results):
        """
        Test RULE-1032: YAML line: ai_assisted: true
        Priority: MEDIUM
        """
        assert "RULE-1032" in all_results['results'], "Rule RULE-1032 missing"
        result = all_results['results']["RULE-1032"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1032 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1032 failed"


    def test_rule_1033(self, all_results):
        """
        Test RULE-1033: YAML line: confidence_scoring: true
        Priority: MEDIUM
        """
        assert "RULE-1033" in all_results['results'], "Rule RULE-1033 missing"
        result = all_results['results']["RULE-1033"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1033 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1033 failed"


    def test_rule_1034(self, all_results):
        """
        Test RULE-1034: YAML line: human_validation_required: true
        Priority: CRITICAL
        """
        assert "RULE-1034" in all_results['results'], "Rule RULE-1034 missing"
        result = all_results['results']["RULE-1034"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1034 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1034 failed"


    def test_rule_1035(self, all_results):
        """
        Test RULE-1035: YAML line: business_rule_validation: true
        Priority: MEDIUM
        """
        assert "RULE-1035" in all_results['results'], "Rule RULE-1035 missing"
        result = all_results['results']["RULE-1035"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1035 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1035 failed"


    def test_rule_1036(self, all_results):
        """
        Test RULE-1036: YAML line: bulk_import:
        Priority: MEDIUM
        """
        assert "RULE-1036" in all_results['results'], "Rule RULE-1036 missing"
        result = all_results['results']["RULE-1036"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1036 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1036 failed"


    def test_rule_1037(self, all_results):
        """
        Test RULE-1037: YAML line: enabled: true
        Priority: MEDIUM
        """
        assert "RULE-1037" in all_results['results'], "Rule RULE-1037 missing"
        result = all_results['results']["RULE-1037"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1037 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1037 failed"


    def test_rule_1038(self, all_results):
        """
        Test RULE-1038: YAML line: max_file_size: "100MB" # Higher than public
        Priority: MEDIUM
        """
        assert "RULE-1038" in all_results['results'], "Rule RULE-1038 missing"
        result = all_results['results']["RULE-1038"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1038 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1038 failed"


    def test_rule_1039(self, all_results):
        """
        Test RULE-1039: YAML line: supported_formats: ["JSON", "YAML", "XML", "CSV", "RDF"]
        Priority: MEDIUM
        """
        assert "RULE-1039" in all_results['results'], "Rule RULE-1039 missing"
        result = all_results['results']["RULE-1039"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1039 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1039 failed"


    def test_rule_1040(self, all_results):
        """
        Test RULE-1040: YAML line: validation_required: true
        Priority: CRITICAL
        """
        assert "RULE-1040" in all_results['results'], "Rule RULE-1040 missing"
        result = all_results['results']["RULE-1040"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1040 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1040 failed"


    def test_rule_1041(self, all_results):
        """
        Test RULE-1041: YAML line: enterprise_audit_trail: true
        Priority: MEDIUM
        """
        assert "RULE-1041" in all_results['results'], "Rule RULE-1041 missing"
        result = all_results['results']["RULE-1041"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1041 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1041 failed"


    def test_rule_1042(self, all_results):
        """
        Test RULE-1042: YAML line: portability_guarantees:
        Priority: MEDIUM
        """
        assert "RULE-1042" in all_results['results'], "Rule RULE-1042 missing"
        result = all_results['results']["RULE-1042"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1042 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1042 failed"


    def test_rule_1043(self, all_results):
        """
        Test RULE-1043: YAML line: no_vendor_lockin: true
        Priority: MEDIUM
        """
        assert "RULE-1043" in all_results['results'], "Rule RULE-1043 missing"
        result = all_results['results']["RULE-1043"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1043 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1043 failed"


    def test_rule_1044(self, all_results):
        """
        Test RULE-1044: YAML line: full_data_export: true
        Priority: MEDIUM
        """
        assert "RULE-1044" in all_results['results'], "Rule RULE-1044 missing"
        result = all_results['results']["RULE-1044"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1044 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1044 failed"


    def test_rule_1045(self, all_results):
        """
        Test RULE-1045: YAML line: schema_versioning: true
        Priority: MEDIUM
        """
        assert "RULE-1045" in all_results['results'], "Rule RULE-1045 missing"
        result = all_results['results']["RULE-1045"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1045 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1045 failed"


    def test_rule_1046(self, all_results):
        """
        Test RULE-1046: YAML line: migration_assistance: true
        Priority: MEDIUM
        """
        assert "RULE-1046" in all_results['results'], "Rule RULE-1046 missing"
        result = all_results['results']["RULE-1046"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1046 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1046 failed"


    def test_rule_1047(self, all_results):
        """
        Test RULE-1047: YAML line: api_stability_promise: "2_years_minimum"
        Priority: MEDIUM
        """
        assert "RULE-1047" in all_results['results'], "Rule RULE-1047 missing"
        result = all_results['results']["RULE-1047"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1047 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1047 failed"


    def test_rule_1048(self, all_results):
        """
        Test RULE-1048: YAML line: enterprise_support: "5_years_guaranteed"
        Priority: MEDIUM
        """
        assert "RULE-1048" in all_results['results'], "Rule RULE-1048 missing"
        result = all_results['results']["RULE-1048"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1048 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1048 failed"


    def test_rule_1049(self, all_results):
        """
        Test RULE-1049: YAML field 'version' must equal '1.0'
        Priority: HIGH
        """
        assert "RULE-1049" in all_results['results'], "Rule RULE-1049 missing"
        result = all_results['results']["RULE-1049"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "HIGH" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1049 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1049 failed"


    def test_rule_1050(self, all_results):
        """
        Test RULE-1050: YAML field 'date' must equal '2025-09-15'
        Priority: MEDIUM
        """
        assert "RULE-1050" in all_results['results'], "Rule RULE-1050 missing"
        result = all_results['results']["RULE-1050"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1050 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1050 failed"


    def test_rule_1051(self, all_results):
        """
        Test RULE-1051: YAML field 'deprecated' must equal 'False'
        Priority: CRITICAL
        """
        assert "RULE-1051" in all_results['results'], "Rule RULE-1051 missing"
        result = all_results['results']["RULE-1051"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1051 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1051 failed"


    def test_rule_1052(self, all_results):
        """
        Test RULE-1052: YAML field 'experimental' must equal 'True'
        Priority: CRITICAL
        """
        assert "RULE-1052" in all_results['results'], "Rule RULE-1052 missing"
        result = all_results['results']["RULE-1052"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1052 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1052 failed"


    def test_rule_1053(self, all_results):
        """
        Test RULE-1053: YAML field 'classification' must equal 'CONFIDENTIAL - Enterprise Audit Innovati
        Priority: MEDIUM
        """
        assert "RULE-1053" in all_results['results'], "Rule RULE-1053 missing"
        result = all_results['results']["RULE-1053"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1053 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1053 failed"


    def test_rule_1054(self, all_results):
        """
        Test RULE-1054: YAML field 'blockchain_anchoring.enabled' must equal 'True'
        Priority: CRITICAL
        """
        assert "RULE-1054" in all_results['results'], "Rule RULE-1054 missing"
        result = all_results['results']["RULE-1054"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1054 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1054 failed"


    def test_rule_1055(self, all_results):
        """
        Test RULE-1055: YAML list 'blockchain_anchoring.supported_networks' must contain 3 elements
        Priority: HIGH
        """
        assert "RULE-1055" in all_results['results'], "Rule RULE-1055 missing"
        result = all_results['results']["RULE-1055"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "HIGH" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1055 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1055 failed"


    def test_rule_1056(self, all_results):
        """
        Test RULE-1056: YAML field 'blockchain_anchoring.anchor_frequency' must equal 'daily'
        Priority: MEDIUM
        """
        assert "RULE-1056" in all_results['results'], "Rule RULE-1056 missing"
        result = all_results['results']["RULE-1056"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1056 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1056 failed"


    def test_rule_1057(self, all_results):
        """
        Test RULE-1057: YAML field 'blockchain_anchoring.critical_events_immediate' must equal 'True'
        Priority: CRITICAL
        """
        assert "RULE-1057" in all_results['results'], "Rule RULE-1057 missing"
        result = all_results['results']["RULE-1057"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1057 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1057 failed"


    def test_rule_1058(self, all_results):
        """
        Test RULE-1058: YAML field 'blockchain_anchoring.business_critical_immediate' must equal 'True'
        Priority: CRITICAL
        """
        assert "RULE-1058" in all_results['results'], "Rule RULE-1058 missing"
        result = all_results['results']["RULE-1058"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1058 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1058 failed"


    def test_rule_1059(self, all_results):
        """
        Test RULE-1059: YAML field 'decentralized_identity.did_support' must equal 'True'
        Priority: CRITICAL
        """
        assert "RULE-1059" in all_results['results'], "Rule RULE-1059 missing"
        result = all_results['results']["RULE-1059"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1059 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1059 failed"


    def test_rule_1060(self, all_results):
        """
        Test RULE-1060: YAML list 'decentralized_identity.supported_methods' must contain 5 elements
        Priority: MEDIUM
        """
        assert "RULE-1060" in all_results['results'], "Rule RULE-1060 missing"
        result = all_results['results']["RULE-1060"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1060 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1060 failed"


    def test_rule_1061(self, all_results):
        """
        Test RULE-1061: YAML field 'decentralized_identity.verifiable_credentials' must equal 'True'
        Priority: CRITICAL
        """
        assert "RULE-1061" in all_results['results'], "Rule RULE-1061 missing"
        result = all_results['results']["RULE-1061"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1061 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1061 failed"


    def test_rule_1062(self, all_results):
        """
        Test RULE-1062: YAML field 'decentralized_identity.credential_schemas' must equal '02_audit_logg
        Priority: MEDIUM
        """
        assert "RULE-1062" in all_results['results'], "Rule RULE-1062 missing"
        result = all_results['results']["RULE-1062"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1062 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1062 failed"


    def test_rule_1063(self, all_results):
        """
        Test RULE-1063: YAML field 'decentralized_identity.business_credentials' must equal 'executive_a
        Priority: MEDIUM
        """
        assert "RULE-1063" in all_results['results'], "Rule RULE-1063 missing"
        result = all_results['results']["RULE-1063"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1063 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1063 failed"


    def test_rule_1064(self, all_results):
        """
        Test RULE-1064: YAML field 'zero_knowledge_proofs.enabled' must equal 'True'
        Priority: CRITICAL
        """
        assert "RULE-1064" in all_results['results'], "Rule RULE-1064 missing"
        result = all_results['results']["RULE-1064"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1064 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1064 failed"


    def test_rule_1065(self, all_results):
        """
        Test RULE-1065: YAML list 'zero_knowledge_proofs.use_cases' must contain 4 elements
        Priority: CRITICAL
        """
        assert "RULE-1065" in all_results['results'], "Rule RULE-1065 missing"
        result = all_results['results']["RULE-1065"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1065 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1065 failed"


    def test_rule_1066(self, all_results):
        """
        Test RULE-1066: YAML list 'zero_knowledge_proofs.supported_schemes' must contain 3 elements
        Priority: MEDIUM
        """
        assert "RULE-1066" in all_results['results'], "Rule RULE-1066 missing"
        result = all_results['results']["RULE-1066"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1066 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1066 failed"


    def test_rule_1067(self, all_results):
        """
        Test RULE-1067: YAML field 'zero_knowledge_proofs.business_applications' must equal 'competitive
        Priority: MEDIUM
        """
        assert "RULE-1067" in all_results['results'], "Rule RULE-1067 missing"
        result = all_results['results']["RULE-1067"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1067 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1067 failed"


    def test_rule_1068(self, all_results):
        """
        Test RULE-1068: YAML field 'quantum_resistant.enabled' must equal 'True'
        Priority: CRITICAL
        """
        assert "RULE-1068" in all_results['results'], "Rule RULE-1068 missing"
        result = all_results['results']["RULE-1068"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1068 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1068 failed"


    def test_rule_1069(self, all_results):
        """
        Test RULE-1069: YAML list 'quantum_resistant.algorithms_supported' must contain 3 elements
        Priority: MEDIUM
        """
        assert "RULE-1069" in all_results['results'], "Rule RULE-1069 missing"
        result = all_results['results']["RULE-1069"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1069 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1069 failed"


    def test_rule_1070(self, all_results):
        """
        Test RULE-1070: YAML field 'quantum_resistant.migration_plan' must equal '21_post_quantum_crypto
        Priority: MEDIUM
        """
        assert "RULE-1070" in all_results['results'], "Rule RULE-1070 missing"
        result = all_results['results']["RULE-1070"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1070 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1070 failed"


    def test_rule_1071(self, all_results):
        """
        Test RULE-1071: YAML field 'quantum_resistant.timeline' must equal '2025-2027'
        Priority: MEDIUM
        """
        assert "RULE-1071" in all_results['results'], "Rule RULE-1071 missing"
        result = all_results['results']["RULE-1071"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1071 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1071 failed"


    def test_rule_1072(self, all_results):
        """
        Test RULE-1072: YAML field 'quantum_resistant.business_continuity' must equal 'guaranteed'
        Priority: MEDIUM
        """
        assert "RULE-1072" in all_results['results'], "Rule RULE-1072 missing"
        result = all_results['results']["RULE-1072"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1072 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1072 failed"


    def test_rule_1073(self, all_results):
        """
        Test RULE-1073: YAML line: version: "1.0"
        Priority: MEDIUM
        """
        assert "RULE-1073" in all_results['results'], "Rule RULE-1073 missing"
        result = all_results['results']["RULE-1073"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1073 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1073 failed"


    def test_rule_1074(self, all_results):
        """
        Test RULE-1074: YAML line: date: "2025-09-15"
        Priority: MEDIUM
        """
        assert "RULE-1074" in all_results['results'], "Rule RULE-1074 missing"
        result = all_results['results']["RULE-1074"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1074 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1074 failed"


    def test_rule_1075(self, all_results):
        """
        Test RULE-1075: YAML line: deprecated: false
        Priority: MEDIUM
        """
        assert "RULE-1075" in all_results['results'], "Rule RULE-1075 missing"
        result = all_results['results']["RULE-1075"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1075 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1075 failed"


    def test_rule_1076(self, all_results):
        """
        Test RULE-1076: YAML line: experimental: true
        Priority: MEDIUM
        """
        assert "RULE-1076" in all_results['results'], "Rule RULE-1076 missing"
        result = all_results['results']["RULE-1076"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1076 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1076 failed"


    def test_rule_1077(self, all_results):
        """
        Test RULE-1077: YAML line: classification: "CONFIDENTIAL - Enterprise Audit Innovation"
        Priority: MEDIUM
        """
        assert "RULE-1077" in all_results['results'], "Rule RULE-1077 missing"
        result = all_results['results']["RULE-1077"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1077 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1077 failed"


    def test_rule_1078(self, all_results):
        """
        Test RULE-1078: YAML line: blockchain_anchoring:
        Priority: MEDIUM
        """
        assert "RULE-1078" in all_results['results'], "Rule RULE-1078 missing"
        result = all_results['results']["RULE-1078"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1078 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1078 failed"


    def test_rule_1079(self, all_results):
        """
        Test RULE-1079: YAML line: enabled: true  # Enabled for Enterprise
        Priority: MEDIUM
        """
        assert "RULE-1079" in all_results['results'], "Rule RULE-1079 missing"
        result = all_results['results']["RULE-1079"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1079 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1079 failed"


    def test_rule_1080(self, all_results):
        """
        Test RULE-1080: YAML line: supported_networks:
        Priority: MEDIUM
        """
        assert "RULE-1080" in all_results['results'], "Rule RULE-1080 missing"
        result = all_results['results']["RULE-1080"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1080 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1080 failed"


    def test_rule_1081(self, all_results):
        """
        Test RULE-1081: YAML line: - name: "OpenTimestamps"
        Priority: MEDIUM
        """
        assert "RULE-1081" in all_results['results'], "Rule RULE-1081 missing"
        result = all_results['results']["RULE-1081"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1081 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1081 failed"


    def test_rule_1082(self, all_results):
        """
        Test RULE-1082: YAML line: type: "bitcoin_anchoring"
        Priority: MEDIUM
        """
        assert "RULE-1082" in all_results['results'], "Rule RULE-1082 missing"
        result = all_results['results']["RULE-1082"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1082 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1082 failed"


    def test_rule_1083(self, all_results):
        """
        Test RULE-1083: YAML line: cost: "minimal"
        Priority: MEDIUM
        """
        assert "RULE-1083" in all_results['results'], "Rule RULE-1083 missing"
        result = all_results['results']["RULE-1083"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1083 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1083 failed"


    def test_rule_1084(self, all_results):
        """
        Test RULE-1084: YAML line: verification: "public"
        Priority: MEDIUM
        """
        assert "RULE-1084" in all_results['results'], "Rule RULE-1084 missing"
        result = all_results['results']["RULE-1084"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1084 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1084 failed"


    def test_rule_1085(self, all_results):
        """
        Test RULE-1085: YAML line: enterprise_priority: "low"
        Priority: MEDIUM
        """
        assert "RULE-1085" in all_results['results'], "Rule RULE-1085 missing"
        result = all_results['results']["RULE-1085"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1085 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1085 failed"


    def test_rule_1086(self, all_results):
        """
        Test RULE-1086: YAML line: - name: "Ethereum"
        Priority: MEDIUM
        """
        assert "RULE-1086" in all_results['results'], "Rule RULE-1086 missing"
        result = all_results['results']["RULE-1086"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1086 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1086 failed"


    def test_rule_1087(self, all_results):
        """
        Test RULE-1087: YAML line: type: "smart_contract"
        Priority: MEDIUM
        """
        assert "RULE-1087" in all_results['results'], "Rule RULE-1087 missing"
        result = all_results['results']["RULE-1087"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1087 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1087 failed"


    def test_rule_1088(self, all_results):
        """
        Test RULE-1088: YAML line: cost: "moderate"
        Priority: MEDIUM
        """
        assert "RULE-1088" in all_results['results'], "Rule RULE-1088 missing"
        result = all_results['results']["RULE-1088"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1088 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1088 failed"


    def test_rule_1089(self, all_results):
        """
        Test RULE-1089: YAML line: verification: "public"
        Priority: MEDIUM
        """
        assert "RULE-1089" in all_results['results'], "Rule RULE-1089 missing"
        result = all_results['results']["RULE-1089"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1089 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1089 failed"


    def test_rule_1090(self, all_results):
        """
        Test RULE-1090: YAML line: enterprise_priority: "medium"
        Priority: MEDIUM
        """
        assert "RULE-1090" in all_results['results'], "Rule RULE-1090 missing"
        result = all_results['results']["RULE-1090"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1090 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1090 failed"


    def test_rule_1091(self, all_results):
        """
        Test RULE-1091: YAML line: - name: "Private Blockchain"
        Priority: MEDIUM
        """
        assert "RULE-1091" in all_results['results'], "Rule RULE-1091 missing"
        result = all_results['results']["RULE-1091"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1091 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1091 failed"


    def test_rule_1092(self, all_results):
        """
        Test RULE-1092: YAML line: type: "enterprise_consortium"
        Priority: MEDIUM
        """
        assert "RULE-1092" in all_results['results'], "Rule RULE-1092 missing"
        result = all_results['results']["RULE-1092"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1092 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1092 failed"


    def test_rule_1093(self, all_results):
        """
        Test RULE-1093: YAML line: cost: "high"
        Priority: MEDIUM
        """
        assert "RULE-1093" in all_results['results'], "Rule RULE-1093 missing"
        result = all_results['results']["RULE-1093"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1093 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1093 failed"


    def test_rule_1094(self, all_results):
        """
        Test RULE-1094: YAML line: verification: "consortium"
        Priority: MEDIUM
        """
        assert "RULE-1094" in all_results['results'], "Rule RULE-1094 missing"
        result = all_results['results']["RULE-1094"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1094 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1094 failed"


    def test_rule_1095(self, all_results):
        """
        Test RULE-1095: YAML line: enterprise_priority: "high"
        Priority: MEDIUM
        """
        assert "RULE-1095" in all_results['results'], "Rule RULE-1095 missing"
        result = all_results['results']["RULE-1095"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1095 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1095 failed"


    def test_rule_1096(self, all_results):
        """
        Test RULE-1096: YAML line: anchor_frequency: "daily" # More frequent than public
        Priority: MEDIUM
        """
        assert "RULE-1096" in all_results['results'], "Rule RULE-1096 missing"
        result = all_results['results']["RULE-1096"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1096 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1096 failed"


    def test_rule_1097(self, all_results):
        """
        Test RULE-1097: YAML line: critical_events_immediate: true
        Priority: CRITICAL
        """
        assert "RULE-1097" in all_results['results'], "Rule RULE-1097 missing"
        result = all_results['results']["RULE-1097"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1097 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1097 failed"


    def test_rule_1098(self, all_results):
        """
        Test RULE-1098: YAML line: business_critical_immediate: true
        Priority: CRITICAL
        """
        assert "RULE-1098" in all_results['results'], "Rule RULE-1098 missing"
        result = all_results['results']["RULE-1098"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1098 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1098 failed"


    def test_rule_1099(self, all_results):
        """
        Test RULE-1099: YAML line: decentralized_identity:
        Priority: MEDIUM
        """
        assert "RULE-1099" in all_results['results'], "Rule RULE-1099 missing"
        result = all_results['results']["RULE-1099"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1099 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1099 failed"


    def test_rule_1100(self, all_results):
        """
        Test RULE-1100: YAML line: did_support: true
        Priority: MEDIUM
        """
        assert "RULE-1100" in all_results['results'], "Rule RULE-1100 missing"
        result = all_results['results']["RULE-1100"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1100 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1100 failed"


    def test_rule_1101(self, all_results):
        """
        Test RULE-1101: YAML line: supported_methods:
        Priority: MEDIUM
        """
        assert "RULE-1101" in all_results['results'], "Rule RULE-1101 missing"
        result = all_results['results']["RULE-1101"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1101 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1101 failed"


    def test_rule_1102(self, all_results):
        """
        Test RULE-1102: YAML line: - "did:web"
        Priority: MEDIUM
        """
        assert "RULE-1102" in all_results['results'], "Rule RULE-1102 missing"
        result = all_results['results']["RULE-1102"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1102 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1102 failed"


    def test_rule_1103(self, all_results):
        """
        Test RULE-1103: YAML line: - "did:key"
        Priority: MEDIUM
        """
        assert "RULE-1103" in all_results['results'], "Rule RULE-1103 missing"
        result = all_results['results']["RULE-1103"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1103 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1103 failed"


    def test_rule_1104(self, all_results):
        """
        Test RULE-1104: YAML line: - "did:ethr"
        Priority: MEDIUM
        """
        assert "RULE-1104" in all_results['results'], "Rule RULE-1104 missing"
        result = all_results['results']["RULE-1104"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1104 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1104 failed"


    def test_rule_1105(self, all_results):
        """
        Test RULE-1105: YAML line: - "did:ion"
        Priority: MEDIUM
        """
        assert "RULE-1105" in all_results['results'], "Rule RULE-1105 missing"
        result = all_results['results']["RULE-1105"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1105 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1105 failed"


    def test_rule_1106(self, all_results):
        """
        Test RULE-1106: YAML line: - "did:enterprise"
        Priority: MEDIUM
        """
        assert "RULE-1106" in all_results['results'], "Rule RULE-1106 missing"
        result = all_results['results']["RULE-1106"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1106 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1106 failed"


    def test_rule_1107(self, all_results):
        """
        Test RULE-1107: YAML line: verifiable_credentials: true
        Priority: MEDIUM
        """
        assert "RULE-1107" in all_results['results'], "Rule RULE-1107 missing"
        result = all_results['results']["RULE-1107"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1107 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1107 failed"


    def test_rule_1108(self, all_results):
        """
        Test RULE-1108: YAML line: credential_schemas: "02_audit_logging/next_gen_audit/vc_schemas/"
        Priority: MEDIUM
        """
        assert "RULE-1108" in all_results['results'], "Rule RULE-1108 missing"
        result = all_results['results']["RULE-1108"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1108 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1108 failed"


    def test_rule_1109(self, all_results):
        """
        Test RULE-1109: YAML line: business_credentials: "executive_attestations"
        Priority: MEDIUM
        """
        assert "RULE-1109" in all_results['results'], "Rule RULE-1109 missing"
        result = all_results['results']["RULE-1109"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1109 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1109 failed"


    def test_rule_1110(self, all_results):
        """
        Test RULE-1110: YAML line: zero_knowledge_proofs:
        Priority: MEDIUM
        """
        assert "RULE-1110" in all_results['results'], "Rule RULE-1110 missing"
        result = all_results['results']["RULE-1110"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1110 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1110 failed"


    def test_rule_1111(self, all_results):
        """
        Test RULE-1111: YAML line: enabled: true  # Enterprise capability
        Priority: MEDIUM
        """
        assert "RULE-1111" in all_results['results'], "Rule RULE-1111 missing"
        result = all_results['results']["RULE-1111"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1111 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1111 failed"


    def test_rule_1112(self, all_results):
        """
        Test RULE-1112: YAML line: use_cases:
        Priority: MEDIUM
        """
        assert "RULE-1112" in all_results['results'], "Rule RULE-1112 missing"
        result = all_results['results']["RULE-1112"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1112 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1112 failed"


    def test_rule_1113(self, all_results):
        """
        Test RULE-1113: YAML line: - "Compliance without data disclosure"
        Priority: CRITICAL
        """
        assert "RULE-1113" in all_results['results'], "Rule RULE-1113 missing"
        result = all_results['results']["RULE-1113"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1113 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1113 failed"


    def test_rule_1114(self, all_results):
        """
        Test RULE-1114: YAML line: - "Audit trail verification"
        Priority: MEDIUM
        """
        assert "RULE-1114" in all_results['results'], "Rule RULE-1114 missing"
        result = all_results['results']["RULE-1114"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1114 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1114 failed"


    def test_rule_1115(self, all_results):
        """
        Test RULE-1115: YAML line: - "Privacy-preserving attestations"
        Priority: MEDIUM
        """
        assert "RULE-1115" in all_results['results'], "Rule RULE-1115 missing"
        result = all_results['results']["RULE-1115"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1115 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1115 failed"


    def test_rule_1116(self, all_results):
        """
        Test RULE-1116: YAML line: - "Business sensitive data protection"
        Priority: MEDIUM
        """
        assert "RULE-1116" in all_results['results'], "Rule RULE-1116 missing"
        result = all_results['results']["RULE-1116"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1116 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1116 failed"


    def test_rule_1117(self, all_results):
        """
        Test RULE-1117: YAML line: supported_schemes:
        Priority: MEDIUM
        """
        assert "RULE-1117" in all_results['results'], "Rule RULE-1117 missing"
        result = all_results['results']["RULE-1117"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1117 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1117 failed"


    def test_rule_1118(self, all_results):
        """
        Test RULE-1118: YAML line: - "zk-SNARKs"
        Priority: MEDIUM
        """
        assert "RULE-1118" in all_results['results'], "Rule RULE-1118 missing"
        result = all_results['results']["RULE-1118"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1118 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1118 failed"


    def test_rule_1119(self, all_results):
        """
        Test RULE-1119: YAML line: - "zk-STARKs"
        Priority: MEDIUM
        """
        assert "RULE-1119" in all_results['results'], "Rule RULE-1119 missing"
        result = all_results['results']["RULE-1119"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1119 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1119 failed"


    def test_rule_1120(self, all_results):
        """
        Test RULE-1120: YAML line: - "Bulletproofs"
        Priority: MEDIUM
        """
        assert "RULE-1120" in all_results['results'], "Rule RULE-1120 missing"
        result = all_results['results']["RULE-1120"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1120 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1120 failed"


    def test_rule_1121(self, all_results):
        """
        Test RULE-1121: YAML line: business_applications: "competitive_advantage_protection"
        Priority: MEDIUM
        """
        assert "RULE-1121" in all_results['results'], "Rule RULE-1121 missing"
        result = all_results['results']["RULE-1121"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1121 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1121 failed"


    def test_rule_1122(self, all_results):
        """
        Test RULE-1122: YAML line: quantum_resistant:
        Priority: MEDIUM
        """
        assert "RULE-1122" in all_results['results'], "Rule RULE-1122 missing"
        result = all_results['results']["RULE-1122"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1122 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1122 failed"


    def test_rule_1123(self, all_results):
        """
        Test RULE-1123: YAML line: enabled: true
        Priority: MEDIUM
        """
        assert "RULE-1123" in all_results['results'], "Rule RULE-1123 missing"
        result = all_results['results']["RULE-1123"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1123 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1123 failed"


    def test_rule_1124(self, all_results):
        """
        Test RULE-1124: YAML line: algorithms_supported:
        Priority: MEDIUM
        """
        assert "RULE-1124" in all_results['results'], "Rule RULE-1124 missing"
        result = all_results['results']["RULE-1124"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1124 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1124 failed"


    def test_rule_1125(self, all_results):
        """
        Test RULE-1125: YAML line: - "CRYSTALS-Dilithium"
        Priority: MEDIUM
        """
        assert "RULE-1125" in all_results['results'], "Rule RULE-1125 missing"
        result = all_results['results']["RULE-1125"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1125 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1125 failed"


    def test_rule_1126(self, all_results):
        """
        Test RULE-1126: YAML line: - "FALCON"
        Priority: MEDIUM
        """
        assert "RULE-1126" in all_results['results'], "Rule RULE-1126 missing"
        result = all_results['results']["RULE-1126"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1126 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1126 failed"


    def test_rule_1127(self, all_results):
        """
        Test RULE-1127: YAML line: - "SPHINCS+"
        Priority: MEDIUM
        """
        assert "RULE-1127" in all_results['results'], "Rule RULE-1127 missing"
        result = all_results['results']["RULE-1127"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1127 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1127 failed"


    def test_rule_1128(self, all_results):
        """
        Test RULE-1128: YAML line: migration_plan: "21_post_quantum_crypto/migration_roadmap.md"
        Priority: MEDIUM
        """
        assert "RULE-1128" in all_results['results'], "Rule RULE-1128 missing"
        result = all_results['results']["RULE-1128"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1128 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1128 failed"


    def test_rule_1129(self, all_results):
        """
        Test RULE-1129: YAML line: timeline: "2025-2027"
        Priority: MEDIUM
        """
        assert "RULE-1129" in all_results['results'], "Rule RULE-1129 missing"
        result = all_results['results']["RULE-1129"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1129 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1129 failed"


    def test_rule_1130(self, all_results):
        """
        Test RULE-1130: YAML line: business_continuity: "guaranteed"
        Priority: MEDIUM
        """
        assert "RULE-1130" in all_results['results'], "Rule RULE-1130 missing"
        result = all_results['results']["RULE-1130"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1130 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1130 failed"


    def test_rule_list_part1_1131(self, all_results):
        """
        Test LIST-PART1-1131: List item: *Datum:** 2025-09-15 | **Status:** ROOT-24-LOCK | **Ziel:** Alle grün
        Priority: CRITICAL
        """
        assert "LIST-PART1-1131" in all_results['results'], "Rule LIST-PART1-1131 missing"
        result = all_results['results']["LIST-PART1-1131"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART1-1131 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART1-1131 failed"


    def test_rule_list_part1_1132(self, all_results):
        """
        Test LIST-PART1-1132: List item: *Verbindliche Root-Module (24):** Die obige v4.1-Liste ist bindend. A
        Priority: MEDIUM
        """
        assert "LIST-PART1-1132" in all_results['results'], "Rule LIST-PART1-1132 missing"
        result = all_results['results']["LIST-PART1-1132"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART1-1132 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART1-1132 failed"


    def test_rule_list_part1_1133(self, all_results):
        """
        Test LIST-PART1-1133: List item: *Root-Level Ausnahmen:** Siehe kanonische Definition in `23_complianc
        Priority: CRITICAL
        """
        assert "LIST-PART1-1133" in all_results['results'], "Rule LIST-PART1-1133 missing"
        result = all_results['results']["LIST-PART1-1133"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART1-1133 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART1-1133 failed"


    def test_rule_list_part1_1134(self, all_results):
        """
        Test LIST-PART1-1134: List item: *Ausnahmen:** .git/, .github/, LICENSE, README.md
        Priority: MEDIUM
        """
        assert "LIST-PART1-1134" in all_results['results'], "Rule LIST-PART1-1134 missing"
        result = all_results['results']["LIST-PART1-1134"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART1-1134 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART1-1134 failed"


    def test_rule_list_part1_1135(self, all_results):
        """
        Test LIST-PART1-1135: List item: *KRITISCH:** `23_compliance/exceptions/structure_exceptions.yaml` ist
        Priority: CRITICAL
        """
        assert "LIST-PART1-1135" in all_results['results'], "Rule LIST-PART1-1135 missing"
        result = all_results['results']["LIST-PART1-1135"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART1-1135 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART1-1135 failed"


    def test_rule_list_part1_1136(self, all_results):
        """
        Test LIST-PART1-1136: List item: "RU_designated_entities"
        Priority: MEDIUM
        """
        assert "LIST-PART1-1136" in all_results['results'], "Rule LIST-PART1-1136 missing"
        result = all_results['results']["LIST-PART1-1136"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART1-1136 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART1-1136 failed"


    def test_rule_list_part1_1137(self, all_results):
        """
        Test LIST-PART1-1137: List item: "Belarus_designated_entities"
        Priority: MEDIUM
        """
        assert "LIST-PART1-1137" in all_results['results'], "Rule LIST-PART1-1137 missing"
        result = all_results['results']["LIST-PART1-1137"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART1-1137 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART1-1137 failed"


    def test_rule_list_part1_1138(self, all_results):
        """
        Test LIST-PART1-1138: List item: "Venezuela_government_entities"
        Priority: MEDIUM
        """
        assert "LIST-PART1-1138" in all_results['results'], "Rule LIST-PART1-1138 missing"
        result = all_results['results']["LIST-PART1-1138"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART1-1138 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART1-1138 failed"


    def test_rule_list_part1_1139(self, all_results):
        """
        Test LIST-PART1-1139: List item: "Protocol upgrades (requires supermajority)"
        Priority: MEDIUM
        """
        assert "LIST-PART1-1139" in all_results['results'], "Rule LIST-PART1-1139 missing"
        result = all_results['results']["LIST-PART1-1139"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART1-1139 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART1-1139 failed"


    def test_rule_list_part1_1140(self, all_results):
        """
        Test LIST-PART1-1140: List item: "Parameter changes (requires simple majority)"
        Priority: MEDIUM
        """
        assert "LIST-PART1-1140" in all_results['results'], "Rule LIST-PART1-1140 missing"
        result = all_results['results']["LIST-PART1-1140"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART1-1140 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART1-1140 failed"


    def test_rule_list_part1_1141(self, all_results):
        """
        Test LIST-PART1-1141: List item: "Treasury allocation (requires quorum + majority)"
        Priority: MEDIUM
        """
        assert "LIST-PART1-1141" in all_results['results'], "Rule LIST-PART1-1141 missing"
        result = all_results['results']["LIST-PART1-1141"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART1-1141 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART1-1141 failed"


    def test_rule_list_part1_1142(self, all_results):
        """
        Test LIST-PART1-1142: List item: "Emergency proposals (expedited process)"
        Priority: MEDIUM
        """
        assert "LIST-PART1-1142" in all_results['results'], "Rule LIST-PART1-1142 missing"
        result = all_results['results']["LIST-PART1-1142"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART1-1142 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART1-1142 failed"


    def test_rule_list_part1_1143(self, all_results):
        """
        Test LIST-PART1-1143: List item: language: "German (de-DE)"
        Priority: MEDIUM
        """
        assert "LIST-PART1-1143" in all_results['results'], "Rule LIST-PART1-1143 missing"
        result = all_results['results']["LIST-PART1-1143"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART1-1143 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART1-1143 failed"


    def test_rule_list_part1_1144(self, all_results):
        """
        Test LIST-PART1-1144: List item: language: "Chinese Simplified (zh-CN)"
        Priority: MEDIUM
        """
        assert "LIST-PART1-1144" in all_results['results'], "Rule LIST-PART1-1144 missing"
        result = all_results['results']["LIST-PART1-1144"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART1-1144 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART1-1144 failed"


    def test_rule_list_part1_1145(self, all_results):
        """
        Test LIST-PART1-1145: List item: language: "Spanish (es-ES)"
        Priority: MEDIUM
        """
        assert "LIST-PART1-1145" in all_results['results'], "Rule LIST-PART1-1145 missing"
        result = all_results['results']["LIST-PART1-1145"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART1-1145 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART1-1145 failed"


    def test_rule_list_part1_1146(self, all_results):
        """
        Test LIST-PART1-1146: List item: language: "French (fr-FR)"
        Priority: MEDIUM
        """
        assert "LIST-PART1-1146" in all_results['results'], "Rule LIST-PART1-1146 missing"
        result = all_results['results']["LIST-PART1-1146"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART1-1146 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART1-1146 failed"


    def test_rule_list_part1_1147(self, all_results):
        """
        Test LIST-PART1-1147: List item: *Source of Truth:** Bei inhaltlichen Konflikten zwischen Übersetzunge
        Priority: MEDIUM
        """
        assert "LIST-PART1-1147" in all_results['results'], "Rule LIST-PART1-1147 missing"
        result = all_results['results']["LIST-PART1-1147"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART1-1147 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART1-1147 failed"


    def test_rule_list_part1_1148(self, all_results):
        """
        Test LIST-PART1-1148: List item: "README.en-US.md"
        Priority: MEDIUM
        """
        assert "LIST-PART1-1148" in all_results['results'], "Rule LIST-PART1-1148 missing"
        result = all_results['results']["LIST-PART1-1148"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART1-1148 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART1-1148 failed"


    def test_rule_list_part1_1149(self, all_results):
        """
        Test LIST-PART1-1149: List item: "README.de-DE.md"
        Priority: MEDIUM
        """
        assert "LIST-PART1-1149" in all_results['results'], "Rule LIST-PART1-1149 missing"
        result = all_results['results']["LIST-PART1-1149"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART1-1149 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART1-1149 failed"


    def test_rule_list_part1_1150(self, all_results):
        """
        Test LIST-PART1-1150: List item: "compliance_guide.zh-CN.md"
        Priority: CRITICAL
        """
        assert "LIST-PART1-1150" in all_results['results'], "Rule LIST-PART1-1150 missing"
        result = all_results['results']["LIST-PART1-1150"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART1-1150 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART1-1150 failed"


    def test_rule_text_part1_1151(self, all_results):
        """
        Test TEXT-PART1-1151: quality_control: "Native speaker review required"
        Priority: MEDIUM
        """
        assert "TEXT-PART1-1151" in all_results['results'], "Rule TEXT-PART1-1151 missing"
        result = all_results['results']["TEXT-PART1-1151"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule TEXT-PART1-1151 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule TEXT-PART1-1151 failed"


    def test_rule_list_part1_1152(self, all_results):
        """
        Test LIST-PART1-1152: List item: **Legal Terms**: Local legal terminology with English reference
        Priority: CRITICAL
        """
        assert "LIST-PART1-1152" in all_results['results'], "Rule LIST-PART1-1152 missing"
        result = all_results['results']["LIST-PART1-1152"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART1-1152 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART1-1152 failed"


    def test_rule_list_part1_1153(self, all_results):
        """
        Test LIST-PART1-1153: List item: **Regulatory Examples**: Jurisdiction-specific compliance examples
        Priority: CRITICAL
        """
        assert "LIST-PART1-1153" in all_results['results'], "Rule LIST-PART1-1153 missing"
        result = all_results['results']["LIST-PART1-1153"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART1-1153 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART1-1153 failed"


    def test_rule_list_part1_1154(self, all_results):
        """
        Test LIST-PART1-1154: List item: **Business Context**: Local market conditions and practices
        Priority: MEDIUM
        """
        assert "LIST-PART1-1154" in all_results['results'], "Rule LIST-PART1-1154 missing"
        result = all_results['results']["LIST-PART1-1154"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART1-1154 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART1-1154 failed"


    def test_rule_list_part1_1155(self, all_results):
        """
        Test LIST-PART1-1155: List item: **Cultural Sensitivity**: Appropriate business communication styles
        Priority: MEDIUM
        """
        assert "LIST-PART1-1155" in all_results['results'], "Rule LIST-PART1-1155 missing"
        result = all_results['results']["LIST-PART1-1155"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART1-1155 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART1-1155 failed"


    def test_rule_list_part1_1156(self, all_results):
        """
        Test LIST-PART1-1156: List item: **Technical Standards**: Local technical requirements and standards
        Priority: HIGH
        """
        assert "LIST-PART1-1156" in all_results['results'], "Rule LIST-PART1-1156 missing"
        result = all_results['results']["LIST-PART1-1156"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "HIGH" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART1-1156 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART1-1156 failed"


    def test_rule_text_part1_1157(self, all_results):
        """
        Test TEXT-PART1-1157: cultural_appropriateness: "Native speaker validation required"
        Priority: MEDIUM
        """
        assert "TEXT-PART1-1157" in all_results['results'], "Rule TEXT-PART1-1157 missing"
        result = all_results['results']["TEXT-PART1-1157"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule TEXT-PART1-1157 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule TEXT-PART1-1157 failed"


    def test_rule_text_part1_1158(self, all_results):
        """
        Test TEXT-PART1-1158: legal_terms: "Certified legal translator required"
        Priority: MEDIUM
        """
        assert "TEXT-PART1-1158" in all_results['results'], "Rule TEXT-PART1-1158 missing"
        result = all_results['results']["TEXT-PART1-1158"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule TEXT-PART1-1158 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule TEXT-PART1-1158 failed"


    def test_rule_list_part1_1159(self, all_results):
        """
        Test LIST-PART1-1159: List item: *Classification:** PUBLIC - Adoption Guidelines
        Priority: MEDIUM
        """
        assert "LIST-PART1-1159" in all_results['results'], "Rule LIST-PART1-1159 missing"
        result = all_results['results']["LIST-PART1-1159"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART1-1159 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART1-1159 failed"


    def test_rule_list_part1_1160(self, all_results):
        """
        Test LIST-PART1-1160: List item: *Target Audience:** Fortune 500, Government, NGO, Academic, Financial
        Priority: MEDIUM
        """
        assert "LIST-PART1-1160" in all_results['results'], "Rule LIST-PART1-1160 missing"
        result = all_results['results']["LIST-PART1-1160"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART1-1160 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART1-1160 failed"


    def test_rule_list_part1_1161(self, all_results):
        """
        Test LIST-PART1-1161: List item: *NO WARRANTIES PROVIDED:**
        Priority: MEDIUM
        """
        assert "LIST-PART1-1161" in all_results['results'], "Rule LIST-PART1-1161 missing"
        result = all_results['results']["LIST-PART1-1161"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART1-1161 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART1-1161 failed"


    def test_rule_list_part1_1162(self, all_results):
        """
        Test LIST-PART1-1162: List item: No warranty for specific regulatory outcomes in any jurisdiction
        Priority: MEDIUM
        """
        assert "LIST-PART1-1162" in all_results['results'], "Rule LIST-PART1-1162 missing"
        result = all_results['results']["LIST-PART1-1162"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART1-1162 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART1-1162 failed"


    def test_rule_list_part1_1163(self, all_results):
        """
        Test LIST-PART1-1163: List item: No guarantee of audit success or compliance certification
        Priority: CRITICAL
        """
        assert "LIST-PART1-1163" in all_results['results'], "Rule LIST-PART1-1163 missing"
        result = all_results['results']["LIST-PART1-1163"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART1-1163 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART1-1163 failed"


    def test_rule_list_part1_1164(self, all_results):
        """
        Test LIST-PART1-1164: List item: No assurance of specific business outcomes or cost savings
        Priority: MEDIUM
        """
        assert "LIST-PART1-1164" in all_results['results'], "Rule LIST-PART1-1164 missing"
        result = all_results['results']["LIST-PART1-1164"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART1-1164 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART1-1164 failed"


    def test_rule_list_part1_1165(self, all_results):
        """
        Test LIST-PART1-1165: List item: No guarantee of regulatory approval or market access
        Priority: MEDIUM
        """
        assert "LIST-PART1-1165" in all_results['results'], "Rule LIST-PART1-1165 missing"
        result = all_results['results']["LIST-PART1-1165"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART1-1165 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART1-1165 failed"


    def test_rule_list_part1_1166(self, all_results):
        """
        Test LIST-PART1-1166: List item: *ADOPTION TERMS:**
        Priority: MEDIUM
        """
        assert "LIST-PART1-1166" in all_results['results'], "Rule LIST-PART1-1166 missing"
        result = all_results['results']["LIST-PART1-1166"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART1-1166 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART1-1166 failed"


    def test_rule_list_part1_1167(self, all_results):
        """
        Test LIST-PART1-1167: List item: Adoption does not create business relationship or partnership
        Priority: MEDIUM
        """
        assert "LIST-PART1-1167" in all_results['results'], "Rule LIST-PART1-1167 missing"
        result = all_results['results']["LIST-PART1-1167"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART1-1167 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART1-1167 failed"


    def test_rule_list_part1_1168(self, all_results):
        """
        Test LIST-PART1-1168: List item: No liability assumed for third-party implementation outcomes
        Priority: MEDIUM
        """
        assert "LIST-PART1-1168" in all_results['results'], "Rule LIST-PART1-1168 missing"
        result = all_results['results']["LIST-PART1-1168"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART1-1168 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART1-1168 failed"


    def test_rule_list_part1_1169(self, all_results):
        """
        Test LIST-PART1-1169: List item: Users responsible for independent legal and compliance validation
        Priority: CRITICAL
        """
        assert "LIST-PART1-1169" in all_results['results'], "Rule LIST-PART1-1169 missing"
        result = all_results['results']["LIST-PART1-1169"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART1-1169 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART1-1169 failed"


    def test_rule_list_part1_1170(self, all_results):
        """
        Test LIST-PART1-1170: List item: Framework provided "AS-IS" under Apache 2.0 license
        Priority: MEDIUM
        """
        assert "LIST-PART1-1170" in all_results['results'], "Rule LIST-PART1-1170 missing"
        result = all_results['results']["LIST-PART1-1170"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART1-1170 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART1-1170 failed"


    def test_rule_list_part1_1171(self, all_results):
        """
        Test LIST-PART1-1171: List item: *Highly Suitable For:**
        Priority: MEDIUM
        """
        assert "LIST-PART1-1171" in all_results['results'], "Rule LIST-PART1-1171 missing"
        result = all_results['results']["LIST-PART1-1171"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART1-1171 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART1-1171 failed"


    def test_rule_list_part1_1172(self, all_results):
        """
        Test LIST-PART1-1172: List item: Fortune 500 companies seeking compliance modernization
        Priority: CRITICAL
        """
        assert "LIST-PART1-1172" in all_results['results'], "Rule LIST-PART1-1172 missing"
        result = all_results['results']["LIST-PART1-1172"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART1-1172 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART1-1172 failed"


    def test_rule_list_part1_1173(self, all_results):
        """
        Test LIST-PART1-1173: List item: Government agencies requiring audit-ready frameworks
        Priority: MEDIUM
        """
        assert "LIST-PART1-1173" in all_results['results'], "Rule LIST-PART1-1173 missing"
        result = all_results['results']["LIST-PART1-1173"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART1-1173 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART1-1173 failed"


    def test_rule_list_part1_1174(self, all_results):
        """
        Test LIST-PART1-1174: List item: Financial institutions under regulatory oversight
        Priority: MEDIUM
        """
        assert "LIST-PART1-1174" in all_results['results'], "Rule LIST-PART1-1174 missing"
        result = all_results['results']["LIST-PART1-1174"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART1-1174 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART1-1174 failed"


    def test_rule_list_part1_1175(self, all_results):
        """
        Test LIST-PART1-1175: List item: Healthcare organizations with strict compliance requirements
        Priority: CRITICAL
        """
        assert "LIST-PART1-1175" in all_results['results'], "Rule LIST-PART1-1175 missing"
        result = all_results['results']["LIST-PART1-1175"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART1-1175 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART1-1175 failed"


    def test_rule_list_part1_1176(self, all_results):
        """
        Test LIST-PART1-1176: List item: Academic institutions requiring governance frameworks
        Priority: MEDIUM
        """
        assert "LIST-PART1-1176" in all_results['results'], "Rule LIST-PART1-1176 missing"
        result = all_results['results']["LIST-PART1-1176"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART1-1176 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART1-1176 failed"


    def test_rule_list_part1_1177(self, all_results):
        """
        Test LIST-PART1-1177: List item: NGOs seeking transparency and accountability structures
        Priority: MEDIUM
        """
        assert "LIST-PART1-1177" in all_results['results'], "Rule LIST-PART1-1177 missing"
        result = all_results['results']["LIST-PART1-1177"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART1-1177 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART1-1177 failed"


    def test_rule_list_part1_1178(self, all_results):
        """
        Test LIST-PART1-1178: List item: *Implementation Requirements:**
        Priority: MEDIUM
        """
        assert "LIST-PART1-1178" in all_results['results'], "Rule LIST-PART1-1178 missing"
        result = all_results['results']["LIST-PART1-1178"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART1-1178 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART1-1178 failed"


    def test_rule_list_part1_1179(self, all_results):
        """
        Test LIST-PART1-1179: List item: Professional compliance consultation recommended
        Priority: CRITICAL
        """
        assert "LIST-PART1-1179" in all_results['results'], "Rule LIST-PART1-1179 missing"
        result = all_results['results']["LIST-PART1-1179"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART1-1179 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART1-1179 failed"


    def test_rule_list_part1_1180(self, all_results):
        """
        Test LIST-PART1-1180: List item: Technical architecture assessment needed
        Priority: MEDIUM
        """
        assert "LIST-PART1-1180" in all_results['results'], "Rule LIST-PART1-1180 missing"
        result = all_results['results']["LIST-PART1-1180"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART1-1180 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART1-1180 failed"


    def test_rule_list_part1_1181(self, all_results):
        """
        Test LIST-PART1-1181: List item: Business impact analysis essential
        Priority: MEDIUM
        """
        assert "LIST-PART1-1181" in all_results['results'], "Rule LIST-PART1-1181 missing"
        result = all_results['results']["LIST-PART1-1181"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART1-1181 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART1-1181 failed"


    def test_rule_list_part1_1182(self, all_results):
        """
        Test LIST-PART1-1182: List item: *Adoption Categories:**
        Priority: MEDIUM
        """
        assert "LIST-PART1-1182" in all_results['results'], "Rule LIST-PART1-1182 missing"
        result = all_results['results']["LIST-PART1-1182"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART1-1182 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART1-1182 failed"


    def test_rule_list_part1_1183(self, all_results):
        """
        Test LIST-PART1-1183: List item: **Compliance Modernization**: Legacy system compliance upgrades
        Priority: CRITICAL
        """
        assert "LIST-PART1-1183" in all_results['results'], "Rule LIST-PART1-1183 missing"
        result = all_results['results']["LIST-PART1-1183"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART1-1183 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART1-1183 failed"


    def test_rule_list_part1_1184(self, all_results):
        """
        Test LIST-PART1-1184: List item: **Regulatory Readiness**: Preparation for new regulatory requirements
        Priority: MEDIUM
        """
        assert "LIST-PART1-1184" in all_results['results'], "Rule LIST-PART1-1184 missing"
        result = all_results['results']["LIST-PART1-1184"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART1-1184 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART1-1184 failed"


    def test_rule_list_part1_1185(self, all_results):
        """
        Test LIST-PART1-1185: List item: **Audit Excellence**: Frameworks for successful audit outcomes
        Priority: MEDIUM
        """
        assert "LIST-PART1-1185" in all_results['results'], "Rule LIST-PART1-1185 missing"
        result = all_results['results']["LIST-PART1-1185"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART1-1185 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART1-1185 failed"


    def test_rule_list_part1_1186(self, all_results):
        """
        Test LIST-PART1-1186: List item: **Innovation Enablement**: Compliant innovation architectures
        Priority: MEDIUM
        """
        assert "LIST-PART1-1186" in all_results['results'], "Rule LIST-PART1-1186 missing"
        result = all_results['results']["LIST-PART1-1186"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART1-1186 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART1-1186 failed"


    def test_rule_list_part1_1187(self, all_results):
        """
        Test LIST-PART1-1187: List item: **Global Expansion**: Multi-jurisdiction compliance strategies
        Priority: CRITICAL
        """
        assert "LIST-PART1-1187" in all_results['results'], "Rule LIST-PART1-1187 missing"
        result = all_results['results']["LIST-PART1-1187"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART1-1187 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART1-1187 failed"


    def test_rule_list_part1_1188(self, all_results):
        """
        Test LIST-PART1-1188: List item: *Community Support:**
        Priority: MEDIUM
        """
        assert "LIST-PART1-1188" in all_results['results'], "Rule LIST-PART1-1188 missing"
        result = all_results['results']["LIST-PART1-1188"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART1-1188 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART1-1188 failed"


    def test_rule_list_part1_1189(self, all_results):
        """
        Test LIST-PART1-1189: List item: GitHub issues for technical questions
        Priority: MEDIUM
        """
        assert "LIST-PART1-1189" in all_results['results'], "Rule LIST-PART1-1189 missing"
        result = all_results['results']["LIST-PART1-1189"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART1-1189 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART1-1189 failed"


    def test_rule_list_part1_1190(self, all_results):
        """
        Test LIST-PART1-1190: List item: Community forums for implementation guidance
        Priority: MEDIUM
        """
        assert "LIST-PART1-1190" in all_results['results'], "Rule LIST-PART1-1190 missing"
        result = all_results['results']["LIST-PART1-1190"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART1-1190 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART1-1190 failed"


    def test_rule_list_part1_1191(self, all_results):
        """
        Test LIST-PART1-1191: List item: Documentation and examples provided
        Priority: MEDIUM
        """
        assert "LIST-PART1-1191" in all_results['results'], "Rule LIST-PART1-1191 missing"
        result = all_results['results']["LIST-PART1-1191"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART1-1191 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART1-1191 failed"


    def test_rule_list_part1_1192(self, all_results):
        """
        Test LIST-PART1-1192: List item: Regular webinars and Q&A sessions
        Priority: MEDIUM
        """
        assert "LIST-PART1-1192" in all_results['results'], "Rule LIST-PART1-1192 missing"
        result = all_results['results']["LIST-PART1-1192"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART1-1192 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART1-1192 failed"


    def test_rule_list_part1_1193(self, all_results):
        """
        Test LIST-PART1-1193: List item: *Enterprise Support:**
        Priority: MEDIUM
        """
        assert "LIST-PART1-1193" in all_results['results'], "Rule LIST-PART1-1193 missing"
        result = all_results['results']["LIST-PART1-1193"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART1-1193 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART1-1193 failed"


    def test_rule_list_part1_1194(self, all_results):
        """
        Test LIST-PART1-1194: List item: Professional services available through certified partners
        Priority: MEDIUM
        """
        assert "LIST-PART1-1194" in all_results['results'], "Rule LIST-PART1-1194 missing"
        result = all_results['results']["LIST-PART1-1194"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART1-1194 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART1-1194 failed"


    def test_rule_list_part1_1195(self, all_results):
        """
        Test LIST-PART1-1195: List item: Compliance consulting through authorized providers
        Priority: CRITICAL
        """
        assert "LIST-PART1-1195" in all_results['results'], "Rule LIST-PART1-1195 missing"
        result = all_results['results']["LIST-PART1-1195"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART1-1195 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART1-1195 failed"


    def test_rule_list_part1_1196(self, all_results):
        """
        Test LIST-PART1-1196: List item: Custom implementation services available
        Priority: MEDIUM
        """
        assert "LIST-PART1-1196" in all_results['results'], "Rule LIST-PART1-1196 missing"
        result = all_results['results']["LIST-PART1-1196"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART1-1196 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART1-1196 failed"


    def test_rule_list_part1_1197(self, all_results):
        """
        Test LIST-PART1-1197: List item: Training and certification programs offered
        Priority: MEDIUM
        """
        assert "LIST-PART1-1197" in all_results['results'], "Rule LIST-PART1-1197 missing"
        result = all_results['results']["LIST-PART1-1197"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART1-1197 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART1-1197 failed"


    def test_rule_list_part1_1198(self, all_results):
        """
        Test LIST-PART1-1198: List item: Dedicated enterprise support channels
        Priority: MEDIUM
        """
        assert "LIST-PART1-1198" in all_results['results'], "Rule LIST-PART1-1198 missing"
        result = all_results['results']["LIST-PART1-1198"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART1-1198 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART1-1198 failed"


    def test_rule_list_part1_1199(self, all_results):
        """
        Test LIST-PART1-1199: List item: *Contact for Enterprise Inquiries:**
        Priority: MEDIUM
        """
        assert "LIST-PART1-1199" in all_results['results'], "Rule LIST-PART1-1199 missing"
        result = all_results['results']["LIST-PART1-1199"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART1-1199 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART1-1199 failed"


    def test_rule_list_part1_1200(self, all_results):
        """
        Test LIST-PART1-1200: List item: Email: enterprise@ssid.org
        Priority: MEDIUM
        """
        assert "LIST-PART1-1200" in all_results['results'], "Rule LIST-PART1-1200 missing"
        result = all_results['results']["LIST-PART1-1200"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART1-1200 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART1-1200 failed"


    def test_rule_list_part1_1201(self, all_results):
        """
        Test LIST-PART1-1201: List item: Professional Services: consulting@ssid.org
        Priority: MEDIUM
        """
        assert "LIST-PART1-1201" in all_results['results'], "Rule LIST-PART1-1201 missing"
        result = all_results['results']["LIST-PART1-1201"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART1-1201 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART1-1201 failed"


    def test_rule_list_part1_1202(self, all_results):
        """
        Test LIST-PART1-1202: List item: Partnership Inquiries: partnerships@ssid.org
        Priority: MEDIUM
        """
        assert "LIST-PART1-1202" in all_results['results'], "Rule LIST-PART1-1202 missing"
        result = all_results['results']["LIST-PART1-1202"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART1-1202 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART1-1202 failed"


    def test_rule_list_part1_1203(self, all_results):
        """
        Test LIST-PART1-1203: List item: Emergency Support: support@ssid.org
        Priority: MEDIUM
        """
        assert "LIST-PART1-1203" in all_results['results'], "Rule LIST-PART1-1203 missing"
        result = all_results['results']["LIST-PART1-1203"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART1-1203 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART1-1203 failed"


    def test_rule_list_part1_1204(self, all_results):
        """
        Test LIST-PART1-1204: List item: "Investment opportunity"
        Priority: MEDIUM
        """
        assert "LIST-PART1-1204" in all_results['results'], "Rule LIST-PART1-1204 missing"
        result = all_results['results']["LIST-PART1-1204"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART1-1204 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART1-1204 failed"


    def test_rule_list_part1_1205(self, all_results):
        """
        Test LIST-PART1-1205: List item: "Expected returns or yields"
        Priority: MEDIUM
        """
        assert "LIST-PART1-1205" in all_results['results'], "Rule LIST-PART1-1205 missing"
        result = all_results['results']["LIST-PART1-1205"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART1-1205 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART1-1205 failed"


    def test_rule_list_part1_1206(self, all_results):
        """
        Test LIST-PART1-1206: List item: "Token price appreciation"
        Priority: MEDIUM
        """
        assert "LIST-PART1-1206" in all_results['results'], "Rule LIST-PART1-1206 missing"
        result = all_results['results']["LIST-PART1-1206"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART1-1206 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART1-1206 failed"


    def test_rule_list_part1_1207(self, all_results):
        """
        Test LIST-PART1-1207: List item: "Passive income generation"
        Priority: MEDIUM
        """
        assert "LIST-PART1-1207" in all_results['results'], "Rule LIST-PART1-1207 missing"
        result = all_results['results']["LIST-PART1-1207"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART1-1207 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART1-1207 failed"


    def test_rule_list_part1_1208(self, all_results):
        """
        Test LIST-PART1-1208: List item: "Securities offering"
        Priority: MEDIUM
        """
        assert "LIST-PART1-1208" in all_results['results'], "Rule LIST-PART1-1208 missing"
        result = all_results['results']["LIST-PART1-1208"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART1-1208 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART1-1208 failed"


    def test_rule_list_part1_1209(self, all_results):
        """
        Test LIST-PART1-1209: List item: "Financial services provision"
        Priority: MEDIUM
        """
        assert "LIST-PART1-1209" in all_results['results'], "Rule LIST-PART1-1209 missing"
        result = all_results['results']["LIST-PART1-1209"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART1-1209 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART1-1209 failed"


    def test_rule_text_part1_1210(self, all_results):
        """
        Test TEXT-PART1-1210: legal_validation: "Independent legal review required"
        Priority: MEDIUM
        """
        assert "TEXT-PART1-1210" in all_results['results'], "Rule TEXT-PART1-1210 missing"
        result = all_results['results']["TEXT-PART1-1210"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule TEXT-PART1-1210 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule TEXT-PART1-1210 failed"


    def test_rule_text_part1_1211(self, all_results):
        """
        Test TEXT-PART1-1211: risk_assessment: "Users must assess own risk tolerance"
        Priority: CRITICAL
        """
        assert "TEXT-PART1-1211" in all_results['results'], "Rule TEXT-PART1-1211 missing"
        result = all_results['results']["TEXT-PART1-1211"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule TEXT-PART1-1211 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule TEXT-PART1-1211 failed"


    def test_rule_text_part1_1212(self, all_results):
        """
        Test TEXT-PART1-1212: emergency_patches: "18 months for critical security issues"
        Priority: CRITICAL
        """
        assert "TEXT-PART1-1212" in all_results['results'], "Rule TEXT-PART1-1212 missing"
        result = all_results['results']["TEXT-PART1-1212"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule TEXT-PART1-1212 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule TEXT-PART1-1212 failed"


    def test_rule_list_part1_1213(self, all_results):
        """
        Test LIST-PART1-1213: List item: "100% structure compliance validation"
        Priority: CRITICAL
        """
        assert "LIST-PART1-1213" in all_results['results'], "Rule LIST-PART1-1213 missing"
        result = all_results['results']["LIST-PART1-1213"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART1-1213 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART1-1213 failed"


    def test_rule_list_part1_1214(self, all_results):
        """
        Test LIST-PART1-1214: List item: "All automated tests passing (>95% coverage)"
        Priority: MEDIUM
        """
        assert "LIST-PART1-1214" in all_results['results'], "Rule LIST-PART1-1214 missing"
        result = all_results['results']["LIST-PART1-1214"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART1-1214 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART1-1214 failed"


    def test_rule_list_part1_1215(self, all_results):
        """
        Test LIST-PART1-1215: List item: "Security audit completion"
        Priority: CRITICAL
        """
        assert "LIST-PART1-1215" in all_results['results'], "Rule LIST-PART1-1215 missing"
        result = all_results['results']["LIST-PART1-1215"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART1-1215 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART1-1215 failed"


    def test_rule_list_part1_1216(self, all_results):
        """
        Test LIST-PART1-1216: List item: "Documentation updates (all languages)"
        Priority: MEDIUM
        """
        assert "LIST-PART1-1216" in all_results['results'], "Rule LIST-PART1-1216 missing"
        result = all_results['results']["LIST-PART1-1216"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART1-1216 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART1-1216 failed"


    def test_rule_list_part1_1217(self, all_results):
        """
        Test LIST-PART1-1217: List item: "Backwards compatibility verification"
        Priority: MEDIUM
        """
        assert "LIST-PART1-1217" in all_results['results'], "Rule LIST-PART1-1217 missing"
        result = all_results['results']["LIST-PART1-1217"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART1-1217 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART1-1217 failed"


    def test_rule_list_part1_1218(self, all_results):
        """
        Test LIST-PART1-1218: List item: "Performance benchmarks met"
        Priority: MEDIUM
        """
        assert "LIST-PART1-1218" in all_results['results'], "Rule LIST-PART1-1218 missing"
        result = all_results['results']["LIST-PART1-1218"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART1-1218 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART1-1218 failed"


    def test_rule_list_part1_1219(self, all_results):
        """
        Test LIST-PART1-1219: List item: "Enterprise beta validation"
        Priority: MEDIUM
        """
        assert "LIST-PART1-1219" in all_results['results'], "Rule LIST-PART1-1219 missing"
        result = all_results['results']["LIST-PART1-1219"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART1-1219 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART1-1219 failed"


    def test_rule_list_part1_1220(self, all_results):
        """
        Test LIST-PART1-1220: List item: "Legal review completion"
        Priority: CRITICAL
        """
        assert "LIST-PART1-1220" in all_results['results'], "Rule LIST-PART1-1220 missing"
        result = all_results['results']["LIST-PART1-1220"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART1-1220 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART1-1220 failed"


    def test_rule_text_part1_1221(self, all_results):
        """
        Test TEXT-PART1-1221: security_support: "18 months for critical issues"
        Priority: CRITICAL
        """
        assert "TEXT-PART1-1221" in all_results['results'], "Rule TEXT-PART1-1221 missing"
        result = all_results['results']["TEXT-PART1-1221"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule TEXT-PART1-1221 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule TEXT-PART1-1221 failed"


    def test_rule_list_part1_1222(self, all_results):
        """
        Test LIST-PART1-1222: List item: jurisdiction: "European Union"
        Priority: MEDIUM
        """
        assert "LIST-PART1-1222" in all_results['results'], "Rule LIST-PART1-1222 missing"
        result = all_results['results']["LIST-PART1-1222"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART1-1222 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART1-1222 failed"


    def test_rule_text_part1_1223(self, all_results):
        """
        Test TEXT-PART1-1223: business_priority: "CRITICAL"
        Priority: CRITICAL
        """
        assert "TEXT-PART1-1223" in all_results['results'], "Rule TEXT-PART1-1223 missing"
        result = all_results['results']["TEXT-PART1-1223"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule TEXT-PART1-1223 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule TEXT-PART1-1223 failed"


    def test_rule_list_part1_1224(self, all_results):
        """
        Test LIST-PART1-1224: List item: jurisdiction: "United States"
        Priority: MEDIUM
        """
        assert "LIST-PART1-1224" in all_results['results'], "Rule LIST-PART1-1224 missing"
        result = all_results['results']["LIST-PART1-1224"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART1-1224 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART1-1224 failed"


    def test_rule_text_part1_1225(self, all_results):
        """
        Test TEXT-PART1-1225: business_priority: "CRITICAL"
        Priority: CRITICAL
        """
        assert "TEXT-PART1-1225" in all_results['results'], "Rule TEXT-PART1-1225 missing"
        result = all_results['results']["TEXT-PART1-1225"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule TEXT-PART1-1225 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule TEXT-PART1-1225 failed"


    def test_rule_list_part1_1226(self, all_results):
        """
        Test LIST-PART1-1226: List item: jurisdiction: "United Kingdom"
        Priority: MEDIUM
        """
        assert "LIST-PART1-1226" in all_results['results'], "Rule LIST-PART1-1226 missing"
        result = all_results['results']["LIST-PART1-1226"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART1-1226 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART1-1226 failed"


    def test_rule_list_part1_1227(self, all_results):
        """
        Test LIST-PART1-1227: List item: jurisdiction: "Singapore"
        Priority: MEDIUM
        """
        assert "LIST-PART1-1227" in all_results['results'], "Rule LIST-PART1-1227 missing"
        result = all_results['results']["LIST-PART1-1227"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART1-1227 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART1-1227 failed"


    def test_rule_list_part1_1228(self, all_results):
        """
        Test LIST-PART1-1228: List item: jurisdiction: "Switzerland"
        Priority: MEDIUM
        """
        assert "LIST-PART1-1228" in all_results['results'], "Rule LIST-PART1-1228 missing"
        result = all_results['results']["LIST-PART1-1228"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART1-1228 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART1-1228 failed"


    def test_rule_list_part1_1229(self, all_results):
        """
        Test LIST-PART1-1229: List item: jurisdiction: "Canada"
        Priority: MEDIUM
        """
        assert "LIST-PART1-1229" in all_results['results'], "Rule LIST-PART1-1229 missing"
        result = all_results['results']["LIST-PART1-1229"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART1-1229 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART1-1229 failed"


    def test_rule_list_part1_1230(self, all_results):
        """
        Test LIST-PART1-1230: List item: jurisdiction: "Australia"
        Priority: MEDIUM
        """
        assert "LIST-PART1-1230" in all_results['results'], "Rule LIST-PART1-1230 missing"
        result = all_results['results']["LIST-PART1-1230"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART1-1230 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART1-1230 failed"


    def test_rule_list_part1_1231(self, all_results):
        """
        Test LIST-PART1-1231: List item: jurisdiction: "Japan"
        Priority: MEDIUM
        """
        assert "LIST-PART1-1231" in all_results['results'], "Rule LIST-PART1-1231 missing"
        result = all_results['results']["LIST-PART1-1231"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART1-1231 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART1-1231 failed"


    def test_rule_list_part1_1232(self, all_results):
        """
        Test LIST-PART1-1232: List item: jurisdiction: "Hong Kong"
        Priority: MEDIUM
        """
        assert "LIST-PART1-1232" in all_results['results'], "Rule LIST-PART1-1232 missing"
        result = all_results['results']["LIST-PART1-1232"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART1-1232 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART1-1232 failed"


    def test_rule_list_part1_1233(self, all_results):
        """
        Test LIST-PART1-1233: List item: jurisdiction: "UAE"
        Priority: MEDIUM
        """
        assert "LIST-PART1-1233" in all_results['results'], "Rule LIST-PART1-1233 missing"
        result = all_results['results']["LIST-PART1-1233"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART1-1233 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART1-1233 failed"


    def test_rule_list_part1_1234(self, all_results):
        """
        Test LIST-PART1-1234: List item: jurisdiction: "South Korea"
        Priority: MEDIUM
        """
        assert "LIST-PART1-1234" in all_results['results'], "Rule LIST-PART1-1234 missing"
        result = all_results['results']["LIST-PART1-1234"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART1-1234 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART1-1234 failed"


    def test_rule_list_part1_1235(self, all_results):
        """
        Test LIST-PART1-1235: List item: jurisdiction: "Brazil"
        Priority: MEDIUM
        """
        assert "LIST-PART1-1235" in all_results['results'], "Rule LIST-PART1-1235 missing"
        result = all_results['results']["LIST-PART1-1235"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART1-1235 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART1-1235 failed"


    def test_rule_list_part1_1236(self, all_results):
        """
        Test LIST-PART1-1236: List item: jurisdiction: "Mexico"
        Priority: MEDIUM
        """
        assert "LIST-PART1-1236" in all_results['results'], "Rule LIST-PART1-1236 missing"
        result = all_results['results']["LIST-PART1-1236"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART1-1236 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART1-1236 failed"


    def test_rule_list_part1_1237(self, all_results):
        """
        Test LIST-PART1-1237: List item: jurisdiction: "South Africa"
        Priority: MEDIUM
        """
        assert "LIST-PART1-1237" in all_results['results'], "Rule LIST-PART1-1237 missing"
        result = all_results['results']["LIST-PART1-1237"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART1-1237 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART1-1237 failed"


    def test_rule_list_part1_1238(self, all_results):
        """
        Test LIST-PART1-1238: List item: "Iran (IR)"
        Priority: MEDIUM
        """
        assert "LIST-PART1-1238" in all_results['results'], "Rule LIST-PART1-1238 missing"
        result = all_results['results']["LIST-PART1-1238"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART1-1238 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART1-1238 failed"


    def test_rule_list_part1_1239(self, all_results):
        """
        Test LIST-PART1-1239: List item: "North Korea (KP)"
        Priority: MEDIUM
        """
        assert "LIST-PART1-1239" in all_results['results'], "Rule LIST-PART1-1239 missing"
        result = all_results['results']["LIST-PART1-1239"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART1-1239 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART1-1239 failed"


    def test_rule_list_part1_1240(self, all_results):
        """
        Test LIST-PART1-1240: List item: "Syria (SY)"
        Priority: MEDIUM
        """
        assert "LIST-PART1-1240" in all_results['results'], "Rule LIST-PART1-1240 missing"
        result = all_results['results']["LIST-PART1-1240"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART1-1240 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART1-1240 failed"


    def test_rule_list_part1_1241(self, all_results):
        """
        Test LIST-PART1-1241: List item: "Cuba (CU)"
        Priority: MEDIUM
        """
        assert "LIST-PART1-1241" in all_results['results'], "Rule LIST-PART1-1241 missing"
        result = all_results['results']["LIST-PART1-1241"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART1-1241 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART1-1241 failed"


    def test_rule_list_part1_1242(self, all_results):
        """
        Test LIST-PART1-1242: List item: "Selected Russian entities (per OFAC sanctions)"
        Priority: MEDIUM
        """
        assert "LIST-PART1-1242" in all_results['results'], "Rule LIST-PART1-1242 missing"
        result = all_results['results']["LIST-PART1-1242"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART1-1242 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART1-1242 failed"


    def test_rule_list_part1_1243(self, all_results):
        """
        Test LIST-PART1-1243: List item: "Belarus (selected entities)"
        Priority: MEDIUM
        """
        assert "LIST-PART1-1243" in all_results['results'], "Rule LIST-PART1-1243 missing"
        result = all_results['results']["LIST-PART1-1243"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART1-1243 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART1-1243 failed"


    def test_rule_list_part1_1244(self, all_results):
        """
        Test LIST-PART1-1244: List item: "Venezuela (government entities)"
        Priority: MEDIUM
        """
        assert "LIST-PART1-1244" in all_results['results'], "Rule LIST-PART1-1244 missing"
        result = all_results['results']["LIST-PART1-1244"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART1-1244 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART1-1244 failed"


    def test_rule_list_part1_1245(self, all_results):
        """
        Test LIST-PART1-1245: List item: jurisdiction: "India"
        Priority: MEDIUM
        """
        assert "LIST-PART1-1245" in all_results['results'], "Rule LIST-PART1-1245 missing"
        result = all_results['results']["LIST-PART1-1245"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART1-1245 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART1-1245 failed"


    def test_rule_list_part1_1246(self, all_results):
        """
        Test LIST-PART1-1246: List item: jurisdiction: "Pakistan"
        Priority: MEDIUM
        """
        assert "LIST-PART1-1246" in all_results['results'], "Rule LIST-PART1-1246 missing"
        result = all_results['results']["LIST-PART1-1246"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART1-1246 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART1-1246 failed"


    def test_rule_list_part1_1247(self, all_results):
        """
        Test LIST-PART1-1247: List item: jurisdiction: "China"
        Priority: MEDIUM
        """
        assert "LIST-PART1-1247" in all_results['results'], "Rule LIST-PART1-1247 missing"
        result = all_results['results']["LIST-PART1-1247"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART1-1247 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART1-1247 failed"


    def test_rule_list_part1_1248(self, all_results):
        """
        Test LIST-PART1-1248: List item: "Most African Union member states (except South Africa)"
        Priority: MEDIUM
        """
        assert "LIST-PART1-1248" in all_results['results'], "Rule LIST-PART1-1248 missing"
        result = all_results['results']["LIST-PART1-1248"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART1-1248 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART1-1248 failed"


    def test_rule_list_part1_1249(self, all_results):
        """
        Test LIST-PART1-1249: List item: "Central Asian republics"
        Priority: MEDIUM
        """
        assert "LIST-PART1-1249" in all_results['results'], "Rule LIST-PART1-1249 missing"
        result = all_results['results']["LIST-PART1-1249"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART1-1249 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART1-1249 failed"


    def test_rule_list_part1_1250(self, all_results):
        """
        Test LIST-PART1-1250: List item: "Pacific Island nations"
        Priority: MEDIUM
        """
        assert "LIST-PART1-1250" in all_results['results'], "Rule LIST-PART1-1250 missing"
        result = all_results['results']["LIST-PART1-1250"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART1-1250 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART1-1250 failed"


    def test_rule_list_part1_1251(self, all_results):
        """
        Test LIST-PART1-1251: List item: "Central American countries (except Mexico)"
        Priority: MEDIUM
        """
        assert "LIST-PART1-1251" in all_results['results'], "Rule LIST-PART1-1251 missing"
        result = all_results['results']["LIST-PART1-1251"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART1-1251 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART1-1251 failed"


    def test_rule_list_part1_1252(self, all_results):
        """
        Test LIST-PART1-1252: List item: jurisdiction: "Nigeria"
        Priority: MEDIUM
        """
        assert "LIST-PART1-1252" in all_results['results'], "Rule LIST-PART1-1252 missing"
        result = all_results['results']["LIST-PART1-1252"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART1-1252 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART1-1252 failed"


    def test_rule_list_part1_1253(self, all_results):
        """
        Test LIST-PART1-1253: List item: jurisdiction: "Kenya"
        Priority: MEDIUM
        """
        assert "LIST-PART1-1253" in all_results['results'], "Rule LIST-PART1-1253 missing"
        result = all_results['results']["LIST-PART1-1253"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART1-1253 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART1-1253 failed"


    def test_rule_list_part1_1254(self, all_results):
        """
        Test LIST-PART1-1254: List item: jurisdiction: "India"
        Priority: MEDIUM
        """
        assert "LIST-PART1-1254" in all_results['results'], "Rule LIST-PART1-1254 missing"
        result = all_results['results']["LIST-PART1-1254"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART1-1254 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART1-1254 failed"


    def test_rule_list_part1_1255(self, all_results):
        """
        Test LIST-PART1-1255: List item: jurisdiction: "Indonesia"
        Priority: MEDIUM
        """
        assert "LIST-PART1-1255" in all_results['results'], "Rule LIST-PART1-1255 missing"
        result = all_results['results']["LIST-PART1-1255"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART1-1255 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART1-1255 failed"


    def test_rule_text_part1_1256(self, all_results):
        """
        Test TEXT-PART1-1256: requirement: "Mandatory for Tier 1 markets"
        Priority: MEDIUM
        """
        assert "TEXT-PART1-1256" in all_results['results'], "Rule TEXT-PART1-1256 missing"
        result = all_results['results']["TEXT-PART1-1256"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule TEXT-PART1-1256 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule TEXT-PART1-1256 failed"


    def test_rule_text_part1_1257(self, all_results):
        """
        Test TEXT-PART1-1257: roi_calculation: "5-year NPV analysis required"
        Priority: MEDIUM
        """
        assert "TEXT-PART1-1257" in all_results['results'], "Rule TEXT-PART1-1257 missing"
        result = all_results['results']["TEXT-PART1-1257"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule TEXT-PART1-1257 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule TEXT-PART1-1257 failed"


    def test_rule_list_part1_1258(self, all_results):
        """
        Test LIST-PART1-1258: List item: "Regulatory agency websites and publications"
        Priority: MEDIUM
        """
        assert "LIST-PART1-1258" in all_results['results'], "Rule LIST-PART1-1258 missing"
        result = all_results['results']["LIST-PART1-1258"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART1-1258 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART1-1258 failed"


    def test_rule_list_part1_1259(self, all_results):
        """
        Test LIST-PART1-1259: List item: "Official government announcements"
        Priority: MEDIUM
        """
        assert "LIST-PART1-1259" in all_results['results'], "Rule LIST-PART1-1259 missing"
        result = all_results['results']["LIST-PART1-1259"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART1-1259 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART1-1259 failed"


    def test_rule_list_part1_1260(self, all_results):
        """
        Test LIST-PART1-1260: List item: "Legislative databases and parliamentary records"
        Priority: MEDIUM
        """
        assert "LIST-PART1-1260" in all_results['results'], "Rule LIST-PART1-1260 missing"
        result = all_results['results']["LIST-PART1-1260"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART1-1260 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART1-1260 failed"


    def test_rule_list_part1_1261(self, all_results):
        """
        Test LIST-PART1-1261: List item: "Court decisions and legal precedents"
        Priority: CRITICAL
        """
        assert "LIST-PART1-1261" in all_results['results'], "Rule LIST-PART1-1261 missing"
        result = all_results['results']["LIST-PART1-1261"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART1-1261 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART1-1261 failed"


    def test_rule_list_part1_1262(self, all_results):
        """
        Test LIST-PART1-1262: List item: "Legal and compliance industry publications"
        Priority: CRITICAL
        """
        assert "LIST-PART1-1262" in all_results['results'], "Rule LIST-PART1-1262 missing"
        result = all_results['results']["LIST-PART1-1262"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART1-1262 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART1-1262 failed"


    def test_rule_list_part1_1263(self, all_results):
        """
        Test LIST-PART1-1263: List item: "Professional services firm updates"
        Priority: MEDIUM
        """
        assert "LIST-PART1-1263" in all_results['results'], "Rule LIST-PART1-1263 missing"
        result = all_results['results']["LIST-PART1-1263"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART1-1263 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART1-1263 failed"


    def test_rule_list_part1_1264(self, all_results):
        """
        Test LIST-PART1-1264: List item: "Industry association communications"
        Priority: MEDIUM
        """
        assert "LIST-PART1-1264" in all_results['results'], "Rule LIST-PART1-1264 missing"
        result = all_results['results']["LIST-PART1-1264"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART1-1264 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART1-1264 failed"


    def test_rule_list_part1_1265(self, all_results):
        """
        Test LIST-PART1-1265: List item: "Academic research and analysis"
        Priority: MEDIUM
        """
        assert "LIST-PART1-1265" in all_results['results'], "Rule LIST-PART1-1265 missing"
        result = all_results['results']["LIST-PART1-1265"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART1-1265 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART1-1265 failed"


    def test_rule_list_part1_1266(self, all_results):
        """
        Test LIST-PART1-1266: List item: "Thomson Reuters Regulatory Intelligence"
        Priority: MEDIUM
        """
        assert "LIST-PART1-1266" in all_results['results'], "Rule LIST-PART1-1266 missing"
        result = all_results['results']["LIST-PART1-1266"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART1-1266 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART1-1266 failed"


    def test_rule_list_part1_1267(self, all_results):
        """
        Test LIST-PART1-1267: List item: "Compliance.ai regulatory monitoring"
        Priority: CRITICAL
        """
        assert "LIST-PART1-1267" in all_results['results'], "Rule LIST-PART1-1267 missing"
        result = all_results['results']["LIST-PART1-1267"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART1-1267 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART1-1267 failed"


    def test_rule_list_part1_1268(self, all_results):
        """
        Test LIST-PART1-1268: List item: "Local legal counsel networks"
        Priority: CRITICAL
        """
        assert "LIST-PART1-1268" in all_results['results'], "Rule LIST-PART1-1268 missing"
        result = all_results['results']["LIST-PART1-1268"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART1-1268 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART1-1268 failed"


    def test_rule_list_part1_1269(self, all_results):
        """
        Test LIST-PART1-1269: List item: "Industry regulatory associations"
        Priority: MEDIUM
        """
        assert "LIST-PART1-1269" in all_results['results'], "Rule LIST-PART1-1269 missing"
        result = all_results['results']["LIST-PART1-1269"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART1-1269 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART1-1269 failed"


    def test_rule_list_part1_1270(self, all_results):
        """
        Test LIST-PART1-1270: List item: "Direct compliance obligations"
        Priority: CRITICAL
        """
        assert "LIST-PART1-1270" in all_results['results'], "Rule LIST-PART1-1270 missing"
        result = all_results['results']["LIST-PART1-1270"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART1-1270 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART1-1270 failed"


    def test_rule_list_part1_1271(self, all_results):
        """
        Test LIST-PART1-1271: List item: "Business model implications"
        Priority: MEDIUM
        """
        assert "LIST-PART1-1271" in all_results['results'], "Rule LIST-PART1-1271 missing"
        result = all_results['results']["LIST-PART1-1271"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART1-1271 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART1-1271 failed"


    def test_rule_list_part1_1272(self, all_results):
        """
        Test LIST-PART1-1272: List item: "Competitive impact"
        Priority: MEDIUM
        """
        assert "LIST-PART1-1272" in all_results['results'], "Rule LIST-PART1-1272 missing"
        result = all_results['results']["LIST-PART1-1272"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART1-1272 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART1-1272 failed"


    def test_rule_list_part1_1273(self, all_results):
        """
        Test LIST-PART1-1273: List item: "Implementation costs"
        Priority: MEDIUM
        """
        assert "LIST-PART1-1273" in all_results['results'], "Rule LIST-PART1-1273 missing"
        result = all_results['results']["LIST-PART1-1273"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART1-1273 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART1-1273 failed"


    def test_rule_list_part1_1274(self, all_results):
        """
        Test LIST-PART1-1274: List item: "Timeline requirements"
        Priority: MEDIUM
        """
        assert "LIST-PART1-1274" in all_results['results'], "Rule LIST-PART1-1274 missing"
        result = all_results['results']["LIST-PART1-1274"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART1-1274 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART1-1274 failed"


    def test_rule_list_part1_1275(self, all_results):
        """
        Test LIST-PART1-1275: List item: "Compliance gap analysis"
        Priority: CRITICAL
        """
        assert "LIST-PART1-1275" in all_results['results'], "Rule LIST-PART1-1275 missing"
        result = all_results['results']["LIST-PART1-1275"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART1-1275 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART1-1275 failed"


    def test_rule_list_part1_1276(self, all_results):
        """
        Test LIST-PART1-1276: List item: "Implementation roadmap"
        Priority: MEDIUM
        """
        assert "LIST-PART1-1276" in all_results['results'], "Rule LIST-PART1-1276 missing"
        result = all_results['results']["LIST-PART1-1276"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART1-1276 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART1-1276 failed"


    def test_rule_list_part1_1277(self, all_results):
        """
        Test LIST-PART1-1277: List item: "Resource requirements"
        Priority: MEDIUM
        """
        assert "LIST-PART1-1277" in all_results['results'], "Rule LIST-PART1-1277 missing"
        result = all_results['results']["LIST-PART1-1277"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART1-1277 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART1-1277 failed"


    def test_rule_list_part1_1278(self, all_results):
        """
        Test LIST-PART1-1278: List item: "Risk mitigation strategies"
        Priority: MEDIUM
        """
        assert "LIST-PART1-1278" in all_results['results'], "Rule LIST-PART1-1278 missing"
        result = all_results['results']["LIST-PART1-1278"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART1-1278 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART1-1278 failed"


    def test_rule_list_part1_1279(self, all_results):
        """
        Test LIST-PART1-1279: List item: "Stakeholder communications"
        Priority: MEDIUM
        """
        assert "LIST-PART1-1279" in all_results['results'], "Rule LIST-PART1-1279 missing"
        result = all_results['results']["LIST-PART1-1279"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART1-1279 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART1-1279 failed"


    def test_rule_list_part1_1280(self, all_results):
        """
        Test LIST-PART1-1280: List item: "What's our current GDPR compliance status?"
        Priority: CRITICAL
        """
        assert "LIST-PART1-1280" in all_results['results'], "Rule LIST-PART1-1280 missing"
        result = all_results['results']["LIST-PART1-1280"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART1-1280 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART1-1280 failed"


    def test_rule_list_part1_1281(self, all_results):
        """
        Test LIST-PART1-1281: List item: "Which modules need SOC2 updates?"
        Priority: MEDIUM
        """
        assert "LIST-PART1-1281" in all_results['results'], "Rule LIST-PART1-1281 missing"
        result = all_results['results']["LIST-PART1-1281"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART1-1281 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART1-1281 failed"


    def test_rule_list_part1_1282(self, all_results):
        """
        Test LIST-PART1-1282: List item: "Show me regulatory changes since v1.0"
        Priority: MEDIUM
        """
        assert "LIST-PART1-1282" in all_results['results'], "Rule LIST-PART1-1282 missing"
        result = all_results['results']["LIST-PART1-1282"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART1-1282 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART1-1282 failed"


    def test_rule_list_part1_1283(self, all_results):
        """
        Test LIST-PART1-1283: List item: "Analyze business impact of new EU regulations"
        Priority: MEDIUM
        """
        assert "LIST-PART1-1283" in all_results['results'], "Rule LIST-PART1-1283 missing"
        result = all_results['results']["LIST-PART1-1283"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART1-1283 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART1-1283 failed"


    def test_rule_list_part1_1284(self, all_results):
        """
        Test LIST-PART1-1284: List item: "ISO 27001 (XML/JSON)"
        Priority: MEDIUM
        """
        assert "LIST-PART1-1284" in all_results['results'], "Rule LIST-PART1-1284 missing"
        result = all_results['results']["LIST-PART1-1284"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART1-1284 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART1-1284 failed"


    def test_rule_list_part1_1285(self, all_results):
        """
        Test LIST-PART1-1285: List item: "SOC2 (YAML/JSON)"
        Priority: MEDIUM
        """
        assert "LIST-PART1-1285" in all_results['results'], "Rule LIST-PART1-1285 missing"
        result = all_results['results']["LIST-PART1-1285"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART1-1285 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART1-1285 failed"


    def test_rule_list_part1_1286(self, all_results):
        """
        Test LIST-PART1-1286: List item: "NIST (XML/RDF)"
        Priority: MEDIUM
        """
        assert "LIST-PART1-1286" in all_results['results'], "Rule LIST-PART1-1286 missing"
        result = all_results['results']["LIST-PART1-1286"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART1-1286 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART1-1286 failed"


    def test_rule_list_part1_1287(self, all_results):
        """
        Test LIST-PART1-1287: List item: "GDPR Compliance (JSON-LD)"
        Priority: CRITICAL
        """
        assert "LIST-PART1-1287" in all_results['results'], "Rule LIST-PART1-1287 missing"
        result = all_results['results']["LIST-PART1-1287"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART1-1287 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART1-1287 failed"


    def test_rule_list_part1_1288(self, all_results):
        """
        Test LIST-PART1-1288: List item: "PCI-DSS (XML)"
        Priority: MEDIUM
        """
        assert "LIST-PART1-1288" in all_results['results'], "Rule LIST-PART1-1288 missing"
        result = all_results['results']["LIST-PART1-1288"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART1-1288 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART1-1288 failed"


    def test_rule_list_part1_1289(self, all_results):
        """
        Test LIST-PART1-1289: List item: "MiCA (EU Custom Format)"
        Priority: MEDIUM
        """
        assert "LIST-PART1-1289" in all_results['results'], "Rule LIST-PART1-1289 missing"
        result = all_results['results']["LIST-PART1-1289"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART1-1289 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART1-1289 failed"


    def test_rule_list_part1_1290(self, all_results):
        """
        Test LIST-PART1-1290: List item: "Custom Enterprise Formats"
        Priority: MEDIUM
        """
        assert "LIST-PART1-1290" in all_results['results'], "Rule LIST-PART1-1290 missing"
        result = all_results['results']["LIST-PART1-1290"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART1-1290 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART1-1290 failed"


    def test_rule_list_part1_1291(self, all_results):
        """
        Test LIST-PART1-1291: List item: name: "OpenTimestamps"
        Priority: MEDIUM
        """
        assert "LIST-PART1-1291" in all_results['results'], "Rule LIST-PART1-1291 missing"
        result = all_results['results']["LIST-PART1-1291"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART1-1291 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART1-1291 failed"


    def test_rule_list_part1_1292(self, all_results):
        """
        Test LIST-PART1-1292: List item: name: "Ethereum"
        Priority: MEDIUM
        """
        assert "LIST-PART1-1292" in all_results['results'], "Rule LIST-PART1-1292 missing"
        result = all_results['results']["LIST-PART1-1292"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART1-1292 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART1-1292 failed"


    def test_rule_list_part1_1293(self, all_results):
        """
        Test LIST-PART1-1293: List item: name: "Private Blockchain"
        Priority: MEDIUM
        """
        assert "LIST-PART1-1293" in all_results['results'], "Rule LIST-PART1-1293 missing"
        result = all_results['results']["LIST-PART1-1293"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART1-1293 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART1-1293 failed"


    def test_rule_list_part1_1294(self, all_results):
        """
        Test LIST-PART1-1294: List item: "did:enterprise"
        Priority: MEDIUM
        """
        assert "LIST-PART1-1294" in all_results['results'], "Rule LIST-PART1-1294 missing"
        result = all_results['results']["LIST-PART1-1294"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART1-1294 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART1-1294 failed"


    def test_rule_list_part1_1295(self, all_results):
        """
        Test LIST-PART1-1295: List item: "Compliance without data disclosure"
        Priority: CRITICAL
        """
        assert "LIST-PART1-1295" in all_results['results'], "Rule LIST-PART1-1295 missing"
        result = all_results['results']["LIST-PART1-1295"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART1-1295 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART1-1295 failed"


    def test_rule_list_part1_1296(self, all_results):
        """
        Test LIST-PART1-1296: List item: "Audit trail verification"
        Priority: MEDIUM
        """
        assert "LIST-PART1-1296" in all_results['results'], "Rule LIST-PART1-1296 missing"
        result = all_results['results']["LIST-PART1-1296"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART1-1296 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART1-1296 failed"


    def test_rule_list_part1_1297(self, all_results):
        """
        Test LIST-PART1-1297: List item: "Privacy-preserving attestations"
        Priority: MEDIUM
        """
        assert "LIST-PART1-1297" in all_results['results'], "Rule LIST-PART1-1297 missing"
        result = all_results['results']["LIST-PART1-1297"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART1-1297 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART1-1297 failed"


    def test_rule_list_part1_1298(self, all_results):
        """
        Test LIST-PART1-1298: List item: "Business sensitive data protection"
        Priority: MEDIUM
        """
        assert "LIST-PART1-1298" in all_results['results'], "Rule LIST-PART1-1298 missing"
        result = all_results['results']["LIST-PART1-1298"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART1-1298 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART1-1298 failed"


    def test_rule_list_part1_1299(self, all_results):
        """
        Test LIST-PART1-1299: List item: "zk-SNARKs"
        Priority: MEDIUM
        """
        assert "LIST-PART1-1299" in all_results['results'], "Rule LIST-PART1-1299 missing"
        result = all_results['results']["LIST-PART1-1299"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART1-1299 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART1-1299 failed"


    def test_rule_list_part1_1300(self, all_results):
        """
        Test LIST-PART1-1300: List item: "zk-STARKs"
        Priority: MEDIUM
        """
        assert "LIST-PART1-1300" in all_results['results'], "Rule LIST-PART1-1300 missing"
        result = all_results['results']["LIST-PART1-1300"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART1-1300 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART1-1300 failed"


    def test_rule_list_part1_1301(self, all_results):
        """
        Test LIST-PART1-1301: List item: "Bulletproofs"
        Priority: MEDIUM
        """
        assert "LIST-PART1-1301" in all_results['results'], "Rule LIST-PART1-1301 missing"
        result = all_results['results']["LIST-PART1-1301"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART1-1301 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART1-1301 failed"


    def test_rule_list_part1_1302(self, all_results):
        """
        Test LIST-PART1-1302: List item: "CRYSTALS-Dilithium"
        Priority: MEDIUM
        """
        assert "LIST-PART1-1302" in all_results['results'], "Rule LIST-PART1-1302 missing"
        result = all_results['results']["LIST-PART1-1302"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART1-1302 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART1-1302 failed"


    def test_rule_list_part1_1303(self, all_results):
        """
        Test LIST-PART1-1303: List item: generated:* 2025-09-30T12:02:08Z
        Priority: MEDIUM
        """
        assert "LIST-PART1-1303" in all_results['results'], "Rule LIST-PART1-1303 missing"
        result = all_results['results']["LIST-PART1-1303"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART1-1303 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART1-1303 failed"


    def test_rule_list_part1_1304(self, all_results):
        """
        Test LIST-PART1-1304: List item: *Quelle der Wahrheit:** Diese drei Dateien (A, B, C) sind die einzig 
        Priority: MEDIUM
        """
        assert "LIST-PART1-1304" in all_results['results'], "Rule LIST-PART1-1304 missing"
        result = all_results['results']["LIST-PART1-1304"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART1-1304 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART1-1304 failed"


    def test_rule_list_part1_1305(self, all_results):
        """
        Test LIST-PART1-1305: List item: **DISABLED LANGUAGES:** `zh-CN` (Chinese) – **kein** Ordner in der ec
        Priority: MEDIUM
        """
        assert "LIST-PART1-1305" in all_results['results'], "Rule LIST-PART1-1305 missing"
        result = all_results['results']["LIST-PART1-1305"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART1-1305 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART1-1305 failed"


    def test_rule_list_part1_1306(self, all_results):
        """
        Test LIST-PART1-1306: List item: **ENFORCED LANGUAGES:** `en-US` (Primär), `de-DE` (Sekundär, Docs/UI)
        Priority: MEDIUM
        """
        assert "LIST-PART1-1306" in all_results['results'], "Rule LIST-PART1-1306 missing"
        result = all_results['results']["LIST-PART1-1306"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART1-1306 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART1-1306 failed"


    def test_rule_list_part1_1307(self, all_results):
        """
        Test LIST-PART1-1307: List item: **Konsequenz:** In allen Baumdarstellungen bleibt `zh/…` als historis
        Priority: MEDIUM
        """
        assert "LIST-PART1-1307" in all_results['results'], "Rule LIST-PART1-1307 missing"
        result = all_results['results']["LIST-PART1-1307"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART1-1307 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART1-1307 failed"


    def test_rule_list_part1_1308(self, all_results):
        """
        Test LIST-PART1-1308: List item: generated:* 2025-09-30T12:05:53Z
        Priority: MEDIUM
        """
        assert "LIST-PART1-1308" in all_results['results'], "Rule LIST-PART1-1308 missing"
        result = all_results['results']["LIST-PART1-1308"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART1-1308 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART1-1308 failed"


    def test_rule_list_part1_1309(self, all_results):
        """
        Test LIST-PART1-1309: List item: **chat_ingest/**: von `registry/logs/` → **`registry/intake/chat_inge
        Priority: MEDIUM
        """
        assert "LIST-PART1-1309" in all_results['results'], "Rule LIST-PART1-1309 missing"
        result = all_results['results']["LIST-PART1-1309"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART1-1309 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART1-1309 failed"


    def test_rule_list_part1_1310(self, all_results):
        """
        Test LIST-PART1-1310: List item: **registry_audit.yaml**: von `registry/logs/` → **`23_compliance/evid
        Priority: CRITICAL
        """
        assert "LIST-PART1-1310" in all_results['results'], "Rule LIST-PART1-1310 missing"
        result = all_results['results']["LIST-PART1-1310"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART1-1310 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART1-1310 failed"


    def test_rule_list_part1_1311(self, all_results):
        """
        Test LIST-PART1-1311: List item: **integrity_checksums.json**: von `registry/logs/` → **`registry/mani
        Priority: MEDIUM
        """
        assert "LIST-PART1-1311" in all_results['results'], "Rule LIST-PART1-1311 missing"
        result = all_results['results']["LIST-PART1-1311"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART1-1311 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART1-1311 failed"


    def test_rule_list_part1_1312(self, all_results):
        """
        Test LIST-PART1-1312: List item: `registry/logs/`: **nur** `*.log` oder `*.log.jsonl` (append-only). K
        Priority: MEDIUM
        """
        assert "LIST-PART1-1312" in all_results['results'], "Rule LIST-PART1-1312 missing"
        result = all_results['results']["LIST-PART1-1312"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART1-1312 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART1-1312 failed"


    def test_rule_list_part1_1313(self, all_results):
        """
        Test LIST-PART1-1313: List item: `registry/locks/`: write-once / append-only (Owner/Lock/Hash-Kette). 
        Priority: MEDIUM
        """
        assert "LIST-PART1-1313" in all_results['results'], "Rule LIST-PART1-1313 missing"
        result = all_results['results']["LIST-PART1-1313"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART1-1313 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART1-1313 failed"


    def test_rule_list_part1_1314(self, all_results):
        """
        Test LIST-PART1-1314: List item: `registry/manifests/`: berechnete Zustände/Indexe/Checksums (mutable,
        Priority: MEDIUM
        """
        assert "LIST-PART1-1314" in all_results['results'], "Rule LIST-PART1-1314 missing"
        result = all_results['results']["LIST-PART1-1314"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART1-1314 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART1-1314 failed"


    def test_rule_list_part1_1315(self, all_results):
        """
        Test LIST-PART1-1315: List item: `registry/intake/`: Eingangsdaten (z. B. Chat-Dateien), werden nach V
        Priority: MEDIUM
        """
        assert "LIST-PART1-1315" in all_results['results'], "Rule LIST-PART1-1315 missing"
        result = all_results['results']["LIST-PART1-1315"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART1-1315 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART1-1315 failed"


    def test_rule_list_part1_1316(self, all_results):
        """
        Test LIST-PART1-1316: List item: **FAIL (Exit 24)**, wenn
        Priority: MEDIUM
        """
        assert "LIST-PART1-1316" in all_results['results'], "Rule LIST-PART1-1316 missing"
        result = all_results['results']["LIST-PART1-1316"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART1-1316 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART1-1316 failed"


    def test_rule_list_part1_1317(self, all_results):
        """
        Test LIST-PART1-1317: List item: unter `registry/logs/` Dateien ≠ `*.log` / `*.log.jsonl` liegen
        Priority: MEDIUM
        """
        assert "LIST-PART1-1317" in all_results['results'], "Rule LIST-PART1-1317 missing"
        result = all_results['results']["LIST-PART1-1317"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART1-1317 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART1-1317 failed"


    def test_rule_list_part1_1318(self, all_results):
        """
        Test LIST-PART1-1318: List item: `registry/locks/` fehlt oder unsignierte Änderungen erkannt werden
        Priority: MEDIUM
        """
        assert "LIST-PART1-1318" in all_results['results'], "Rule LIST-PART1-1318 missing"
        result = all_results['results']["LIST-PART1-1318"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART1-1318 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART1-1318 failed"


    def test_rule_list_part1_1319(self, all_results):
        """
        Test LIST-PART1-1319: List item: `integrity_checksums.json` nicht unter `registry/manifests/` liegt
        Priority: MEDIUM
        """
        assert "LIST-PART1-1319" in all_results['results'], "Rule LIST-PART1-1319 missing"
        result = all_results['results']["LIST-PART1-1319"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART1-1319 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART1-1319 failed"


    def test_rule_list_part1_1320(self, all_results):
        """
        Test LIST-PART1-1320: List item: `chat_ingest/` nicht unter `registry/intake/` liegt
        Priority: MEDIUM
        """
        assert "LIST-PART1-1320" in all_results['results'], "Rule LIST-PART1-1320 missing"
        result = all_results['results']["LIST-PART1-1320"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART1-1320 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART1-1320 failed"


    def test_rule_list_part1_1321(self, all_results):
        """
        Test LIST-PART1-1321: List item: Gate-Datei (Beispiel): `24_meta_orchestration/triggers/ci/gates/struc
        Priority: MEDIUM
        """
        assert "LIST-PART1-1321" in all_results['results'], "Rule LIST-PART1-1321 missing"
        result = all_results['results']["LIST-PART1-1321"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART1-1321 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART1-1321 failed"


    def test_rule_list_part1_1322(self, all_results):
        """
        Test LIST-PART1-1322: List item: Die 6 Chat-Dateien aus `registry/intake/chat_ingest/` werden durch de
        Priority: CRITICAL
        """
        assert "LIST-PART1-1322" in all_results['results'], "Rule LIST-PART1-1322 missing"
        result = all_results['results']["LIST-PART1-1322"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART1-1322 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART1-1322 failed"


    def test_rule_1323(self, all_results):
        """
        Test RULE-1323: YAML field 'version' must equal '1.0'
        Priority: HIGH
        """
        assert "RULE-1323" in all_results['results'], "Rule RULE-1323 missing"
        result = all_results['results']["RULE-1323"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "HIGH" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1323 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1323 failed"


    def test_rule_1324(self, all_results):
        """
        Test RULE-1324: YAML field 'date' must equal '2025-09-15'
        Priority: MEDIUM
        """
        assert "RULE-1324" in all_results['results'], "Rule RULE-1324 missing"
        result = all_results['results']["RULE-1324"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1324 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1324 failed"


    def test_rule_1325(self, all_results):
        """
        Test RULE-1325: YAML field 'deprecated' must equal 'False'
        Priority: CRITICAL
        """
        assert "RULE-1325" in all_results['results'], "Rule RULE-1325 missing"
        result = all_results['results']["RULE-1325"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1325 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1325 failed"


    def test_rule_1326(self, all_results):
        """
        Test RULE-1326: YAML field 'classification' must equal 'PUBLIC - CI Guard Enforcement'
        Priority: MEDIUM
        """
        assert "RULE-1326" in all_results['results'], "Rule RULE-1326 missing"
        result = all_results['results']["RULE-1326"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1326 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1326 failed"


    def test_rule_1327(self, all_results):
        """
        Test RULE-1327: YAML field 'root_level_exceptions.description' must equal 'EINMALIGE, autoritäre
        Priority: MEDIUM
        """
        assert "RULE-1327" in all_results['results'], "Rule RULE-1327 missing"
        result = all_results['results']["RULE-1327"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1327 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1327 failed"


    def test_rule_1328(self, all_results):
        """
        Test RULE-1328: YAML field 'root_level_exceptions.enforcement' must equal 'CI-Guard mit Exit Cod
        Priority: MEDIUM
        """
        assert "RULE-1328" in all_results['results'], "Rule RULE-1328 missing"
        result = all_results['results']["RULE-1328"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1328 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1328 failed"


    def test_rule_1329(self, all_results):
        """
        Test RULE-1329: YAML field 'root_level_exceptions.modification_policy' must equal 'Nur durch Com
        Priority: CRITICAL
        """
        assert "RULE-1329" in all_results['results'], "Rule RULE-1329 missing"
        result = all_results['results']["RULE-1329"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1329 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1329 failed"


    def test_rule_1330(self, all_results):
        """
        Test RULE-1330: YAML list 'allowed_directories.git_infrastructure' must contain 3 elements
        Priority: MEDIUM
        """
        assert "RULE-1330" in all_results['results'], "Rule RULE-1330 missing"
        result = all_results['results']["RULE-1330"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1330 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1330 failed"


    def test_rule_1331(self, all_results):
        """
        Test RULE-1331: YAML list 'allowed_directories.development_environment' must contain 2 elements
        Priority: MEDIUM
        """
        assert "RULE-1331" in all_results['results'], "Rule RULE-1331 missing"
        result = all_results['results']["RULE-1331"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1331 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1331 failed"


    def test_rule_1332(self, all_results):
        """
        Test RULE-1332: YAML list 'allowed_directories.testing_artifacts' must contain 1 elements
        Priority: MEDIUM
        """
        assert "RULE-1332" in all_results['results'], "Rule RULE-1332 missing"
        result = all_results['results']["RULE-1332"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1332 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1332 failed"


    def test_rule_1333(self, all_results):
        """
        Test RULE-1333: YAML list 'allowed_directories.excluded_directories' must contain 0 elements
        Priority: MEDIUM
        """
        assert "RULE-1333" in all_results['results'], "Rule RULE-1333 missing"
        result = all_results['results']["RULE-1333"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1333 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1333 failed"


    def test_rule_1334(self, all_results):
        """
        Test RULE-1334: YAML list 'allowed_files.version_control' must contain 3 elements
        Priority: HIGH
        """
        assert "RULE-1334" in all_results['results'], "Rule RULE-1334 missing"
        result = all_results['results']["RULE-1334"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "HIGH" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1334 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1334 failed"


    def test_rule_1335(self, all_results):
        """
        Test RULE-1335: YAML list 'allowed_files.project_metadata' must contain 2 elements
        Priority: MEDIUM
        """
        assert "RULE-1335" in all_results['results'], "Rule RULE-1335 missing"
        result = all_results['results']["RULE-1335"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1335 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1335 failed"


    def test_rule_1336(self, all_results):
        """
        Test RULE-1336: YAML list 'allowed_files.testing_configuration' must contain 1 elements
        Priority: MEDIUM
        """
        assert "RULE-1336" in all_results['results'], "Rule RULE-1336 missing"
        result = all_results['results']["RULE-1336"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1336 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1336 failed"


    def test_rule_1337(self, all_results):
        """
        Test RULE-1337: YAML list 'allowed_files.excluded_files' must contain 0 elements
        Priority: MEDIUM
        """
        assert "RULE-1337" in all_results['results'], "Rule RULE-1337 missing"
        result = all_results['results']["RULE-1337"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1337 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1337 failed"


    def test_rule_1338(self, all_results):
        """
        Test RULE-1338: YAML field 'guard_enforcement.ci_script' must equal '12_tooling/scripts/structur
        Priority: MEDIUM
        """
        assert "RULE-1338" in all_results['results'], "Rule RULE-1338 missing"
        result = all_results['results']["RULE-1338"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1338 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1338 failed"


    def test_rule_1339(self, all_results):
        """
        Test RULE-1339: YAML field 'guard_enforcement.validation_function' must equal 'validate_root_exc
        Priority: MEDIUM
        """
        assert "RULE-1339" in all_results['results'], "Rule RULE-1339 missing"
        result = all_results['results']["RULE-1339"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1339 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1339 failed"


    def test_rule_1340(self, all_results):
        """
        Test RULE-1340: YAML field 'guard_enforcement.enforcement_level' must equal 'STRICT - Zero toler
        Priority: MEDIUM
        """
        assert "RULE-1340" in all_results['results'], "Rule RULE-1340 missing"
        result = all_results['results']["RULE-1340"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1340 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1340 failed"


    def test_rule_1341(self, all_results):
        """
        Test RULE-1341: YAML field 'guard_enforcement.bypass_mechanism' must equal 'NONE - No override c
        Priority: MEDIUM
        """
        assert "RULE-1341" in all_results['results'], "Rule RULE-1341 missing"
        result = all_results['results']["RULE-1341"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1341 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1341 failed"


    def test_rule_1342(self, all_results):
        """
        Test RULE-1342: YAML field 'guard_enforcement.violation_handling.immediate_failure' must equal '
        Priority: CRITICAL
        """
        assert "RULE-1342" in all_results['results'], "Rule RULE-1342 missing"
        result = all_results['results']["RULE-1342"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1342 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1342 failed"


    def test_rule_1343(self, all_results):
        """
        Test RULE-1343: YAML field 'guard_enforcement.violation_handling.exit_code' must equal '24'
        Priority: MEDIUM
        """
        assert "RULE-1343" in all_results['results'], "Rule RULE-1343 missing"
        result = all_results['results']["RULE-1343"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1343 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1343 failed"


    def test_rule_1344(self, all_results):
        """
        Test RULE-1344: YAML field 'guard_enforcement.violation_handling.quarantine_trigger' must equal 
        Priority: CRITICAL
        """
        assert "RULE-1344" in all_results['results'], "Rule RULE-1344 missing"
        result = all_results['results']["RULE-1344"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1344 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1344 failed"


    def test_rule_1345(self, all_results):
        """
        Test RULE-1345: YAML field 'guard_enforcement.violation_handling.escalation' must equal 'Complia
        Priority: CRITICAL
        """
        assert "RULE-1345" in all_results['results'], "Rule RULE-1345 missing"
        result = all_results['results']["RULE-1345"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1345 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1345 failed"


    def test_rule_1346(self, all_results):
        """
        Test RULE-1346: YAML field 'guard_algorithm.step_1' must equal 'Scan root directory for all item
        Priority: MEDIUM
        """
        assert "RULE-1346" in all_results['results'], "Rule RULE-1346 missing"
        result = all_results['results']["RULE-1346"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1346 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1346 failed"


    def test_rule_1347(self, all_results):
        """
        Test RULE-1347: YAML field 'guard_algorithm.step_2' must equal 'Compare against allowed_director
        Priority: MEDIUM
        """
        assert "RULE-1347" in all_results['results'], "Rule RULE-1347 missing"
        result = all_results['results']["RULE-1347"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1347 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1347 failed"


    def test_rule_1348(self, all_results):
        """
        Test RULE-1348: YAML field 'guard_algorithm.step_3' must equal 'Verify 24 module directories pre
        Priority: MEDIUM
        """
        assert "RULE-1348" in all_results['results'], "Rule RULE-1348 missing"
        result = all_results['results']["RULE-1348"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1348 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1348 failed"


    def test_rule_1349(self, all_results):
        """
        Test RULE-1349: YAML field 'guard_algorithm.step_4' must equal 'FAIL if any unlisted item found'
        Priority: MEDIUM
        """
        assert "RULE-1349" in all_results['results'], "Rule RULE-1349 missing"
        result = all_results['results']["RULE-1349"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1349 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1349 failed"


    def test_rule_1350(self, all_results):
        """
        Test RULE-1350: YAML field 'guard_algorithm.step_5' must equal 'Generate violation report for qu
        Priority: MEDIUM
        """
        assert "RULE-1350" in all_results['results'], "Rule RULE-1350 missing"
        result = all_results['results']["RULE-1350"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1350 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1350 failed"


    def test_rule_1351(self, all_results):
        """
        Test RULE-1351: YAML list 'modification_process.approval_required' must contain 3 elements
        Priority: CRITICAL
        """
        assert "RULE-1351" in all_results['results'], "Rule RULE-1351 missing"
        result = all_results['results']["RULE-1351"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1351 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1351 failed"


    def test_rule_1352(self, all_results):
        """
        Test RULE-1352: YAML list 'modification_process.documentation_required' must contain 4 elements
        Priority: CRITICAL
        """
        assert "RULE-1352" in all_results['results'], "Rule RULE-1352 missing"
        result = all_results['results']["RULE-1352"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1352 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1352 failed"


    def test_rule_1353(self, all_results):
        """
        Test RULE-1353: YAML field 'modification_process.change_procedure.step_1' must equal 'RFC (Reque
        Priority: MEDIUM
        """
        assert "RULE-1353" in all_results['results'], "Rule RULE-1353 missing"
        result = all_results['results']["RULE-1353"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1353 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1353 failed"


    def test_rule_1354(self, all_results):
        """
        Test RULE-1354: YAML field 'modification_process.change_procedure.step_2' must equal 'Multi-stak
        Priority: MEDIUM
        """
        assert "RULE-1354" in all_results['results'], "Rule RULE-1354 missing"
        result = all_results['results']["RULE-1354"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1354 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1354 failed"


    def test_rule_1355(self, all_results):
        """
        Test RULE-1355: YAML field 'modification_process.change_procedure.step_3' must equal 'Approval/r
        Priority: MEDIUM
        """
        assert "RULE-1355" in all_results['results'], "Rule RULE-1355 missing"
        result = all_results['results']["RULE-1355"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1355 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1355 failed"


    def test_rule_1356(self, all_results):
        """
        Test RULE-1356: YAML field 'modification_process.change_procedure.step_4' must equal 'If approve
        Priority: MEDIUM
        """
        assert "RULE-1356" in all_results['results'], "Rule RULE-1356 missing"
        result = all_results['results']["RULE-1356"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1356 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1356 failed"


    def test_rule_1357(self, all_results):
        """
        Test RULE-1357: YAML field 'modification_process.change_procedure.step_5' must equal 'Evidence l
        Priority: MEDIUM
        """
        assert "RULE-1357" in all_results['results'], "Rule RULE-1357 missing"
        result = all_results['results']["RULE-1357"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1357 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1357 failed"


    def test_rule_1358(self, all_results):
        """
        Test RULE-1358: YAML field 'anti_gaming_measures.no_wildcards' must equal 'No wildcard patterns 
        Priority: MEDIUM
        """
        assert "RULE-1358" in all_results['results'], "Rule RULE-1358 missing"
        result = all_results['results']["RULE-1358"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1358 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1358 failed"


    def test_rule_1359(self, all_results):
        """
        Test RULE-1359: YAML field 'anti_gaming_measures.no_regex' must equal 'No regex patterns allowed
        Priority: MEDIUM
        """
        assert "RULE-1359" in all_results['results'], "Rule RULE-1359 missing"
        result = all_results['results']["RULE-1359"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1359 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1359 failed"


    def test_rule_1360(self, all_results):
        """
        Test RULE-1360: YAML field 'anti_gaming_measures.explicit_enumeration' must equal 'Every allowed
        Priority: CRITICAL
        """
        assert "RULE-1360" in all_results['results'], "Rule RULE-1360 missing"
        result = all_results['results']["RULE-1360"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1360 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1360 failed"


    def test_rule_1361(self, all_results):
        """
        Test RULE-1361: YAML field 'anti_gaming_measures.case_sensitive' must equal 'Exact case matching
        Priority: MEDIUM
        """
        assert "RULE-1361" in all_results['results'], "Rule RULE-1361 missing"
        result = all_results['results']["RULE-1361"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1361 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1361 failed"


    def test_rule_1362(self, all_results):
        """
        Test RULE-1362: YAML field 'anti_gaming_measures.no_symlinks' must equal 'Symbolic links not all
        Priority: MEDIUM
        """
        assert "RULE-1362" in all_results['results'], "Rule RULE-1362 missing"
        result = all_results['results']["RULE-1362"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1362 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1362 failed"


    def test_rule_1363(self, all_results):
        """
        Test RULE-1363: YAML field 'anti_gaming_measures.no_hidden_directories' must equal 'Only explici
        Priority: MEDIUM
        """
        assert "RULE-1363" in all_results['results'], "Rule RULE-1363 missing"
        result = all_results['results']["RULE-1363"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1363 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1363 failed"


    def test_rule_1364(self, all_results):
        """
        Test RULE-1364: YAML field 'integration_points.structure_guard' must equal '12_tooling/scripts/s
        Priority: MEDIUM
        """
        assert "RULE-1364" in all_results['results'], "Rule RULE-1364 missing"
        result = all_results['results']["RULE-1364"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1364 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1364 failed"


    def test_rule_1365(self, all_results):
        """
        Test RULE-1365: YAML field 'integration_points.ci_gates' must equal '24_meta_orchestration/trigg
        Priority: MEDIUM
        """
        assert "RULE-1365" in all_results['results'], "Rule RULE-1365 missing"
        result = all_results['results']["RULE-1365"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1365 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1365 failed"


    def test_rule_1366(self, all_results):
        """
        Test RULE-1366: YAML field 'integration_points.quarantine_system' must equal '02_audit_logging/q
        Priority: MEDIUM
        """
        assert "RULE-1366" in all_results['results'], "Rule RULE-1366 missing"
        result = all_results['results']["RULE-1366"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1366 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1366 failed"


    def test_rule_1367(self, all_results):
        """
        Test RULE-1367: YAML field 'integration_points.compliance_policies' must equal '23_compliance/po
        Priority: CRITICAL
        """
        assert "RULE-1367" in all_results['results'], "Rule RULE-1367 missing"
        result = all_results['results']["RULE-1367"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1367 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1367 failed"


    def test_rule_1368(self, all_results):
        """
        Test RULE-1368: YAML field 'audit_requirements.change_log' must equal 'All modifications logged 
        Priority: MEDIUM
        """
        assert "RULE-1368" in all_results['results'], "Rule RULE-1368 missing"
        result = all_results['results']["RULE-1368"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1368 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1368 failed"


    def test_rule_1369(self, all_results):
        """
        Test RULE-1369: YAML field 'audit_requirements.review_cycle' must equal 'Quarterly review of exc
        Priority: MEDIUM
        """
        assert "RULE-1369" in all_results['results'], "Rule RULE-1369 missing"
        result = all_results['results']["RULE-1369"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1369 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1369 failed"


    def test_rule_1370(self, all_results):
        """
        Test RULE-1370: YAML field 'audit_requirements.justification_retention' must equal '7 years mini
        Priority: MEDIUM
        """
        assert "RULE-1370" in all_results['results'], "Rule RULE-1370 missing"
        result = all_results['results']["RULE-1370"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1370 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1370 failed"


    def test_rule_1371(self, all_results):
        """
        Test RULE-1371: YAML field 'audit_requirements.approval_trail' must equal 'Immutable approval do
        Priority: MEDIUM
        """
        assert "RULE-1371" in all_results['results'], "Rule RULE-1371 missing"
        result = all_results['results']["RULE-1371"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1371 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1371 failed"


    def test_rule_1372(self, all_results):
        """
        Test RULE-1372: YAML line: version: "1.0"
        Priority: MEDIUM
        """
        assert "RULE-1372" in all_results['results'], "Rule RULE-1372 missing"
        result = all_results['results']["RULE-1372"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1372 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1372 failed"


    def test_rule_1373(self, all_results):
        """
        Test RULE-1373: YAML line: date: "2025-09-15"
        Priority: MEDIUM
        """
        assert "RULE-1373" in all_results['results'], "Rule RULE-1373 missing"
        result = all_results['results']["RULE-1373"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1373 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1373 failed"


    def test_rule_1374(self, all_results):
        """
        Test RULE-1374: YAML line: deprecated: false
        Priority: MEDIUM
        """
        assert "RULE-1374" in all_results['results'], "Rule RULE-1374 missing"
        result = all_results['results']["RULE-1374"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1374 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1374 failed"


    def test_rule_1375(self, all_results):
        """
        Test RULE-1375: YAML line: classification: "PUBLIC - CI Guard Enforcement"
        Priority: MEDIUM
        """
        assert "RULE-1375" in all_results['results'], "Rule RULE-1375 missing"
        result = all_results['results']["RULE-1375"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1375 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1375 failed"


    def test_rule_1376(self, all_results):
        """
        Test RULE-1376: YAML line: root_level_exceptions:
        Priority: MEDIUM
        """
        assert "RULE-1376" in all_results['results'], "Rule RULE-1376 missing"
        result = all_results['results']["RULE-1376"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1376 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1376 failed"


    def test_rule_1377(self, all_results):
        """
        Test RULE-1377: YAML line: description: "EINMALIGE, autoritäre Liste aller erlaubten Root-Level 
        Priority: MEDIUM
        """
        assert "RULE-1377" in all_results['results'], "Rule RULE-1377 missing"
        result = all_results['results']["RULE-1377"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1377 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1377 failed"


    def test_rule_1378(self, all_results):
        """
        Test RULE-1378: YAML line: enforcement: "CI-Guard mit Exit Code 24 bei Violation"
        Priority: MEDIUM
        """
        assert "RULE-1378" in all_results['results'], "Rule RULE-1378 missing"
        result = all_results['results']["RULE-1378"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1378 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1378 failed"


    def test_rule_1379(self, all_results):
        """
        Test RULE-1379: YAML line: modification_policy: "Nur durch Compliance Committee + Technical Lead
        Priority: CRITICAL
        """
        assert "RULE-1379" in all_results['results'], "Rule RULE-1379 missing"
        result = all_results['results']["RULE-1379"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1379 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1379 failed"


    def test_rule_1380(self, all_results):
        """
        Test RULE-1380: YAML line: allowed_directories:
        Priority: MEDIUM
        """
        assert "RULE-1380" in all_results['results'], "Rule RULE-1380 missing"
        result = all_results['results']["RULE-1380"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1380 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1380 failed"


    def test_rule_1381(self, all_results):
        """
        Test RULE-1381: YAML line: git_infrastructure:
        Priority: MEDIUM
        """
        assert "RULE-1381" in all_results['results'], "Rule RULE-1381 missing"
        result = all_results['results']["RULE-1381"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1381 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1381 failed"


    def test_rule_1382(self, all_results):
        """
        Test RULE-1382: YAML line: - ".git"           # Git repository metadata
        Priority: MEDIUM
        """
        assert "RULE-1382" in all_results['results'], "Rule RULE-1382 missing"
        result = all_results['results']["RULE-1382"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1382 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1382 failed"


    def test_rule_1383(self, all_results):
        """
        Test RULE-1383: YAML line: - ".github"        # GitHub workflows and templates
        Priority: MEDIUM
        """
        assert "RULE-1383" in all_results['results'], "Rule RULE-1383 missing"
        result = all_results['results']["RULE-1383"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1383 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1383 failed"


    def test_rule_1384(self, all_results):
        """
        Test RULE-1384: YAML line: - ".githooks"      # Git hooks directory
        Priority: MEDIUM
        """
        assert "RULE-1384" in all_results['results'], "Rule RULE-1384 missing"
        result = all_results['results']["RULE-1384"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1384 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1384 failed"


    def test_rule_1385(self, all_results):
        """
        Test RULE-1385: YAML line: development_environment:
        Priority: MEDIUM
        """
        assert "RULE-1385" in all_results['results'], "Rule RULE-1385 missing"
        result = all_results['results']["RULE-1385"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1385 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1385 failed"


    def test_rule_1386(self, all_results):
        """
        Test RULE-1386: YAML line: - ".venv"          # Python virtual environment
        Priority: MEDIUM
        """
        assert "RULE-1386" in all_results['results'], "Rule RULE-1386 missing"
        result = all_results['results']["RULE-1386"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1386 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1386 failed"


    def test_rule_1387(self, all_results):
        """
        Test RULE-1387: YAML line: - ".continue"      # Continue.dev AI coding assistant
        Priority: MEDIUM
        """
        assert "RULE-1387" in all_results['results'], "Rule RULE-1387 missing"
        result = all_results['results']["RULE-1387"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1387 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1387 failed"


    def test_rule_1388(self, all_results):
        """
        Test RULE-1388: YAML line: testing_artifacts:
        Priority: MEDIUM
        """
        assert "RULE-1388" in all_results['results'], "Rule RULE-1388 missing"
        result = all_results['results']["RULE-1388"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1388 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1388 failed"


    def test_rule_1389(self, all_results):
        """
        Test RULE-1389: YAML line: - ".pytest_cache"  # Pytest cache directory
        Priority: MEDIUM
        """
        assert "RULE-1389" in all_results['results'], "Rule RULE-1389 missing"
        result = all_results['results']["RULE-1389"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1389 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1389 failed"


    def test_rule_1390(self, all_results):
        """
        Test RULE-1390: YAML line: excluded_directories: []  # NO additional directories allowed
        Priority: MEDIUM
        """
        assert "RULE-1390" in all_results['results'], "Rule RULE-1390 missing"
        result = all_results['results']["RULE-1390"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1390 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1390 failed"


    def test_rule_1391(self, all_results):
        """
        Test RULE-1391: YAML line: allowed_files:
        Priority: MEDIUM
        """
        assert "RULE-1391" in all_results['results'], "Rule RULE-1391 missing"
        result = all_results['results']["RULE-1391"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1391 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1391 failed"


    def test_rule_1392(self, all_results):
        """
        Test RULE-1392: YAML line: version_control:
        Priority: MEDIUM
        """
        assert "RULE-1392" in all_results['results'], "Rule RULE-1392 missing"
        result = all_results['results']["RULE-1392"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1392 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1392 failed"


    def test_rule_1393(self, all_results):
        """
        Test RULE-1393: YAML line: - ".gitattributes" # Git file attributes
        Priority: MEDIUM
        """
        assert "RULE-1393" in all_results['results'], "Rule RULE-1393 missing"
        result = all_results['results']["RULE-1393"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1393 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1393 failed"


    def test_rule_1394(self, all_results):
        """
        Test RULE-1394: YAML line: - ".gitignore"     # Git ignore patterns
        Priority: MEDIUM
        """
        assert "RULE-1394" in all_results['results'], "Rule RULE-1394 missing"
        result = all_results['results']["RULE-1394"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1394 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1394 failed"


    def test_rule_1395(self, all_results):
        """
        Test RULE-1395: YAML line: - ".gitmodules"    # Git submodules configuration
        Priority: MEDIUM
        """
        assert "RULE-1395" in all_results['results'], "Rule RULE-1395 missing"
        result = all_results['results']["RULE-1395"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1395 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1395 failed"


    def test_rule_1396(self, all_results):
        """
        Test RULE-1396: YAML line: project_metadata:
        Priority: MEDIUM
        """
        assert "RULE-1396" in all_results['results'], "Rule RULE-1396 missing"
        result = all_results['results']["RULE-1396"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1396 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1396 failed"


    def test_rule_1397(self, all_results):
        """
        Test RULE-1397: YAML line: - "LICENSE"        # Project license file
        Priority: MEDIUM
        """
        assert "RULE-1397" in all_results['results'], "Rule RULE-1397 missing"
        result = all_results['results']["RULE-1397"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1397 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1397 failed"


    def test_rule_1398(self, all_results):
        """
        Test RULE-1398: YAML line: - "README.md"      # Project overview and documentation
        Priority: MEDIUM
        """
        assert "RULE-1398" in all_results['results'], "Rule RULE-1398 missing"
        result = all_results['results']["RULE-1398"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1398 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1398 failed"


    def test_rule_1399(self, all_results):
        """
        Test RULE-1399: YAML line: testing_configuration:
        Priority: MEDIUM
        """
        assert "RULE-1399" in all_results['results'], "Rule RULE-1399 missing"
        result = all_results['results']["RULE-1399"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1399 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1399 failed"


    def test_rule_1400(self, all_results):
        """
        Test RULE-1400: YAML line: - "pytest.ini"     # Pytest configuration
        Priority: MEDIUM
        """
        assert "RULE-1400" in all_results['results'], "Rule RULE-1400 missing"
        result = all_results['results']["RULE-1400"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1400 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1400 failed"


    def test_rule_1401(self, all_results):
        """
        Test RULE-1401: YAML line: excluded_files: []   # NO additional files allowed
        Priority: MEDIUM
        """
        assert "RULE-1401" in all_results['results'], "Rule RULE-1401 missing"
        result = all_results['results']["RULE-1401"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1401 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1401 failed"


    def test_rule_1402(self, all_results):
        """
        Test RULE-1402: YAML line: guard_enforcement:
        Priority: MEDIUM
        """
        assert "RULE-1402" in all_results['results'], "Rule RULE-1402 missing"
        result = all_results['results']["RULE-1402"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1402 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1402 failed"


    def test_rule_1403(self, all_results):
        """
        Test RULE-1403: YAML line: ci_script: "12_tooling/scripts/structure_guard.sh"
        Priority: MEDIUM
        """
        assert "RULE-1403" in all_results['results'], "Rule RULE-1403 missing"
        result = all_results['results']["RULE-1403"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1403 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1403 failed"


    def test_rule_1404(self, all_results):
        """
        Test RULE-1404: YAML line: validation_function: "validate_root_exceptions"
        Priority: MEDIUM
        """
        assert "RULE-1404" in all_results['results'], "Rule RULE-1404 missing"
        result = all_results['results']["RULE-1404"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1404 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1404 failed"


    def test_rule_1405(self, all_results):
        """
        Test RULE-1405: YAML line: enforcement_level: "STRICT - Zero tolerance for unlisted items"
        Priority: MEDIUM
        """
        assert "RULE-1405" in all_results['results'], "Rule RULE-1405 missing"
        result = all_results['results']["RULE-1405"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1405 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1405 failed"


    def test_rule_1406(self, all_results):
        """
        Test RULE-1406: YAML line: bypass_mechanism: "NONE - No override capability"
        Priority: MEDIUM
        """
        assert "RULE-1406" in all_results['results'], "Rule RULE-1406 missing"
        result = all_results['results']["RULE-1406"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1406 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1406 failed"


    def test_rule_1407(self, all_results):
        """
        Test RULE-1407: YAML line: violation_handling:
        Priority: MEDIUM
        """
        assert "RULE-1407" in all_results['results'], "Rule RULE-1407 missing"
        result = all_results['results']["RULE-1407"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1407 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1407 failed"


    def test_rule_1408(self, all_results):
        """
        Test RULE-1408: YAML line: immediate_failure: true
        Priority: MEDIUM
        """
        assert "RULE-1408" in all_results['results'], "Rule RULE-1408 missing"
        result = all_results['results']["RULE-1408"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1408 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1408 failed"


    def test_rule_1409(self, all_results):
        """
        Test RULE-1409: YAML line: exit_code: 24
        Priority: MEDIUM
        """
        assert "RULE-1409" in all_results['results'], "Rule RULE-1409 missing"
        result = all_results['results']["RULE-1409"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1409 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1409 failed"


    def test_rule_1410(self, all_results):
        """
        Test RULE-1410: YAML line: quarantine_trigger: true
        Priority: MEDIUM
        """
        assert "RULE-1410" in all_results['results'], "Rule RULE-1410 missing"
        result = all_results['results']["RULE-1410"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1410 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1410 failed"


    def test_rule_1411(self, all_results):
        """
        Test RULE-1411: YAML line: escalation: "Compliance Committee notification"
        Priority: CRITICAL
        """
        assert "RULE-1411" in all_results['results'], "Rule RULE-1411 missing"
        result = all_results['results']["RULE-1411"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1411 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1411 failed"


    def test_rule_1412(self, all_results):
        """
        Test RULE-1412: YAML line: guard_algorithm:
        Priority: MEDIUM
        """
        assert "RULE-1412" in all_results['results'], "Rule RULE-1412 missing"
        result = all_results['results']["RULE-1412"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1412 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1412 failed"


    def test_rule_1413(self, all_results):
        """
        Test RULE-1413: YAML line: step_1: "Scan root directory for all items"
        Priority: MEDIUM
        """
        assert "RULE-1413" in all_results['results'], "Rule RULE-1413 missing"
        result = all_results['results']["RULE-1413"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1413 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1413 failed"


    def test_rule_1414(self, all_results):
        """
        Test RULE-1414: YAML line: step_2: "Compare against allowed_directories + allowed_files"
        Priority: MEDIUM
        """
        assert "RULE-1414" in all_results['results'], "Rule RULE-1414 missing"
        result = all_results['results']["RULE-1414"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1414 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1414 failed"


    def test_rule_1415(self, all_results):
        """
        Test RULE-1415: YAML line: step_3: "Verify 24 module directories present"
        Priority: MEDIUM
        """
        assert "RULE-1415" in all_results['results'], "Rule RULE-1415 missing"
        result = all_results['results']["RULE-1415"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1415 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1415 failed"


    def test_rule_1416(self, all_results):
        """
        Test RULE-1416: YAML line: step_4: "FAIL if any unlisted item found"
        Priority: MEDIUM
        """
        assert "RULE-1416" in all_results['results'], "Rule RULE-1416 missing"
        result = all_results['results']["RULE-1416"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1416 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1416 failed"


    def test_rule_1417(self, all_results):
        """
        Test RULE-1417: YAML line: step_5: "Generate violation report for quarantine system"
        Priority: MEDIUM
        """
        assert "RULE-1417" in all_results['results'], "Rule RULE-1417 missing"
        result = all_results['results']["RULE-1417"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1417 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1417 failed"


    def test_rule_1418(self, all_results):
        """
        Test RULE-1418: YAML line: modification_process:
        Priority: MEDIUM
        """
        assert "RULE-1418" in all_results['results'], "Rule RULE-1418 missing"
        result = all_results['results']["RULE-1418"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1418 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1418 failed"


    def test_rule_1419(self, all_results):
        """
        Test RULE-1419: YAML line: approval_required:
        Priority: CRITICAL
        """
        assert "RULE-1419" in all_results['results'], "Rule RULE-1419 missing"
        result = all_results['results']["RULE-1419"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1419 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1419 failed"


    def test_rule_1420(self, all_results):
        """
        Test RULE-1420: YAML line: - "Senior Compliance Officer"
        Priority: CRITICAL
        """
        assert "RULE-1420" in all_results['results'], "Rule RULE-1420 missing"
        result = all_results['results']["RULE-1420"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1420 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1420 failed"


    def test_rule_1421(self, all_results):
        """
        Test RULE-1421: YAML line: - "Technical Lead"
        Priority: MEDIUM
        """
        assert "RULE-1421" in all_results['results'], "Rule RULE-1421 missing"
        result = all_results['results']["RULE-1421"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1421 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1421 failed"


    def test_rule_1422(self, all_results):
        """
        Test RULE-1422: YAML line: - "Legal Review (for licensing implications)"
        Priority: CRITICAL
        """
        assert "RULE-1422" in all_results['results'], "Rule RULE-1422 missing"
        result = all_results['results']["RULE-1422"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1422 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1422 failed"


    def test_rule_1423(self, all_results):
        """
        Test RULE-1423: YAML line: documentation_required:
        Priority: CRITICAL
        """
        assert "RULE-1423" in all_results['results'], "Rule RULE-1423 missing"
        result = all_results['results']["RULE-1423"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1423 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1423 failed"


    def test_rule_1424(self, all_results):
        """
        Test RULE-1424: YAML line: - "Business justification"
        Priority: MEDIUM
        """
        assert "RULE-1424" in all_results['results'], "Rule RULE-1424 missing"
        result = all_results['results']["RULE-1424"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1424 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1424 failed"


    def test_rule_1425(self, all_results):
        """
        Test RULE-1425: YAML line: - "Security impact assessment"
        Priority: CRITICAL
        """
        assert "RULE-1425" in all_results['results'], "Rule RULE-1425 missing"
        result = all_results['results']["RULE-1425"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1425 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1425 failed"


    def test_rule_1426(self, all_results):
        """
        Test RULE-1426: YAML line: - "CI/CD impact analysis"
        Priority: MEDIUM
        """
        assert "RULE-1426" in all_results['results'], "Rule RULE-1426 missing"
        result = all_results['results']["RULE-1426"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1426 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1426 failed"


    def test_rule_1427(self, all_results):
        """
        Test RULE-1427: YAML line: - "Audit trail documentation"
        Priority: MEDIUM
        """
        assert "RULE-1427" in all_results['results'], "Rule RULE-1427 missing"
        result = all_results['results']["RULE-1427"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1427 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1427 failed"


    def test_rule_1428(self, all_results):
        """
        Test RULE-1428: YAML line: change_procedure:
        Priority: MEDIUM
        """
        assert "RULE-1428" in all_results['results'], "Rule RULE-1428 missing"
        result = all_results['results']["RULE-1428"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1428 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1428 failed"


    def test_rule_1429(self, all_results):
        """
        Test RULE-1429: YAML line: step_1: "RFC (Request for Change) submission"
        Priority: MEDIUM
        """
        assert "RULE-1429" in all_results['results'], "Rule RULE-1429 missing"
        result = all_results['results']["RULE-1429"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1429 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1429 failed"


    def test_rule_1430(self, all_results):
        """
        Test RULE-1430: YAML line: step_2: "Multi-stakeholder review (5 business days)"
        Priority: MEDIUM
        """
        assert "RULE-1430" in all_results['results'], "Rule RULE-1430 missing"
        result = all_results['results']["RULE-1430"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1430 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1430 failed"


    def test_rule_1431(self, all_results):
        """
        Test RULE-1431: YAML line: step_3: "Approval/rejection decision"
        Priority: MEDIUM
        """
        assert "RULE-1431" in all_results['results'], "Rule RULE-1431 missing"
        result = all_results['results']["RULE-1431"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1431 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1431 failed"


    def test_rule_1432(self, all_results):
        """
        Test RULE-1432: YAML line: step_4: "If approved: Update YAML + CI tests"
        Priority: MEDIUM
        """
        assert "RULE-1432" in all_results['results'], "Rule RULE-1432 missing"
        result = all_results['results']["RULE-1432"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1432 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1432 failed"


    def test_rule_1433(self, all_results):
        """
        Test RULE-1433: YAML line: step_5: "Evidence logging in audit trail"
        Priority: MEDIUM
        """
        assert "RULE-1433" in all_results['results'], "Rule RULE-1433 missing"
        result = all_results['results']["RULE-1433"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1433 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1433 failed"


    def test_rule_1434(self, all_results):
        """
        Test RULE-1434: YAML line: anti_gaming_measures:
        Priority: MEDIUM
        """
        assert "RULE-1434" in all_results['results'], "Rule RULE-1434 missing"
        result = all_results['results']["RULE-1434"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1434 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1434 failed"


    def test_rule_1435(self, all_results):
        """
        Test RULE-1435: YAML line: no_wildcards: "No wildcard patterns allowed"
        Priority: MEDIUM
        """
        assert "RULE-1435" in all_results['results'], "Rule RULE-1435 missing"
        result = all_results['results']["RULE-1435"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1435 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1435 failed"


    def test_rule_1436(self, all_results):
        """
        Test RULE-1436: YAML line: no_regex: "No regex patterns allowed"
        Priority: MEDIUM
        """
        assert "RULE-1436" in all_results['results'], "Rule RULE-1436 missing"
        result = all_results['results']["RULE-1436"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1436 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1436 failed"


    def test_rule_1437(self, all_results):
        """
        Test RULE-1437: YAML line: explicit_enumeration: "Every allowed item must be explicitly listed"
        Priority: CRITICAL
        """
        assert "RULE-1437" in all_results['results'], "Rule RULE-1437 missing"
        result = all_results['results']["RULE-1437"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1437 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1437 failed"


    def test_rule_1438(self, all_results):
        """
        Test RULE-1438: YAML line: case_sensitive: "Exact case matching required"
        Priority: CRITICAL
        """
        assert "RULE-1438" in all_results['results'], "Rule RULE-1438 missing"
        result = all_results['results']["RULE-1438"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1438 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1438 failed"


    def test_rule_1439(self, all_results):
        """
        Test RULE-1439: YAML line: no_symlinks: "Symbolic links not allowed"
        Priority: MEDIUM
        """
        assert "RULE-1439" in all_results['results'], "Rule RULE-1439 missing"
        result = all_results['results']["RULE-1439"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1439 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1439 failed"


    def test_rule_1440(self, all_results):
        """
        Test RULE-1440: YAML line: no_hidden_directories: "Only explicitly listed hidden directories all
        Priority: MEDIUM
        """
        assert "RULE-1440" in all_results['results'], "Rule RULE-1440 missing"
        result = all_results['results']["RULE-1440"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1440 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1440 failed"


    def test_rule_1441(self, all_results):
        """
        Test RULE-1441: YAML line: integration_points:
        Priority: MEDIUM
        """
        assert "RULE-1441" in all_results['results'], "Rule RULE-1441 missing"
        result = all_results['results']["RULE-1441"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1441 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1441 failed"


    def test_rule_1442(self, all_results):
        """
        Test RULE-1442: YAML line: structure_guard: "12_tooling/scripts/structure_guard.sh"
        Priority: MEDIUM
        """
        assert "RULE-1442" in all_results['results'], "Rule RULE-1442 missing"
        result = all_results['results']["RULE-1442"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1442 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1442 failed"


    def test_rule_1443(self, all_results):
        """
        Test RULE-1443: YAML line: ci_gates: "24_meta_orchestration/triggers/ci/gates/structure_lock_l3.
        Priority: MEDIUM
        """
        assert "RULE-1443" in all_results['results'], "Rule RULE-1443 missing"
        result = all_results['results']["RULE-1443"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1443 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1443 failed"


    def test_rule_1444(self, all_results):
        """
        Test RULE-1444: YAML line: quarantine_system: "02_audit_logging/quarantine/singleton/quarantine_
        Priority: MEDIUM
        """
        assert "RULE-1444" in all_results['results'], "Rule RULE-1444 missing"
        result = all_results['results']["RULE-1444"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1444 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1444 failed"


    def test_rule_1445(self, all_results):
        """
        Test RULE-1445: YAML line: compliance_policies: "23_compliance/policies/structure_policy.yaml"
        Priority: CRITICAL
        """
        assert "RULE-1445" in all_results['results'], "Rule RULE-1445 missing"
        result = all_results['results']["RULE-1445"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1445 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1445 failed"


    def test_rule_1446(self, all_results):
        """
        Test RULE-1446: YAML line: audit_requirements:
        Priority: MEDIUM
        """
        assert "RULE-1446" in all_results['results'], "Rule RULE-1446 missing"
        result = all_results['results']["RULE-1446"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1446 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1446 failed"


    def test_rule_1447(self, all_results):
        """
        Test RULE-1447: YAML line: change_log: "All modifications logged in 02_audit_logging/storage/wor
        Priority: MEDIUM
        """
        assert "RULE-1447" in all_results['results'], "Rule RULE-1447 missing"
        result = all_results['results']["RULE-1447"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1447 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1447 failed"


    def test_rule_1448(self, all_results):
        """
        Test RULE-1448: YAML line: review_cycle: "Quarterly review of exceptions list"
        Priority: MEDIUM
        """
        assert "RULE-1448" in all_results['results'], "Rule RULE-1448 missing"
        result = all_results['results']["RULE-1448"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1448 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1448 failed"


    def test_rule_1449(self, all_results):
        """
        Test RULE-1449: YAML line: justification_retention: "7 years minimum"
        Priority: MEDIUM
        """
        assert "RULE-1449" in all_results['results'], "Rule RULE-1449 missing"
        result = all_results['results']["RULE-1449"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1449 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1449 failed"


    def test_rule_1450(self, all_results):
        """
        Test RULE-1450: YAML line: approval_trail: "Immutable approval documentation required"
        Priority: CRITICAL
        """
        assert "RULE-1450" in all_results['results'], "Rule RULE-1450 missing"
        result = all_results['results']["RULE-1450"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1450 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1450 failed"


    def test_rule_1451(self, all_results):
        """
        Test RULE-1451: YAML field 'version' must equal '1.0'
        Priority: HIGH
        """
        assert "RULE-1451" in all_results['results'], "Rule RULE-1451 missing"
        result = all_results['results']["RULE-1451"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "HIGH" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1451 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1451 failed"


    def test_rule_1452(self, all_results):
        """
        Test RULE-1452: YAML field 'date' must equal '2025-09-15'
        Priority: MEDIUM
        """
        assert "RULE-1452" in all_results['results'], "Rule RULE-1452 missing"
        result = all_results['results']["RULE-1452"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1452 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1452 failed"


    def test_rule_1453(self, all_results):
        """
        Test RULE-1453: YAML field 'deprecated' must equal 'False'
        Priority: CRITICAL
        """
        assert "RULE-1453" in all_results['results'], "Rule RULE-1453 missing"
        result = all_results['results']["RULE-1453"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1453 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1453 failed"


    def test_rule_1454(self, all_results):
        """
        Test RULE-1454: YAML field 'classification' must equal 'CONFIDENTIAL - Internal Use Only'
        Priority: MEDIUM
        """
        assert "RULE-1454" in all_results['results'], "Rule RULE-1454 missing"
        result = all_results['results']["RULE-1454"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1454 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1454 failed"


    def test_rule_1455(self, all_results):
        """
        Test RULE-1455: YAML list 'maintainer_structure.primary_maintainers' must contain 2 elements
        Priority: CRITICAL
        """
        assert "RULE-1455" in all_results['results'], "Rule RULE-1455 missing"
        result = all_results['results']["RULE-1455"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1455 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1455 failed"


    def test_rule_1456(self, all_results):
        """
        Test RULE-1456: YAML field 'maintainer_structure.backup_escalation.level_1' must equal 'Security
        Priority: CRITICAL
        """
        assert "RULE-1456" in all_results['results'], "Rule RULE-1456 missing"
        result = all_results['results']["RULE-1456"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1456 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1456 failed"


    def test_rule_1457(self, all_results):
        """
        Test RULE-1457: YAML field 'maintainer_structure.backup_escalation.level_2' must equal 'CTO'
        Priority: MEDIUM
        """
        assert "RULE-1457" in all_results['results'], "Rule RULE-1457 missing"
        result = all_results['results']["RULE-1457"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1457 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1457 failed"


    def test_rule_1458(self, all_results):
        """
        Test RULE-1458: YAML field 'maintainer_structure.backup_escalation.level_3' must equal 'CEO'
        Priority: MEDIUM
        """
        assert "RULE-1458" in all_results['results'], "Rule RULE-1458 missing"
        result = all_results['results']["RULE-1458"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1458 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1458 failed"


    def test_rule_1459(self, all_results):
        """
        Test RULE-1459: YAML field 'maintainer_structure.backup_escalation.level_4' must equal 'Board Co
        Priority: CRITICAL
        """
        assert "RULE-1459" in all_results['results'], "Rule RULE-1459 missing"
        result = all_results['results']["RULE-1459"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1459 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1459 failed"


    def test_rule_1460(self, all_results):
        """
        Test RULE-1460: YAML field 'maintainer_structure.backup_escalation.emergency_contact' must equal
        Priority: CRITICAL
        """
        assert "RULE-1460" in all_results['results'], "Rule RULE-1460 missing"
        result = all_results['results']["RULE-1460"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1460 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1460 failed"


    def test_rule_1461(self, all_results):
        """
        Test RULE-1461: YAML field 'maintainer_structure.backup_escalation.external_counsel' must equal 
        Priority: CRITICAL
        """
        assert "RULE-1461" in all_results['results'], "Rule RULE-1461 missing"
        result = all_results['results']["RULE-1461"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1461 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1461 failed"


    def test_rule_1462(self, all_results):
        """
        Test RULE-1462: YAML field 'maintainer_structure.internal_review_maintainers.monthly_reviewer' m
        Priority: CRITICAL
        """
        assert "RULE-1462" in all_results['results'], "Rule RULE-1462 missing"
        result = all_results['results']["RULE-1462"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1462 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1462 failed"


    def test_rule_1463(self, all_results):
        """
        Test RULE-1463: YAML field 'maintainer_structure.internal_review_maintainers.quarterly_reviewer'
        Priority: CRITICAL
        """
        assert "RULE-1463" in all_results['results'], "Rule RULE-1463 missing"
        result = all_results['results']["RULE-1463"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1463 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1463 failed"


    def test_rule_1464(self, all_results):
        """
        Test RULE-1464: YAML field 'maintainer_structure.internal_review_maintainers.semi_annual_reviewe
        Priority: CRITICAL
        """
        assert "RULE-1464" in all_results['results'], "Rule RULE-1464 missing"
        result = all_results['results']["RULE-1464"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1464 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1464 failed"


    def test_rule_1465(self, all_results):
        """
        Test RULE-1465: YAML list 'maintainer_structure.external_reviewer_pool' must contain 3 elements
        Priority: CRITICAL
        """
        assert "RULE-1465" in all_results['results'], "Rule RULE-1465 missing"
        result = all_results['results']["RULE-1465"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1465 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1465 failed"


    def test_rule_1466(self, all_results):
        """
        Test RULE-1466: YAML field 'maintainer_structure.review_coordinator' must equal 'Maria Schmidt'
        Priority: MEDIUM
        """
        assert "RULE-1466" in all_results['results'], "Rule RULE-1466 missing"
        result = all_results['results']["RULE-1466"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1466 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1466 failed"


    def test_rule_1467(self, all_results):
        """
        Test RULE-1467: YAML field 'maintainer_structure.backup_coordinator' must equal 'Thomas Klein'
        Priority: MEDIUM
        """
        assert "RULE-1467" in all_results['results'], "Rule RULE-1467 missing"
        result = all_results['results']["RULE-1467"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1467 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1467 failed"


    def test_rule_1468(self, all_results):
        """
        Test RULE-1468: YAML field 'maintainer_structure.vacation_coverage.minimum_coverage' must equal 
        Priority: MEDIUM
        """
        assert "RULE-1468" in all_results['results'], "Rule RULE-1468 missing"
        result = all_results['results']["RULE-1468"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1468 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1468 failed"


    def test_rule_1469(self, all_results):
        """
        Test RULE-1469: YAML field 'maintainer_structure.vacation_coverage.notification_period' must equ
        Priority: MEDIUM
        """
        assert "RULE-1469" in all_results['results'], "Rule RULE-1469 missing"
        result = all_results['results']["RULE-1469"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1469 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1469 failed"


    def test_rule_1470(self, all_results):
        """
        Test RULE-1470: YAML field 'maintainer_structure.vacation_coverage.handover_required' must equal
        Priority: CRITICAL
        """
        assert "RULE-1470" in all_results['results'], "Rule RULE-1470 missing"
        result = all_results['results']["RULE-1470"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1470 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1470 failed"


    def test_rule_1471(self, all_results):
        """
        Test RULE-1471: YAML field 'maintainer_structure.vacation_coverage.documentation' must equal '23
        Priority: CRITICAL
        """
        assert "RULE-1471" in all_results['results'], "Rule RULE-1471 missing"
        result = all_results['results']["RULE-1471"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1471 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1471 failed"


    def test_rule_1472(self, all_results):
        """
        Test RULE-1472: YAML field 'maintainer_structure.vacation_coverage.business_continuity' must equ
        Priority: CRITICAL
        """
        assert "RULE-1472" in all_results['results'], "Rule RULE-1472 missing"
        result = all_results['results']["RULE-1472"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1472 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1472 failed"


    def test_rule_1473(self, all_results):
        """
        Test RULE-1473: YAML line: version: "1.0"
        Priority: MEDIUM
        """
        assert "RULE-1473" in all_results['results'], "Rule RULE-1473 missing"
        result = all_results['results']["RULE-1473"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1473 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1473 failed"


    def test_rule_1474(self, all_results):
        """
        Test RULE-1474: YAML line: date: "2025-09-15"
        Priority: MEDIUM
        """
        assert "RULE-1474" in all_results['results'], "Rule RULE-1474 missing"
        result = all_results['results']["RULE-1474"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1474 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1474 failed"


    def test_rule_1475(self, all_results):
        """
        Test RULE-1475: YAML line: deprecated: false
        Priority: MEDIUM
        """
        assert "RULE-1475" in all_results['results'], "Rule RULE-1475 missing"
        result = all_results['results']["RULE-1475"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1475 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1475 failed"


    def test_rule_1476(self, all_results):
        """
        Test RULE-1476: YAML line: classification: "CONFIDENTIAL - Internal Use Only"
        Priority: MEDIUM
        """
        assert "RULE-1476" in all_results['results'], "Rule RULE-1476 missing"
        result = all_results['results']["RULE-1476"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1476 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1476 failed"


    def test_rule_1477(self, all_results):
        """
        Test RULE-1477: YAML line: maintainer_structure:
        Priority: MEDIUM
        """
        assert "RULE-1477" in all_results['results'], "Rule RULE-1477 missing"
        result = all_results['results']["RULE-1477"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1477 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1477 failed"


    def test_rule_1478(self, all_results):
        """
        Test RULE-1478: YAML line: primary_maintainers:
        Priority: MEDIUM
        """
        assert "RULE-1478" in all_results['results'], "Rule RULE-1478 missing"
        result = all_results['results']["RULE-1478"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1478 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1478 failed"


    def test_rule_1479(self, all_results):
        """
        Test RULE-1479: YAML line: - name: "Hans Müller"
        Priority: MEDIUM
        """
        assert "RULE-1479" in all_results['results'], "Rule RULE-1479 missing"
        result = all_results['results']["RULE-1479"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1479 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1479 failed"


    def test_rule_1480(self, all_results):
        """
        Test RULE-1480: YAML line: role: "Lead Compliance Officer"
        Priority: CRITICAL
        """
        assert "RULE-1480" in all_results['results'], "Rule RULE-1480 missing"
        result = all_results['results']["RULE-1480"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1480 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1480 failed"


    def test_rule_1481(self, all_results):
        """
        Test RULE-1481: YAML line: email: "hans.mueller@ssid.company"
        Priority: MEDIUM
        """
        assert "RULE-1481" in all_results['results'], "Rule RULE-1481 missing"
        result = all_results['results']["RULE-1481"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1481 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1481 failed"


    def test_rule_1482(self, all_results):
        """
        Test RULE-1482: YAML line: backup: "Maria Schmidt"
        Priority: MEDIUM
        """
        assert "RULE-1482" in all_results['results'], "Rule RULE-1482 missing"
        result = all_results['results']["RULE-1482"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1482 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1482 failed"


    def test_rule_1483(self, all_results):
        """
        Test RULE-1483: YAML line: areas: ["compliance_matrices", "regulatory_updates", "eu_mappings"]
        Priority: CRITICAL
        """
        assert "RULE-1483" in all_results['results'], "Rule RULE-1483 missing"
        result = all_results['results']["RULE-1483"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1483 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1483 failed"


    def test_rule_1484(self, all_results):
        """
        Test RULE-1484: YAML line: clearance_level: "CONFIDENTIAL"
        Priority: MEDIUM
        """
        assert "RULE-1484" in all_results['results'], "Rule RULE-1484 missing"
        result = all_results['results']["RULE-1484"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1484 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1484 failed"


    def test_rule_1485(self, all_results):
        """
        Test RULE-1485: YAML line: - name: "Anna Weber"
        Priority: MEDIUM
        """
        assert "RULE-1485" in all_results['results'], "Rule RULE-1485 missing"
        result = all_results['results']["RULE-1485"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1485 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1485 failed"


    def test_rule_1486(self, all_results):
        """
        Test RULE-1486: YAML line: role: "Technical Lead"
        Priority: MEDIUM
        """
        assert "RULE-1486" in all_results['results'], "Rule RULE-1486 missing"
        result = all_results['results']["RULE-1486"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1486 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1486 failed"


    def test_rule_1487(self, all_results):
        """
        Test RULE-1487: YAML line: email: "anna.weber@ssid.company"
        Priority: MEDIUM
        """
        assert "RULE-1487" in all_results['results'], "Rule RULE-1487 missing"
        result = all_results['results']["RULE-1487"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1487 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1487 failed"


    def test_rule_1488(self, all_results):
        """
        Test RULE-1488: YAML line: backup: "Thomas Klein"
        Priority: MEDIUM
        """
        assert "RULE-1488" in all_results['results'], "Rule RULE-1488 missing"
        result = all_results['results']["RULE-1488"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1488 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1488 failed"


    def test_rule_1489(self, all_results):
        """
        Test RULE-1489: YAML line: areas: ["badge_logic", "anti_gaming_controls", "internal_audits"]
        Priority: MEDIUM
        """
        assert "RULE-1489" in all_results['results'], "Rule RULE-1489 missing"
        result = all_results['results']["RULE-1489"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1489 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1489 failed"


    def test_rule_1490(self, all_results):
        """
        Test RULE-1490: YAML line: clearance_level: "CONFIDENTIAL"
        Priority: MEDIUM
        """
        assert "RULE-1490" in all_results['results'], "Rule RULE-1490 missing"
        result = all_results['results']["RULE-1490"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1490 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1490 failed"


    def test_rule_1491(self, all_results):
        """
        Test RULE-1491: YAML line: backup_escalation:
        Priority: MEDIUM
        """
        assert "RULE-1491" in all_results['results'], "Rule RULE-1491 missing"
        result = all_results['results']["RULE-1491"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1491 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1491 failed"


    def test_rule_1492(self, all_results):
        """
        Test RULE-1492: YAML line: level_1: "Security Team Lead"
        Priority: CRITICAL
        """
        assert "RULE-1492" in all_results['results'], "Rule RULE-1492 missing"
        result = all_results['results']["RULE-1492"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1492 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1492 failed"


    def test_rule_1493(self, all_results):
        """
        Test RULE-1493: YAML line: level_2: "CTO"
        Priority: MEDIUM
        """
        assert "RULE-1493" in all_results['results'], "Rule RULE-1493 missing"
        result = all_results['results']["RULE-1493"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1493 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1493 failed"


    def test_rule_1494(self, all_results):
        """
        Test RULE-1494: YAML line: level_3: "CEO"
        Priority: MEDIUM
        """
        assert "RULE-1494" in all_results['results'], "Rule RULE-1494 missing"
        result = all_results['results']["RULE-1494"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1494 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1494 failed"


    def test_rule_1495(self, all_results):
        """
        Test RULE-1495: YAML line: level_4: "Board Compliance Committee"
        Priority: CRITICAL
        """
        assert "RULE-1495" in all_results['results'], "Rule RULE-1495 missing"
        result = all_results['results']["RULE-1495"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1495 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1495 failed"


    def test_rule_1496(self, all_results):
        """
        Test RULE-1496: YAML line: emergency_contact: "legal@ssid.company"
        Priority: CRITICAL
        """
        assert "RULE-1496" in all_results['results'], "Rule RULE-1496 missing"
        result = all_results['results']["RULE-1496"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1496 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1496 failed"


    def test_rule_1497(self, all_results):
        """
        Test RULE-1497: YAML line: external_counsel: "compliance-emergency@lawfirm.com"
        Priority: CRITICAL
        """
        assert "RULE-1497" in all_results['results'], "Rule RULE-1497 missing"
        result = all_results['results']["RULE-1497"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1497 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1497 failed"


    def test_rule_1498(self, all_results):
        """
        Test RULE-1498: YAML line: internal_review_maintainers:
        Priority: MEDIUM
        """
        assert "RULE-1498" in all_results['results'], "Rule RULE-1498 missing"
        result = all_results['results']["RULE-1498"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1498 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1498 failed"


    def test_rule_1499(self, all_results):
        """
        Test RULE-1499: YAML line: monthly_reviewer: "Compliance Team Lead"
        Priority: CRITICAL
        """
        assert "RULE-1499" in all_results['results'], "Rule RULE-1499 missing"
        result = all_results['results']["RULE-1499"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1499 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1499 failed"


    def test_rule_1500(self, all_results):
        """
        Test RULE-1500: YAML line: quarterly_reviewer: "Senior Compliance Officer + Legal"
        Priority: CRITICAL
        """
        assert "RULE-1500" in all_results['results'], "Rule RULE-1500 missing"
        result = all_results['results']["RULE-1500"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1500 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1500 failed"


    def test_rule_1501(self, all_results):
        """
        Test RULE-1501: YAML line: semi_annual_reviewer: "Executive Compliance Committee"
        Priority: CRITICAL
        """
        assert "RULE-1501" in all_results['results'], "Rule RULE-1501 missing"
        result = all_results['results']["RULE-1501"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1501 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1501 failed"


    def test_rule_1502(self, all_results):
        """
        Test RULE-1502: YAML line: external_reviewer_pool:
        Priority: MEDIUM
        """
        assert "RULE-1502" in all_results['results'], "Rule RULE-1502 missing"
        result = all_results['results']["RULE-1502"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1502 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1502 failed"


    def test_rule_1503(self, all_results):
        """
        Test RULE-1503: YAML line: - "Dr. Sarah Miller, Compliance Consulting LLC"
        Priority: CRITICAL
        """
        assert "RULE-1503" in all_results['results'], "Rule RULE-1503 missing"
        result = all_results['results']["RULE-1503"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1503 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1503 failed"


    def test_rule_1504(self, all_results):
        """
        Test RULE-1504: YAML line: - "Michael Brown, CPA, Audit Partners"
        Priority: MEDIUM
        """
        assert "RULE-1504" in all_results['results'], "Rule RULE-1504 missing"
        result = all_results['results']["RULE-1504"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1504 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1504 failed"


    def test_rule_1505(self, all_results):
        """
        Test RULE-1505: YAML line: - "Prof. Dr. Klaus Weber, Regulatory Consulting GmbH"
        Priority: MEDIUM
        """
        assert "RULE-1505" in all_results['results'], "Rule RULE-1505 missing"
        result = all_results['results']["RULE-1505"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1505 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1505 failed"


    def test_rule_1506(self, all_results):
        """
        Test RULE-1506: YAML line: review_coordinator: "Maria Schmidt"
        Priority: MEDIUM
        """
        assert "RULE-1506" in all_results['results'], "Rule RULE-1506 missing"
        result = all_results['results']["RULE-1506"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1506 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1506 failed"


    def test_rule_1507(self, all_results):
        """
        Test RULE-1507: YAML line: backup_coordinator: "Thomas Klein"
        Priority: MEDIUM
        """
        assert "RULE-1507" in all_results['results'], "Rule RULE-1507 missing"
        result = all_results['results']["RULE-1507"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1507 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1507 failed"


    def test_rule_1508(self, all_results):
        """
        Test RULE-1508: YAML line: vacation_coverage:
        Priority: MEDIUM
        """
        assert "RULE-1508" in all_results['results'], "Rule RULE-1508 missing"
        result = all_results['results']["RULE-1508"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1508 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1508 failed"


    def test_rule_1509(self, all_results):
        """
        Test RULE-1509: YAML line: minimum_coverage: 2
        Priority: MEDIUM
        """
        assert "RULE-1509" in all_results['results'], "Rule RULE-1509 missing"
        result = all_results['results']["RULE-1509"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1509 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1509 failed"


    def test_rule_1510(self, all_results):
        """
        Test RULE-1510: YAML line: notification_period: "2 weeks"
        Priority: MEDIUM
        """
        assert "RULE-1510" in all_results['results'], "Rule RULE-1510 missing"
        result = all_results['results']["RULE-1510"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1510 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1510 failed"


    def test_rule_1511(self, all_results):
        """
        Test RULE-1511: YAML line: handover_required: true
        Priority: CRITICAL
        """
        assert "RULE-1511" in all_results['results'], "Rule RULE-1511 missing"
        result = all_results['results']["RULE-1511"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1511 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1511 failed"


    def test_rule_1512(self, all_results):
        """
        Test RULE-1512: YAML line: documentation: "23_compliance/governance/handover_template.md"
        Priority: CRITICAL
        """
        assert "RULE-1512" in all_results['results'], "Rule RULE-1512 missing"
        result = all_results['results']["RULE-1512"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1512 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1512 failed"


    def test_rule_1513(self, all_results):
        """
        Test RULE-1513: YAML line: business_continuity: "Critical for regulatory deadlines"
        Priority: CRITICAL
        """
        assert "RULE-1513" in all_results['results'], "Rule RULE-1513 missing"
        result = all_results['results']["RULE-1513"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1513 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1513 failed"


    def test_rule_1514(self, all_results):
        """
        Test RULE-1514: YAML field 'version' must equal '1.0'
        Priority: HIGH
        """
        assert "RULE-1514" in all_results['results'], "Rule RULE-1514 missing"
        result = all_results['results']["RULE-1514"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "HIGH" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1514 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1514 failed"


    def test_rule_1515(self, all_results):
        """
        Test RULE-1515: YAML field 'date' must equal '2025-09-15'
        Priority: MEDIUM
        """
        assert "RULE-1515" in all_results['results'], "Rule RULE-1515 missing"
        result = all_results['results']["RULE-1515"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1515 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1515 failed"


    def test_rule_1516(self, all_results):
        """
        Test RULE-1516: YAML field 'deprecated' must equal 'False'
        Priority: CRITICAL
        """
        assert "RULE-1516" in all_results['results'], "Rule RULE-1516 missing"
        result = all_results['results']["RULE-1516"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1516 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1516 failed"


    def test_rule_1517(self, all_results):
        """
        Test RULE-1517: YAML field 'classification' must equal 'CONFIDENTIAL - Enterprise Social Respons
        Priority: MEDIUM
        """
        assert "RULE-1517" in all_results['results'], "Rule RULE-1517 missing"
        result = all_results['results']["RULE-1517"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1517 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1517 failed"


    def test_rule_1518(self, all_results):
        """
        Test RULE-1518: YAML list 'international_standards.geographic_coverage' must contain 5 elements
        Priority: CRITICAL
        """
        assert "RULE-1518" in all_results['results'], "Rule RULE-1518 missing"
        result = all_results['results']["RULE-1518"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1518 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1518 failed"


    def test_rule_1519(self, all_results):
        """
        Test RULE-1519: YAML field 'accessibility_compliance.wcag_version' must equal '2.1'
        Priority: HIGH
        """
        assert "RULE-1519" in all_results['results'], "Rule RULE-1519 missing"
        result = all_results['results']["RULE-1519"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "HIGH" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1519 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1519 failed"


    def test_rule_1520(self, all_results):
        """
        Test RULE-1520: YAML field 'accessibility_compliance.baseline' must equal 'AA'
        Priority: MEDIUM
        """
        assert "RULE-1520" in all_results['results'], "Rule RULE-1520 missing"
        result = all_results['results']["RULE-1520"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1520 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1520 failed"


    def test_rule_1521(self, all_results):
        """
        Test RULE-1521: YAML field 'accessibility_compliance.aaa_scope' must equal 'critical_flows_only'
        Priority: CRITICAL
        """
        assert "RULE-1521" in all_results['results'], "Rule RULE-1521 missing"
        result = all_results['results']["RULE-1521"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1521 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1521 failed"


    def test_rule_1522(self, all_results):
        """
        Test RULE-1522: YAML field 'accessibility_compliance.screen_reader_compatible' must equal 'True'
        Priority: CRITICAL
        """
        assert "RULE-1522" in all_results['results'], "Rule RULE-1522 missing"
        result = all_results['results']["RULE-1522"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1522 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1522 failed"


    def test_rule_1523(self, all_results):
        """
        Test RULE-1523: YAML field 'accessibility_compliance.keyboard_navigation' must equal 'True'
        Priority: CRITICAL
        """
        assert "RULE-1523" in all_results['results'], "Rule RULE-1523 missing"
        result = all_results['results']["RULE-1523"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1523 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1523 failed"


    def test_rule_1524(self, all_results):
        """
        Test RULE-1524: YAML field 'accessibility_compliance.color_contrast_ratio' must equal '4.5:1'
        Priority: MEDIUM
        """
        assert "RULE-1524" in all_results['results'], "Rule RULE-1524 missing"
        result = all_results['results']["RULE-1524"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1524 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1524 failed"


    def test_rule_1525(self, all_results):
        """
        Test RULE-1525: YAML list 'accessibility_compliance.language_support' must contain 8 elements
        Priority: MEDIUM
        """
        assert "RULE-1525" in all_results['results'], "Rule RULE-1525 missing"
        result = all_results['results']["RULE-1525"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1525 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1525 failed"


    def test_rule_1526(self, all_results):
        """
        Test RULE-1526: YAML field 'accessibility_compliance.rtl_language_support' must equal 'True'
        Priority: CRITICAL
        """
        assert "RULE-1526" in all_results['results'], "Rule RULE-1526 missing"
        result = all_results['results']["RULE-1526"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1526 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1526 failed"


    def test_rule_1527(self, all_results):
        """
        Test RULE-1527: YAML field 'accessibility_compliance.business_localization' must equal 'market_s
        Priority: MEDIUM
        """
        assert "RULE-1527" in all_results['results'], "Rule RULE-1527 missing"
        result = all_results['results']["RULE-1527"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1527 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1527 failed"


    def test_rule_1528(self, all_results):
        """
        Test RULE-1528: YAML field 'accessibility_compliance.wcag_aaa_note' must equal 'AAA compliance o
        Priority: CRITICAL
        """
        assert "RULE-1528" in all_results['results'], "Rule RULE-1528 missing"
        result = all_results['results']["RULE-1528"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1528 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1528 failed"


    def test_rule_1529(self, all_results):
        """
        Test RULE-1529: YAML field 'community_participation.open_contribution' must equal 'True'
        Priority: CRITICAL
        """
        assert "RULE-1529" in all_results['results'], "Rule RULE-1529 missing"
        result = all_results['results']["RULE-1529"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1529 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1529 failed"


    def test_rule_1530(self, all_results):
        """
        Test RULE-1530: YAML field 'community_participation.translation_program' must equal 'True'
        Priority: CRITICAL
        """
        assert "RULE-1530" in all_results['results'], "Rule RULE-1530 missing"
        result = all_results['results']["RULE-1530"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1530 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1530 failed"


    def test_rule_1531(self, all_results):
        """
        Test RULE-1531: YAML field 'community_participation.accessibility_review' must equal 'required'
        Priority: MEDIUM
        """
        assert "RULE-1531" in all_results['results'], "Rule RULE-1531 missing"
        result = all_results['results']["RULE-1531"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1531 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1531 failed"


    def test_rule_1532(self, all_results):
        """
        Test RULE-1532: YAML field 'community_participation.diverse_reviewer_pool' must equal 'True'
        Priority: CRITICAL
        """
        assert "RULE-1532" in all_results['results'], "Rule RULE-1532 missing"
        result = all_results['results']["RULE-1532"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1532 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1532 failed"


    def test_rule_1533(self, all_results):
        """
        Test RULE-1533: YAML field 'community_participation.enterprise_participation' must equal 'strate
        Priority: MEDIUM
        """
        assert "RULE-1533" in all_results['results'], "Rule RULE-1533 missing"
        result = all_results['results']["RULE-1533"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1533 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1533 failed"


    def test_rule_1534(self, all_results):
        """
        Test RULE-1534: YAML field 'community_participation.marginalized_communities.support' must equal
        Priority: CRITICAL
        """
        assert "RULE-1534" in all_results['results'], "Rule RULE-1534 missing"
        result = all_results['results']["RULE-1534"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1534 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1534 failed"


    def test_rule_1535(self, all_results):
        """
        Test RULE-1535: YAML field 'community_participation.marginalized_communities.accessibility_fund'
        Priority: MEDIUM
        """
        assert "RULE-1535" in all_results['results'], "Rule RULE-1535 missing"
        result = all_results['results']["RULE-1535"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1535 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1535 failed"


    def test_rule_1536(self, all_results):
        """
        Test RULE-1536: YAML list 'community_participation.marginalized_communities.translation_priority
        Priority: MEDIUM
        """
        assert "RULE-1536" in all_results['results'], "Rule RULE-1536 missing"
        result = all_results['results']["RULE-1536"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1536 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1536 failed"


    def test_rule_1537(self, all_results):
        """
        Test RULE-1537: YAML field 'community_participation.marginalized_communities.outreach_programs' 
        Priority: CRITICAL
        """
        assert "RULE-1537" in all_results['results'], "Rule RULE-1537 missing"
        result = all_results['results']["RULE-1537"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1537 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1537 failed"


    def test_rule_1538(self, all_results):
        """
        Test RULE-1538: YAML field 'community_participation.marginalized_communities.business_impact' mu
        Priority: MEDIUM
        """
        assert "RULE-1538" in all_results['results'], "Rule RULE-1538 missing"
        result = all_results['results']["RULE-1538"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1538 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1538 failed"


    def test_rule_1539(self, all_results):
        """
        Test RULE-1539: YAML field 'community_participation.economic_inclusion.low_income_access' must e
        Priority: CRITICAL
        """
        assert "RULE-1539" in all_results['results'], "Rule RULE-1539 missing"
        result = all_results['results']["RULE-1539"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1539 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1539 failed"


    def test_rule_1540(self, all_results):
        """
        Test RULE-1540: YAML field 'community_participation.economic_inclusion.educational_discounts' mu
        Priority: CRITICAL
        """
        assert "RULE-1540" in all_results['results'], "Rule RULE-1540 missing"
        result = all_results['results']["RULE-1540"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1540 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1540 failed"


    def test_rule_1541(self, all_results):
        """
        Test RULE-1541: YAML field 'community_participation.economic_inclusion.developing_nation_support
        Priority: CRITICAL
        """
        assert "RULE-1541" in all_results['results'], "Rule RULE-1541 missing"
        result = all_results['results']["RULE-1541"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1541 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1541 failed"


    def test_rule_1542(self, all_results):
        """
        Test RULE-1542: YAML field 'community_participation.economic_inclusion.internet_connectivity_alt
        Priority: CRITICAL
        """
        assert "RULE-1542" in all_results['results'], "Rule RULE-1542 missing"
        result = all_results['results']["RULE-1542"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1542 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1542 failed"


    def test_rule_1543(self, all_results):
        """
        Test RULE-1543: YAML field 'community_participation.economic_inclusion.enterprise_social_program
        Priority: MEDIUM
        """
        assert "RULE-1543" in all_results['results'], "Rule RULE-1543 missing"
        result = all_results['results']["RULE-1543"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1543 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1543 failed"


    def test_rule_1544(self, all_results):
        """
        Test RULE-1544: YAML list 'dao_governance_compatibility.governance_models' must contain 8 elemen
        Priority: HIGH
        """
        assert "RULE-1544" in all_results['results'], "Rule RULE-1544 missing"
        result = all_results['results']["RULE-1544"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "HIGH" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1544 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1544 failed"


    def test_rule_1545(self, all_results):
        """
        Test RULE-1545: YAML list 'dao_governance_compatibility.voting_mechanisms' must contain 7 elemen
        Priority: HIGH
        """
        assert "RULE-1545" in all_results['results'], "Rule RULE-1545 missing"
        result = all_results['results']["RULE-1545"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "HIGH" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1545 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1545 failed"


    def test_rule_1546(self, all_results):
        """
        Test RULE-1546: YAML list 'dao_governance_compatibility.decision_frameworks.consensus_mechanisms
        Priority: MEDIUM
        """
        assert "RULE-1546" in all_results['results'], "Rule RULE-1546 missing"
        result = all_results['results']["RULE-1546"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1546 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1546 failed"


    def test_rule_1547(self, all_results):
        """
        Test RULE-1547: YAML field 'dao_governance_compatibility.decision_frameworks.quorum_requirements
        Priority: MEDIUM
        """
        assert "RULE-1547" in all_results['results'], "Rule RULE-1547 missing"
        result = all_results['results']["RULE-1547"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1547 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1547 failed"


    def test_rule_1548(self, all_results):
        """
        Test RULE-1548: YAML field 'dao_governance_compatibility.decision_frameworks.proposal_processes'
        Priority: CRITICAL
        """
        assert "RULE-1548" in all_results['results'], "Rule RULE-1548 missing"
        result = all_results['results']["RULE-1548"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1548 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1548 failed"


    def test_rule_1549(self, all_results):
        """
        Test RULE-1549: YAML field 'dao_governance_compatibility.decision_frameworks.veto_rights' must e
        Priority: MEDIUM
        """
        assert "RULE-1549" in all_results['results'], "Rule RULE-1549 missing"
        result = all_results['results']["RULE-1549"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1549 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1549 failed"


    def test_rule_1550(self, all_results):
        """
        Test RULE-1550: YAML field 'dao_governance_compatibility.decision_frameworks.business_stakeholde
        Priority: MEDIUM
        """
        assert "RULE-1550" in all_results['results'], "Rule RULE-1550 missing"
        result = all_results['results']["RULE-1550"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1550 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1550 failed"


    def test_rule_1551(self, all_results):
        """
        Test RULE-1551: YAML field 'unbanked_community_support.no_bank_account_required' must equal 'Tru
        Priority: CRITICAL
        """
        assert "RULE-1551" in all_results['results'], "Rule RULE-1551 missing"
        result = all_results['results']["RULE-1551"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1551 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1551 failed"


    def test_rule_1552(self, all_results):
        """
        Test RULE-1552: YAML field 'unbanked_community_support.alternative_identity_verification' must e
        Priority: CRITICAL
        """
        assert "RULE-1552" in all_results['results'], "Rule RULE-1552 missing"
        result = all_results['results']["RULE-1552"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1552 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1552 failed"


    def test_rule_1553(self, all_results):
        """
        Test RULE-1553: YAML field 'unbanked_community_support.offline_capability' must equal 'limited'
        Priority: MEDIUM
        """
        assert "RULE-1553" in all_results['results'], "Rule RULE-1553 missing"
        result = all_results['results']["RULE-1553"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1553 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1553 failed"


    def test_rule_1554(self, all_results):
        """
        Test RULE-1554: YAML field 'unbanked_community_support.sms_notifications' must equal 'True'
        Priority: CRITICAL
        """
        assert "RULE-1554" in all_results['results'], "Rule RULE-1554 missing"
        result = all_results['results']["RULE-1554"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1554 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1554 failed"


    def test_rule_1555(self, all_results):
        """
        Test RULE-1555: YAML field 'unbanked_community_support.ussd_support' must equal 'planned'
        Priority: MEDIUM
        """
        assert "RULE-1555" in all_results['results'], "Rule RULE-1555 missing"
        result = all_results['results']["RULE-1555"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1555 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1555 failed"


    def test_rule_1556(self, all_results):
        """
        Test RULE-1556: YAML field 'unbanked_community_support.agent_network_compatible' must equal 'Tru
        Priority: CRITICAL
        """
        assert "RULE-1556" in all_results['results'], "Rule RULE-1556 missing"
        result = all_results['results']["RULE-1556"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1556 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1556 failed"


    def test_rule_1557(self, all_results):
        """
        Test RULE-1557: YAML field 'unbanked_community_support.enterprise_financial_inclusion' must equa
        Priority: MEDIUM
        """
        assert "RULE-1557" in all_results['results'], "Rule RULE-1557 missing"
        result = all_results['results']["RULE-1557"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1557 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1557 failed"


    def test_rule_1558(self, all_results):
        """
        Test RULE-1558: YAML line: version: "1.0"
        Priority: MEDIUM
        """
        assert "RULE-1558" in all_results['results'], "Rule RULE-1558 missing"
        result = all_results['results']["RULE-1558"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1558 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1558 failed"


    def test_rule_1559(self, all_results):
        """
        Test RULE-1559: YAML line: date: "2025-09-15"
        Priority: MEDIUM
        """
        assert "RULE-1559" in all_results['results'], "Rule RULE-1559 missing"
        result = all_results['results']["RULE-1559"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1559 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1559 failed"


    def test_rule_1560(self, all_results):
        """
        Test RULE-1560: YAML line: deprecated: false
        Priority: MEDIUM
        """
        assert "RULE-1560" in all_results['results'], "Rule RULE-1560 missing"
        result = all_results['results']["RULE-1560"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1560 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1560 failed"


    def test_rule_1561(self, all_results):
        """
        Test RULE-1561: YAML line: classification: "CONFIDENTIAL - Enterprise Social Responsibility"
        Priority: MEDIUM
        """
        assert "RULE-1561" in all_results['results'], "Rule RULE-1561 missing"
        result = all_results['results']["RULE-1561"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1561 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1561 failed"


    def test_rule_1562(self, all_results):
        """
        Test RULE-1562: YAML line: international_standards:
        Priority: HIGH
        """
        assert "RULE-1562" in all_results['results'], "Rule RULE-1562 missing"
        result = all_results['results']["RULE-1562"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "HIGH" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1562 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1562 failed"


    def test_rule_1563(self, all_results):
        """
        Test RULE-1563: YAML line: geographic_coverage:
        Priority: MEDIUM
        """
        assert "RULE-1563" in all_results['results'], "Rule RULE-1563 missing"
        result = all_results['results']["RULE-1563"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1563 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1563 failed"


    def test_rule_1564(self, all_results):
        """
        Test RULE-1564: YAML line: - region: "European Union"
        Priority: MEDIUM
        """
        assert "RULE-1564" in all_results['results'], "Rule RULE-1564 missing"
        result = all_results['results']["RULE-1564"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1564 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1564 failed"


    def test_rule_1565(self, all_results):
        """
        Test RULE-1565: YAML line: standards: ["GDPR", "AI Act", "eIDAS 2.0", "MiCA", "DORA"]
        Priority: HIGH
        """
        assert "RULE-1565" in all_results['results'], "Rule RULE-1565 missing"
        result = all_results['results']["RULE-1565"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "HIGH" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1565 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1565 failed"


    def test_rule_1566(self, all_results):
        """
        Test RULE-1566: YAML line: localization: "23_compliance/regional/eu/"
        Priority: CRITICAL
        """
        assert "RULE-1566" in all_results['results'], "Rule RULE-1566 missing"
        result = all_results['results']["RULE-1566"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1566 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1566 failed"


    def test_rule_1567(self, all_results):
        """
        Test RULE-1567: YAML line: business_priority: "CRITICAL"
        Priority: CRITICAL
        """
        assert "RULE-1567" in all_results['results'], "Rule RULE-1567 missing"
        result = all_results['results']["RULE-1567"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1567 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1567 failed"


    def test_rule_1568(self, all_results):
        """
        Test RULE-1568: YAML line: - region: "United States"
        Priority: MEDIUM
        """
        assert "RULE-1568" in all_results['results'], "Rule RULE-1568 missing"
        result = all_results['results']["RULE-1568"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1568 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1568 failed"


    def test_rule_1569(self, all_results):
        """
        Test RULE-1569: YAML line: standards: ["SOC2", "CCPA", "FTC Guidelines", "SEC Regulations"]
        Priority: HIGH
        """
        assert "RULE-1569" in all_results['results'], "Rule RULE-1569 missing"
        result = all_results['results']["RULE-1569"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "HIGH" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1569 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1569 failed"


    def test_rule_1570(self, all_results):
        """
        Test RULE-1570: YAML line: localization: "23_compliance/regional/us/"
        Priority: CRITICAL
        """
        assert "RULE-1570" in all_results['results'], "Rule RULE-1570 missing"
        result = all_results['results']["RULE-1570"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1570 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1570 failed"


    def test_rule_1571(self, all_results):
        """
        Test RULE-1571: YAML line: business_priority: "HIGH"
        Priority: MEDIUM
        """
        assert "RULE-1571" in all_results['results'], "Rule RULE-1571 missing"
        result = all_results['results']["RULE-1571"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1571 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1571 failed"


    def test_rule_1572(self, all_results):
        """
        Test RULE-1572: YAML line: - region: "Asia Pacific"
        Priority: MEDIUM
        """
        assert "RULE-1572" in all_results['results'], "Rule RULE-1572 missing"
        result = all_results['results']["RULE-1572"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1572 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1572 failed"


    def test_rule_1573(self, all_results):
        """
        Test RULE-1573: YAML line: standards: ["Singapore MAS", "Japan JVCEA", "Hong Kong SFC", "Austral
        Priority: HIGH
        """
        assert "RULE-1573" in all_results['results'], "Rule RULE-1573 missing"
        result = all_results['results']["RULE-1573"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "HIGH" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1573 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1573 failed"


    def test_rule_1574(self, all_results):
        """
        Test RULE-1574: YAML line: localization: "23_compliance/regional/apac/"
        Priority: CRITICAL
        """
        assert "RULE-1574" in all_results['results'], "Rule RULE-1574 missing"
        result = all_results['results']["RULE-1574"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1574 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1574 failed"


    def test_rule_1575(self, all_results):
        """
        Test RULE-1575: YAML line: business_priority: "HIGH"
        Priority: MEDIUM
        """
        assert "RULE-1575" in all_results['results'], "Rule RULE-1575 missing"
        result = all_results['results']["RULE-1575"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1575 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1575 failed"


    def test_rule_1576(self, all_results):
        """
        Test RULE-1576: YAML line: - region: "Switzerland"
        Priority: MEDIUM
        """
        assert "RULE-1576" in all_results['results'], "Rule RULE-1576 missing"
        result = all_results['results']["RULE-1576"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1576 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1576 failed"


    def test_rule_1577(self, all_results):
        """
        Test RULE-1577: YAML line: standards: ["FINMA", "DLT Act", "Swiss Data Protection Act"]
        Priority: HIGH
        """
        assert "RULE-1577" in all_results['results'], "Rule RULE-1577 missing"
        result = all_results['results']["RULE-1577"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "HIGH" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1577 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1577 failed"


    def test_rule_1578(self, all_results):
        """
        Test RULE-1578: YAML line: localization: "23_compliance/regional/ch/"
        Priority: CRITICAL
        """
        assert "RULE-1578" in all_results['results'], "Rule RULE-1578 missing"
        result = all_results['results']["RULE-1578"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1578 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1578 failed"


    def test_rule_1579(self, all_results):
        """
        Test RULE-1579: YAML line: business_priority: "MEDIUM"
        Priority: MEDIUM
        """
        assert "RULE-1579" in all_results['results'], "Rule RULE-1579 missing"
        result = all_results['results']["RULE-1579"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1579 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1579 failed"


    def test_rule_1580(self, all_results):
        """
        Test RULE-1580: YAML line: - region: "United Kingdom"
        Priority: MEDIUM
        """
        assert "RULE-1580" in all_results['results'], "Rule RULE-1580 missing"
        result = all_results['results']["RULE-1580"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1580 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1580 failed"


    def test_rule_1581(self, all_results):
        """
        Test RULE-1581: YAML line: standards: ["FCA Rules", "UK GDPR", "PCI DSS"]
        Priority: HIGH
        """
        assert "RULE-1581" in all_results['results'], "Rule RULE-1581 missing"
        result = all_results['results']["RULE-1581"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "HIGH" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1581 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1581 failed"


    def test_rule_1582(self, all_results):
        """
        Test RULE-1582: YAML line: localization: "23_compliance/regional/uk/"
        Priority: CRITICAL
        """
        assert "RULE-1582" in all_results['results'], "Rule RULE-1582 missing"
        result = all_results['results']["RULE-1582"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1582 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1582 failed"


    def test_rule_1583(self, all_results):
        """
        Test RULE-1583: YAML line: business_priority: "HIGH"
        Priority: MEDIUM
        """
        assert "RULE-1583" in all_results['results'], "Rule RULE-1583 missing"
        result = all_results['results']["RULE-1583"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1583 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1583 failed"


    def test_rule_1584(self, all_results):
        """
        Test RULE-1584: YAML line: accessibility_compliance:
        Priority: CRITICAL
        """
        assert "RULE-1584" in all_results['results'], "Rule RULE-1584 missing"
        result = all_results['results']["RULE-1584"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1584 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1584 failed"


    def test_rule_1585(self, all_results):
        """
        Test RULE-1585: YAML line: wcag_version: "2.1"
        Priority: MEDIUM
        """
        assert "RULE-1585" in all_results['results'], "Rule RULE-1585 missing"
        result = all_results['results']["RULE-1585"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1585 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1585 failed"


    def test_rule_1586(self, all_results):
        """
        Test RULE-1586: YAML line: baseline: "AA"
        Priority: MEDIUM
        """
        assert "RULE-1586" in all_results['results'], "Rule RULE-1586 missing"
        result = all_results['results']["RULE-1586"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1586 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1586 failed"


    def test_rule_1587(self, all_results):
        """
        Test RULE-1587: YAML line: aaa_scope: "critical_flows_only"
        Priority: CRITICAL
        """
        assert "RULE-1587" in all_results['results'], "Rule RULE-1587 missing"
        result = all_results['results']["RULE-1587"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1587 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1587 failed"


    def test_rule_1588(self, all_results):
        """
        Test RULE-1588: YAML line: screen_reader_compatible: true
        Priority: MEDIUM
        """
        assert "RULE-1588" in all_results['results'], "Rule RULE-1588 missing"
        result = all_results['results']["RULE-1588"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1588 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1588 failed"


    def test_rule_1589(self, all_results):
        """
        Test RULE-1589: YAML line: keyboard_navigation: true
        Priority: MEDIUM
        """
        assert "RULE-1589" in all_results['results'], "Rule RULE-1589 missing"
        result = all_results['results']["RULE-1589"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1589 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1589 failed"


    def test_rule_1590(self, all_results):
        """
        Test RULE-1590: YAML line: color_contrast_ratio: "4.5:1"
        Priority: MEDIUM
        """
        assert "RULE-1590" in all_results['results'], "Rule RULE-1590 missing"
        result = all_results['results']["RULE-1590"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1590 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1590 failed"


    def test_rule_1591(self, all_results):
        """
        Test RULE-1591: YAML line: language_support: ["en", "de", "fr", "es", "it", "ja", "ko", "zh"]
        Priority: MEDIUM
        """
        assert "RULE-1591" in all_results['results'], "Rule RULE-1591 missing"
        result = all_results['results']["RULE-1591"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1591 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1591 failed"


    def test_rule_1592(self, all_results):
        """
        Test RULE-1592: YAML line: rtl_language_support: true
        Priority: MEDIUM
        """
        assert "RULE-1592" in all_results['results'], "Rule RULE-1592 missing"
        result = all_results['results']["RULE-1592"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1592 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1592 failed"


    def test_rule_1593(self, all_results):
        """
        Test RULE-1593: YAML line: business_localization: "market_specific_requirements"
        Priority: MEDIUM
        """
        assert "RULE-1593" in all_results['results'], "Rule RULE-1593 missing"
        result = all_results['results']["RULE-1593"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1593 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1593 failed"


    def test_rule_1594(self, all_results):
        """
        Test RULE-1594: YAML line: wcag_aaa_note: "AAA compliance on selected critical flows only"
        Priority: CRITICAL
        """
        assert "RULE-1594" in all_results['results'], "Rule RULE-1594 missing"
        result = all_results['results']["RULE-1594"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1594 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1594 failed"


    def test_rule_1595(self, all_results):
        """
        Test RULE-1595: YAML line: community_participation:
        Priority: MEDIUM
        """
        assert "RULE-1595" in all_results['results'], "Rule RULE-1595 missing"
        result = all_results['results']["RULE-1595"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1595 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1595 failed"


    def test_rule_1596(self, all_results):
        """
        Test RULE-1596: YAML line: open_contribution: true
        Priority: MEDIUM
        """
        assert "RULE-1596" in all_results['results'], "Rule RULE-1596 missing"
        result = all_results['results']["RULE-1596"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1596 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1596 failed"


    def test_rule_1597(self, all_results):
        """
        Test RULE-1597: YAML line: translation_program: true
        Priority: MEDIUM
        """
        assert "RULE-1597" in all_results['results'], "Rule RULE-1597 missing"
        result = all_results['results']["RULE-1597"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1597 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1597 failed"


    def test_rule_1598(self, all_results):
        """
        Test RULE-1598: YAML line: accessibility_review: "required"
        Priority: CRITICAL
        """
        assert "RULE-1598" in all_results['results'], "Rule RULE-1598 missing"
        result = all_results['results']["RULE-1598"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1598 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1598 failed"


    def test_rule_1599(self, all_results):
        """
        Test RULE-1599: YAML line: diverse_reviewer_pool: true
        Priority: MEDIUM
        """
        assert "RULE-1599" in all_results['results'], "Rule RULE-1599 missing"
        result = all_results['results']["RULE-1599"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1599 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1599 failed"


    def test_rule_1600(self, all_results):
        """
        Test RULE-1600: YAML line: enterprise_participation: "strategic_partnerships"
        Priority: MEDIUM
        """
        assert "RULE-1600" in all_results['results'], "Rule RULE-1600 missing"
        result = all_results['results']["RULE-1600"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1600 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1600 failed"


    def test_rule_1601(self, all_results):
        """
        Test RULE-1601: YAML line: marginalized_communities:
        Priority: MEDIUM
        """
        assert "RULE-1601" in all_results['results'], "Rule RULE-1601 missing"
        result = all_results['results']["RULE-1601"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1601 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1601 failed"


    def test_rule_1602(self, all_results):
        """
        Test RULE-1602: YAML line: support: true
        Priority: MEDIUM
        """
        assert "RULE-1602" in all_results['results'], "Rule RULE-1602 missing"
        result = all_results['results']["RULE-1602"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1602 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1602 failed"


    def test_rule_1603(self, all_results):
        """
        Test RULE-1603: YAML line: accessibility_fund: "enterprise_funded"
        Priority: MEDIUM
        """
        assert "RULE-1603" in all_results['results'], "Rule RULE-1603 missing"
        result = all_results['results']["RULE-1603"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1603 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1603 failed"


    def test_rule_1604(self, all_results):
        """
        Test RULE-1604: YAML line: translation_priority: ["indigenous_languages", "sign_languages"]
        Priority: MEDIUM
        """
        assert "RULE-1604" in all_results['results'], "Rule RULE-1604 missing"
        result = all_results['results']["RULE-1604"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1604 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1604 failed"


    def test_rule_1605(self, all_results):
        """
        Test RULE-1605: YAML line: outreach_programs: "23_compliance/social_ecosystem/outreach/"
        Priority: CRITICAL
        """
        assert "RULE-1605" in all_results['results'], "Rule RULE-1605 missing"
        result = all_results['results']["RULE-1605"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1605 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1605 failed"


    def test_rule_1606(self, all_results):
        """
        Test RULE-1606: YAML line: business_impact: "market_expansion_opportunities"
        Priority: MEDIUM
        """
        assert "RULE-1606" in all_results['results'], "Rule RULE-1606 missing"
        result = all_results['results']["RULE-1606"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1606 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1606 failed"


    def test_rule_1607(self, all_results):
        """
        Test RULE-1607: YAML line: economic_inclusion:
        Priority: MEDIUM
        """
        assert "RULE-1607" in all_results['results'], "Rule RULE-1607 missing"
        result = all_results['results']["RULE-1607"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1607 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1607 failed"


    def test_rule_1608(self, all_results):
        """
        Test RULE-1608: YAML line: low_income_access: true
        Priority: MEDIUM
        """
        assert "RULE-1608" in all_results['results'], "Rule RULE-1608 missing"
        result = all_results['results']["RULE-1608"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1608 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1608 failed"


    def test_rule_1609(self, all_results):
        """
        Test RULE-1609: YAML line: educational_discounts: true
        Priority: MEDIUM
        """
        assert "RULE-1609" in all_results['results'], "Rule RULE-1609 missing"
        result = all_results['results']["RULE-1609"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1609 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1609 failed"


    def test_rule_1610(self, all_results):
        """
        Test RULE-1610: YAML line: developing_nation_support: true
        Priority: MEDIUM
        """
        assert "RULE-1610" in all_results['results'], "Rule RULE-1610 missing"
        result = all_results['results']["RULE-1610"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1610 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1610 failed"


    def test_rule_1611(self, all_results):
        """
        Test RULE-1611: YAML line: internet_connectivity_alternatives: true
        Priority: MEDIUM
        """
        assert "RULE-1611" in all_results['results'], "Rule RULE-1611 missing"
        result = all_results['results']["RULE-1611"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1611 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1611 failed"


    def test_rule_1612(self, all_results):
        """
        Test RULE-1612: YAML line: enterprise_social_programs: "community_investment"
        Priority: MEDIUM
        """
        assert "RULE-1612" in all_results['results'], "Rule RULE-1612 missing"
        result = all_results['results']["RULE-1612"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1612 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1612 failed"


    def test_rule_1613(self, all_results):
        """
        Test RULE-1613: YAML line: dao_governance_compatibility:
        Priority: MEDIUM
        """
        assert "RULE-1613" in all_results['results'], "Rule RULE-1613 missing"
        result = all_results['results']["RULE-1613"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1613 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1613 failed"


    def test_rule_1614(self, all_results):
        """
        Test RULE-1614: YAML line: governance_models:
        Priority: MEDIUM
        """
        assert "RULE-1614" in all_results['results'], "Rule RULE-1614 missing"
        result = all_results['results']["RULE-1614"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1614 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1614 failed"


    def test_rule_1615(self, all_results):
        """
        Test RULE-1615: YAML line: - "Traditional Corporate"
        Priority: MEDIUM
        """
        assert "RULE-1615" in all_results['results'], "Rule RULE-1615 missing"
        result = all_results['results']["RULE-1615"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1615 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1615 failed"


    def test_rule_1616(self, all_results):
        """
        Test RULE-1616: YAML line: - "DAO (Decentralized Autonomous Organization)"
        Priority: MEDIUM
        """
        assert "RULE-1616" in all_results['results'], "Rule RULE-1616 missing"
        result = all_results['results']["RULE-1616"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1616 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1616 failed"


    def test_rule_1617(self, all_results):
        """
        Test RULE-1617: YAML line: - "Hybrid (Corporate + DAO)"
        Priority: MEDIUM
        """
        assert "RULE-1617" in all_results['results'], "Rule RULE-1617 missing"
        result = all_results['results']["RULE-1617"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1617 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1617 failed"


    def test_rule_1618(self, all_results):
        """
        Test RULE-1618: YAML line: - "NGO/Non-Profit"
        Priority: MEDIUM
        """
        assert "RULE-1618" in all_results['results'], "Rule RULE-1618 missing"
        result = all_results['results']["RULE-1618"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1618 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1618 failed"


    def test_rule_1619(self, all_results):
        """
        Test RULE-1619: YAML line: - "Government/Public Sector"
        Priority: MEDIUM
        """
        assert "RULE-1619" in all_results['results'], "Rule RULE-1619 missing"
        result = all_results['results']["RULE-1619"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1619 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1619 failed"


    def test_rule_1620(self, all_results):
        """
        Test RULE-1620: YAML line: - "Academic Institution"
        Priority: MEDIUM
        """
        assert "RULE-1620" in all_results['results'], "Rule RULE-1620 missing"
        result = all_results['results']["RULE-1620"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1620 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1620 failed"


    def test_rule_1621(self, all_results):
        """
        Test RULE-1621: YAML line: - "Community Cooperative"
        Priority: MEDIUM
        """
        assert "RULE-1621" in all_results['results'], "Rule RULE-1621 missing"
        result = all_results['results']["RULE-1621"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1621 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1621 failed"


    def test_rule_1622(self, all_results):
        """
        Test RULE-1622: YAML line: - "Enterprise Consortium"
        Priority: MEDIUM
        """
        assert "RULE-1622" in all_results['results'], "Rule RULE-1622 missing"
        result = all_results['results']["RULE-1622"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1622 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1622 failed"


    def test_rule_1623(self, all_results):
        """
        Test RULE-1623: YAML line: voting_mechanisms:
        Priority: MEDIUM
        """
        assert "RULE-1623" in all_results['results'], "Rule RULE-1623 missing"
        result = all_results['results']["RULE-1623"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1623 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1623 failed"


    def test_rule_1624(self, all_results):
        """
        Test RULE-1624: YAML line: - "Token-based voting"
        Priority: MEDIUM
        """
        assert "RULE-1624" in all_results['results'], "Rule RULE-1624 missing"
        result = all_results['results']["RULE-1624"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1624 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1624 failed"


    def test_rule_1625(self, all_results):
        """
        Test RULE-1625: YAML line: - "Stake-weighted voting"
        Priority: MEDIUM
        """
        assert "RULE-1625" in all_results['results'], "Rule RULE-1625 missing"
        result = all_results['results']["RULE-1625"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1625 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1625 failed"


    def test_rule_1626(self, all_results):
        """
        Test RULE-1626: YAML line: - "Quadratic voting"
        Priority: MEDIUM
        """
        assert "RULE-1626" in all_results['results'], "Rule RULE-1626 missing"
        result = all_results['results']["RULE-1626"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1626 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1626 failed"


    def test_rule_1627(self, all_results):
        """
        Test RULE-1627: YAML line: - "Conviction voting"
        Priority: MEDIUM
        """
        assert "RULE-1627" in all_results['results'], "Rule RULE-1627 missing"
        result = all_results['results']["RULE-1627"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1627 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1627 failed"


    def test_rule_1628(self, all_results):
        """
        Test RULE-1628: YAML line: - "Reputation-based voting"
        Priority: MEDIUM
        """
        assert "RULE-1628" in all_results['results'], "Rule RULE-1628 missing"
        result = all_results['results']["RULE-1628"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1628 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1628 failed"


    def test_rule_1629(self, all_results):
        """
        Test RULE-1629: YAML line: - "Traditional board voting"
        Priority: MEDIUM
        """
        assert "RULE-1629" in all_results['results'], "Rule RULE-1629 missing"
        result = all_results['results']["RULE-1629"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1629 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1629 failed"


    def test_rule_1630(self, all_results):
        """
        Test RULE-1630: YAML line: - "Enterprise stakeholder voting"
        Priority: MEDIUM
        """
        assert "RULE-1630" in all_results['results'], "Rule RULE-1630 missing"
        result = all_results['results']["RULE-1630"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1630 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1630 failed"


    def test_rule_1631(self, all_results):
        """
        Test RULE-1631: YAML line: decision_frameworks:
        Priority: MEDIUM
        """
        assert "RULE-1631" in all_results['results'], "Rule RULE-1631 missing"
        result = all_results['results']["RULE-1631"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1631 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1631 failed"


    def test_rule_1632(self, all_results):
        """
        Test RULE-1632: YAML line: consensus_mechanisms: ["majority", "supermajority", "consensus", "rou
        Priority: MEDIUM
        """
        assert "RULE-1632" in all_results['results'], "Rule RULE-1632 missing"
        result = all_results['results']["RULE-1632"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1632 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1632 failed"


    def test_rule_1633(self, all_results):
        """
        Test RULE-1633: YAML line: quorum_requirements: "configurable"
        Priority: MEDIUM
        """
        assert "RULE-1633" in all_results['results'], "Rule RULE-1633 missing"
        result = all_results['results']["RULE-1633"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1633 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1633 failed"


    def test_rule_1634(self, all_results):
        """
        Test RULE-1634: YAML line: proposal_processes: "23_compliance/social_ecosystem/dao_proposals/"
        Priority: CRITICAL
        """
        assert "RULE-1634" in all_results['results'], "Rule RULE-1634 missing"
        result = all_results['results']["RULE-1634"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1634 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1634 failed"


    def test_rule_1635(self, all_results):
        """
        Test RULE-1635: YAML line: veto_rights: "configurable"
        Priority: MEDIUM
        """
        assert "RULE-1635" in all_results['results'], "Rule RULE-1635 missing"
        result = all_results['results']["RULE-1635"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1635 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1635 failed"


    def test_rule_1636(self, all_results):
        """
        Test RULE-1636: YAML line: business_stakeholder_rights: "protected"
        Priority: MEDIUM
        """
        assert "RULE-1636" in all_results['results'], "Rule RULE-1636 missing"
        result = all_results['results']["RULE-1636"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1636 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1636 failed"


    def test_rule_1637(self, all_results):
        """
        Test RULE-1637: YAML line: unbanked_community_support:
        Priority: MEDIUM
        """
        assert "RULE-1637" in all_results['results'], "Rule RULE-1637 missing"
        result = all_results['results']["RULE-1637"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1637 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1637 failed"


    def test_rule_1638(self, all_results):
        """
        Test RULE-1638: YAML line: no_bank_account_required: true
        Priority: CRITICAL
        """
        assert "RULE-1638" in all_results['results'], "Rule RULE-1638 missing"
        result = all_results['results']["RULE-1638"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1638 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1638 failed"


    def test_rule_1639(self, all_results):
        """
        Test RULE-1639: YAML line: alternative_identity_verification: true
        Priority: MEDIUM
        """
        assert "RULE-1639" in all_results['results'], "Rule RULE-1639 missing"
        result = all_results['results']["RULE-1639"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1639 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1639 failed"


    def test_rule_1640(self, all_results):
        """
        Test RULE-1640: YAML line: offline_capability: "limited"
        Priority: MEDIUM
        """
        assert "RULE-1640" in all_results['results'], "Rule RULE-1640 missing"
        result = all_results['results']["RULE-1640"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1640 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1640 failed"


    def test_rule_1641(self, all_results):
        """
        Test RULE-1641: YAML line: sms_notifications: true
        Priority: MEDIUM
        """
        assert "RULE-1641" in all_results['results'], "Rule RULE-1641 missing"
        result = all_results['results']["RULE-1641"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1641 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1641 failed"


    def test_rule_1642(self, all_results):
        """
        Test RULE-1642: YAML line: ussd_support: "planned"
        Priority: MEDIUM
        """
        assert "RULE-1642" in all_results['results'], "Rule RULE-1642 missing"
        result = all_results['results']["RULE-1642"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1642 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1642 failed"


    def test_rule_1643(self, all_results):
        """
        Test RULE-1643: YAML line: agent_network_compatible: true
        Priority: MEDIUM
        """
        assert "RULE-1643" in all_results['results'], "Rule RULE-1643 missing"
        result = all_results['results']["RULE-1643"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1643 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1643 failed"


    def test_rule_1644(self, all_results):
        """
        Test RULE-1644: YAML line: enterprise_financial_inclusion: "market_expansion_strategy"
        Priority: MEDIUM
        """
        assert "RULE-1644" in all_results['results'], "Rule RULE-1644 missing"
        result = all_results['results']["RULE-1644"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1644 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1644 failed"


    def test_rule_1645(self, all_results):
        """
        Test RULE-1645: YAML field 'version' must equal '1.0'
        Priority: HIGH
        """
        assert "RULE-1645" in all_results['results'], "Rule RULE-1645 missing"
        result = all_results['results']["RULE-1645"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "HIGH" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1645 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1645 failed"


    def test_rule_1646(self, all_results):
        """
        Test RULE-1646: YAML field 'date' must equal '2025-09-15'
        Priority: MEDIUM
        """
        assert "RULE-1646" in all_results['results'], "Rule RULE-1646 missing"
        result = all_results['results']["RULE-1646"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1646 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1646 failed"


    def test_rule_1647(self, all_results):
        """
        Test RULE-1647: YAML field 'deprecated' must equal 'False'
        Priority: CRITICAL
        """
        assert "RULE-1647" in all_results['results'], "Rule RULE-1647 missing"
        result = all_results['results']["RULE-1647"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1647 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1647 failed"


    def test_rule_1648(self, all_results):
        """
        Test RULE-1648: YAML field 'classification' must equal 'CONFIDENTIAL - Enterprise ESG Strategy'
        Priority: MEDIUM
        """
        assert "RULE-1648" in all_results['results'], "Rule RULE-1648 missing"
        result = all_results['results']["RULE-1648"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1648 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1648 failed"


    def test_rule_1649(self, all_results):
        """
        Test RULE-1649: YAML field 'environmental_standards.carbon_footprint.tracking_enabled' must equa
        Priority: CRITICAL
        """
        assert "RULE-1649" in all_results['results'], "Rule RULE-1649 missing"
        result = all_results['results']["RULE-1649"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1649 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1649 failed"


    def test_rule_1650(self, all_results):
        """
        Test RULE-1650: YAML field 'environmental_standards.carbon_footprint.reporting_standard' must eq
        Priority: HIGH
        """
        assert "RULE-1650" in all_results['results'], "Rule RULE-1650 missing"
        result = all_results['results']["RULE-1650"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "HIGH" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1650 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1650 failed"


    def test_rule_1651(self, all_results):
        """
        Test RULE-1651: YAML field 'environmental_standards.carbon_footprint.target' must equal 'carbon_
        Priority: MEDIUM
        """
        assert "RULE-1651" in all_results['results'], "Rule RULE-1651 missing"
        result = all_results['results']["RULE-1651"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1651 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1651 failed"


    def test_rule_1652(self, all_results):
        """
        Test RULE-1652: YAML field 'environmental_standards.carbon_footprint.offset_program' must equal 
        Priority: MEDIUM
        """
        assert "RULE-1652" in all_results['results'], "Rule RULE-1652 missing"
        result = all_results['results']["RULE-1652"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1652 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1652 failed"


    def test_rule_1653(self, all_results):
        """
        Test RULE-1653: YAML field 'environmental_standards.carbon_footprint.business_reporting' must eq
        Priority: MEDIUM
        """
        assert "RULE-1653" in all_results['results'], "Rule RULE-1653 missing"
        result = all_results['results']["RULE-1653"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1653 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1653 failed"


    def test_rule_1654(self, all_results):
        """
        Test RULE-1654: YAML field 'environmental_standards.energy_efficiency.green_hosting_preferred' m
        Priority: CRITICAL
        """
        assert "RULE-1654" in all_results['results'], "Rule RULE-1654 missing"
        result = all_results['results']["RULE-1654"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1654 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1654 failed"


    def test_rule_1655(self, all_results):
        """
        Test RULE-1655: YAML field 'environmental_standards.energy_efficiency.renewable_energy_target' m
        Priority: MEDIUM
        """
        assert "RULE-1655" in all_results['results'], "Rule RULE-1655 missing"
        result = all_results['results']["RULE-1655"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1655 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1655 failed"


    def test_rule_1656(self, all_results):
        """
        Test RULE-1656: YAML field 'environmental_standards.energy_efficiency.energy_monitoring' must eq
        Priority: MEDIUM
        """
        assert "RULE-1656" in all_results['results'], "Rule RULE-1656 missing"
        result = all_results['results']["RULE-1656"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1656 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1656 failed"


    def test_rule_1657(self, all_results):
        """
        Test RULE-1657: YAML field 'environmental_standards.energy_efficiency.cost_optimization' must eq
        Priority: MEDIUM
        """
        assert "RULE-1657" in all_results['results'], "Rule RULE-1657 missing"
        result = all_results['results']["RULE-1657"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1657 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1657 failed"


    def test_rule_1658(self, all_results):
        """
        Test RULE-1658: YAML field 'environmental_standards.circular_economy.code_reusability_score' mus
        Priority: MEDIUM
        """
        assert "RULE-1658" in all_results['results'], "Rule RULE-1658 missing"
        result = all_results['results']["RULE-1658"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1658 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1658 failed"


    def test_rule_1659(self, all_results):
        """
        Test RULE-1659: YAML field 'environmental_standards.circular_economy.resource_optimization' must
        Priority: MEDIUM
        """
        assert "RULE-1659" in all_results['results'], "Rule RULE-1659 missing"
        result = all_results['results']["RULE-1659"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1659 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1659 failed"


    def test_rule_1660(self, all_results):
        """
        Test RULE-1660: YAML field 'environmental_standards.circular_economy.waste_reduction' must equal
        Priority: MEDIUM
        """
        assert "RULE-1660" in all_results['results'], "Rule RULE-1660 missing"
        result = all_results['results']["RULE-1660"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1660 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1660 failed"


    def test_rule_1661(self, all_results):
        """
        Test RULE-1661: YAML field 'environmental_standards.circular_economy.business_efficiency' must e
        Priority: MEDIUM
        """
        assert "RULE-1661" in all_results['results'], "Rule RULE-1661 missing"
        result = all_results['results']["RULE-1661"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1661 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1661 failed"


    def test_rule_1662(self, all_results):
        """
        Test RULE-1662: YAML list 'social_responsibility.un_sdg_mapping' must contain 7 elements
        Priority: CRITICAL
        """
        assert "RULE-1662" in all_results['results'], "Rule RULE-1662 missing"
        result = all_results['results']["RULE-1662"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1662 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1662 failed"


    def test_rule_1663(self, all_results):
        """
        Test RULE-1663: YAML field 'social_responsibility.social_impact_metrics.accessibility_score' mus
        Priority: MEDIUM
        """
        assert "RULE-1663" in all_results['results'], "Rule RULE-1663 missing"
        result = all_results['results']["RULE-1663"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1663 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1663 failed"


    def test_rule_1664(self, all_results):
        """
        Test RULE-1664: YAML field 'social_responsibility.social_impact_metrics.inclusion_index' must eq
        Priority: MEDIUM
        """
        assert "RULE-1664" in all_results['results'], "Rule RULE-1664 missing"
        result = all_results['results']["RULE-1664"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1664 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1664 failed"


    def test_rule_1665(self, all_results):
        """
        Test RULE-1665: YAML field 'social_responsibility.social_impact_metrics.community_satisfaction' 
        Priority: MEDIUM
        """
        assert "RULE-1665" in all_results['results'], "Rule RULE-1665 missing"
        result = all_results['results']["RULE-1665"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1665 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1665 failed"


    def test_rule_1666(self, all_results):
        """
        Test RULE-1666: YAML field 'social_responsibility.social_impact_metrics.contributor_diversity' m
        Priority: MEDIUM
        """
        assert "RULE-1666" in all_results['results'], "Rule RULE-1666 missing"
        result = all_results['results']["RULE-1666"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1666 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1666 failed"


    def test_rule_1667(self, all_results):
        """
        Test RULE-1667: YAML field 'social_responsibility.social_impact_metrics.business_value_creation'
        Priority: MEDIUM
        """
        assert "RULE-1667" in all_results['results'], "Rule RULE-1667 missing"
        result = all_results['results']["RULE-1667"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1667 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1667 failed"


    def test_rule_1668(self, all_results):
        """
        Test RULE-1668: YAML list 'governance_excellence.transparency_requirements' must contain 5 eleme
        Priority: CRITICAL
        """
        assert "RULE-1668" in all_results['results'], "Rule RULE-1668 missing"
        result = all_results['results']["RULE-1668"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1668 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1668 failed"


    def test_rule_1669(self, all_results):
        """
        Test RULE-1669: YAML field 'governance_excellence.ethics_framework.code_of_conduct' must equal '
        Priority: CRITICAL
        """
        assert "RULE-1669" in all_results['results'], "Rule RULE-1669 missing"
        result = all_results['results']["RULE-1669"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1669 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1669 failed"


    def test_rule_1670(self, all_results):
        """
        Test RULE-1670: YAML field 'governance_excellence.ethics_framework.conflict_of_interest' must eq
        Priority: CRITICAL
        """
        assert "RULE-1670" in all_results['results'], "Rule RULE-1670 missing"
        result = all_results['results']["RULE-1670"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1670 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1670 failed"


    def test_rule_1671(self, all_results):
        """
        Test RULE-1671: YAML field 'governance_excellence.ethics_framework.whistleblower_protection' mus
        Priority: CRITICAL
        """
        assert "RULE-1671" in all_results['results'], "Rule RULE-1671 missing"
        result = all_results['results']["RULE-1671"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1671 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1671 failed"


    def test_rule_1672(self, all_results):
        """
        Test RULE-1672: YAML field 'governance_excellence.ethics_framework.business_ethics' must equal '
        Priority: CRITICAL
        """
        assert "RULE-1672" in all_results['results'], "Rule RULE-1672 missing"
        result = all_results['results']["RULE-1672"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1672 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1672 failed"


    def test_rule_1673(self, all_results):
        """
        Test RULE-1673: YAML field 'governance_excellence.stakeholder_engagement.user_council' must equa
        Priority: MEDIUM
        """
        assert "RULE-1673" in all_results['results'], "Rule RULE-1673 missing"
        result = all_results['results']["RULE-1673"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1673 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1673 failed"


    def test_rule_1674(self, all_results):
        """
        Test RULE-1674: YAML field 'governance_excellence.stakeholder_engagement.developer_advisory' mus
        Priority: MEDIUM
        """
        assert "RULE-1674" in all_results['results'], "Rule RULE-1674 missing"
        result = all_results['results']["RULE-1674"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1674 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1674 failed"


    def test_rule_1675(self, all_results):
        """
        Test RULE-1675: YAML field 'governance_excellence.stakeholder_engagement.regulatory_liaison' mus
        Priority: MEDIUM
        """
        assert "RULE-1675" in all_results['results'], "Rule RULE-1675 missing"
        result = all_results['results']["RULE-1675"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1675 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1675 failed"


    def test_rule_1676(self, all_results):
        """
        Test RULE-1676: YAML field 'governance_excellence.stakeholder_engagement.community_feedback' mus
        Priority: MEDIUM
        """
        assert "RULE-1676" in all_results['results'], "Rule RULE-1676 missing"
        result = all_results['results']["RULE-1676"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1676 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1676 failed"


    def test_rule_1677(self, all_results):
        """
        Test RULE-1677: YAML field 'governance_excellence.stakeholder_engagement.enterprise_advisory_boa
        Priority: MEDIUM
        """
        assert "RULE-1677" in all_results['results'], "Rule RULE-1677 missing"
        result = all_results['results']["RULE-1677"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1677 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1677 failed"


    def test_rule_1678(self, all_results):
        """
        Test RULE-1678: YAML line: version: "1.0"
        Priority: MEDIUM
        """
        assert "RULE-1678" in all_results['results'], "Rule RULE-1678 missing"
        result = all_results['results']["RULE-1678"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1678 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1678 failed"


    def test_rule_1679(self, all_results):
        """
        Test RULE-1679: YAML line: date: "2025-09-15"
        Priority: MEDIUM
        """
        assert "RULE-1679" in all_results['results'], "Rule RULE-1679 missing"
        result = all_results['results']["RULE-1679"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1679 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1679 failed"


    def test_rule_1680(self, all_results):
        """
        Test RULE-1680: YAML line: deprecated: false
        Priority: MEDIUM
        """
        assert "RULE-1680" in all_results['results'], "Rule RULE-1680 missing"
        result = all_results['results']["RULE-1680"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1680 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1680 failed"


    def test_rule_1681(self, all_results):
        """
        Test RULE-1681: YAML line: classification: "CONFIDENTIAL - Enterprise ESG Strategy"
        Priority: MEDIUM
        """
        assert "RULE-1681" in all_results['results'], "Rule RULE-1681 missing"
        result = all_results['results']["RULE-1681"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1681 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1681 failed"


    def test_rule_1682(self, all_results):
        """
        Test RULE-1682: YAML line: environmental_standards:
        Priority: HIGH
        """
        assert "RULE-1682" in all_results['results'], "Rule RULE-1682 missing"
        result = all_results['results']["RULE-1682"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "HIGH" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1682 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1682 failed"


    def test_rule_1683(self, all_results):
        """
        Test RULE-1683: YAML line: carbon_footprint:
        Priority: MEDIUM
        """
        assert "RULE-1683" in all_results['results'], "Rule RULE-1683 missing"
        result = all_results['results']["RULE-1683"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1683 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1683 failed"


    def test_rule_1684(self, all_results):
        """
        Test RULE-1684: YAML line: tracking_enabled: true
        Priority: MEDIUM
        """
        assert "RULE-1684" in all_results['results'], "Rule RULE-1684 missing"
        result = all_results['results']["RULE-1684"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1684 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1684 failed"


    def test_rule_1685(self, all_results):
        """
        Test RULE-1685: YAML line: reporting_standard: "GHG Protocol"
        Priority: HIGH
        """
        assert "RULE-1685" in all_results['results'], "Rule RULE-1685 missing"
        result = all_results['results']["RULE-1685"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "HIGH" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1685 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1685 failed"


    def test_rule_1686(self, all_results):
        """
        Test RULE-1686: YAML line: target: "carbon_neutral_2027"
        Priority: MEDIUM
        """
        assert "RULE-1686" in all_results['results'], "Rule RULE-1686 missing"
        result = all_results['results']["RULE-1686"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1686 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1686 failed"


    def test_rule_1687(self, all_results):
        """
        Test RULE-1687: YAML line: offset_program: "enterprise_verified"
        Priority: MEDIUM
        """
        assert "RULE-1687" in all_results['results'], "Rule RULE-1687 missing"
        result = all_results['results']["RULE-1687"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1687 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1687 failed"


    def test_rule_1688(self, all_results):
        """
        Test RULE-1688: YAML line: business_reporting: "annual_sustainability_report"
        Priority: MEDIUM
        """
        assert "RULE-1688" in all_results['results'], "Rule RULE-1688 missing"
        result = all_results['results']["RULE-1688"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1688 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1688 failed"


    def test_rule_1689(self, all_results):
        """
        Test RULE-1689: YAML line: energy_efficiency:
        Priority: MEDIUM
        """
        assert "RULE-1689" in all_results['results'], "Rule RULE-1689 missing"
        result = all_results['results']["RULE-1689"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1689 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1689 failed"


    def test_rule_1690(self, all_results):
        """
        Test RULE-1690: YAML line: green_hosting_preferred: true
        Priority: MEDIUM
        """
        assert "RULE-1690" in all_results['results'], "Rule RULE-1690 missing"
        result = all_results['results']["RULE-1690"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1690 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1690 failed"


    def test_rule_1691(self, all_results):
        """
        Test RULE-1691: YAML line: renewable_energy_target: "100%_by_2026"
        Priority: MEDIUM
        """
        assert "RULE-1691" in all_results['results'], "Rule RULE-1691 missing"
        result = all_results['results']["RULE-1691"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1691 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1691 failed"


    def test_rule_1692(self, all_results):
        """
        Test RULE-1692: YAML line: energy_monitoring: "24_meta_orchestration/monitoring/energy/"
        Priority: MEDIUM
        """
        assert "RULE-1692" in all_results['results'], "Rule RULE-1692 missing"
        result = all_results['results']["RULE-1692"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1692 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1692 failed"


    def test_rule_1693(self, all_results):
        """
        Test RULE-1693: YAML line: cost_optimization: "efficiency_roi_tracking"
        Priority: MEDIUM
        """
        assert "RULE-1693" in all_results['results'], "Rule RULE-1693 missing"
        result = all_results['results']["RULE-1693"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1693 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1693 failed"


    def test_rule_1694(self, all_results):
        """
        Test RULE-1694: YAML line: circular_economy:
        Priority: MEDIUM
        """
        assert "RULE-1694" in all_results['results'], "Rule RULE-1694 missing"
        result = all_results['results']["RULE-1694"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1694 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1694 failed"


    def test_rule_1695(self, all_results):
        """
        Test RULE-1695: YAML line: code_reusability_score: "track"
        Priority: MEDIUM
        """
        assert "RULE-1695" in all_results['results'], "Rule RULE-1695 missing"
        result = all_results['results']["RULE-1695"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1695 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1695 failed"


    def test_rule_1696(self, all_results):
        """
        Test RULE-1696: YAML line: resource_optimization: "continuous"
        Priority: MEDIUM
        """
        assert "RULE-1696" in all_results['results'], "Rule RULE-1696 missing"
        result = all_results['results']["RULE-1696"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1696 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1696 failed"


    def test_rule_1697(self, all_results):
        """
        Test RULE-1697: YAML line: waste_reduction: "digital_first"
        Priority: MEDIUM
        """
        assert "RULE-1697" in all_results['results'], "Rule RULE-1697 missing"
        result = all_results['results']["RULE-1697"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1697 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1697 failed"


    def test_rule_1698(self, all_results):
        """
        Test RULE-1698: YAML line: business_efficiency: "operational_cost_reduction"
        Priority: MEDIUM
        """
        assert "RULE-1698" in all_results['results'], "Rule RULE-1698 missing"
        result = all_results['results']["RULE-1698"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1698 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1698 failed"


    def test_rule_1699(self, all_results):
        """
        Test RULE-1699: YAML line: social_responsibility:
        Priority: MEDIUM
        """
        assert "RULE-1699" in all_results['results'], "Rule RULE-1699 missing"
        result = all_results['results']["RULE-1699"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1699 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1699 failed"


    def test_rule_1700(self, all_results):
        """
        Test RULE-1700: YAML line: un_sdg_mapping:
        Priority: MEDIUM
        """
        assert "RULE-1700" in all_results['results'], "Rule RULE-1700 missing"
        result = all_results['results']["RULE-1700"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1700 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1700 failed"


    def test_rule_1701(self, all_results):
        """
        Test RULE-1701: YAML line: - sdg_1: "No Poverty - Financial inclusion features"
        Priority: MEDIUM
        """
        assert "RULE-1701" in all_results['results'], "Rule RULE-1701 missing"
        result = all_results['results']["RULE-1701"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1701 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1701 failed"


    def test_rule_1702(self, all_results):
        """
        Test RULE-1702: YAML line: - sdg_4: "Quality Education - Open educational resources"
        Priority: MEDIUM
        """
        assert "RULE-1702" in all_results['results'], "Rule RULE-1702 missing"
        result = all_results['results']["RULE-1702"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1702 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1702 failed"


    def test_rule_1703(self, all_results):
        """
        Test RULE-1703: YAML line: - sdg_5: "Gender Equality - Inclusive design principles"
        Priority: MEDIUM
        """
        assert "RULE-1703" in all_results['results'], "Rule RULE-1703 missing"
        result = all_results['results']["RULE-1703"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1703 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1703 failed"


    def test_rule_1704(self, all_results):
        """
        Test RULE-1704: YAML line: - sdg_8: "Decent Work - Fair contributor compensation"
        Priority: MEDIUM
        """
        assert "RULE-1704" in all_results['results'], "Rule RULE-1704 missing"
        result = all_results['results']["RULE-1704"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1704 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1704 failed"


    def test_rule_1705(self, all_results):
        """
        Test RULE-1705: YAML line: - sdg_10: "Reduced Inequalities - Accessibility compliance"
        Priority: CRITICAL
        """
        assert "RULE-1705" in all_results['results'], "Rule RULE-1705 missing"
        result = all_results['results']["RULE-1705"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1705 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1705 failed"


    def test_rule_1706(self, all_results):
        """
        Test RULE-1706: YAML line: - sdg_16: "Peace, Justice, Strong Institutions - Transparent governan
        Priority: MEDIUM
        """
        assert "RULE-1706" in all_results['results'], "Rule RULE-1706 missing"
        result = all_results['results']["RULE-1706"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1706 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1706 failed"


    def test_rule_1707(self, all_results):
        """
        Test RULE-1707: YAML line: - sdg_17: "Partnerships - Multi-stakeholder collaboration"
        Priority: MEDIUM
        """
        assert "RULE-1707" in all_results['results'], "Rule RULE-1707 missing"
        result = all_results['results']["RULE-1707"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1707 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1707 failed"


    def test_rule_1708(self, all_results):
        """
        Test RULE-1708: YAML line: social_impact_metrics:
        Priority: MEDIUM
        """
        assert "RULE-1708" in all_results['results'], "Rule RULE-1708 missing"
        result = all_results['results']["RULE-1708"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1708 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1708 failed"


    def test_rule_1709(self, all_results):
        """
        Test RULE-1709: YAML line: accessibility_score: "track"
        Priority: MEDIUM
        """
        assert "RULE-1709" in all_results['results'], "Rule RULE-1709 missing"
        result = all_results['results']["RULE-1709"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1709 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1709 failed"


    def test_rule_1710(self, all_results):
        """
        Test RULE-1710: YAML line: inclusion_index: "track"
        Priority: MEDIUM
        """
        assert "RULE-1710" in all_results['results'], "Rule RULE-1710 missing"
        result = all_results['results']["RULE-1710"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1710 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1710 failed"


    def test_rule_1711(self, all_results):
        """
        Test RULE-1711: YAML line: community_satisfaction: "survey_quarterly"
        Priority: MEDIUM
        """
        assert "RULE-1711" in all_results['results'], "Rule RULE-1711 missing"
        result = all_results['results']["RULE-1711"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1711 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1711 failed"


    def test_rule_1712(self, all_results):
        """
        Test RULE-1712: YAML line: contributor_diversity: "measure_report"
        Priority: MEDIUM
        """
        assert "RULE-1712" in all_results['results'], "Rule RULE-1712 missing"
        result = all_results['results']["RULE-1712"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1712 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1712 failed"


    def test_rule_1713(self, all_results):
        """
        Test RULE-1713: YAML line: business_value_creation: "community_driven_innovation"
        Priority: MEDIUM
        """
        assert "RULE-1713" in all_results['results'], "Rule RULE-1713 missing"
        result = all_results['results']["RULE-1713"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1713 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1713 failed"


    def test_rule_1714(self, all_results):
        """
        Test RULE-1714: YAML line: governance_excellence:
        Priority: MEDIUM
        """
        assert "RULE-1714" in all_results['results'], "Rule RULE-1714 missing"
        result = all_results['results']["RULE-1714"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1714 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1714 failed"


    def test_rule_1715(self, all_results):
        """
        Test RULE-1715: YAML line: transparency_requirements:
        Priority: MEDIUM
        """
        assert "RULE-1715" in all_results['results'], "Rule RULE-1715 missing"
        result = all_results['results']["RULE-1715"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1715 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1715 failed"


    def test_rule_1716(self, all_results):
        """
        Test RULE-1716: YAML line: - "All governance decisions public (non-confidential)"
        Priority: MEDIUM
        """
        assert "RULE-1716" in all_results['results'], "Rule RULE-1716 missing"
        result = all_results['results']["RULE-1716"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1716 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1716 failed"


    def test_rule_1717(self, all_results):
        """
        Test RULE-1717: YAML line: - "Financial transparency (where legally required)"
        Priority: CRITICAL
        """
        assert "RULE-1717" in all_results['results'], "Rule RULE-1717 missing"
        result = all_results['results']["RULE-1717"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1717 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1717 failed"


    def test_rule_1718(self, all_results):
        """
        Test RULE-1718: YAML line: - "Stakeholder engagement records"
        Priority: MEDIUM
        """
        assert "RULE-1718" in all_results['results'], "Rule RULE-1718 missing"
        result = all_results['results']["RULE-1718"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1718 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1718 failed"


    def test_rule_1719(self, all_results):
        """
        Test RULE-1719: YAML line: - "Impact assessment reports"
        Priority: MEDIUM
        """
        assert "RULE-1719" in all_results['results'], "Rule RULE-1719 missing"
        result = all_results['results']["RULE-1719"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1719 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1719 failed"


    def test_rule_1720(self, all_results):
        """
        Test RULE-1720: YAML line: - "Enterprise accountability framework"
        Priority: MEDIUM
        """
        assert "RULE-1720" in all_results['results'], "Rule RULE-1720 missing"
        result = all_results['results']["RULE-1720"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1720 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1720 failed"


    def test_rule_1721(self, all_results):
        """
        Test RULE-1721: YAML line: ethics_framework:
        Priority: MEDIUM
        """
        assert "RULE-1721" in all_results['results'], "Rule RULE-1721 missing"
        result = all_results['results']["RULE-1721"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1721 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1721 failed"


    def test_rule_1722(self, all_results):
        """
        Test RULE-1722: YAML line: code_of_conduct: "23_compliance/social_ecosystem/ethics/code_of_condu
        Priority: CRITICAL
        """
        assert "RULE-1722" in all_results['results'], "Rule RULE-1722 missing"
        result = all_results['results']["RULE-1722"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1722 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1722 failed"


    def test_rule_1723(self, all_results):
        """
        Test RULE-1723: YAML line: conflict_of_interest: "23_compliance/social_ecosystem/ethics/conflict
        Priority: CRITICAL
        """
        assert "RULE-1723" in all_results['results'], "Rule RULE-1723 missing"
        result = all_results['results']["RULE-1723"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1723 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1723 failed"


    def test_rule_1724(self, all_results):
        """
        Test RULE-1724: YAML line: whistleblower_protection: "23_compliance/social_ecosystem/ethics/whis
        Priority: CRITICAL
        """
        assert "RULE-1724" in all_results['results'], "Rule RULE-1724 missing"
        result = all_results['results']["RULE-1724"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1724 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1724 failed"


    def test_rule_1725(self, all_results):
        """
        Test RULE-1725: YAML line: business_ethics: "enterprise_compliance_integration"
        Priority: CRITICAL
        """
        assert "RULE-1725" in all_results['results'], "Rule RULE-1725 missing"
        result = all_results['results']["RULE-1725"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1725 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1725 failed"


    def test_rule_1726(self, all_results):
        """
        Test RULE-1726: YAML line: stakeholder_engagement:
        Priority: MEDIUM
        """
        assert "RULE-1726" in all_results['results'], "Rule RULE-1726 missing"
        result = all_results['results']["RULE-1726"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1726 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1726 failed"


    def test_rule_1727(self, all_results):
        """
        Test RULE-1727: YAML line: user_council: "planned"
        Priority: MEDIUM
        """
        assert "RULE-1727" in all_results['results'], "Rule RULE-1727 missing"
        result = all_results['results']["RULE-1727"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1727 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1727 failed"


    def test_rule_1728(self, all_results):
        """
        Test RULE-1728: YAML line: developer_advisory: "active"
        Priority: MEDIUM
        """
        assert "RULE-1728" in all_results['results'], "Rule RULE-1728 missing"
        result = all_results['results']["RULE-1728"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1728 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1728 failed"


    def test_rule_1729(self, all_results):
        """
        Test RULE-1729: YAML line: regulatory_liaison: "active"
        Priority: MEDIUM
        """
        assert "RULE-1729" in all_results['results'], "Rule RULE-1729 missing"
        result = all_results['results']["RULE-1729"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1729 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1729 failed"


    def test_rule_1730(self, all_results):
        """
        Test RULE-1730: YAML line: community_feedback: "continuous"
        Priority: MEDIUM
        """
        assert "RULE-1730" in all_results['results'], "Rule RULE-1730 missing"
        result = all_results['results']["RULE-1730"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1730 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1730 failed"


    def test_rule_1731(self, all_results):
        """
        Test RULE-1731: YAML line: enterprise_advisory_board: "strategic_direction"
        Priority: MEDIUM
        """
        assert "RULE-1731" in all_results['results'], "Rule RULE-1731 missing"
        result = all_results['results']["RULE-1731"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1731 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1731 failed"


    def test_rule_1732(self, all_results):
        """
        Test RULE-1732: YAML field 'version' must equal '1.0'
        Priority: HIGH
        """
        assert "RULE-1732" in all_results['results'], "Rule RULE-1732 missing"
        result = all_results['results']["RULE-1732"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "HIGH" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1732 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1732 failed"


    def test_rule_1733(self, all_results):
        """
        Test RULE-1733: YAML field 'date' must equal '2025-09-15'
        Priority: MEDIUM
        """
        assert "RULE-1733" in all_results['results'], "Rule RULE-1733 missing"
        result = all_results['results']["RULE-1733"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1733 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1733 failed"


    def test_rule_1734(self, all_results):
        """
        Test RULE-1734: YAML field 'deprecated' must equal 'False'
        Priority: CRITICAL
        """
        assert "RULE-1734" in all_results['results'], "Rule RULE-1734 missing"
        result = all_results['results']["RULE-1734"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1734 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1734 failed"


    def test_rule_1735(self, all_results):
        """
        Test RULE-1735: YAML field 'classification' must equal 'CONFIDENTIAL - Enterprise Market Analysi
        Priority: MEDIUM
        """
        assert "RULE-1735" in all_results['results'], "Rule RULE-1735 missing"
        result = all_results['results']["RULE-1735"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1735 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1735 failed"


    def test_rule_1736(self, all_results):
        """
        Test RULE-1736: YAML list 'sector_support.financial_services.regulations' must contain 6 element
        Priority: MEDIUM
        """
        assert "RULE-1736" in all_results['results'], "Rule RULE-1736 missing"
        result = all_results['results']["RULE-1736"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1736 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1736 failed"


    def test_rule_1737(self, all_results):
        """
        Test RULE-1737: YAML field 'sector_support.financial_services.risk_level' must equal 'high'
        Priority: MEDIUM
        """
        assert "RULE-1737" in all_results['results'], "Rule RULE-1737 missing"
        result = all_results['results']["RULE-1737"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1737 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1737 failed"


    def test_rule_1738(self, all_results):
        """
        Test RULE-1738: YAML field 'sector_support.financial_services.audit_frequency' must equal 'annua
        Priority: MEDIUM
        """
        assert "RULE-1738" in all_results['results'], "Rule RULE-1738 missing"
        result = all_results['results']["RULE-1738"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1738 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1738 failed"


    def test_rule_1739(self, all_results):
        """
        Test RULE-1739: YAML field 'sector_support.financial_services.specialized_controls' must equal '
        Priority: MEDIUM
        """
        assert "RULE-1739" in all_results['results'], "Rule RULE-1739 missing"
        result = all_results['results']["RULE-1739"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1739 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1739 failed"


    def test_rule_1740(self, all_results):
        """
        Test RULE-1740: YAML field 'sector_support.financial_services.business_opportunity' must equal '
        Priority: MEDIUM
        """
        assert "RULE-1740" in all_results['results'], "Rule RULE-1740 missing"
        result = all_results['results']["RULE-1740"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1740 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1740 failed"


    def test_rule_1741(self, all_results):
        """
        Test RULE-1741: YAML field 'sector_support.financial_services.revenue_potential' must equal 'sig
        Priority: MEDIUM
        """
        assert "RULE-1741" in all_results['results'], "Rule RULE-1741 missing"
        result = all_results['results']["RULE-1741"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1741 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1741 failed"


    def test_rule_1742(self, all_results):
        """
        Test RULE-1742: YAML list 'sector_support.healthcare.regulations' must contain 5 elements
        Priority: MEDIUM
        """
        assert "RULE-1742" in all_results['results'], "Rule RULE-1742 missing"
        result = all_results['results']["RULE-1742"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1742 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1742 failed"


    def test_rule_1743(self, all_results):
        """
        Test RULE-1743: YAML field 'sector_support.healthcare.risk_level' must equal 'critical'
        Priority: CRITICAL
        """
        assert "RULE-1743" in all_results['results'], "Rule RULE-1743 missing"
        result = all_results['results']["RULE-1743"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1743 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1743 failed"


    def test_rule_1744(self, all_results):
        """
        Test RULE-1744: YAML field 'sector_support.healthcare.audit_frequency' must equal 'biannual'
        Priority: MEDIUM
        """
        assert "RULE-1744" in all_results['results'], "Rule RULE-1744 missing"
        result = all_results['results']["RULE-1744"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1744 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1744 failed"


    def test_rule_1745(self, all_results):
        """
        Test RULE-1745: YAML field 'sector_support.healthcare.specialized_controls' must equal '20_found
        Priority: CRITICAL
        """
        assert "RULE-1745" in all_results['results'], "Rule RULE-1745 missing"
        result = all_results['results']["RULE-1745"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1745 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1745 failed"


    def test_rule_1746(self, all_results):
        """
        Test RULE-1746: YAML field 'sector_support.healthcare.business_opportunity' must equal 'emerging
        Priority: MEDIUM
        """
        assert "RULE-1746" in all_results['results'], "Rule RULE-1746 missing"
        result = all_results['results']["RULE-1746"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1746 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1746 failed"


    def test_rule_1747(self, all_results):
        """
        Test RULE-1747: YAML field 'sector_support.healthcare.revenue_potential' must equal 'moderate'
        Priority: MEDIUM
        """
        assert "RULE-1747" in all_results['results'], "Rule RULE-1747 missing"
        result = all_results['results']["RULE-1747"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1747 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1747 failed"


    def test_rule_1748(self, all_results):
        """
        Test RULE-1748: YAML list 'sector_support.government_public_sector.regulations' must contain 4 e
        Priority: MEDIUM
        """
        assert "RULE-1748" in all_results['results'], "Rule RULE-1748 missing"
        result = all_results['results']["RULE-1748"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1748 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1748 failed"


    def test_rule_1749(self, all_results):
        """
        Test RULE-1749: YAML field 'sector_support.government_public_sector.risk_level' must equal 'crit
        Priority: CRITICAL
        """
        assert "RULE-1749" in all_results['results'], "Rule RULE-1749 missing"
        result = all_results['results']["RULE-1749"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1749 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1749 failed"


    def test_rule_1750(self, all_results):
        """
        Test RULE-1750: YAML field 'sector_support.government_public_sector.audit_frequency' must equal 
        Priority: MEDIUM
        """
        assert "RULE-1750" in all_results['results'], "Rule RULE-1750 missing"
        result = all_results['results']["RULE-1750"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1750 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1750 failed"


    def test_rule_1751(self, all_results):
        """
        Test RULE-1751: YAML field 'sector_support.government_public_sector.specialized_controls' must e
        Priority: CRITICAL
        """
        assert "RULE-1751" in all_results['results'], "Rule RULE-1751 missing"
        result = all_results['results']["RULE-1751"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1751 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1751 failed"


    def test_rule_1752(self, all_results):
        """
        Test RULE-1752: YAML field 'sector_support.government_public_sector.business_opportunity' must e
        Priority: MEDIUM
        """
        assert "RULE-1752" in all_results['results'], "Rule RULE-1752 missing"
        result = all_results['results']["RULE-1752"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1752 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1752 failed"


    def test_rule_1753(self, all_results):
        """
        Test RULE-1753: YAML field 'sector_support.government_public_sector.revenue_potential' must equa
        Priority: MEDIUM
        """
        assert "RULE-1753" in all_results['results'], "Rule RULE-1753 missing"
        result = all_results['results']["RULE-1753"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1753 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1753 failed"


    def test_rule_1754(self, all_results):
        """
        Test RULE-1754: YAML list 'sector_support.education.regulations' must contain 4 elements
        Priority: HIGH
        """
        assert "RULE-1754" in all_results['results'], "Rule RULE-1754 missing"
        result = all_results['results']["RULE-1754"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "HIGH" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1754 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1754 failed"


    def test_rule_1755(self, all_results):
        """
        Test RULE-1755: YAML field 'sector_support.education.risk_level' must equal 'medium'
        Priority: MEDIUM
        """
        assert "RULE-1755" in all_results['results'], "Rule RULE-1755 missing"
        result = all_results['results']["RULE-1755"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1755 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1755 failed"


    def test_rule_1756(self, all_results):
        """
        Test RULE-1756: YAML field 'sector_support.education.audit_frequency' must equal 'annual'
        Priority: MEDIUM
        """
        assert "RULE-1756" in all_results['results'], "Rule RULE-1756 missing"
        result = all_results['results']["RULE-1756"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1756 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1756 failed"


    def test_rule_1757(self, all_results):
        """
        Test RULE-1757: YAML field 'sector_support.education.specialized_controls' must equal '13_ui_lay
        Priority: MEDIUM
        """
        assert "RULE-1757" in all_results['results'], "Rule RULE-1757 missing"
        result = all_results['results']["RULE-1757"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1757 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1757 failed"


    def test_rule_1758(self, all_results):
        """
        Test RULE-1758: YAML field 'sector_support.education.business_opportunity' must equal 'social_im
        Priority: MEDIUM
        """
        assert "RULE-1758" in all_results['results'], "Rule RULE-1758 missing"
        result = all_results['results']["RULE-1758"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1758 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1758 failed"


    def test_rule_1759(self, all_results):
        """
        Test RULE-1759: YAML field 'sector_support.education.revenue_potential' must equal 'moderate'
        Priority: MEDIUM
        """
        assert "RULE-1759" in all_results['results'], "Rule RULE-1759 missing"
        result = all_results['results']["RULE-1759"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1759 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1759 failed"


    def test_rule_1760(self, all_results):
        """
        Test RULE-1760: YAML list 'sector_support.gaming_entertainment.regulations' must contain 4 eleme
        Priority: MEDIUM
        """
        assert "RULE-1760" in all_results['results'], "Rule RULE-1760 missing"
        result = all_results['results']["RULE-1760"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1760 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1760 failed"


    def test_rule_1761(self, all_results):
        """
        Test RULE-1761: YAML field 'sector_support.gaming_entertainment.risk_level' must equal 'medium'
        Priority: MEDIUM
        """
        assert "RULE-1761" in all_results['results'], "Rule RULE-1761 missing"
        result = all_results['results']["RULE-1761"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1761 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1761 failed"


    def test_rule_1762(self, all_results):
        """
        Test RULE-1762: YAML field 'sector_support.gaming_entertainment.audit_frequency' must equal 'ann
        Priority: MEDIUM
        """
        assert "RULE-1762" in all_results['results'], "Rule RULE-1762 missing"
        result = all_results['results']["RULE-1762"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1762 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1762 failed"


    def test_rule_1763(self, all_results):
        """
        Test RULE-1763: YAML field 'sector_support.gaming_entertainment.specialized_controls' must equal
        Priority: MEDIUM
        """
        assert "RULE-1763" in all_results['results'], "Rule RULE-1763 missing"
        result = all_results['results']["RULE-1763"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1763 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1763 failed"


    def test_rule_1764(self, all_results):
        """
        Test RULE-1764: YAML field 'sector_support.gaming_entertainment.business_opportunity' must equal
        Priority: MEDIUM
        """
        assert "RULE-1764" in all_results['results'], "Rule RULE-1764 missing"
        result = all_results['results']["RULE-1764"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1764 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1764 failed"


    def test_rule_1765(self, all_results):
        """
        Test RULE-1765: YAML field 'sector_support.gaming_entertainment.revenue_potential' must equal 'h
        Priority: MEDIUM
        """
        assert "RULE-1765" in all_results['results'], "Rule RULE-1765 missing"
        result = all_results['results']["RULE-1765"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1765 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1765 failed"


    def test_rule_1766(self, all_results):
        """
        Test RULE-1766: YAML list 'sector_support.iot_manufacturing.regulations' must contain 4 elements
        Priority: CRITICAL
        """
        assert "RULE-1766" in all_results['results'], "Rule RULE-1766 missing"
        result = all_results['results']["RULE-1766"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1766 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1766 failed"


    def test_rule_1767(self, all_results):
        """
        Test RULE-1767: YAML field 'sector_support.iot_manufacturing.risk_level' must equal 'high'
        Priority: MEDIUM
        """
        assert "RULE-1767" in all_results['results'], "Rule RULE-1767 missing"
        result = all_results['results']["RULE-1767"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1767 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1767 failed"


    def test_rule_1768(self, all_results):
        """
        Test RULE-1768: YAML field 'sector_support.iot_manufacturing.audit_frequency' must equal 'per_pr
        Priority: MEDIUM
        """
        assert "RULE-1768" in all_results['results'], "Rule RULE-1768 missing"
        result = all_results['results']["RULE-1768"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1768 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1768 failed"


    def test_rule_1769(self, all_results):
        """
        Test RULE-1769: YAML field 'sector_support.iot_manufacturing.specialized_controls' must equal '1
        Priority: CRITICAL
        """
        assert "RULE-1769" in all_results['results'], "Rule RULE-1769 missing"
        result = all_results['results']["RULE-1769"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1769 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1769 failed"


    def test_rule_1770(self, all_results):
        """
        Test RULE-1770: YAML field 'sector_support.iot_manufacturing.business_opportunity' must equal 'e
        Priority: MEDIUM
        """
        assert "RULE-1770" in all_results['results'], "Rule RULE-1770 missing"
        result = all_results['results']["RULE-1770"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1770 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1770 failed"


    def test_rule_1771(self, all_results):
        """
        Test RULE-1771: YAML field 'sector_support.iot_manufacturing.revenue_potential' must equal 'sign
        Priority: MEDIUM
        """
        assert "RULE-1771" in all_results['results'], "Rule RULE-1771 missing"
        result = all_results['results']["RULE-1771"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1771 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1771 failed"


    def test_rule_1772(self, all_results):
        """
        Test RULE-1772: YAML field 'cross_sector_features.regulatory_change_notification' must equal 'Tr
        Priority: CRITICAL
        """
        assert "RULE-1772" in all_results['results'], "Rule RULE-1772 missing"
        result = all_results['results']["RULE-1772"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1772 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1772 failed"


    def test_rule_1773(self, all_results):
        """
        Test RULE-1773: YAML field 'cross_sector_features.sector_specific_templates' must equal 'True'
        Priority: CRITICAL
        """
        assert "RULE-1773" in all_results['results'], "Rule RULE-1773 missing"
        result = all_results['results']["RULE-1773"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1773 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1773 failed"


    def test_rule_1774(self, all_results):
        """
        Test RULE-1774: YAML field 'cross_sector_features.compliance_gap_analysis' must equal 'automated
        Priority: CRITICAL
        """
        assert "RULE-1774" in all_results['results'], "Rule RULE-1774 missing"
        result = all_results['results']["RULE-1774"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1774 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1774 failed"


    def test_rule_1775(self, all_results):
        """
        Test RULE-1775: YAML field 'cross_sector_features.risk_assessment_tools' must equal '07_governan
        Priority: CRITICAL
        """
        assert "RULE-1775" in all_results['results'], "Rule RULE-1775 missing"
        result = all_results['results']["RULE-1775"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1775 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1775 failed"


    def test_rule_1776(self, all_results):
        """
        Test RULE-1776: YAML field 'cross_sector_features.audit_preparation' must equal '23_compliance/s
        Priority: CRITICAL
        """
        assert "RULE-1776" in all_results['results'], "Rule RULE-1776 missing"
        result = all_results['results']["RULE-1776"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1776 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1776 failed"


    def test_rule_1777(self, all_results):
        """
        Test RULE-1777: YAML field 'cross_sector_features.business_development' must equal 'sector_speci
        Priority: MEDIUM
        """
        assert "RULE-1777" in all_results['results'], "Rule RULE-1777 missing"
        result = all_results['results']["RULE-1777"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1777 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1777 failed"


    def test_rule_1778(self, all_results):
        """
        Test RULE-1778: YAML line: version: "1.0"
        Priority: MEDIUM
        """
        assert "RULE-1778" in all_results['results'], "Rule RULE-1778 missing"
        result = all_results['results']["RULE-1778"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1778 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1778 failed"


    def test_rule_1779(self, all_results):
        """
        Test RULE-1779: YAML line: date: "2025-09-15"
        Priority: MEDIUM
        """
        assert "RULE-1779" in all_results['results'], "Rule RULE-1779 missing"
        result = all_results['results']["RULE-1779"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1779 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1779 failed"


    def test_rule_1780(self, all_results):
        """
        Test RULE-1780: YAML line: deprecated: false
        Priority: MEDIUM
        """
        assert "RULE-1780" in all_results['results'], "Rule RULE-1780 missing"
        result = all_results['results']["RULE-1780"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1780 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1780 failed"


    def test_rule_1781(self, all_results):
        """
        Test RULE-1781: YAML line: classification: "CONFIDENTIAL - Enterprise Market Analysis"
        Priority: MEDIUM
        """
        assert "RULE-1781" in all_results['results'], "Rule RULE-1781 missing"
        result = all_results['results']["RULE-1781"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1781 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1781 failed"


    def test_rule_1782(self, all_results):
        """
        Test RULE-1782: YAML line: sector_support:
        Priority: MEDIUM
        """
        assert "RULE-1782" in all_results['results'], "Rule RULE-1782 missing"
        result = all_results['results']["RULE-1782"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1782 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1782 failed"


    def test_rule_1783(self, all_results):
        """
        Test RULE-1783: YAML line: financial_services:
        Priority: MEDIUM
        """
        assert "RULE-1783" in all_results['results'], "Rule RULE-1783 missing"
        result = all_results['results']["RULE-1783"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1783 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1783 failed"


    def test_rule_1784(self, all_results):
        """
        Test RULE-1784: YAML line: regulations: ["MiCA", "PSD2", "Basel III", "SOX", "FINMA", "BaFin"]
        Priority: MEDIUM
        """
        assert "RULE-1784" in all_results['results'], "Rule RULE-1784 missing"
        result = all_results['results']["RULE-1784"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1784 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1784 failed"


    def test_rule_1785(self, all_results):
        """
        Test RULE-1785: YAML line: risk_level: "high"
        Priority: MEDIUM
        """
        assert "RULE-1785" in all_results['results'], "Rule RULE-1785 missing"
        result = all_results['results']["RULE-1785"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1785 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1785 failed"


    def test_rule_1786(self, all_results):
        """
        Test RULE-1786: YAML line: audit_frequency: "annual"
        Priority: MEDIUM
        """
        assert "RULE-1786" in all_results['results'], "Rule RULE-1786 missing"
        result = all_results['results']["RULE-1786"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1786 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1786 failed"


    def test_rule_1787(self, all_results):
        """
        Test RULE-1787: YAML line: specialized_controls: "21_post_quantum_crypto/financial/"
        Priority: MEDIUM
        """
        assert "RULE-1787" in all_results['results'], "Rule RULE-1787 missing"
        result = all_results['results']["RULE-1787"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1787 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1787 failed"


    def test_rule_1788(self, all_results):
        """
        Test RULE-1788: YAML line: business_opportunity: "high_value_market"
        Priority: MEDIUM
        """
        assert "RULE-1788" in all_results['results'], "Rule RULE-1788 missing"
        result = all_results['results']["RULE-1788"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1788 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1788 failed"


    def test_rule_1789(self, all_results):
        """
        Test RULE-1789: YAML line: revenue_potential: "significant"
        Priority: MEDIUM
        """
        assert "RULE-1789" in all_results['results'], "Rule RULE-1789 missing"
        result = all_results['results']["RULE-1789"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1789 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1789 failed"


    def test_rule_1790(self, all_results):
        """
        Test RULE-1790: YAML line: healthcare:
        Priority: MEDIUM
        """
        assert "RULE-1790" in all_results['results'], "Rule RULE-1790 missing"
        result = all_results['results']["RULE-1790"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1790 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1790 failed"


    def test_rule_1791(self, all_results):
        """
        Test RULE-1791: YAML line: regulations: ["HIPAA", "GDPR", "FDA 21 CFR Part 11", "ISO 13485", "MD
        Priority: MEDIUM
        """
        assert "RULE-1791" in all_results['results'], "Rule RULE-1791 missing"
        result = all_results['results']["RULE-1791"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1791 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1791 failed"


    def test_rule_1792(self, all_results):
        """
        Test RULE-1792: YAML line: risk_level: "critical"
        Priority: CRITICAL
        """
        assert "RULE-1792" in all_results['results'], "Rule RULE-1792 missing"
        result = all_results['results']["RULE-1792"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1792 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1792 failed"


    def test_rule_1793(self, all_results):
        """
        Test RULE-1793: YAML line: audit_frequency: "biannual"
        Priority: MEDIUM
        """
        assert "RULE-1793" in all_results['results'], "Rule RULE-1793 missing"
        result = all_results['results']["RULE-1793"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1793 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1793 failed"


    def test_rule_1794(self, all_results):
        """
        Test RULE-1794: YAML line: specialized_controls: "20_foundation/security/healthcare/"
        Priority: CRITICAL
        """
        assert "RULE-1794" in all_results['results'], "Rule RULE-1794 missing"
        result = all_results['results']["RULE-1794"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1794 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1794 failed"


    def test_rule_1795(self, all_results):
        """
        Test RULE-1795: YAML line: business_opportunity: "emerging_market"
        Priority: MEDIUM
        """
        assert "RULE-1795" in all_results['results'], "Rule RULE-1795 missing"
        result = all_results['results']["RULE-1795"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1795 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1795 failed"


    def test_rule_1796(self, all_results):
        """
        Test RULE-1796: YAML line: revenue_potential: "moderate"
        Priority: MEDIUM
        """
        assert "RULE-1796" in all_results['results'], "Rule RULE-1796 missing"
        result = all_results['results']["RULE-1796"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1796 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1796 failed"


    def test_rule_1797(self, all_results):
        """
        Test RULE-1797: YAML line: government_public_sector:
        Priority: MEDIUM
        """
        assert "RULE-1797" in all_results['results'], "Rule RULE-1797 missing"
        result = all_results['results']["RULE-1797"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1797 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1797 failed"


    def test_rule_1798(self, all_results):
        """
        Test RULE-1798: YAML line: regulations: ["FedRAMP", "Authority to Operate", "NIST 800-53", "ISO 
        Priority: MEDIUM
        """
        assert "RULE-1798" in all_results['results'], "Rule RULE-1798 missing"
        result = all_results['results']["RULE-1798"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1798 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1798 failed"


    def test_rule_1799(self, all_results):
        """
        Test RULE-1799: YAML line: risk_level: "critical"
        Priority: CRITICAL
        """
        assert "RULE-1799" in all_results['results'], "Rule RULE-1799 missing"
        result = all_results['results']["RULE-1799"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1799 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1799 failed"


    def test_rule_1800(self, all_results):
        """
        Test RULE-1800: YAML line: audit_frequency: "annual"
        Priority: MEDIUM
        """
        assert "RULE-1800" in all_results['results'], "Rule RULE-1800 missing"
        result = all_results['results']["RULE-1800"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1800 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1800 failed"


    def test_rule_1801(self, all_results):
        """
        Test RULE-1801: YAML line: specialized_controls: "15_infra/security/government/"
        Priority: CRITICAL
        """
        assert "RULE-1801" in all_results['results'], "Rule RULE-1801 missing"
        result = all_results['results']["RULE-1801"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1801 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1801 failed"


    def test_rule_1802(self, all_results):
        """
        Test RULE-1802: YAML line: business_opportunity: "stable_contracts"
        Priority: MEDIUM
        """
        assert "RULE-1802" in all_results['results'], "Rule RULE-1802 missing"
        result = all_results['results']["RULE-1802"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1802 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1802 failed"


    def test_rule_1803(self, all_results):
        """
        Test RULE-1803: YAML line: revenue_potential: "high"
        Priority: MEDIUM
        """
        assert "RULE-1803" in all_results['results'], "Rule RULE-1803 missing"
        result = all_results['results']["RULE-1803"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1803 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1803 failed"


    def test_rule_1804(self, all_results):
        """
        Test RULE-1804: YAML line: education:
        Priority: MEDIUM
        """
        assert "RULE-1804" in all_results['results'], "Rule RULE-1804 missing"
        result = all_results['results']["RULE-1804"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1804 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1804 failed"


    def test_rule_1805(self, all_results):
        """
        Test RULE-1805: YAML line: regulations: ["FERPA", "COPPA", "GDPR", "Accessibility Standards"]
        Priority: HIGH
        """
        assert "RULE-1805" in all_results['results'], "Rule RULE-1805 missing"
        result = all_results['results']["RULE-1805"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "HIGH" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1805 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1805 failed"


    def test_rule_1806(self, all_results):
        """
        Test RULE-1806: YAML line: risk_level: "medium"
        Priority: MEDIUM
        """
        assert "RULE-1806" in all_results['results'], "Rule RULE-1806 missing"
        result = all_results['results']["RULE-1806"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1806 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1806 failed"


    def test_rule_1807(self, all_results):
        """
        Test RULE-1807: YAML line: audit_frequency: "annual"
        Priority: MEDIUM
        """
        assert "RULE-1807" in all_results['results'], "Rule RULE-1807 missing"
        result = all_results['results']["RULE-1807"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1807 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1807 failed"


    def test_rule_1808(self, all_results):
        """
        Test RULE-1808: YAML line: specialized_controls: "13_ui_layer/accessibility/"
        Priority: MEDIUM
        """
        assert "RULE-1808" in all_results['results'], "Rule RULE-1808 missing"
        result = all_results['results']["RULE-1808"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1808 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1808 failed"


    def test_rule_1809(self, all_results):
        """
        Test RULE-1809: YAML line: business_opportunity: "social_impact"
        Priority: MEDIUM
        """
        assert "RULE-1809" in all_results['results'], "Rule RULE-1809 missing"
        result = all_results['results']["RULE-1809"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1809 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1809 failed"


    def test_rule_1810(self, all_results):
        """
        Test RULE-1810: YAML line: revenue_potential: "moderate"
        Priority: MEDIUM
        """
        assert "RULE-1810" in all_results['results'], "Rule RULE-1810 missing"
        result = all_results['results']["RULE-1810"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1810 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1810 failed"


    def test_rule_1811(self, all_results):
        """
        Test RULE-1811: YAML line: gaming_entertainment:
        Priority: MEDIUM
        """
        assert "RULE-1811" in all_results['results'], "Rule RULE-1811 missing"
        result = all_results['results']["RULE-1811"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1811 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1811 failed"


    def test_rule_1812(self, all_results):
        """
        Test RULE-1812: YAML line: regulations: ["ESRB", "Age Rating", "Gambling Regulations", "Consumer
        Priority: MEDIUM
        """
        assert "RULE-1812" in all_results['results'], "Rule RULE-1812 missing"
        result = all_results['results']["RULE-1812"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1812 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1812 failed"


    def test_rule_1813(self, all_results):
        """
        Test RULE-1813: YAML line: risk_level: "medium"
        Priority: MEDIUM
        """
        assert "RULE-1813" in all_results['results'], "Rule RULE-1813 missing"
        result = all_results['results']["RULE-1813"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1813 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1813 failed"


    def test_rule_1814(self, all_results):
        """
        Test RULE-1814: YAML line: audit_frequency: "annual"
        Priority: MEDIUM
        """
        assert "RULE-1814" in all_results['results'], "Rule RULE-1814 missing"
        result = all_results['results']["RULE-1814"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1814 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1814 failed"


    def test_rule_1815(self, all_results):
        """
        Test RULE-1815: YAML line: specialized_controls: "01_ai_layer/content_moderation/"
        Priority: MEDIUM
        """
        assert "RULE-1815" in all_results['results'], "Rule RULE-1815 missing"
        result = all_results['results']["RULE-1815"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1815 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1815 failed"


    def test_rule_1816(self, all_results):
        """
        Test RULE-1816: YAML line: business_opportunity: "growth_market"
        Priority: MEDIUM
        """
        assert "RULE-1816" in all_results['results'], "Rule RULE-1816 missing"
        result = all_results['results']["RULE-1816"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1816 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1816 failed"


    def test_rule_1817(self, all_results):
        """
        Test RULE-1817: YAML line: revenue_potential: "high"
        Priority: MEDIUM
        """
        assert "RULE-1817" in all_results['results'], "Rule RULE-1817 missing"
        result = all_results['results']["RULE-1817"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1817 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1817 failed"


    def test_rule_1818(self, all_results):
        """
        Test RULE-1818: YAML line: iot_manufacturing:
        Priority: MEDIUM
        """
        assert "RULE-1818" in all_results['results'], "Rule RULE-1818 missing"
        result = all_results['results']["RULE-1818"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1818 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1818 failed"


    def test_rule_1819(self, all_results):
        """
        Test RULE-1819: YAML line: regulations: ["CE Marking", "FCC", "Cybersecurity Act", "Product Safe
        Priority: CRITICAL
        """
        assert "RULE-1819" in all_results['results'], "Rule RULE-1819 missing"
        result = all_results['results']["RULE-1819"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1819 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1819 failed"


    def test_rule_1820(self, all_results):
        """
        Test RULE-1820: YAML line: risk_level: "high"
        Priority: MEDIUM
        """
        assert "RULE-1820" in all_results['results'], "Rule RULE-1820 missing"
        result = all_results['results']["RULE-1820"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1820 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1820 failed"


    def test_rule_1821(self, all_results):
        """
        Test RULE-1821: YAML line: audit_frequency: "per_product"
        Priority: MEDIUM
        """
        assert "RULE-1821" in all_results['results'], "Rule RULE-1821 missing"
        result = all_results['results']["RULE-1821"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1821 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1821 failed"


    def test_rule_1822(self, all_results):
        """
        Test RULE-1822: YAML line: specialized_controls: "19_adapters/iot_security/"
        Priority: CRITICAL
        """
        assert "RULE-1822" in all_results['results'], "Rule RULE-1822 missing"
        result = all_results['results']["RULE-1822"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1822 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1822 failed"


    def test_rule_1823(self, all_results):
        """
        Test RULE-1823: YAML line: business_opportunity: "emerging_IoT"
        Priority: MEDIUM
        """
        assert "RULE-1823" in all_results['results'], "Rule RULE-1823 missing"
        result = all_results['results']["RULE-1823"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1823 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1823 failed"


    def test_rule_1824(self, all_results):
        """
        Test RULE-1824: YAML line: revenue_potential: "significant"
        Priority: MEDIUM
        """
        assert "RULE-1824" in all_results['results'], "Rule RULE-1824 missing"
        result = all_results['results']["RULE-1824"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1824 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1824 failed"


    def test_rule_1825(self, all_results):
        """
        Test RULE-1825: YAML line: cross_sector_features:
        Priority: MEDIUM
        """
        assert "RULE-1825" in all_results['results'], "Rule RULE-1825 missing"
        result = all_results['results']["RULE-1825"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1825 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1825 failed"


    def test_rule_1826(self, all_results):
        """
        Test RULE-1826: YAML line: regulatory_change_notification: true
        Priority: MEDIUM
        """
        assert "RULE-1826" in all_results['results'], "Rule RULE-1826 missing"
        result = all_results['results']["RULE-1826"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1826 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1826 failed"


    def test_rule_1827(self, all_results):
        """
        Test RULE-1827: YAML line: sector_specific_templates: true
        Priority: MEDIUM
        """
        assert "RULE-1827" in all_results['results'], "Rule RULE-1827 missing"
        result = all_results['results']["RULE-1827"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1827 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1827 failed"


    def test_rule_1828(self, all_results):
        """
        Test RULE-1828: YAML line: compliance_gap_analysis: "automated"
        Priority: CRITICAL
        """
        assert "RULE-1828" in all_results['results'], "Rule RULE-1828 missing"
        result = all_results['results']["RULE-1828"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1828 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1828 failed"


    def test_rule_1829(self, all_results):
        """
        Test RULE-1829: YAML line: risk_assessment_tools: "07_governance_legal/risk_tools/"
        Priority: CRITICAL
        """
        assert "RULE-1829" in all_results['results'], "Rule RULE-1829 missing"
        result = all_results['results']["RULE-1829"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1829 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1829 failed"


    def test_rule_1830(self, all_results):
        """
        Test RULE-1830: YAML line: audit_preparation: "23_compliance/sector_audits/"
        Priority: CRITICAL
        """
        assert "RULE-1830" in all_results['results'], "Rule RULE-1830 missing"
        result = all_results['results']["RULE-1830"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1830 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1830 failed"


    def test_rule_1831(self, all_results):
        """
        Test RULE-1831: YAML line: business_development: "sector_specific_strategies"
        Priority: MEDIUM
        """
        assert "RULE-1831" in all_results['results'], "Rule RULE-1831 missing"
        result = all_results['results']["RULE-1831"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1831 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1831 failed"


    def test_rule_1832(self, all_results):
        """
        Test RULE-1832: YAML field 'version' must equal '1.1'
        Priority: HIGH
        """
        assert "RULE-1832" in all_results['results'], "Rule RULE-1832 missing"
        result = all_results['results']["RULE-1832"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "HIGH" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1832 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1832 failed"


    def test_rule_1833(self, all_results):
        """
        Test RULE-1833: YAML field 'date' must equal '2025-09-15'
        Priority: MEDIUM
        """
        assert "RULE-1833" in all_results['results'], "Rule RULE-1833 missing"
        result = all_results['results']["RULE-1833"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1833 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1833 failed"


    def test_rule_1834(self, all_results):
        """
        Test RULE-1834: YAML field 'deprecated' must equal 'False'
        Priority: CRITICAL
        """
        assert "RULE-1834" in all_results['results'], "Rule RULE-1834 missing"
        result = all_results['results']["RULE-1834"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1834 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1834 failed"


    def test_rule_1835(self, all_results):
        """
        Test RULE-1835: YAML field 'classification' must equal 'CONFIDENTIAL - Internal Standards'
        Priority: HIGH
        """
        assert "RULE-1835" in all_results['results'], "Rule RULE-1835 missing"
        result = all_results['results']["RULE-1835"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "HIGH" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1835 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1835 failed"


    def test_rule_1836(self, all_results):
        """
        Test RULE-1836: YAML field 'last_review' must equal '2025-09-15'
        Priority: MEDIUM
        """
        assert "RULE-1836" in all_results['results'], "Rule RULE-1836 missing"
        result = all_results['results']["RULE-1836"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1836 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1836 failed"


    def test_rule_1837(self, all_results):
        """
        Test RULE-1837: YAML field 'next_review' must equal '2026-03-15'
        Priority: MEDIUM
        """
        assert "RULE-1837" in all_results['results'], "Rule RULE-1837 missing"
        result = all_results['results']["RULE-1837"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1837 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1837 failed"


    def test_rule_1838(self, all_results):
        """
        Test RULE-1838: YAML field 'thresholds.structure_compliance.threshold' must equal '>= 95%'
        Priority: MEDIUM
        """
        assert "RULE-1838" in all_results['results'], "Rule RULE-1838 missing"
        result = all_results['results']["RULE-1838"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1838 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1838 failed"


    def test_rule_1839(self, all_results):
        """
        Test RULE-1839: YAML field 'thresholds.structure_compliance.rationale' must equal 'Enterprise-Gr
        Priority: MEDIUM
        """
        assert "RULE-1839" in all_results['results'], "Rule RULE-1839 missing"
        result = all_results['results']["RULE-1839"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1839 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1839 failed"


    def test_rule_1840(self, all_results):
        """
        Test RULE-1840: YAML field 'thresholds.structure_compliance.business_impact' must equal 'Kritisc
        Priority: CRITICAL
        """
        assert "RULE-1840" in all_results['results'], "Rule RULE-1840 missing"
        result = all_results['results']["RULE-1840"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1840 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1840 failed"


    def test_rule_1841(self, all_results):
        """
        Test RULE-1841: YAML field 'thresholds.structure_compliance.internal_note' must equal 'Höhere St
        Priority: HIGH
        """
        assert "RULE-1841" in all_results['results'], "Rule RULE-1841 missing"
        result = all_results['results']["RULE-1841"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "HIGH" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1841 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1841 failed"


    def test_rule_1842(self, all_results):
        """
        Test RULE-1842: YAML field 'thresholds.structure_compliance.deprecated' must equal 'False'
        Priority: CRITICAL
        """
        assert "RULE-1842" in all_results['results'], "Rule RULE-1842 missing"
        result = all_results['results']["RULE-1842"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1842 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1842 failed"


    def test_rule_1843(self, all_results):
        """
        Test RULE-1843: YAML field 'thresholds.structure_compliance.benchmark_source' must equal 'Intern
        Priority: CRITICAL
        """
        assert "RULE-1843" in all_results['results'], "Rule RULE-1843 missing"
        result = all_results['results']["RULE-1843"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1843 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1843 failed"


    def test_rule_1844(self, all_results):
        """
        Test RULE-1844: YAML field 'thresholds.test_coverage.threshold' must equal '>= 90%'
        Priority: MEDIUM
        """
        assert "RULE-1844" in all_results['results'], "Rule RULE-1844 missing"
        result = all_results['results']["RULE-1844"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1844 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1844 failed"


    def test_rule_1845(self, all_results):
        """
        Test RULE-1845: YAML field 'thresholds.test_coverage.rationale' must equal 'Production-Standard 
        Priority: HIGH
        """
        assert "RULE-1845" in all_results['results'], "Rule RULE-1845 missing"
        result = all_results['results']["RULE-1845"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "HIGH" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1845 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1845 failed"


    def test_rule_1846(self, all_results):
        """
        Test RULE-1846: YAML field 'thresholds.test_coverage.business_impact' must equal 'Essential für 
        Priority: MEDIUM
        """
        assert "RULE-1846" in all_results['results'], "Rule RULE-1846 missing"
        result = all_results['results']["RULE-1846"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1846 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1846 failed"


    def test_rule_1847(self, all_results):
        """
        Test RULE-1847: YAML field 'thresholds.test_coverage.deprecated' must equal 'False'
        Priority: CRITICAL
        """
        assert "RULE-1847" in all_results['results'], "Rule RULE-1847 missing"
        result = all_results['results']["RULE-1847"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1847 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1847 failed"


    def test_rule_1848(self, all_results):
        """
        Test RULE-1848: YAML field 'thresholds.test_coverage.tiered_requirements.business_critical' must
        Priority: CRITICAL
        """
        assert "RULE-1848" in all_results['results'], "Rule RULE-1848 missing"
        result = all_results['results']["RULE-1848"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1848 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1848 failed"


    def test_rule_1849(self, all_results):
        """
        Test RULE-1849: YAML field 'thresholds.test_coverage.tiered_requirements.security_modules' must 
        Priority: CRITICAL
        """
        assert "RULE-1849" in all_results['results'], "Rule RULE-1849 missing"
        result = all_results['results']["RULE-1849"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1849 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1849 failed"


    def test_rule_1850(self, all_results):
        """
        Test RULE-1850: YAML field 'thresholds.test_coverage.tiered_requirements.compliance_modules' mus
        Priority: CRITICAL
        """
        assert "RULE-1850" in all_results['results'], "Rule RULE-1850 missing"
        result = all_results['results']["RULE-1850"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1850 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1850 failed"


    def test_rule_1851(self, all_results):
        """
        Test RULE-1851: YAML field 'thresholds.test_coverage.internal_exception' must equal 'Business-kr
        Priority: MEDIUM
        """
        assert "RULE-1851" in all_results['results'], "Rule RULE-1851 missing"
        result = all_results['results']["RULE-1851"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1851 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1851 failed"


    def test_rule_1852(self, all_results):
        """
        Test RULE-1852: YAML field 'thresholds.compliance_coverage.threshold' must equal '>= 98%'
        Priority: MEDIUM
        """
        assert "RULE-1852" in all_results['results'], "Rule RULE-1852 missing"
        result = all_results['results']["RULE-1852"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1852 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1852 failed"


    def test_rule_1853(self, all_results):
        """
        Test RULE-1853: YAML field 'thresholds.compliance_coverage.rationale' must equal 'Höchste Standa
        Priority: HIGH
        """
        assert "RULE-1853" in all_results['results'], "Rule RULE-1853 missing"
        result = all_results['results']["RULE-1853"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "HIGH" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1853 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1853 failed"


    def test_rule_1854(self, all_results):
        """
        Test RULE-1854: YAML field 'thresholds.compliance_coverage.business_impact' must equal 'Kritisch
        Priority: MEDIUM
        """
        assert "RULE-1854" in all_results['results'], "Rule RULE-1854 missing"
        result = all_results['results']["RULE-1854"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1854 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1854 failed"


    def test_rule_1855(self, all_results):
        """
        Test RULE-1855: YAML field 'thresholds.compliance_coverage.deprecated' must equal 'False'
        Priority: CRITICAL
        """
        assert "RULE-1855" in all_results['results'], "Rule RULE-1855 missing"
        result = all_results['results']["RULE-1855"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1855 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1855 failed"


    def test_rule_1856(self, all_results):
        """
        Test RULE-1856: YAML field 'thresholds.compliance_coverage.jurisdictional_requirements.eu_market
        Priority: MEDIUM
        """
        assert "RULE-1856" in all_results['results'], "Rule RULE-1856 missing"
        result = all_results['results']["RULE-1856"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1856 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1856 failed"


    def test_rule_1857(self, all_results):
        """
        Test RULE-1857: YAML field 'thresholds.compliance_coverage.jurisdictional_requirements.apac_mark
        Priority: MEDIUM
        """
        assert "RULE-1857" in all_results['results'], "Rule RULE-1857 missing"
        result = all_results['results']["RULE-1857"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1857 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1857 failed"


    def test_rule_1858(self, all_results):
        """
        Test RULE-1858: YAML field 'thresholds.compliance_coverage.jurisdictional_requirements.americas_
        Priority: MEDIUM
        """
        assert "RULE-1858" in all_results['results'], "Rule RULE-1858 missing"
        result = all_results['results']["RULE-1858"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1858 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1858 failed"


    def test_rule_1859(self, all_results):
        """
        Test RULE-1859: YAML field 'thresholds.compliance_coverage.jurisdictional_requirements.emerging_
        Priority: MEDIUM
        """
        assert "RULE-1859" in all_results['results'], "Rule RULE-1859 missing"
        result = all_results['results']["RULE-1859"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1859 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1859 failed"


    def test_rule_1860(self, all_results):
        """
        Test RULE-1860: YAML field 'thresholds.compliance_coverage.jurisdictions' must equal 'Alle defin
        Priority: MEDIUM
        """
        assert "RULE-1860" in all_results['results'], "Rule RULE-1860 missing"
        result = all_results['results']["RULE-1860"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1860 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1860 failed"


    def test_rule_1861(self, all_results):
        """
        Test RULE-1861: YAML field 'thresholds.review_cycle.requirement' must equal 'Internal 3 months +
        Priority: MEDIUM
        """
        assert "RULE-1861" in all_results['results'], "Rule RULE-1861 missing"
        result = all_results['results']["RULE-1861"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1861 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1861 failed"


    def test_rule_1862(self, all_results):
        """
        Test RULE-1862: YAML field 'thresholds.review_cycle.rationale' must equal 'Höhere Review-Frequen
        Priority: MEDIUM
        """
        assert "RULE-1862" in all_results['results'], "Rule RULE-1862 missing"
        result = all_results['results']["RULE-1862"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1862 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1862 failed"


    def test_rule_1863(self, all_results):
        """
        Test RULE-1863: YAML field 'thresholds.review_cycle.cost_benefit' must equal 'Höherer Aufwand ab
        Priority: CRITICAL
        """
        assert "RULE-1863" in all_results['results'], "Rule RULE-1863 missing"
        result = all_results['results']["RULE-1863"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1863 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1863 failed"


    def test_rule_1864(self, all_results):
        """
        Test RULE-1864: YAML field 'thresholds.review_cycle.deprecated' must equal 'False'
        Priority: CRITICAL
        """
        assert "RULE-1864" in all_results['results'], "Rule RULE-1864 missing"
        result = all_results['results']["RULE-1864"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1864 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1864 failed"


    def test_rule_1865(self, all_results):
        """
        Test RULE-1865: YAML field 'thresholds.review_cycle.escalation_trigger' must equal 'Review overd
        Priority: MEDIUM
        """
        assert "RULE-1865" in all_results['results'], "Rule RULE-1865 missing"
        result = all_results['results']["RULE-1865"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1865 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1865 failed"


    def test_rule_1866(self, all_results):
        """
        Test RULE-1866: YAML line: version: "1.1"
        Priority: MEDIUM
        """
        assert "RULE-1866" in all_results['results'], "Rule RULE-1866 missing"
        result = all_results['results']["RULE-1866"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1866 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1866 failed"


    def test_rule_1867(self, all_results):
        """
        Test RULE-1867: YAML line: date: "2025-09-15"
        Priority: MEDIUM
        """
        assert "RULE-1867" in all_results['results'], "Rule RULE-1867 missing"
        result = all_results['results']["RULE-1867"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1867 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1867 failed"


    def test_rule_1868(self, all_results):
        """
        Test RULE-1868: YAML line: deprecated: false
        Priority: MEDIUM
        """
        assert "RULE-1868" in all_results['results'], "Rule RULE-1868 missing"
        result = all_results['results']["RULE-1868"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1868 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1868 failed"


    def test_rule_1869(self, all_results):
        """
        Test RULE-1869: YAML line: classification: "CONFIDENTIAL - Internal Standards"
        Priority: HIGH
        """
        assert "RULE-1869" in all_results['results'], "Rule RULE-1869 missing"
        result = all_results['results']["RULE-1869"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "HIGH" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1869 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1869 failed"


    def test_rule_1870(self, all_results):
        """
        Test RULE-1870: YAML line: last_review: "2025-09-15"
        Priority: MEDIUM
        """
        assert "RULE-1870" in all_results['results'], "Rule RULE-1870 missing"
        result = all_results['results']["RULE-1870"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1870 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1870 failed"


    def test_rule_1871(self, all_results):
        """
        Test RULE-1871: YAML line: next_review: "2026-03-15"
        Priority: MEDIUM
        """
        assert "RULE-1871" in all_results['results'], "Rule RULE-1871 missing"
        result = all_results['results']["RULE-1871"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1871 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1871 failed"


    def test_rule_1872(self, all_results):
        """
        Test RULE-1872: YAML line: thresholds:
        Priority: MEDIUM
        """
        assert "RULE-1872" in all_results['results'], "Rule RULE-1872 missing"
        result = all_results['results']["RULE-1872"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1872 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1872 failed"


    def test_rule_1873(self, all_results):
        """
        Test RULE-1873: YAML line: structure_compliance:
        Priority: CRITICAL
        """
        assert "RULE-1873" in all_results['results'], "Rule RULE-1873 missing"
        result = all_results['results']["RULE-1873"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1873 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1873 failed"


    def test_rule_1874(self, all_results):
        """
        Test RULE-1874: YAML line: threshold: ">= 95%"
        Priority: MEDIUM
        """
        assert "RULE-1874" in all_results['results'], "Rule RULE-1874 missing"
        result = all_results['results']["RULE-1874"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1874 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1874 failed"


    def test_rule_1875(self, all_results):
        """
        Test RULE-1875: YAML line: rationale: "Enterprise-Grade mit 5% Toleranz für Edge Cases und Trans
        Priority: MEDIUM
        """
        assert "RULE-1875" in all_results['results'], "Rule RULE-1875 missing"
        result = all_results['results']["RULE-1875"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1875 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1875 failed"


    def test_rule_1876(self, all_results):
        """
        Test RULE-1876: YAML line: business_impact: "Kritisch für interne Audits und externe Compliance"
        Priority: CRITICAL
        """
        assert "RULE-1876" in all_results['results'], "Rule RULE-1876 missing"
        result = all_results['results']["RULE-1876"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1876 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1876 failed"


    def test_rule_1877(self, all_results):
        """
        Test RULE-1877: YAML line: internal_note: "Höhere Standards als Public-Version für interne Quali
        Priority: HIGH
        """
        assert "RULE-1877" in all_results['results'], "Rule RULE-1877 missing"
        result = all_results['results']["RULE-1877"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "HIGH" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1877 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1877 failed"


    def test_rule_1878(self, all_results):
        """
        Test RULE-1878: YAML line: deprecated: false
        Priority: MEDIUM
        """
        assert "RULE-1878" in all_results['results'], "Rule RULE-1878 missing"
        result = all_results['results']["RULE-1878"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1878 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1878 failed"


    def test_rule_1879(self, all_results):
        """
        Test RULE-1879: YAML line: benchmark_source: "Internal enterprise compliance framework"
        Priority: CRITICAL
        """
        assert "RULE-1879" in all_results['results'], "Rule RULE-1879 missing"
        result = all_results['results']["RULE-1879"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1879 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1879 failed"


    def test_rule_1880(self, all_results):
        """
        Test RULE-1880: YAML line: test_coverage:
        Priority: MEDIUM
        """
        assert "RULE-1880" in all_results['results'], "Rule RULE-1880 missing"
        result = all_results['results']["RULE-1880"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1880 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1880 failed"


    def test_rule_1881(self, all_results):
        """
        Test RULE-1881: YAML line: threshold: ">= 90%"
        Priority: MEDIUM
        """
        assert "RULE-1881" in all_results['results'], "Rule RULE-1881 missing"
        result = all_results['results']["RULE-1881"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1881 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1881 failed"


    def test_rule_1882(self, all_results):
        """
        Test RULE-1882: YAML line: rationale: "Production-Standard mit 10% Toleranz für Legacy und Integ
        Priority: HIGH
        """
        assert "RULE-1882" in all_results['results'], "Rule RULE-1882 missing"
        result = all_results['results']["RULE-1882"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "HIGH" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1882 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1882 failed"


    def test_rule_1883(self, all_results):
        """
        Test RULE-1883: YAML line: business_impact: "Essential für Reliability und Enterprise-Einsatz"
        Priority: MEDIUM
        """
        assert "RULE-1883" in all_results['results'], "Rule RULE-1883 missing"
        result = all_results['results']["RULE-1883"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1883 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1883 failed"


    def test_rule_1884(self, all_results):
        """
        Test RULE-1884: YAML line: deprecated: false
        Priority: MEDIUM
        """
        assert "RULE-1884" in all_results['results'], "Rule RULE-1884 missing"
        result = all_results['results']["RULE-1884"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1884 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1884 failed"


    def test_rule_1885(self, all_results):
        """
        Test RULE-1885: YAML line: tiered_requirements:
        Priority: MEDIUM
        """
        assert "RULE-1885" in all_results['results'], "Rule RULE-1885 missing"
        result = all_results['results']["RULE-1885"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1885 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1885 failed"


    def test_rule_1886(self, all_results):
        """
        Test RULE-1886: YAML line: business_critical: ">= 95%"
        Priority: CRITICAL
        """
        assert "RULE-1886" in all_results['results'], "Rule RULE-1886 missing"
        result = all_results['results']["RULE-1886"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1886 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1886 failed"


    def test_rule_1887(self, all_results):
        """
        Test RULE-1887: YAML line: security_modules: ">= 98%"
        Priority: CRITICAL
        """
        assert "RULE-1887" in all_results['results'], "Rule RULE-1887 missing"
        result = all_results['results']["RULE-1887"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1887 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1887 failed"


    def test_rule_1888(self, all_results):
        """
        Test RULE-1888: YAML line: compliance_modules: ">= 99%"
        Priority: CRITICAL
        """
        assert "RULE-1888" in all_results['results'], "Rule RULE-1888 missing"
        result = all_results['results']["RULE-1888"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1888 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1888 failed"


    def test_rule_1889(self, all_results):
        """
        Test RULE-1889: YAML line: internal_exception: "Business-kritische Module: >= 95%"
        Priority: MEDIUM
        """
        assert "RULE-1889" in all_results['results'], "Rule RULE-1889 missing"
        result = all_results['results']["RULE-1889"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1889 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1889 failed"


    def test_rule_1890(self, all_results):
        """
        Test RULE-1890: YAML line: compliance_coverage:
        Priority: CRITICAL
        """
        assert "RULE-1890" in all_results['results'], "Rule RULE-1890 missing"
        result = all_results['results']["RULE-1890"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1890 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1890 failed"


    def test_rule_1891(self, all_results):
        """
        Test RULE-1891: YAML line: threshold: ">= 98%"
        Priority: MEDIUM
        """
        assert "RULE-1891" in all_results['results'], "Rule RULE-1891 missing"
        result = all_results['results']["RULE-1891"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1891 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1891 failed"


    def test_rule_1892(self, all_results):
        """
        Test RULE-1892: YAML line: rationale: "Höchste Standards für regulatorische Vollabdeckung"
        Priority: HIGH
        """
        assert "RULE-1892" in all_results['results'], "Rule RULE-1892 missing"
        result = all_results['results']["RULE-1892"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "HIGH" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1892 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1892 failed"


    def test_rule_1893(self, all_results):
        """
        Test RULE-1893: YAML line: business_impact: "Kritisch für Marktzulassungen und Audits"
        Priority: MEDIUM
        """
        assert "RULE-1893" in all_results['results'], "Rule RULE-1893 missing"
        result = all_results['results']["RULE-1893"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1893 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1893 failed"


    def test_rule_1894(self, all_results):
        """
        Test RULE-1894: YAML line: deprecated: false
        Priority: MEDIUM
        """
        assert "RULE-1894" in all_results['results'], "Rule RULE-1894 missing"
        result = all_results['results']["RULE-1894"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1894 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1894 failed"


    def test_rule_1895(self, all_results):
        """
        Test RULE-1895: YAML line: jurisdictional_requirements:
        Priority: MEDIUM
        """
        assert "RULE-1895" in all_results['results'], "Rule RULE-1895 missing"
        result = all_results['results']["RULE-1895"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1895 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1895 failed"


    def test_rule_1896(self, all_results):
        """
        Test RULE-1896: YAML line: eu_markets: ">= 99%"
        Priority: MEDIUM
        """
        assert "RULE-1896" in all_results['results'], "Rule RULE-1896 missing"
        result = all_results['results']["RULE-1896"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1896 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1896 failed"


    def test_rule_1897(self, all_results):
        """
        Test RULE-1897: YAML line: apac_markets: ">= 97%"
        Priority: MEDIUM
        """
        assert "RULE-1897" in all_results['results'], "Rule RULE-1897 missing"
        result = all_results['results']["RULE-1897"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1897 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1897 failed"


    def test_rule_1898(self, all_results):
        """
        Test RULE-1898: YAML line: americas_markets: ">= 96%"
        Priority: MEDIUM
        """
        assert "RULE-1898" in all_results['results'], "Rule RULE-1898 missing"
        result = all_results['results']["RULE-1898"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1898 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1898 failed"


    def test_rule_1899(self, all_results):
        """
        Test RULE-1899: YAML line: emerging_markets: ">= 95%"
        Priority: MEDIUM
        """
        assert "RULE-1899" in all_results['results'], "Rule RULE-1899 missing"
        result = all_results['results']["RULE-1899"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1899 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1899 failed"


    def test_rule_1900(self, all_results):
        """
        Test RULE-1900: YAML line: jurisdictions: "Alle definierten Märkte müssen >= 95% erreichen"
        Priority: MEDIUM
        """
        assert "RULE-1900" in all_results['results'], "Rule RULE-1900 missing"
        result = all_results['results']["RULE-1900"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1900 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1900 failed"


    def test_rule_1901(self, all_results):
        """
        Test RULE-1901: YAML line: review_cycle:
        Priority: MEDIUM
        """
        assert "RULE-1901" in all_results['results'], "Rule RULE-1901 missing"
        result = all_results['results']["RULE-1901"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1901 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1901 failed"


    def test_rule_1902(self, all_results):
        """
        Test RULE-1902: YAML line: requirement: "Internal 3 months + External 6 months"
        Priority: MEDIUM
        """
        assert "RULE-1902" in all_results['results'], "Rule RULE-1902 missing"
        result = all_results['results']["RULE-1902"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1902 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1902 failed"


    def test_rule_1903(self, all_results):
        """
        Test RULE-1903: YAML line: rationale: "Höhere Review-Frequenz für Enterprise-Risiko-Management"
        Priority: MEDIUM
        """
        assert "RULE-1903" in all_results['results'], "Rule RULE-1903 missing"
        result = all_results['results']["RULE-1903"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1903 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1903 failed"


    def test_rule_1904(self, all_results):
        """
        Test RULE-1904: YAML line: cost_benefit: "Höherer Aufwand aber maximaler Compliance-Schutz"
        Priority: CRITICAL
        """
        assert "RULE-1904" in all_results['results'], "Rule RULE-1904 missing"
        result = all_results['results']["RULE-1904"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1904 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1904 failed"


    def test_rule_1905(self, all_results):
        """
        Test RULE-1905: YAML line: deprecated: false
        Priority: MEDIUM
        """
        assert "RULE-1905" in all_results['results'], "Rule RULE-1905 missing"
        result = all_results['results']["RULE-1905"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1905 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1905 failed"


    def test_rule_1906(self, all_results):
        """
        Test RULE-1906: YAML line: escalation_trigger: "Review overdue by 15 days (stricter than public)
        Priority: MEDIUM
        """
        assert "RULE-1906" in all_results['results'], "Rule RULE-1906 missing"
        result = all_results['results']["RULE-1906"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1906 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1906 failed"


    def test_rule_1907(self, all_results):
        """
        Test RULE-1907: YAML field 'version' must equal '1.0'
        Priority: HIGH
        """
        assert "RULE-1907" in all_results['results'], "Rule RULE-1907 missing"
        result = all_results['results']["RULE-1907"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "HIGH" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1907 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1907 failed"


    def test_rule_1908(self, all_results):
        """
        Test RULE-1908: YAML field 'date' must equal '2025-09-15'
        Priority: MEDIUM
        """
        assert "RULE-1908" in all_results['results'], "Rule RULE-1908 missing"
        result = all_results['results']["RULE-1908"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1908 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1908 failed"


    def test_rule_1909(self, all_results):
        """
        Test RULE-1909: YAML field 'deprecated' must equal 'False'
        Priority: CRITICAL
        """
        assert "RULE-1909" in all_results['results'], "Rule RULE-1909 missing"
        result = all_results['results']["RULE-1909"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1909 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1909 failed"


    def test_rule_1910(self, all_results):
        """
        Test RULE-1910: YAML field 'classification' must equal 'CONFIDENTIAL - Enterprise Controls'
        Priority: MEDIUM
        """
        assert "RULE-1910" in all_results['results'], "Rule RULE-1910 missing"
        result = all_results['results']["RULE-1910"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1910 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1910 failed"


    def test_rule_1911(self, all_results):
        """
        Test RULE-1911: YAML field 'controls.circular_dependency_check.description' must equal 'Enterpri
        Priority: MEDIUM
        """
        assert "RULE-1911" in all_results['results'], "Rule RULE-1911 missing"
        result = all_results['results']["RULE-1911"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1911 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1911 failed"


    def test_rule_1912(self, all_results):
        """
        Test RULE-1912: YAML field 'controls.circular_dependency_check.script' must equal '23_compliance
        Priority: CRITICAL
        """
        assert "RULE-1912" in all_results['results'], "Rule RULE-1912 missing"
        result = all_results['results']["RULE-1912"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1912 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1912 failed"


    def test_rule_1913(self, all_results):
        """
        Test RULE-1913: YAML field 'controls.circular_dependency_check.script_deprecated' must equal 'Fa
        Priority: CRITICAL
        """
        assert "RULE-1913" in all_results['results'], "Rule RULE-1913 missing"
        result = all_results['results']["RULE-1913"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1913 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1913 failed"


    def test_rule_1914(self, all_results):
        """
        Test RULE-1914: YAML field 'controls.circular_dependency_check.frequency' must equal 'Every comm
        Priority: MEDIUM
        """
        assert "RULE-1914" in all_results['results'], "Rule RULE-1914 missing"
        result = all_results['results']["RULE-1914"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1914 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1914 failed"


    def test_rule_1915(self, all_results):
        """
        Test RULE-1915: YAML field 'controls.circular_dependency_check.threshold' must equal 'Zero circu
        Priority: MEDIUM
        """
        assert "RULE-1915" in all_results['results'], "Rule RULE-1915 missing"
        result = all_results['results']["RULE-1915"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1915 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1915 failed"


    def test_rule_1916(self, all_results):
        """
        Test RULE-1916: YAML field 'controls.circular_dependency_check.escalation' must equal 'Block dep
        Priority: MEDIUM
        """
        assert "RULE-1916" in all_results['results'], "Rule RULE-1916 missing"
        result = all_results['results']["RULE-1916"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1916 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1916 failed"


    def test_rule_1917(self, all_results):
        """
        Test RULE-1917: YAML field 'controls.circular_dependency_check.dependency_map_export' must equal
        Priority: CRITICAL
        """
        assert "RULE-1917" in all_results['results'], "Rule RULE-1917 missing"
        result = all_results['results']["RULE-1917"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1917 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1917 failed"


    def test_rule_1918(self, all_results):
        """
        Test RULE-1918: YAML list 'controls.circular_dependency_check.export_formats' must contain 4 ele
        Priority: MEDIUM
        """
        assert "RULE-1918" in all_results['results'], "Rule RULE-1918 missing"
        result = all_results['results']["RULE-1918"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1918 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1918 failed"


    def test_rule_1919(self, all_results):
        """
        Test RULE-1919: YAML field 'controls.business_logic_overfitting.description' must equal 'Validie
        Priority: MEDIUM
        """
        assert "RULE-1919" in all_results['results'], "Rule RULE-1919 missing"
        result = all_results['results']["RULE-1919"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1919 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1919 failed"


    def test_rule_1920(self, all_results):
        """
        Test RULE-1920: YAML field 'controls.business_logic_overfitting.method' must equal 'Random sampl
        Priority: MEDIUM
        """
        assert "RULE-1920" in all_results['results'], "Rule RULE-1920 missing"
        result = all_results['results']["RULE-1920"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1920 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1920 failed"


    def test_rule_1921(self, all_results):
        """
        Test RULE-1921: YAML field 'controls.business_logic_overfitting.script' must equal '23_complianc
        Priority: CRITICAL
        """
        assert "RULE-1921" in all_results['results'], "Rule RULE-1921 missing"
        result = all_results['results']["RULE-1921"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1921 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1921 failed"


    def test_rule_1922(self, all_results):
        """
        Test RULE-1922: YAML field 'controls.business_logic_overfitting.script_deprecated' must equal 'F
        Priority: CRITICAL
        """
        assert "RULE-1922" in all_results['results'], "Rule RULE-1922 missing"
        result = all_results['results']["RULE-1922"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1922 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1922 failed"


    def test_rule_1923(self, all_results):
        """
        Test RULE-1923: YAML field 'controls.business_logic_overfitting.frequency' must equal 'Weekly au
        Priority: MEDIUM
        """
        assert "RULE-1923" in all_results['results'], "Rule RULE-1923 missing"
        result = all_results['results']["RULE-1923"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1923 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1923 failed"


    def test_rule_1924(self, all_results):
        """
        Test RULE-1924: YAML field 'controls.business_logic_overfitting.sample_size' must equal '20%'
        Priority: MEDIUM
        """
        assert "RULE-1924" in all_results['results'], "Rule RULE-1924 missing"
        result = all_results['results']["RULE-1924"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1924 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1924 failed"


    def test_rule_1925(self, all_results):
        """
        Test RULE-1925: YAML field 'controls.business_logic_overfitting.reviewer_required' must equal 'T
        Priority: CRITICAL
        """
        assert "RULE-1925" in all_results['results'], "Rule RULE-1925 missing"
        result = all_results['results']["RULE-1925"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1925 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1925 failed"


    def test_rule_1926(self, all_results):
        """
        Test RULE-1926: YAML field 'controls.business_logic_overfitting.internal_audit' must equal 'Quar
        Priority: CRITICAL
        """
        assert "RULE-1926" in all_results['results'], "Rule RULE-1926 missing"
        result = all_results['results']["RULE-1926"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1926 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1926 failed"


    def test_rule_1927(self, all_results):
        """
        Test RULE-1927: YAML field 'controls.enterprise_badge_validation.description' must equal 'Enterp
        Priority: MEDIUM
        """
        assert "RULE-1927" in all_results['results'], "Rule RULE-1927 missing"
        result = all_results['results']["RULE-1927"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1927 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1927 failed"


    def test_rule_1928(self, all_results):
        """
        Test RULE-1928: YAML field 'controls.enterprise_badge_validation.script' must equal '23_complian
        Priority: CRITICAL
        """
        assert "RULE-1928" in all_results['results'], "Rule RULE-1928 missing"
        result = all_results['results']["RULE-1928"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1928 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1928 failed"


    def test_rule_1929(self, all_results):
        """
        Test RULE-1929: YAML field 'controls.enterprise_badge_validation.script_deprecated' must equal '
        Priority: CRITICAL
        """
        assert "RULE-1929" in all_results['results'], "Rule RULE-1929 missing"
        result = all_results['results']["RULE-1929"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1929 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1929 failed"


    def test_rule_1930(self, all_results):
        """
        Test RULE-1930: YAML field 'controls.enterprise_badge_validation.frequency' must equal 'Every PR
        Priority: MEDIUM
        """
        assert "RULE-1930" in all_results['results'], "Rule RULE-1930 missing"
        result = all_results['results']["RULE-1930"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1930 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1930 failed"


    def test_rule_1931(self, all_results):
        """
        Test RULE-1931: YAML field 'controls.enterprise_badge_validation.documentation_required' must eq
        Priority: CRITICAL
        """
        assert "RULE-1931" in all_results['results'], "Rule RULE-1931 missing"
        result = all_results['results']["RULE-1931"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1931 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1931 failed"


    def test_rule_1932(self, all_results):
        """
        Test RULE-1932: YAML field 'controls.enterprise_badge_validation.business_review' must equal 'Qu
        Priority: MEDIUM
        """
        assert "RULE-1932" in all_results['results'], "Rule RULE-1932 missing"
        result = all_results['results']["RULE-1932"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1932 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1932 failed"


    def test_rule_1933(self, all_results):
        """
        Test RULE-1933: YAML field 'controls.enterprise_badge_validation.source_validation' must equal '
        Priority: CRITICAL
        """
        assert "RULE-1933" in all_results['results'], "Rule RULE-1933 missing"
        result = all_results['results']["RULE-1933"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1933 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1933 failed"


    def test_rule_1934(self, all_results):
        """
        Test RULE-1934: YAML field 'controls.enterprise_badge_validation.formula_verification' must equa
        Priority: CRITICAL
        """
        assert "RULE-1934" in all_results['results'], "Rule RULE-1934 missing"
        result = all_results['results']["RULE-1934"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1934 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1934 failed"


    def test_rule_1935(self, all_results):
        """
        Test RULE-1935: YAML field 'dependency_graph_generation.enabled' must equal 'True'
        Priority: CRITICAL
        """
        assert "RULE-1935" in all_results['results'], "Rule RULE-1935 missing"
        result = all_results['results']["RULE-1935"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1935 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1935 failed"


    def test_rule_1936(self, all_results):
        """
        Test RULE-1936: YAML field 'dependency_graph_generation.script' must equal '23_compliance/anti_g
        Priority: CRITICAL
        """
        assert "RULE-1936" in all_results['results'], "Rule RULE-1936 missing"
        result = all_results['results']["RULE-1936"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1936 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1936 failed"


    def test_rule_1937(self, all_results):
        """
        Test RULE-1937: YAML field 'dependency_graph_generation.output_directory' must equal '23_complia
        Priority: CRITICAL
        """
        assert "RULE-1937" in all_results['results'], "Rule RULE-1937 missing"
        result = all_results['results']["RULE-1937"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1937 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1937 failed"


    def test_rule_1938(self, all_results):
        """
        Test RULE-1938: YAML field 'dependency_graph_generation.formats.dot' must equal 'True'
        Priority: CRITICAL
        """
        assert "RULE-1938" in all_results['results'], "Rule RULE-1938 missing"
        result = all_results['results']["RULE-1938"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1938 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1938 failed"


    def test_rule_1939(self, all_results):
        """
        Test RULE-1939: YAML field 'dependency_graph_generation.formats.json' must equal 'True'
        Priority: CRITICAL
        """
        assert "RULE-1939" in all_results['results'], "Rule RULE-1939 missing"
        result = all_results['results']["RULE-1939"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1939 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1939 failed"


    def test_rule_1940(self, all_results):
        """
        Test RULE-1940: YAML field 'dependency_graph_generation.formats.svg' must equal 'True'
        Priority: CRITICAL
        """
        assert "RULE-1940" in all_results['results'], "Rule RULE-1940 missing"
        result = all_results['results']["RULE-1940"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1940 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1940 failed"


    def test_rule_1941(self, all_results):
        """
        Test RULE-1941: YAML field 'dependency_graph_generation.formats.enterprise_dashboard' must equal
        Priority: CRITICAL
        """
        assert "RULE-1941" in all_results['results'], "Rule RULE-1941 missing"
        result = all_results['results']["RULE-1941"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1941 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1941 failed"


    def test_rule_1942(self, all_results):
        """
        Test RULE-1942: YAML field 'dependency_graph_generation.formats.confidential_mapping' must equal
        Priority: CRITICAL
        """
        assert "RULE-1942" in all_results['results'], "Rule RULE-1942 missing"
        result = all_results['results']["RULE-1942"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1942 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1942 failed"


    def test_rule_1943(self, all_results):
        """
        Test RULE-1943: YAML field 'dependency_graph_generation.update_frequency' must equal 'Daily'
        Priority: MEDIUM
        """
        assert "RULE-1943" in all_results['results'], "Rule RULE-1943 missing"
        result = all_results['results']["RULE-1943"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1943 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1943 failed"


    def test_rule_1944(self, all_results):
        """
        Test RULE-1944: YAML field 'dependency_graph_generation.ci_integration' must equal 'True'
        Priority: CRITICAL
        """
        assert "RULE-1944" in all_results['results'], "Rule RULE-1944 missing"
        result = all_results['results']["RULE-1944"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1944 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1944 failed"


    def test_rule_1945(self, all_results):
        """
        Test RULE-1945: YAML field 'dependency_graph_generation.classification' must equal 'CONFIDENTIAL
        Priority: MEDIUM
        """
        assert "RULE-1945" in all_results['results'], "Rule RULE-1945 missing"
        result = all_results['results']["RULE-1945"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1945 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1945 failed"


    def test_rule_1946(self, all_results):
        """
        Test RULE-1946: YAML field 'external_review_cycle.frequency' must equal 'Every 6 months'
        Priority: MEDIUM
        """
        assert "RULE-1946" in all_results['results'], "Rule RULE-1946 missing"
        result = all_results['results']["RULE-1946"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1946 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1946 failed"


    def test_rule_1947(self, all_results):
        """
        Test RULE-1947: YAML field 'external_review_cycle.last_review' must equal '2025-09-15'
        Priority: MEDIUM
        """
        assert "RULE-1947" in all_results['results'], "Rule RULE-1947 missing"
        result = all_results['results']["RULE-1947"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1947 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1947 failed"


    def test_rule_1948(self, all_results):
        """
        Test RULE-1948: YAML field 'external_review_cycle.next_review' must equal '2026-03-15'
        Priority: MEDIUM
        """
        assert "RULE-1948" in all_results['results'], "Rule RULE-1948 missing"
        result = all_results['results']["RULE-1948"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1948 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1948 failed"


    def test_rule_1949(self, all_results):
        """
        Test RULE-1949: YAML field 'external_review_cycle.internal_review' must equal 'Every 3 months (z
        Priority: MEDIUM
        """
        assert "RULE-1949" in all_results['results'], "Rule RULE-1949 missing"
        result = all_results['results']["RULE-1949"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1949 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1949 failed"


    def test_rule_1950(self, all_results):
        """
        Test RULE-1950: YAML list 'external_review_cycle.reviewer_requirements' must contain 5 elements
        Priority: CRITICAL
        """
        assert "RULE-1950" in all_results['results'], "Rule RULE-1950 missing"
        result = all_results['results']["RULE-1950"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1950 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1950 failed"


    def test_rule_1951(self, all_results):
        """
        Test RULE-1951: YAML list 'external_review_cycle.review_scope' must contain 8 elements
        Priority: CRITICAL
        """
        assert "RULE-1951" in all_results['results'], "Rule RULE-1951 missing"
        result = all_results['results']["RULE-1951"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1951 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1951 failed"


    def test_rule_1952(self, all_results):
        """
        Test RULE-1952: YAML line: version: "1.0"
        Priority: MEDIUM
        """
        assert "RULE-1952" in all_results['results'], "Rule RULE-1952 missing"
        result = all_results['results']["RULE-1952"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1952 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1952 failed"


    def test_rule_1953(self, all_results):
        """
        Test RULE-1953: YAML line: date: "2025-09-15"
        Priority: MEDIUM
        """
        assert "RULE-1953" in all_results['results'], "Rule RULE-1953 missing"
        result = all_results['results']["RULE-1953"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1953 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1953 failed"


    def test_rule_1954(self, all_results):
        """
        Test RULE-1954: YAML line: deprecated: false
        Priority: MEDIUM
        """
        assert "RULE-1954" in all_results['results'], "Rule RULE-1954 missing"
        result = all_results['results']["RULE-1954"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1954 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1954 failed"


    def test_rule_1955(self, all_results):
        """
        Test RULE-1955: YAML line: classification: "CONFIDENTIAL - Enterprise Controls"
        Priority: MEDIUM
        """
        assert "RULE-1955" in all_results['results'], "Rule RULE-1955 missing"
        result = all_results['results']["RULE-1955"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1955 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1955 failed"


    def test_rule_1956(self, all_results):
        """
        Test RULE-1956: YAML line: controls:
        Priority: MEDIUM
        """
        assert "RULE-1956" in all_results['results'], "Rule RULE-1956 missing"
        result = all_results['results']["RULE-1956"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1956 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1956 failed"


    def test_rule_1957(self, all_results):
        """
        Test RULE-1957: YAML line: circular_dependency_check:
        Priority: MEDIUM
        """
        assert "RULE-1957" in all_results['results'], "Rule RULE-1957 missing"
        result = all_results['results']["RULE-1957"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1957 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1957 failed"


    def test_rule_1958(self, all_results):
        """
        Test RULE-1958: YAML line: description: "Enterprise-Grade Validation gegen zirkuläre Referenzen"
        Priority: MEDIUM
        """
        assert "RULE-1958" in all_results['results'], "Rule RULE-1958 missing"
        result = all_results['results']["RULE-1958"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1958 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1958 failed"


    def test_rule_1959(self, all_results):
        """
        Test RULE-1959: YAML line: script: "23_compliance/anti_gaming/circular_dependency_validator.py"
        Priority: CRITICAL
        """
        assert "RULE-1959" in all_results['results'], "Rule RULE-1959 missing"
        result = all_results['results']["RULE-1959"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1959 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1959 failed"


    def test_rule_1960(self, all_results):
        """
        Test RULE-1960: YAML line: script_deprecated: false
        Priority: MEDIUM
        """
        assert "RULE-1960" in all_results['results'], "Rule RULE-1960 missing"
        result = all_results['results']["RULE-1960"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1960 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1960 failed"


    def test_rule_1961(self, all_results):
        """
        Test RULE-1961: YAML line: frequency: "Every commit + Daily full scan"
        Priority: MEDIUM
        """
        assert "RULE-1961" in all_results['results'], "Rule RULE-1961 missing"
        result = all_results['results']["RULE-1961"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1961 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1961 failed"


    def test_rule_1962(self, all_results):
        """
        Test RULE-1962: YAML line: threshold: "Zero circular dependencies allowed"
        Priority: MEDIUM
        """
        assert "RULE-1962" in all_results['results'], "Rule RULE-1962 missing"
        result = all_results['results']["RULE-1962"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1962 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1962 failed"


    def test_rule_1963(self, all_results):
        """
        Test RULE-1963: YAML line: escalation: "Block deployment on violation"
        Priority: MEDIUM
        """
        assert "RULE-1963" in all_results['results'], "Rule RULE-1963 missing"
        result = all_results['results']["RULE-1963"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1963 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1963 failed"


    def test_rule_1964(self, all_results):
        """
        Test RULE-1964: YAML line: dependency_map_export: "23_compliance/anti_gaming/dependency_maps/"
        Priority: CRITICAL
        """
        assert "RULE-1964" in all_results['results'], "Rule RULE-1964 missing"
        result = all_results['results']["RULE-1964"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1964 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1964 failed"


    def test_rule_1965(self, all_results):
        """
        Test RULE-1965: YAML line: export_formats: ["dot", "json", "svg", "enterprise_dashboard"]
        Priority: MEDIUM
        """
        assert "RULE-1965" in all_results['results'], "Rule RULE-1965 missing"
        result = all_results['results']["RULE-1965"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1965 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1965 failed"


    def test_rule_1966(self, all_results):
        """
        Test RULE-1966: YAML line: business_logic_overfitting:
        Priority: MEDIUM
        """
        assert "RULE-1966" in all_results['results'], "Rule RULE-1966 missing"
        result = all_results['results']["RULE-1966"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1966 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1966 failed"


    def test_rule_1967(self, all_results):
        """
        Test RULE-1967: YAML line: description: "Validierung gegen Business-Gaming und Metric-Optimierun
        Priority: MEDIUM
        """
        assert "RULE-1967" in all_results['results'], "Rule RULE-1967 missing"
        result = all_results['results']["RULE-1967"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1967 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1967 failed"


    def test_rule_1968(self, all_results):
        """
        Test RULE-1968: YAML line: method: "Random sampling + Quarterly manual review"
        Priority: MEDIUM
        """
        assert "RULE-1968" in all_results['results'], "Rule RULE-1968 missing"
        result = all_results['results']["RULE-1968"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1968 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1968 failed"


    def test_rule_1969(self, all_results):
        """
        Test RULE-1969: YAML line: script: "23_compliance/anti_gaming/overfitting_detector.py"
        Priority: CRITICAL
        """
        assert "RULE-1969" in all_results['results'], "Rule RULE-1969 missing"
        result = all_results['results']["RULE-1969"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1969 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1969 failed"


    def test_rule_1970(self, all_results):
        """
        Test RULE-1970: YAML line: script_deprecated: false
        Priority: MEDIUM
        """
        assert "RULE-1970" in all_results['results'], "Rule RULE-1970 missing"
        result = all_results['results']["RULE-1970"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1970 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1970 failed"


    def test_rule_1971(self, all_results):
        """
        Test RULE-1971: YAML line: frequency: "Weekly automated + Monthly manual"
        Priority: MEDIUM
        """
        assert "RULE-1971" in all_results['results'], "Rule RULE-1971 missing"
        result = all_results['results']["RULE-1971"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1971 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1971 failed"


    def test_rule_1972(self, all_results):
        """
        Test RULE-1972: YAML line: sample_size: "20%" # Higher than public 15%
        Priority: MEDIUM
        """
        assert "RULE-1972" in all_results['results'], "Rule RULE-1972 missing"
        result = all_results['results']["RULE-1972"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1972 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1972 failed"


    def test_rule_1973(self, all_results):
        """
        Test RULE-1973: YAML line: reviewer_required: true
        Priority: CRITICAL
        """
        assert "RULE-1973" in all_results['results'], "Rule RULE-1973 missing"
        result = all_results['results']["RULE-1973"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1973 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1973 failed"


    def test_rule_1974(self, all_results):
        """
        Test RULE-1974: YAML line: internal_audit: "Quarterly by compliance team"
        Priority: CRITICAL
        """
        assert "RULE-1974" in all_results['results'], "Rule RULE-1974 missing"
        result = all_results['results']["RULE-1974"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1974 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1974 failed"


    def test_rule_1975(self, all_results):
        """
        Test RULE-1975: YAML line: enterprise_badge_validation:
        Priority: MEDIUM
        """
        assert "RULE-1975" in all_results['results'], "Rule RULE-1975 missing"
        result = all_results['results']["RULE-1975"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1975 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1975 failed"


    def test_rule_1976(self, all_results):
        """
        Test RULE-1976: YAML line: description: "Enterprise Badge-Berechnungen gegen dokumentierte Forme
        Priority: MEDIUM
        """
        assert "RULE-1976" in all_results['results'], "Rule RULE-1976 missing"
        result = all_results['results']["RULE-1976"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1976 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1976 failed"


    def test_rule_1977(self, all_results):
        """
        Test RULE-1977: YAML line: script: "23_compliance/anti_gaming/badge_integrity_checker.sh"
        Priority: CRITICAL
        """
        assert "RULE-1977" in all_results['results'], "Rule RULE-1977 missing"
        result = all_results['results']["RULE-1977"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1977 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1977 failed"


    def test_rule_1978(self, all_results):
        """
        Test RULE-1978: YAML line: script_deprecated: false
        Priority: MEDIUM
        """
        assert "RULE-1978" in all_results['results'], "Rule RULE-1978 missing"
        result = all_results['results']["RULE-1978"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1978 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1978 failed"


    def test_rule_1979(self, all_results):
        """
        Test RULE-1979: YAML line: frequency: "Every PR + Pre-release"
        Priority: MEDIUM
        """
        assert "RULE-1979" in all_results['results'], "Rule RULE-1979 missing"
        result = all_results['results']["RULE-1979"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1979 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1979 failed"


    def test_rule_1980(self, all_results):
        """
        Test RULE-1980: YAML line: documentation_required: true
        Priority: CRITICAL
        """
        assert "RULE-1980" in all_results['results'], "Rule RULE-1980 missing"
        result = all_results['results']["RULE-1980"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1980 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1980 failed"


    def test_rule_1981(self, all_results):
        """
        Test RULE-1981: YAML line: business_review: "Quarterly threshold review"
        Priority: MEDIUM
        """
        assert "RULE-1981" in all_results['results'], "Rule RULE-1981 missing"
        result = all_results['results']["RULE-1981"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1981 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1981 failed"


    def test_rule_1982(self, all_results):
        """
        Test RULE-1982: YAML line: source_validation: true
        Priority: MEDIUM
        """
        assert "RULE-1982" in all_results['results'], "Rule RULE-1982 missing"
        result = all_results['results']["RULE-1982"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1982 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1982 failed"


    def test_rule_1983(self, all_results):
        """
        Test RULE-1983: YAML line: formula_verification: true
        Priority: MEDIUM
        """
        assert "RULE-1983" in all_results['results'], "Rule RULE-1983 missing"
        result = all_results['results']["RULE-1983"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1983 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1983 failed"


    def test_rule_1984(self, all_results):
        """
        Test RULE-1984: YAML line: dependency_graph_generation:
        Priority: MEDIUM
        """
        assert "RULE-1984" in all_results['results'], "Rule RULE-1984 missing"
        result = all_results['results']["RULE-1984"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1984 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1984 failed"


    def test_rule_1985(self, all_results):
        """
        Test RULE-1985: YAML line: enabled: true
        Priority: MEDIUM
        """
        assert "RULE-1985" in all_results['results'], "Rule RULE-1985 missing"
        result = all_results['results']["RULE-1985"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1985 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1985 failed"


    def test_rule_1986(self, all_results):
        """
        Test RULE-1986: YAML line: script: "23_compliance/anti_gaming/dependency_graph_generator.py"
        Priority: CRITICAL
        """
        assert "RULE-1986" in all_results['results'], "Rule RULE-1986 missing"
        result = all_results['results']["RULE-1986"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1986 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1986 failed"


    def test_rule_1987(self, all_results):
        """
        Test RULE-1987: YAML line: output_directory: "23_compliance/anti_gaming/dependency_maps/"
        Priority: CRITICAL
        """
        assert "RULE-1987" in all_results['results'], "Rule RULE-1987 missing"
        result = all_results['results']["RULE-1987"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1987 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1987 failed"


    def test_rule_1988(self, all_results):
        """
        Test RULE-1988: YAML line: formats:
        Priority: MEDIUM
        """
        assert "RULE-1988" in all_results['results'], "Rule RULE-1988 missing"
        result = all_results['results']["RULE-1988"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1988 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1988 failed"


    def test_rule_1989(self, all_results):
        """
        Test RULE-1989: YAML line: dot: true
        Priority: MEDIUM
        """
        assert "RULE-1989" in all_results['results'], "Rule RULE-1989 missing"
        result = all_results['results']["RULE-1989"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1989 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1989 failed"


    def test_rule_1990(self, all_results):
        """
        Test RULE-1990: YAML line: json: true
        Priority: MEDIUM
        """
        assert "RULE-1990" in all_results['results'], "Rule RULE-1990 missing"
        result = all_results['results']["RULE-1990"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1990 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1990 failed"


    def test_rule_1991(self, all_results):
        """
        Test RULE-1991: YAML line: svg: true
        Priority: MEDIUM
        """
        assert "RULE-1991" in all_results['results'], "Rule RULE-1991 missing"
        result = all_results['results']["RULE-1991"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1991 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1991 failed"


    def test_rule_1992(self, all_results):
        """
        Test RULE-1992: YAML line: enterprise_dashboard: true
        Priority: MEDIUM
        """
        assert "RULE-1992" in all_results['results'], "Rule RULE-1992 missing"
        result = all_results['results']["RULE-1992"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1992 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1992 failed"


    def test_rule_1993(self, all_results):
        """
        Test RULE-1993: YAML line: confidential_mapping: true
        Priority: MEDIUM
        """
        assert "RULE-1993" in all_results['results'], "Rule RULE-1993 missing"
        result = all_results['results']["RULE-1993"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1993 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1993 failed"


    def test_rule_1994(self, all_results):
        """
        Test RULE-1994: YAML line: update_frequency: "Daily"
        Priority: MEDIUM
        """
        assert "RULE-1994" in all_results['results'], "Rule RULE-1994 missing"
        result = all_results['results']["RULE-1994"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1994 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1994 failed"


    def test_rule_1995(self, all_results):
        """
        Test RULE-1995: YAML line: ci_integration: true
        Priority: MEDIUM
        """
        assert "RULE-1995" in all_results['results'], "Rule RULE-1995 missing"
        result = all_results['results']["RULE-1995"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1995 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1995 failed"


    def test_rule_1996(self, all_results):
        """
        Test RULE-1996: YAML line: classification: "CONFIDENTIAL"
        Priority: MEDIUM
        """
        assert "RULE-1996" in all_results['results'], "Rule RULE-1996 missing"
        result = all_results['results']["RULE-1996"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1996 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1996 failed"


    def test_rule_1997(self, all_results):
        """
        Test RULE-1997: YAML line: external_review_cycle:
        Priority: MEDIUM
        """
        assert "RULE-1997" in all_results['results'], "Rule RULE-1997 missing"
        result = all_results['results']["RULE-1997"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1997 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1997 failed"


    def test_rule_1998(self, all_results):
        """
        Test RULE-1998: YAML line: frequency: "Every 6 months"
        Priority: MEDIUM
        """
        assert "RULE-1998" in all_results['results'], "Rule RULE-1998 missing"
        result = all_results['results']["RULE-1998"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1998 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1998 failed"


    def test_rule_1999(self, all_results):
        """
        Test RULE-1999: YAML line: last_review: "2025-09-15"
        Priority: MEDIUM
        """
        assert "RULE-1999" in all_results['results'], "Rule RULE-1999 missing"
        result = all_results['results']["RULE-1999"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-1999 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-1999 failed"


    def test_rule_2000(self, all_results):
        """
        Test RULE-2000: YAML line: next_review: "2026-03-15"
        Priority: MEDIUM
        """
        assert "RULE-2000" in all_results['results'], "Rule RULE-2000 missing"
        result = all_results['results']["RULE-2000"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-2000 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-2000 failed"


    def test_rule_2001(self, all_results):
        """
        Test RULE-2001: YAML line: internal_review: "Every 3 months (zusätzlich)"
        Priority: MEDIUM
        """
        assert "RULE-2001" in all_results['results'], "Rule RULE-2001 missing"
        result = all_results['results']["RULE-2001"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-2001 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-2001 failed"


    def test_rule_2002(self, all_results):
        """
        Test RULE-2002: YAML line: reviewer_requirements:
        Priority: MEDIUM
        """
        assert "RULE-2002" in all_results['results'], "Rule RULE-2002 missing"
        result = all_results['results']["RULE-2002"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-2002 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-2002 failed"


    def test_rule_2003(self, all_results):
        """
        Test RULE-2003: YAML line: - "External: Independent third party (nicht Projekt-Maintainer)"
        Priority: MEDIUM
        """
        assert "RULE-2003" in all_results['results'], "Rule RULE-2003 missing"
        result = all_results['results']["RULE-2003"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-2003 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-2003 failed"


    def test_rule_2004(self, all_results):
        """
        Test RULE-2004: YAML line: - "Internal: Senior Compliance Officer + Legal Review"
        Priority: CRITICAL
        """
        assert "RULE-2004" in all_results['results'], "Rule RULE-2004 missing"
        result = all_results['results']["RULE-2004"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-2004 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-2004 failed"


    def test_rule_2005(self, all_results):
        """
        Test RULE-2005: YAML line: - "Credentials: Compliance/Audit background erforderlich"
        Priority: CRITICAL
        """
        assert "RULE-2005" in all_results['results'], "Rule RULE-2005 missing"
        result = all_results['results']["RULE-2005"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-2005 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-2005 failed"


    def test_rule_2006(self, all_results):
        """
        Test RULE-2006: YAML line: - "Clearance: Access to confidential compliance mappings"
        Priority: CRITICAL
        """
        assert "RULE-2006" in all_results['results'], "Rule RULE-2006 missing"
        result = all_results['results']["RULE-2006"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-2006 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-2006 failed"


    def test_rule_2007(self, all_results):
        """
        Test RULE-2007: YAML line: - "Documentation: 23_compliance/reviews/ + internal audit trail"
        Priority: CRITICAL
        """
        assert "RULE-2007" in all_results['results'], "Rule RULE-2007 missing"
        result = all_results['results']["RULE-2007"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-2007 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-2007 failed"


    def test_rule_2008(self, all_results):
        """
        Test RULE-2008: YAML line: review_scope:
        Priority: MEDIUM
        """
        assert "RULE-2008" in all_results['results'], "Rule RULE-2008 missing"
        result = all_results['results']["RULE-2008"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-2008 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-2008 failed"


    def test_rule_2009(self, all_results):
        """
        Test RULE-2009: YAML line: - "Badge calculation logic verification"
        Priority: MEDIUM
        """
        assert "RULE-2009" in all_results['results'], "Rule RULE-2009 missing"
        result = all_results['results']["RULE-2009"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-2009 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-2009 failed"


    def test_rule_2010(self, all_results):
        """
        Test RULE-2010: YAML line: - "Circular dependency analysis"
        Priority: MEDIUM
        """
        assert "RULE-2010" in all_results['results'], "Rule RULE-2010 missing"
        result = all_results['results']["RULE-2010"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-2010 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-2010 failed"


    def test_rule_2011(self, all_results):
        """
        Test RULE-2011: YAML line: - "Business compliance matrix accuracy check"
        Priority: CRITICAL
        """
        assert "RULE-2011" in all_results['results'], "Rule RULE-2011 missing"
        result = all_results['results']["RULE-2011"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-2011 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-2011 failed"


    def test_rule_2012(self, all_results):
        """
        Test RULE-2012: YAML line: - "Anti-gaming control effectiveness"
        Priority: MEDIUM
        """
        assert "RULE-2012" in all_results['results'], "Rule RULE-2012 missing"
        result = all_results['results']["RULE-2012"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-2012 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-2012 failed"


    def test_rule_2013(self, all_results):
        """
        Test RULE-2013: YAML line: - "Internal audit trail validation"
        Priority: MEDIUM
        """
        assert "RULE-2013" in all_results['results'], "Rule RULE-2013 missing"
        result = all_results['results']["RULE-2013"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-2013 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-2013 failed"


    def test_rule_2014(self, all_results):
        """
        Test RULE-2014: YAML line: - "Regulatory mapping completeness"
        Priority: MEDIUM
        """
        assert "RULE-2014" in all_results['results'], "Rule RULE-2014 missing"
        result = all_results['results']["RULE-2014"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-2014 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-2014 failed"


    def test_rule_2015(self, all_results):
        """
        Test RULE-2015: YAML line: - "Dependency graph validation (confidential)"
        Priority: MEDIUM
        """
        assert "RULE-2015" in all_results['results'], "Rule RULE-2015 missing"
        result = all_results['results']["RULE-2015"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-2015 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-2015 failed"


    def test_rule_2016(self, all_results):
        """
        Test RULE-2016: YAML line: - "Business logic gaming assessment"
        Priority: MEDIUM
        """
        assert "RULE-2016" in all_results['results'], "Rule RULE-2016 missing"
        result = all_results['results']["RULE-2016"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-2016 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-2016 failed"


    def test_rule_2017(self, all_results):
        """
        Test RULE-2017: YAML field 'name' must equal 'Enterprise Review Status Validation'
        Priority: MEDIUM
        """
        assert "RULE-2017" in all_results['results'], "Rule RULE-2017 missing"
        result = all_results['results']["RULE-2017"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-2017 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-2017 failed"


    def test_rule_2018(self, all_results):
        """
        Test RULE-2018: YAML list 'True' must contain 2 elements
        Priority: CRITICAL
        """
        assert "RULE-2018" in all_results['results'], "Rule RULE-2018 missing"
        result = all_results['results']["RULE-2018"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-2018 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-2018 failed"


    def test_rule_2019(self, all_results):
        """
        Test RULE-2019: YAML field 'jobs.check_review_status.runs-on' must equal 'ubuntu-latest'
        Priority: MEDIUM
        """
        assert "RULE-2019" in all_results['results'], "Rule RULE-2019 missing"
        result = all_results['results']["RULE-2019"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-2019 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-2019 failed"


    def test_rule_2020(self, all_results):
        """
        Test RULE-2020: YAML list 'jobs.check_review_status.steps' must contain 3 elements
        Priority: CRITICAL
        """
        assert "RULE-2020" in all_results['results'], "Rule RULE-2020 missing"
        result = all_results['results']["RULE-2020"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-2020 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-2020 failed"


    def test_rule_2021(self, all_results):
        """
        Test RULE-2021: YAML line: name: Enterprise Review Status Validation
        Priority: MEDIUM
        """
        assert "RULE-2021" in all_results['results'], "Rule RULE-2021 missing"
        result = all_results['results']["RULE-2021"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-2021 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-2021 failed"


    def test_rule_2022(self, all_results):
        """
        Test RULE-2022: YAML line: on: [pull_request, schedule]
        Priority: MEDIUM
        """
        assert "RULE-2022" in all_results['results'], "Rule RULE-2022 missing"
        result = all_results['results']["RULE-2022"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-2022 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-2022 failed"


    def test_rule_2023(self, all_results):
        """
        Test RULE-2023: YAML line: jobs:
        Priority: MEDIUM
        """
        assert "RULE-2023" in all_results['results'], "Rule RULE-2023 missing"
        result = all_results['results']["RULE-2023"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-2023 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-2023 failed"


    def test_rule_2024(self, all_results):
        """
        Test RULE-2024: YAML line: check_review_status:
        Priority: MEDIUM
        """
        assert "RULE-2024" in all_results['results'], "Rule RULE-2024 missing"
        result = all_results['results']["RULE-2024"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-2024 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-2024 failed"


    def test_rule_2025(self, all_results):
        """
        Test RULE-2025: YAML line: runs-on: ubuntu-latest
        Priority: MEDIUM
        """
        assert "RULE-2025" in all_results['results'], "Rule RULE-2025 missing"
        result = all_results['results']["RULE-2025"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-2025 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-2025 failed"


    def test_rule_2026(self, all_results):
        """
        Test RULE-2026: YAML line: steps:
        Priority: MEDIUM
        """
        assert "RULE-2026" in all_results['results'], "Rule RULE-2026 missing"
        result = all_results['results']["RULE-2026"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-2026 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-2026 failed"


    def test_rule_2027(self, all_results):
        """
        Test RULE-2027: YAML line: - name: Validate Internal Review Currency
        Priority: MEDIUM
        """
        assert "RULE-2027" in all_results['results'], "Rule RULE-2027 missing"
        result = all_results['results']["RULE-2027"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-2027 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-2027 failed"


    def test_rule_2028(self, all_results):
        """
        Test RULE-2028: YAML line: run: |
        Priority: MEDIUM
        """
        assert "RULE-2028" in all_results['results'], "Rule RULE-2028 missing"
        result = all_results['results']["RULE-2028"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-2028 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-2028 failed"


    def test_rule_2029(self, all_results):
        """
        Test RULE-2029: YAML line: python 23_compliance/reviews/review_status_checker.py --enterprise
        Priority: CRITICAL
        """
        assert "RULE-2029" in all_results['results'], "Rule RULE-2029 missing"
        result = all_results['results']["RULE-2029"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-2029 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-2029 failed"


    def test_rule_2030(self, all_results):
        """
        Test RULE-2030: YAML line: - name: Validate Business Compliance
        Priority: CRITICAL
        """
        assert "RULE-2030" in all_results['results'], "Rule RULE-2030 missing"
        result = all_results['results']["RULE-2030"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-2030 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-2030 failed"


    def test_rule_2031(self, all_results):
        """
        Test RULE-2031: YAML line: run: |
        Priority: MEDIUM
        """
        assert "RULE-2031" in all_results['results'], "Rule RULE-2031 missing"
        result = all_results['results']["RULE-2031"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-2031 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-2031 failed"


    def test_rule_2032(self, all_results):
        """
        Test RULE-2032: YAML line: python 23_compliance/reviews/business_compliance_checker.py
        Priority: CRITICAL
        """
        assert "RULE-2032" in all_results['results'], "Rule RULE-2032 missing"
        result = all_results['results']["RULE-2032"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-2032 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-2032 failed"


    def test_rule_2033(self, all_results):
        """
        Test RULE-2033: YAML line: - name: Update Review Log
        Priority: MEDIUM
        """
        assert "RULE-2033" in all_results['results'], "Rule RULE-2033 missing"
        result = all_results['results']["RULE-2033"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-2033 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-2033 failed"


    def test_rule_2034(self, all_results):
        """
        Test RULE-2034: YAML line: run: |
        Priority: MEDIUM
        """
        assert "RULE-2034" in all_results['results'], "Rule RULE-2034 missing"
        result = all_results['results']["RULE-2034"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-2034 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-2034 failed"


    def test_rule_2035(self, all_results):
        """
        Test RULE-2035: YAML line: python 23_compliance/reviews/update_review_log.py --pr-context --ente
        Priority: CRITICAL
        """
        assert "RULE-2035" in all_results['results'], "Rule RULE-2035 missing"
        result = all_results['results']["RULE-2035"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-2035 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-2035 failed"


    def test_rule_2036(self, all_results):
        """
        Test RULE-2036: YAML field 'root_depth_matrix.01_ai_layer.max_depth' must equal '3'
        Priority: MEDIUM
        """
        assert "RULE-2036" in all_results['results'], "Rule RULE-2036 missing"
        result = all_results['results']["RULE-2036"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-2036 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-2036 failed"


    def test_rule_2037(self, all_results):
        """
        Test RULE-2037: YAML list 'root_depth_matrix.01_ai_layer.level_3' must contain 5 elements
        Priority: MEDIUM
        """
        assert "RULE-2037" in all_results['results'], "Rule RULE-2037 missing"
        result = all_results['results']["RULE-2037"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-2037 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-2037 failed"


    def test_rule_2038(self, all_results):
        """
        Test RULE-2038: YAML field 'root_depth_matrix.02_audit_logging.max_depth' must equal '5'
        Priority: MEDIUM
        """
        assert "RULE-2038" in all_results['results'], "Rule RULE-2038 missing"
        result = all_results['results']["RULE-2038"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-2038 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-2038 failed"


    def test_rule_2039(self, all_results):
        """
        Test RULE-2039: YAML list 'root_depth_matrix.02_audit_logging.level_3' must contain 6 elements
        Priority: HIGH
        """
        assert "RULE-2039" in all_results['results'], "Rule RULE-2039 missing"
        result = all_results['results']["RULE-2039"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "HIGH" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-2039 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-2039 failed"


    def test_rule_2040(self, all_results):
        """
        Test RULE-2040: YAML list 'root_depth_matrix.02_audit_logging.level_4' must contain 3 elements
        Priority: HIGH
        """
        assert "RULE-2040" in all_results['results'], "Rule RULE-2040 missing"
        result = all_results['results']["RULE-2040"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "HIGH" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-2040 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-2040 failed"


    def test_rule_2041(self, all_results):
        """
        Test RULE-2041: YAML list 'root_depth_matrix.02_audit_logging.level_5' must contain 2 elements
        Priority: MEDIUM
        """
        assert "RULE-2041" in all_results['results'], "Rule RULE-2041 missing"
        result = all_results['results']["RULE-2041"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-2041 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-2041 failed"


    def test_rule_2042(self, all_results):
        """
        Test RULE-2042: YAML field 'root_depth_matrix.03_core.max_depth' must equal '3'
        Priority: MEDIUM
        """
        assert "RULE-2042" in all_results['results'], "Rule RULE-2042 missing"
        result = all_results['results']["RULE-2042"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-2042 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-2042 failed"


    def test_rule_2043(self, all_results):
        """
        Test RULE-2043: YAML list 'root_depth_matrix.03_core.level_3' must contain 5 elements
        Priority: HIGH
        """
        assert "RULE-2043" in all_results['results'], "Rule RULE-2043 missing"
        result = all_results['results']["RULE-2043"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "HIGH" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-2043 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-2043 failed"


    def test_rule_2044(self, all_results):
        """
        Test RULE-2044: YAML field 'root_depth_matrix.04_deployment.max_depth' must equal '3'
        Priority: MEDIUM
        """
        assert "RULE-2044" in all_results['results'], "Rule RULE-2044 missing"
        result = all_results['results']["RULE-2044"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-2044 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-2044 failed"


    def test_rule_2045(self, all_results):
        """
        Test RULE-2045: YAML list 'root_depth_matrix.04_deployment.level_3' must contain 4 elements
        Priority: MEDIUM
        """
        assert "RULE-2045" in all_results['results'], "Rule RULE-2045 missing"
        result = all_results['results']["RULE-2045"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-2045 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-2045 failed"


    def test_rule_2046(self, all_results):
        """
        Test RULE-2046: YAML field 'root_depth_matrix.05_documentation.max_depth' must equal '5'
        Priority: MEDIUM
        """
        assert "RULE-2046" in all_results['results'], "Rule RULE-2046 missing"
        result = all_results['results']["RULE-2046"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-2046 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-2046 failed"


    def test_rule_2047(self, all_results):
        """
        Test RULE-2047: YAML list 'root_depth_matrix.05_documentation.level_3' must contain 5 elements
        Priority: MEDIUM
        """
        assert "RULE-2047" in all_results['results'], "Rule RULE-2047 missing"
        result = all_results['results']["RULE-2047"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-2047 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-2047 failed"


    def test_rule_2048(self, all_results):
        """
        Test RULE-2048: YAML list 'root_depth_matrix.05_documentation.level_4' must contain 1 elements
        Priority: MEDIUM
        """
        assert "RULE-2048" in all_results['results'], "Rule RULE-2048 missing"
        result = all_results['results']["RULE-2048"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-2048 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-2048 failed"


    def test_rule_2049(self, all_results):
        """
        Test RULE-2049: YAML list 'root_depth_matrix.05_documentation.level_5' must contain 2 elements
        Priority: CRITICAL
        """
        assert "RULE-2049" in all_results['results'], "Rule RULE-2049 missing"
        result = all_results['results']["RULE-2049"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-2049 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-2049 failed"


    def test_rule_2050(self, all_results):
        """
        Test RULE-2050: YAML list 'root_depth_matrix.05_documentation.disabled' must contain 1 elements
        Priority: MEDIUM
        """
        assert "RULE-2050" in all_results['results'], "Rule RULE-2050 missing"
        result = all_results['results']["RULE-2050"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-2050 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-2050 failed"


    def test_rule_2051(self, all_results):
        """
        Test RULE-2051: YAML field 'root_depth_matrix.06_data_pipeline.max_depth' must equal '3'
        Priority: MEDIUM
        """
        assert "RULE-2051" in all_results['results'], "Rule RULE-2051 missing"
        result = all_results['results']["RULE-2051"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-2051 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-2051 failed"


    def test_rule_2052(self, all_results):
        """
        Test RULE-2052: YAML list 'root_depth_matrix.06_data_pipeline.level_3' must contain 5 elements
        Priority: MEDIUM
        """
        assert "RULE-2052" in all_results['results'], "Rule RULE-2052 missing"
        result = all_results['results']["RULE-2052"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-2052 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-2052 failed"


    def test_rule_2053(self, all_results):
        """
        Test RULE-2053: YAML field 'root_depth_matrix.07_governance_legal.max_depth' must equal '3'
        Priority: MEDIUM
        """
        assert "RULE-2053" in all_results['results'], "Rule RULE-2053 missing"
        result = all_results['results']["RULE-2053"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-2053 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-2053 failed"


    def test_rule_2054(self, all_results):
        """
        Test RULE-2054: YAML list 'root_depth_matrix.07_governance_legal.level_3' must contain 4 element
        Priority: CRITICAL
        """
        assert "RULE-2054" in all_results['results'], "Rule RULE-2054 missing"
        result = all_results['results']["RULE-2054"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-2054 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-2054 failed"


    def test_rule_2055(self, all_results):
        """
        Test RULE-2055: YAML field 'root_depth_matrix.08_identity_score.max_depth' must equal '3'
        Priority: MEDIUM
        """
        assert "RULE-2055" in all_results['results'], "Rule RULE-2055 missing"
        result = all_results['results']["RULE-2055"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-2055 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-2055 failed"


    def test_rule_2056(self, all_results):
        """
        Test RULE-2056: YAML list 'root_depth_matrix.08_identity_score.level_3' must contain 3 elements
        Priority: MEDIUM
        """
        assert "RULE-2056" in all_results['results'], "Rule RULE-2056 missing"
        result = all_results['results']["RULE-2056"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-2056 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-2056 failed"


    def test_rule_2057(self, all_results):
        """
        Test RULE-2057: YAML field 'root_depth_matrix.09_meta_identity.max_depth' must equal '3'
        Priority: MEDIUM
        """
        assert "RULE-2057" in all_results['results'], "Rule RULE-2057 missing"
        result = all_results['results']["RULE-2057"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-2057 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-2057 failed"


    def test_rule_2058(self, all_results):
        """
        Test RULE-2058: YAML list 'root_depth_matrix.09_meta_identity.level_3' must contain 3 elements
        Priority: MEDIUM
        """
        assert "RULE-2058" in all_results['results'], "Rule RULE-2058 missing"
        result = all_results['results']["RULE-2058"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-2058 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-2058 failed"


    def test_rule_2059(self, all_results):
        """
        Test RULE-2059: YAML field 'root_depth_matrix.10_interoperability.max_depth' must equal '3'
        Priority: MEDIUM
        """
        assert "RULE-2059" in all_results['results'], "Rule RULE-2059 missing"
        result = all_results['results']["RULE-2059"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-2059 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-2059 failed"


    def test_rule_2060(self, all_results):
        """
        Test RULE-2060: YAML list 'root_depth_matrix.10_interoperability.level_3' must contain 3 element
        Priority: HIGH
        """
        assert "RULE-2060" in all_results['results'], "Rule RULE-2060 missing"
        result = all_results['results']["RULE-2060"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "HIGH" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-2060 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-2060 failed"


    def test_rule_2061(self, all_results):
        """
        Test RULE-2061: YAML field 'root_depth_matrix.11_test_simulation.max_depth' must equal '3'
        Priority: MEDIUM
        """
        assert "RULE-2061" in all_results['results'], "Rule RULE-2061 missing"
        result = all_results['results']["RULE-2061"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-2061 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-2061 failed"


    def test_rule_2062(self, all_results):
        """
        Test RULE-2062: YAML list 'root_depth_matrix.11_test_simulation.level_3' must contain 3 elements
        Priority: MEDIUM
        """
        assert "RULE-2062" in all_results['results'], "Rule RULE-2062 missing"
        result = all_results['results']["RULE-2062"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-2062 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-2062 failed"


    def test_rule_2063(self, all_results):
        """
        Test RULE-2063: YAML field 'root_depth_matrix.12_tooling.max_depth' must equal '3'
        Priority: MEDIUM
        """
        assert "RULE-2063" in all_results['results'], "Rule RULE-2063 missing"
        result = all_results['results']["RULE-2063"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-2063 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-2063 failed"


    def test_rule_2064(self, all_results):
        """
        Test RULE-2064: YAML list 'root_depth_matrix.12_tooling.level_3' must contain 4 elements
        Priority: MEDIUM
        """
        assert "RULE-2064" in all_results['results'], "Rule RULE-2064 missing"
        result = all_results['results']["RULE-2064"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-2064 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-2064 failed"


    def test_rule_2065(self, all_results):
        """
        Test RULE-2065: YAML field 'root_depth_matrix.13_ui_layer.max_depth' must equal '4'
        Priority: MEDIUM
        """
        assert "RULE-2065" in all_results['results'], "Rule RULE-2065 missing"
        result = all_results['results']["RULE-2065"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-2065 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-2065 failed"


    def test_rule_2066(self, all_results):
        """
        Test RULE-2066: YAML list 'root_depth_matrix.13_ui_layer.level_3' must contain 4 elements
        Priority: CRITICAL
        """
        assert "RULE-2066" in all_results['results'], "Rule RULE-2066 missing"
        result = all_results['results']["RULE-2066"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-2066 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-2066 failed"


    def test_rule_2067(self, all_results):
        """
        Test RULE-2067: YAML list 'root_depth_matrix.13_ui_layer.level_4' must contain 3 elements
        Priority: CRITICAL
        """
        assert "RULE-2067" in all_results['results'], "Rule RULE-2067 missing"
        result = all_results['results']["RULE-2067"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-2067 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-2067 failed"


    def test_rule_2068(self, all_results):
        """
        Test RULE-2068: YAML field 'root_depth_matrix.14_zero_time_auth.max_depth' must equal '3'
        Priority: MEDIUM
        """
        assert "RULE-2068" in all_results['results'], "Rule RULE-2068 missing"
        result = all_results['results']["RULE-2068"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-2068 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-2068 failed"


    def test_rule_2069(self, all_results):
        """
        Test RULE-2069: YAML list 'root_depth_matrix.14_zero_time_auth.level_3' must contain 4 elements
        Priority: MEDIUM
        """
        assert "RULE-2069" in all_results['results'], "Rule RULE-2069 missing"
        result = all_results['results']["RULE-2069"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-2069 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-2069 failed"


    def test_rule_2070(self, all_results):
        """
        Test RULE-2070: YAML field 'root_depth_matrix.15_infra.max_depth' must equal '3'
        Priority: MEDIUM
        """
        assert "RULE-2070" in all_results['results'], "Rule RULE-2070 missing"
        result = all_results['results']["RULE-2070"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-2070 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-2070 failed"


    def test_rule_2071(self, all_results):
        """
        Test RULE-2071: YAML list 'root_depth_matrix.15_infra.level_3' must contain 4 elements
        Priority: MEDIUM
        """
        assert "RULE-2071" in all_results['results'], "Rule RULE-2071 missing"
        result = all_results['results']["RULE-2071"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-2071 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-2071 failed"


    def test_rule_2072(self, all_results):
        """
        Test RULE-2072: YAML field 'root_depth_matrix.16_codex.max_depth' must equal '3'
        Priority: MEDIUM
        """
        assert "RULE-2072" in all_results['results'], "Rule RULE-2072 missing"
        result = all_results['results']["RULE-2072"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-2072 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-2072 failed"


    def test_rule_2073(self, all_results):
        """
        Test RULE-2073: YAML list 'root_depth_matrix.16_codex.level_3' must contain 3 elements
        Priority: MEDIUM
        """
        assert "RULE-2073" in all_results['results'], "Rule RULE-2073 missing"
        result = all_results['results']["RULE-2073"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-2073 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-2073 failed"


    def test_rule_2074(self, all_results):
        """
        Test RULE-2074: YAML field 'root_depth_matrix.17_observability.max_depth' must equal '3'
        Priority: MEDIUM
        """
        assert "RULE-2074" in all_results['results'], "Rule RULE-2074 missing"
        result = all_results['results']["RULE-2074"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-2074 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-2074 failed"


    def test_rule_2075(self, all_results):
        """
        Test RULE-2075: YAML list 'root_depth_matrix.17_observability.level_3' must contain 5 elements
        Priority: MEDIUM
        """
        assert "RULE-2075" in all_results['results'], "Rule RULE-2075 missing"
        result = all_results['results']["RULE-2075"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-2075 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-2075 failed"


    def test_rule_2076(self, all_results):
        """
        Test RULE-2076: YAML field 'root_depth_matrix.18_data_layer.max_depth' must equal '3'
        Priority: MEDIUM
        """
        assert "RULE-2076" in all_results['results'], "Rule RULE-2076 missing"
        result = all_results['results']["RULE-2076"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-2076 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-2076 failed"


    def test_rule_2077(self, all_results):
        """
        Test RULE-2077: YAML list 'root_depth_matrix.18_data_layer.level_3' must contain 4 elements
        Priority: MEDIUM
        """
        assert "RULE-2077" in all_results['results'], "Rule RULE-2077 missing"
        result = all_results['results']["RULE-2077"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-2077 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-2077 failed"


    def test_rule_2078(self, all_results):
        """
        Test RULE-2078: YAML field 'root_depth_matrix.19_adapters.max_depth' must equal '3'
        Priority: MEDIUM
        """
        assert "RULE-2078" in all_results['results'], "Rule RULE-2078 missing"
        result = all_results['results']["RULE-2078"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-2078 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-2078 failed"


    def test_rule_2079(self, all_results):
        """
        Test RULE-2079: YAML list 'root_depth_matrix.19_adapters.level_3' must contain 5 elements
        Priority: MEDIUM
        """
        assert "RULE-2079" in all_results['results'], "Rule RULE-2079 missing"
        result = all_results['results']["RULE-2079"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-2079 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-2079 failed"


    def test_rule_2080(self, all_results):
        """
        Test RULE-2080: YAML field 'root_depth_matrix.20_foundation.max_depth' must equal '3'
        Priority: MEDIUM
        """
        assert "RULE-2080" in all_results['results'], "Rule RULE-2080 missing"
        result = all_results['results']["RULE-2080"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-2080 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-2080 failed"


    def test_rule_2081(self, all_results):
        """
        Test RULE-2081: YAML list 'root_depth_matrix.20_foundation.level_3' must contain 3 elements
        Priority: CRITICAL
        """
        assert "RULE-2081" in all_results['results'], "Rule RULE-2081 missing"
        result = all_results['results']["RULE-2081"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-2081 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-2081 failed"


    def test_rule_2082(self, all_results):
        """
        Test RULE-2082: YAML field 'root_depth_matrix.21_post_quantum_crypto.max_depth' must equal '3'
        Priority: MEDIUM
        """
        assert "RULE-2082" in all_results['results'], "Rule RULE-2082 missing"
        result = all_results['results']["RULE-2082"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-2082 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-2082 failed"


    def test_rule_2083(self, all_results):
        """
        Test RULE-2083: YAML list 'root_depth_matrix.21_post_quantum_crypto.level_3' must contain 3 elem
        Priority: MEDIUM
        """
        assert "RULE-2083" in all_results['results'], "Rule RULE-2083 missing"
        result = all_results['results']["RULE-2083"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-2083 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-2083 failed"


    def test_rule_2084(self, all_results):
        """
        Test RULE-2084: YAML field 'root_depth_matrix.22_datasets.max_depth' must equal '3'
        Priority: MEDIUM
        """
        assert "RULE-2084" in all_results['results'], "Rule RULE-2084 missing"
        result = all_results['results']["RULE-2084"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-2084 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-2084 failed"


    def test_rule_2085(self, all_results):
        """
        Test RULE-2085: YAML list 'root_depth_matrix.22_datasets.level_3' must contain 5 elements
        Priority: MEDIUM
        """
        assert "RULE-2085" in all_results['results'], "Rule RULE-2085 missing"
        result = all_results['results']["RULE-2085"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-2085 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-2085 failed"


    def test_rule_2086(self, all_results):
        """
        Test RULE-2086: YAML field 'root_depth_matrix.23_compliance.max_depth' must equal '6'
        Priority: MEDIUM
        """
        assert "RULE-2086" in all_results['results'], "Rule RULE-2086 missing"
        result = all_results['results']["RULE-2086"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-2086 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-2086 failed"


    def test_rule_2087(self, all_results):
        """
        Test RULE-2087: YAML list 'root_depth_matrix.23_compliance.level_3' must contain 10 elements
        Priority: HIGH
        """
        assert "RULE-2087" in all_results['results'], "Rule RULE-2087 missing"
        result = all_results['results']["RULE-2087"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "HIGH" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-2087 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-2087 failed"


    def test_rule_2088(self, all_results):
        """
        Test RULE-2088: YAML list 'root_depth_matrix.23_compliance.level_4' must contain 5 elements
        Priority: CRITICAL
        """
        assert "RULE-2088" in all_results['results'], "Rule RULE-2088 missing"
        result = all_results['results']["RULE-2088"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-2088 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-2088 failed"


    def test_rule_2089(self, all_results):
        """
        Test RULE-2089: YAML list 'root_depth_matrix.23_compliance.level_5' must contain 3 elements
        Priority: CRITICAL
        """
        assert "RULE-2089" in all_results['results'], "Rule RULE-2089 missing"
        result = all_results['results']["RULE-2089"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-2089 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-2089 failed"


    def test_rule_2090(self, all_results):
        """
        Test RULE-2090: YAML list 'root_depth_matrix.23_compliance.level_6' must contain 1 elements
        Priority: MEDIUM
        """
        assert "RULE-2090" in all_results['results'], "Rule RULE-2090 missing"
        result = all_results['results']["RULE-2090"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-2090 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-2090 failed"


    def test_rule_2091(self, all_results):
        """
        Test RULE-2091: YAML field 'root_depth_matrix.24_meta_orchestration.max_depth' must equal '4'
        Priority: MEDIUM
        """
        assert "RULE-2091" in all_results['results'], "Rule RULE-2091 missing"
        result = all_results['results']["RULE-2091"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-2091 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-2091 failed"


    def test_rule_2092(self, all_results):
        """
        Test RULE-2092: YAML list 'root_depth_matrix.24_meta_orchestration.level_3' must contain 3 eleme
        Priority: MEDIUM
        """
        assert "RULE-2092" in all_results['results'], "Rule RULE-2092 missing"
        result = all_results['results']["RULE-2092"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-2092 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-2092 failed"


    def test_rule_2093(self, all_results):
        """
        Test RULE-2093: YAML list 'root_depth_matrix.24_meta_orchestration.level_4' must contain 4 eleme
        Priority: MEDIUM
        """
        assert "RULE-2093" in all_results['results'], "Rule RULE-2093 missing"
        result = all_results['results']["RULE-2093"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-2093 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-2093 failed"


    def test_rule_2094(self, all_results):
        """
        Test RULE-2094: YAML line: root_depth_matrix:
        Priority: MEDIUM
        """
        assert "RULE-2094" in all_results['results'], "Rule RULE-2094 missing"
        result = all_results['results']["RULE-2094"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-2094 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-2094 failed"


    def test_rule_2095(self, all_results):
        """
        Test RULE-2095: YAML line: "01_ai_layer":
        Priority: MEDIUM
        """
        assert "RULE-2095" in all_results['results'], "Rule RULE-2095 missing"
        result = all_results['results']["RULE-2095"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-2095 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-2095 failed"


    def test_rule_2096(self, all_results):
        """
        Test RULE-2096: YAML line: max_depth: 3
        Priority: MEDIUM
        """
        assert "RULE-2096" in all_results['results'], "Rule RULE-2096 missing"
        result = all_results['results']["RULE-2096"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-2096 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-2096 failed"


    def test_rule_2097(self, all_results):
        """
        Test RULE-2097: YAML line: level_3: ["agents/", "prompts/", "evaluation/", "safety/", "runtimes/
        Priority: MEDIUM
        """
        assert "RULE-2097" in all_results['results'], "Rule RULE-2097 missing"
        result = all_results['results']["RULE-2097"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-2097 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-2097 failed"


    def test_rule_2098(self, all_results):
        """
        Test RULE-2098: YAML line: "02_audit_logging":
        Priority: MEDIUM
        """
        assert "RULE-2098" in all_results['results'], "Rule RULE-2098 missing"
        result = all_results['results']["RULE-2098"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-2098 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-2098 failed"


    def test_rule_2099(self, all_results):
        """
        Test RULE-2099: YAML line: max_depth: 5
        Priority: MEDIUM
        """
        assert "RULE-2099" in all_results['results'], "Rule RULE-2099 missing"
        result = all_results['results']["RULE-2099"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-2099 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-2099 failed"


    def test_rule_2100(self, all_results):
        """
        Test RULE-2100: YAML line: level_3: ["ingest/", "processors/", "storage/", "retention/", "blockc
        Priority: MEDIUM
        """
        assert "RULE-2100" in all_results['results'], "Rule RULE-2100 missing"
        result = all_results['results']["RULE-2100"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-2100 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-2100 failed"


    def test_rule_2101(self, all_results):
        """
        Test RULE-2101: YAML line: level_4: ["quarantine/singleton/", "storage/worm/", "storage/blockcha
        Priority: MEDIUM
        """
        assert "RULE-2101" in all_results['results'], "Rule RULE-2101 missing"
        result = all_results['results']["RULE-2101"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-2101 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-2101 failed"


    def test_rule_2102(self, all_results):
        """
        Test RULE-2102: YAML line: level_5: ["quarantine/singleton/quarantine_store/", "quarantine/singl
        Priority: MEDIUM
        """
        assert "RULE-2102" in all_results['results'], "Rule RULE-2102 missing"
        result = all_results['results']["RULE-2102"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-2102 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-2102 failed"


    def test_rule_2103(self, all_results):
        """
        Test RULE-2103: YAML line: "03_core":
        Priority: MEDIUM
        """
        assert "RULE-2103" in all_results['results'], "Rule RULE-2103 missing"
        result = all_results['results']["RULE-2103"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-2103 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-2103 failed"


    def test_rule_2104(self, all_results):
        """
        Test RULE-2104: YAML line: max_depth: 3
        Priority: MEDIUM
        """
        assert "RULE-2104" in all_results['results'], "Rule RULE-2104 missing"
        result = all_results['results']["RULE-2104"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-2104 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-2104 failed"


    def test_rule_2105(self, all_results):
        """
        Test RULE-2105: YAML line: level_3: ["domain/", "services/", "api/", "schemas/", "tokenomics/"]
        Priority: MEDIUM
        """
        assert "RULE-2105" in all_results['results'], "Rule RULE-2105 missing"
        result = all_results['results']["RULE-2105"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-2105 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-2105 failed"


    def test_rule_2106(self, all_results):
        """
        Test RULE-2106: YAML line: "04_deployment":
        Priority: MEDIUM
        """
        assert "RULE-2106" in all_results['results'], "Rule RULE-2106 missing"
        result = all_results['results']["RULE-2106"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-2106 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-2106 failed"


    def test_rule_2107(self, all_results):
        """
        Test RULE-2107: YAML line: max_depth: 3
        Priority: MEDIUM
        """
        assert "RULE-2107" in all_results['results'], "Rule RULE-2107 missing"
        result = all_results['results']["RULE-2107"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-2107 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-2107 failed"


    def test_rule_2108(self, all_results):
        """
        Test RULE-2108: YAML line: level_3: ["ci/blueprints/", "cd/strategies/", "containers/", "manifes
        Priority: MEDIUM
        """
        assert "RULE-2108" in all_results['results'], "Rule RULE-2108 missing"
        result = all_results['results']["RULE-2108"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-2108 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-2108 failed"


    def test_rule_2109(self, all_results):
        """
        Test RULE-2109: YAML line: "05_documentation":
        Priority: MEDIUM
        """
        assert "RULE-2109" in all_results['results'], "Rule RULE-2109 missing"
        result = all_results['results']["RULE-2109"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-2109 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-2109 failed"


    def test_rule_2110(self, all_results):
        """
        Test RULE-2110: YAML line: max_depth: 5
        Priority: MEDIUM
        """
        assert "RULE-2110" in all_results['results'], "Rule RULE-2110 missing"
        result = all_results['results']["RULE-2110"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-2110 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-2110 failed"


    def test_rule_2111(self, all_results):
        """
        Test RULE-2111: YAML line: level_3: ["architecture/", "runbooks/", "adr/", "references/", "inter
        Priority: MEDIUM
        """
        assert "RULE-2111" in all_results['results'], "Rule RULE-2111 missing"
        result = all_results['results']["RULE-2111"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-2111 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-2111 failed"


    def test_rule_2112(self, all_results):
        """
        Test RULE-2112: YAML line: level_4: ["internationalization/jurisdiction_specific/"]
        Priority: MEDIUM
        """
        assert "RULE-2112" in all_results['results'], "Rule RULE-2112 missing"
        result = all_results['results']["RULE-2112"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-2112 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-2112 failed"


    def test_rule_2113(self, all_results):
        """
        Test RULE-2113: YAML line: level_5: ["internationalization/jurisdiction_specific/en/technical/",
        Priority: CRITICAL
        """
        assert "RULE-2113" in all_results['results'], "Rule RULE-2113 missing"
        result = all_results['results']["RULE-2113"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-2113 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-2113 failed"


    def test_rule_2114(self, all_results):
        """
        Test RULE-2114: YAML line: disabled:
        Priority: MEDIUM
        """
        assert "RULE-2114" in all_results['results'], "Rule RULE-2114 missing"
        result = all_results['results']["RULE-2114"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-2114 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-2114 failed"


    def test_rule_2115(self, all_results):
        """
        Test RULE-2115: YAML line: - "internationalization/jurisdiction_specific/zh/技术文档/"
        Priority: MEDIUM
        """
        assert "RULE-2115" in all_results['results'], "Rule RULE-2115 missing"
        result = all_results['results']["RULE-2115"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-2115 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-2115 failed"


    def test_rule_2116(self, all_results):
        """
        Test RULE-2116: YAML line: "06_data_pipeline":
        Priority: MEDIUM
        """
        assert "RULE-2116" in all_results['results'], "Rule RULE-2116 missing"
        result = all_results['results']["RULE-2116"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-2116 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-2116 failed"


    def test_rule_2117(self, all_results):
        """
        Test RULE-2117: YAML line: max_depth: 3
        Priority: MEDIUM
        """
        assert "RULE-2117" in all_results['results'], "Rule RULE-2117 missing"
        result = all_results['results']["RULE-2117"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-2117 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-2117 failed"


    def test_rule_2118(self, all_results):
        """
        Test RULE-2118: YAML line: level_3: ["ingestion/", "preprocessing/", "training/", "eval/", "depl
        Priority: MEDIUM
        """
        assert "RULE-2118" in all_results['results'], "Rule RULE-2118 missing"
        result = all_results['results']["RULE-2118"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-2118 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-2118 failed"


    def test_rule_2119(self, all_results):
        """
        Test RULE-2119: YAML line: "07_governance_legal":
        Priority: CRITICAL
        """
        assert "RULE-2119" in all_results['results'], "Rule RULE-2119 missing"
        result = all_results['results']["RULE-2119"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-2119 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-2119 failed"


    def test_rule_2120(self, all_results):
        """
        Test RULE-2120: YAML line: max_depth: 3
        Priority: MEDIUM
        """
        assert "RULE-2120" in all_results['results'], "Rule RULE-2120 missing"
        result = all_results['results']["RULE-2120"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-2120 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-2120 failed"


    def test_rule_2121(self, all_results):
        """
        Test RULE-2121: YAML line: level_3: ["legal/", "risk_links/", "stakeholder_protection/", "partne
        Priority: CRITICAL
        """
        assert "RULE-2121" in all_results['results'], "Rule RULE-2121 missing"
        result = all_results['results']["RULE-2121"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-2121 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-2121 failed"


    def test_rule_2122(self, all_results):
        """
        Test RULE-2122: YAML line: "08_identity_score":
        Priority: MEDIUM
        """
        assert "RULE-2122" in all_results['results'], "Rule RULE-2122 missing"
        result = all_results['results']["RULE-2122"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-2122 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-2122 failed"


    def test_rule_2123(self, all_results):
        """
        Test RULE-2123: YAML line: max_depth: 3
        Priority: MEDIUM
        """
        assert "RULE-2123" in all_results['results'], "Rule RULE-2123 missing"
        result = all_results['results']["RULE-2123"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-2123 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-2123 failed"


    def test_rule_2124(self, all_results):
        """
        Test RULE-2124: YAML line: level_3: ["models/", "rules/", "api/"]
        Priority: MEDIUM
        """
        assert "RULE-2124" in all_results['results'], "Rule RULE-2124 missing"
        result = all_results['results']["RULE-2124"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-2124 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-2124 failed"


    def test_rule_2125(self, all_results):
        """
        Test RULE-2125: YAML line: "09_meta_identity":
        Priority: MEDIUM
        """
        assert "RULE-2125" in all_results['results'], "Rule RULE-2125 missing"
        result = all_results['results']["RULE-2125"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-2125 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-2125 failed"


    def test_rule_2126(self, all_results):
        """
        Test RULE-2126: YAML line: max_depth: 3
        Priority: MEDIUM
        """
        assert "RULE-2126" in all_results['results'], "Rule RULE-2126 missing"
        result = all_results['results']["RULE-2126"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-2126 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-2126 failed"


    def test_rule_2127(self, all_results):
        """
        Test RULE-2127: YAML line: level_3: ["schemas/", "resolvers/", "profiles/"]
        Priority: MEDIUM
        """
        assert "RULE-2127" in all_results['results'], "Rule RULE-2127 missing"
        result = all_results['results']["RULE-2127"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-2127 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-2127 failed"


    def test_rule_2128(self, all_results):
        """
        Test RULE-2128: YAML line: "10_interoperability":
        Priority: MEDIUM
        """
        assert "RULE-2128" in all_results['results'], "Rule RULE-2128 missing"
        result = all_results['results']["RULE-2128"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-2128 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-2128 failed"


    def test_rule_2129(self, all_results):
        """
        Test RULE-2129: YAML line: max_depth: 3
        Priority: MEDIUM
        """
        assert "RULE-2129" in all_results['results'], "Rule RULE-2129 missing"
        result = all_results['results']["RULE-2129"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-2129 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-2129 failed"


    def test_rule_2130(self, all_results):
        """
        Test RULE-2130: YAML line: level_3: ["standards/", "mappings/", "connectors/"]
        Priority: HIGH
        """
        assert "RULE-2130" in all_results['results'], "Rule RULE-2130 missing"
        result = all_results['results']["RULE-2130"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "HIGH" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-2130 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-2130 failed"


    def test_rule_2131(self, all_results):
        """
        Test RULE-2131: YAML line: "11_test_simulation":
        Priority: MEDIUM
        """
        assert "RULE-2131" in all_results['results'], "Rule RULE-2131 missing"
        result = all_results['results']["RULE-2131"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-2131 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-2131 failed"


    def test_rule_2132(self, all_results):
        """
        Test RULE-2132: YAML line: max_depth: 3
        Priority: MEDIUM
        """
        assert "RULE-2132" in all_results['results'], "Rule RULE-2132 missing"
        result = all_results['results']["RULE-2132"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-2132 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-2132 failed"


    def test_rule_2133(self, all_results):
        """
        Test RULE-2133: YAML line: level_3: ["unit/", "integration/", "fuzz/"]
        Priority: MEDIUM
        """
        assert "RULE-2133" in all_results['results'], "Rule RULE-2133 missing"
        result = all_results['results']["RULE-2133"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-2133 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-2133 failed"


    def test_rule_2134(self, all_results):
        """
        Test RULE-2134: YAML line: "12_tooling":
        Priority: MEDIUM
        """
        assert "RULE-2134" in all_results['results'], "Rule RULE-2134 missing"
        result = all_results['results']["RULE-2134"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-2134 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-2134 failed"


    def test_rule_2135(self, all_results):
        """
        Test RULE-2135: YAML line: max_depth: 3
        Priority: MEDIUM
        """
        assert "RULE-2135" in all_results['results'], "Rule RULE-2135 missing"
        result = all_results['results']["RULE-2135"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-2135 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-2135 failed"


    def test_rule_2136(self, all_results):
        """
        Test RULE-2136: YAML line: level_3: ["scripts/", "linters/", "generators/", "hooks/"]
        Priority: MEDIUM
        """
        assert "RULE-2136" in all_results['results'], "Rule RULE-2136 missing"
        result = all_results['results']["RULE-2136"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-2136 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-2136 failed"


    def test_rule_2137(self, all_results):
        """
        Test RULE-2137: YAML line: "13_ui_layer":
        Priority: MEDIUM
        """
        assert "RULE-2137" in all_results['results'], "Rule RULE-2137 missing"
        result = all_results['results']["RULE-2137"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-2137 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-2137 failed"


    def test_rule_2138(self, all_results):
        """
        Test RULE-2138: YAML line: max_depth: 4
        Priority: MEDIUM
        """
        assert "RULE-2138" in all_results['results'], "Rule RULE-2138 missing"
        result = all_results['results']["RULE-2138"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-2138 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-2138 failed"


    def test_rule_2139(self, all_results):
        """
        Test RULE-2139: YAML line: level_3: ["admin_frontend/", "partner_dashboard/", "public_frontend/"
        Priority: MEDIUM
        """
        assert "RULE-2139" in all_results['results'], "Rule RULE-2139 missing"
        result = all_results['results']["RULE-2139"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-2139 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-2139 failed"


    def test_rule_2140(self, all_results):
        """
        Test RULE-2140: YAML line: level_4: ["admin_frontend/app/", "partner_dashboard/app/", "public_fr
        Priority: MEDIUM
        """
        assert "RULE-2140" in all_results['results'], "Rule RULE-2140 missing"
        result = all_results['results']["RULE-2140"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-2140 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-2140 failed"


    def test_rule_2141(self, all_results):
        """
        Test RULE-2141: YAML line: "14_zero_time_auth":
        Priority: MEDIUM
        """
        assert "RULE-2141" in all_results['results'], "Rule RULE-2141 missing"
        result = all_results['results']["RULE-2141"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-2141 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-2141 failed"


    def test_rule_2142(self, all_results):
        """
        Test RULE-2142: YAML line: max_depth: 3
        Priority: MEDIUM
        """
        assert "RULE-2142" in all_results['results'], "Rule RULE-2142 missing"
        result = all_results['results']["RULE-2142"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-2142 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-2142 failed"


    def test_rule_2143(self, all_results):
        """
        Test RULE-2143: YAML line: level_3: ["wallet/", "sso/", "flows/", "policies_local/"]
        Priority: MEDIUM
        """
        assert "RULE-2143" in all_results['results'], "Rule RULE-2143 missing"
        result = all_results['results']["RULE-2143"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-2143 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-2143 failed"


    def test_rule_2144(self, all_results):
        """
        Test RULE-2144: YAML line: "15_infra":
        Priority: MEDIUM
        """
        assert "RULE-2144" in all_results['results'], "Rule RULE-2144 missing"
        result = all_results['results']["RULE-2144"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-2144 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-2144 failed"


    def test_rule_2145(self, all_results):
        """
        Test RULE-2145: YAML line: max_depth: 3
        Priority: MEDIUM
        """
        assert "RULE-2145" in all_results['results'], "Rule RULE-2145 missing"
        result = all_results['results']["RULE-2145"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-2145 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-2145 failed"


    def test_rule_2146(self, all_results):
        """
        Test RULE-2146: YAML line: level_3: ["k8s/", "terraform/", "network/", "secrets/"]
        Priority: MEDIUM
        """
        assert "RULE-2146" in all_results['results'], "Rule RULE-2146 missing"
        result = all_results['results']["RULE-2146"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-2146 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-2146 failed"


    def test_rule_2147(self, all_results):
        """
        Test RULE-2147: YAML line: "16_codex":
        Priority: MEDIUM
        """
        assert "RULE-2147" in all_results['results'], "Rule RULE-2147 missing"
        result = all_results['results']["RULE-2147"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-2147 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-2147 failed"


    def test_rule_2148(self, all_results):
        """
        Test RULE-2148: YAML line: max_depth: 3
        Priority: MEDIUM
        """
        assert "RULE-2148" in all_results['results'], "Rule RULE-2148 missing"
        result = all_results['results']["RULE-2148"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-2148 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-2148 failed"


    def test_rule_2149(self, all_results):
        """
        Test RULE-2149: YAML line: level_3: ["badges/", "matrices/", "artifacts/"]
        Priority: MEDIUM
        """
        assert "RULE-2149" in all_results['results'], "Rule RULE-2149 missing"
        result = all_results['results']["RULE-2149"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-2149 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-2149 failed"


    def test_rule_2150(self, all_results):
        """
        Test RULE-2150: YAML line: "17_observability":
        Priority: MEDIUM
        """
        assert "RULE-2150" in all_results['results'], "Rule RULE-2150 missing"
        result = all_results['results']["RULE-2150"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-2150 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-2150 failed"


    def test_rule_2151(self, all_results):
        """
        Test RULE-2151: YAML line: max_depth: 3
        Priority: MEDIUM
        """
        assert "RULE-2151" in all_results['results'], "Rule RULE-2151 missing"
        result = all_results['results']["RULE-2151"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-2151 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-2151 failed"


    def test_rule_2152(self, all_results):
        """
        Test RULE-2152: YAML line: level_3: ["dashboards/", "alerts/", "otel/", "score/", "logs/"]
        Priority: MEDIUM
        """
        assert "RULE-2152" in all_results['results'], "Rule RULE-2152 missing"
        result = all_results['results']["RULE-2152"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-2152 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-2152 failed"


    def test_rule_2153(self, all_results):
        """
        Test RULE-2153: YAML line: "18_data_layer":
        Priority: MEDIUM
        """
        assert "RULE-2153" in all_results['results'], "Rule RULE-2153 missing"
        result = all_results['results']["RULE-2153"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-2153 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-2153 failed"


    def test_rule_2154(self, all_results):
        """
        Test RULE-2154: YAML line: max_depth: 3
        Priority: MEDIUM
        """
        assert "RULE-2154" in all_results['results'], "Rule RULE-2154 missing"
        result = all_results['results']["RULE-2154"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-2154 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-2154 failed"


    def test_rule_2155(self, all_results):
        """
        Test RULE-2155: YAML line: level_3: ["schemas/", "repositories/", "migrations/", "adapters/"]
        Priority: MEDIUM
        """
        assert "RULE-2155" in all_results['results'], "Rule RULE-2155 missing"
        result = all_results['results']["RULE-2155"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-2155 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-2155 failed"


    def test_rule_2156(self, all_results):
        """
        Test RULE-2156: YAML line: "19_adapters":
        Priority: MEDIUM
        """
        assert "RULE-2156" in all_results['results'], "Rule RULE-2156 missing"
        result = all_results['results']["RULE-2156"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-2156 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-2156 failed"


    def test_rule_2157(self, all_results):
        """
        Test RULE-2157: YAML line: max_depth: 3
        Priority: MEDIUM
        """
        assert "RULE-2157" in all_results['results'], "Rule RULE-2157 missing"
        result = all_results['results']["RULE-2157"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-2157 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-2157 failed"


    def test_rule_2158(self, all_results):
        """
        Test RULE-2158: YAML line: level_3: ["wallets/", "shops/", "egov/", "ehealth/", "social/"]
        Priority: MEDIUM
        """
        assert "RULE-2158" in all_results['results'], "Rule RULE-2158 missing"
        result = all_results['results']["RULE-2158"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-2158 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-2158 failed"


    def test_rule_2159(self, all_results):
        """
        Test RULE-2159: YAML line: "20_foundation":
        Priority: MEDIUM
        """
        assert "RULE-2159" in all_results['results'], "Rule RULE-2159 missing"
        result = all_results['results']["RULE-2159"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-2159 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-2159 failed"


    def test_rule_2160(self, all_results):
        """
        Test RULE-2160: YAML line: max_depth: 3
        Priority: MEDIUM
        """
        assert "RULE-2160" in all_results['results'], "Rule RULE-2160 missing"
        result = all_results['results']["RULE-2160"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-2160 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-2160 failed"


    def test_rule_2161(self, all_results):
        """
        Test RULE-2161: YAML line: level_3: ["tokenomics/", "governance_specs/", "security/"]
        Priority: CRITICAL
        """
        assert "RULE-2161" in all_results['results'], "Rule RULE-2161 missing"
        result = all_results['results']["RULE-2161"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-2161 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-2161 failed"


    def test_rule_2162(self, all_results):
        """
        Test RULE-2162: YAML line: "21_post_quantum_crypto":
        Priority: MEDIUM
        """
        assert "RULE-2162" in all_results['results'], "Rule RULE-2162 missing"
        result = all_results['results']["RULE-2162"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-2162 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-2162 failed"


    def test_rule_2163(self, all_results):
        """
        Test RULE-2163: YAML line: max_depth: 3
        Priority: MEDIUM
        """
        assert "RULE-2163" in all_results['results'], "Rule RULE-2163 missing"
        result = all_results['results']["RULE-2163"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-2163 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-2163 failed"


    def test_rule_2164(self, all_results):
        """
        Test RULE-2164: YAML line: level_3: ["algorithms/", "allow_list/", "rotation/"]
        Priority: MEDIUM
        """
        assert "RULE-2164" in all_results['results'], "Rule RULE-2164 missing"
        result = all_results['results']["RULE-2164"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-2164 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-2164 failed"


    def test_rule_2165(self, all_results):
        """
        Test RULE-2165: YAML line: "22_datasets":
        Priority: MEDIUM
        """
        assert "RULE-2165" in all_results['results'], "Rule RULE-2165 missing"
        result = all_results['results']["RULE-2165"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-2165 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-2165 failed"


    def test_rule_2166(self, all_results):
        """
        Test RULE-2166: YAML line: max_depth: 3
        Priority: MEDIUM
        """
        assert "RULE-2166" in all_results['results'], "Rule RULE-2166 missing"
        result = all_results['results']["RULE-2166"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-2166 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-2166 failed"


    def test_rule_2167(self, all_results):
        """
        Test RULE-2167: YAML line: level_3: ["raw/", "interim/", "processed/", "external/", "reference/"
        Priority: MEDIUM
        """
        assert "RULE-2167" in all_results['results'], "Rule RULE-2167 missing"
        result = all_results['results']["RULE-2167"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-2167 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-2167 failed"


    def test_rule_2168(self, all_results):
        """
        Test RULE-2168: YAML line: "23_compliance":
        Priority: CRITICAL
        """
        assert "RULE-2168" in all_results['results'], "Rule RULE-2168 missing"
        result = all_results['results']["RULE-2168"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-2168 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-2168 failed"


    def test_rule_2169(self, all_results):
        """
        Test RULE-2169: YAML line: max_depth: 6
        Priority: MEDIUM
        """
        assert "RULE-2169" in all_results['results'], "Rule RULE-2169 missing"
        result = all_results['results']["RULE-2169"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-2169 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-2169 failed"


    def test_rule_2170(self, all_results):
        """
        Test RULE-2170: YAML line: level_3: ["policies/", "evidence/", "mappings/", "exceptions/", "test
        Priority: MEDIUM
        """
        assert "RULE-2170" in all_results['results'], "Rule RULE-2170 missing"
        result = all_results['results']["RULE-2170"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-2170 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-2170 failed"


    def test_rule_2171(self, all_results):
        """
        Test RULE-2171: YAML line: level_4: ["evidence/ci_runs/", "regional/eu/", "jurisdictions/eu_eea_
        Priority: CRITICAL
        """
        assert "RULE-2171" in all_results['results'], "Rule RULE-2171 missing"
        result = all_results['results']["RULE-2171"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-2171 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-2171 failed"


    def test_rule_2172(self, all_results):
        """
        Test RULE-2172: YAML line: level_5: ["jurisdictions/eu_eea_uk_ch_li/uk_crypto_regime/", "privacy
        Priority: CRITICAL
        """
        assert "RULE-2172" in all_results['results'], "Rule RULE-2172 missing"
        result = all_results['results']["RULE-2172"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-2172 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-2172 failed"


    def test_rule_2173(self, all_results):
        """
        Test RULE-2173: YAML line: level_6: ["jurisdictions/us_ca_br_mx/us_irs_1099_da_final/"]
        Priority: MEDIUM
        """
        assert "RULE-2173" in all_results['results'], "Rule RULE-2173 missing"
        result = all_results['results']["RULE-2173"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-2173 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-2173 failed"


    def test_rule_2174(self, all_results):
        """
        Test RULE-2174: YAML line: "24_meta_orchestration":
        Priority: MEDIUM
        """
        assert "RULE-2174" in all_results['results'], "Rule RULE-2174 missing"
        result = all_results['results']["RULE-2174"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-2174 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-2174 failed"


    def test_rule_2175(self, all_results):
        """
        Test RULE-2175: YAML line: max_depth: 4
        Priority: MEDIUM
        """
        assert "RULE-2175" in all_results['results'], "Rule RULE-2175 missing"
        result = all_results['results']["RULE-2175"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-2175 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-2175 failed"


    def test_rule_2176(self, all_results):
        """
        Test RULE-2176: YAML line: level_3: ["triggers/ci/", "registry/", "pipelines/"]
        Priority: MEDIUM
        """
        assert "RULE-2176" in all_results['results'], "Rule RULE-2176 missing"
        result = all_results['results']["RULE-2176"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-2176 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-2176 failed"


    def test_rule_2177(self, all_results):
        """
        Test RULE-2177: YAML line: level_4: ["triggers/ci/gates/", "registry/logs/", "registry/locks/", 
        Priority: MEDIUM
        """
        assert "RULE-2177" in all_results['results'], "Rule RULE-2177 missing"
        result = all_results['results']["RULE-2177"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-2177 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-2177 failed"


    def test_rule_2178(self, all_results):
        """
        Test RULE-2178: YAML field 'shard_profile_default.S01_policies' must equal 'Policies/Konfigurati
        Priority: MEDIUM
        """
        assert "RULE-2178" in all_results['results'], "Rule RULE-2178 missing"
        result = all_results['results']["RULE-2178"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-2178 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-2178 failed"


    def test_rule_2179(self, all_results):
        """
        Test RULE-2179: YAML field 'shard_profile_default.S02_evidence' must equal 'Evidenzen/Nachweise'
        Priority: MEDIUM
        """
        assert "RULE-2179" in all_results['results'], "Rule RULE-2179 missing"
        result = all_results['results']["RULE-2179"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-2179 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-2179 failed"


    def test_rule_2180(self, all_results):
        """
        Test RULE-2180: YAML field 'shard_profile_default.S03_configs' must equal 'Technische Configs (Y
        Priority: MEDIUM
        """
        assert "RULE-2180" in all_results['results'], "Rule RULE-2180 missing"
        result = all_results['results']["RULE-2180"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-2180 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-2180 failed"


    def test_rule_2181(self, all_results):
        """
        Test RULE-2181: YAML field 'shard_profile_default.S04_registry' must equal 'Registries/Indizes (
        Priority: MEDIUM
        """
        assert "RULE-2181" in all_results['results'], "Rule RULE-2181 missing"
        result = all_results['results']["RULE-2181"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-2181 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-2181 failed"


    def test_rule_2182(self, all_results):
        """
        Test RULE-2182: YAML field 'shard_profile_default.S05_tests' must equal 'Unit/Integration/Fuzz'
        Priority: MEDIUM
        """
        assert "RULE-2182" in all_results['results'], "Rule RULE-2182 missing"
        result = all_results['results']["RULE-2182"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-2182 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-2182 failed"


    def test_rule_2183(self, all_results):
        """
        Test RULE-2183: YAML field 'shard_profile_default.S06_simulation' must equal 'Szenarien/Last/Feh
        Priority: MEDIUM
        """
        assert "RULE-2183" in all_results['results'], "Rule RULE-2183 missing"
        result = all_results['results']["RULE-2183"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-2183 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-2183 failed"


    def test_rule_2184(self, all_results):
        """
        Test RULE-2184: YAML field 'shard_profile_default.S07_tooling' must equal 'CLI/Helper/Linter'
        Priority: MEDIUM
        """
        assert "RULE-2184" in all_results['results'], "Rule RULE-2184 missing"
        result = all_results['results']["RULE-2184"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-2184 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-2184 failed"


    def test_rule_2185(self, all_results):
        """
        Test RULE-2185: YAML field 'shard_profile_default.S08_docs' must equal 'Docs/Runbooks/ADR'
        Priority: MEDIUM
        """
        assert "RULE-2185" in all_results['results'], "Rule RULE-2185 missing"
        result = all_results['results']["RULE-2185"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-2185 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-2185 failed"


    def test_rule_2186(self, all_results):
        """
        Test RULE-2186: YAML field 'shard_profile_default.S09_api' must equal 'API/Interfaces'
        Priority: MEDIUM
        """
        assert "RULE-2186" in all_results['results'], "Rule RULE-2186 missing"
        result = all_results['results']["RULE-2186"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-2186 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-2186 failed"


    def test_rule_2187(self, all_results):
        """
        Test RULE-2187: YAML field 'shard_profile_default.S10_adapters' must equal 'Bridges/Adapter zu D
        Priority: MEDIUM
        """
        assert "RULE-2187" in all_results['results'], "Rule RULE-2187 missing"
        result = all_results['results']["RULE-2187"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-2187 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-2187 failed"


    def test_rule_2188(self, all_results):
        """
        Test RULE-2188: YAML field 'shard_profile_default.S11_datasets' must equal 'Daten/Proben/Katalog
        Priority: MEDIUM
        """
        assert "RULE-2188" in all_results['results'], "Rule RULE-2188 missing"
        result = all_results['results']["RULE-2188"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-2188 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-2188 failed"


    def test_rule_2189(self, all_results):
        """
        Test RULE-2189: YAML field 'shard_profile_default.S12_governance' must equal 'DAO/Stakeholder/Pr
        Priority: HIGH
        """
        assert "RULE-2189" in all_results['results'], "Rule RULE-2189 missing"
        result = all_results['results']["RULE-2189"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "HIGH" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-2189 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-2189 failed"


    def test_rule_2190(self, all_results):
        """
        Test RULE-2190: YAML field 'shard_profile_default.S13_security' must equal 'Security/Keys/Rotati
        Priority: CRITICAL
        """
        assert "RULE-2190" in all_results['results'], "Rule RULE-2190 missing"
        result = all_results['results']["RULE-2190"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-2190 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-2190 failed"


    def test_rule_2191(self, all_results):
        """
        Test RULE-2191: YAML field 'shard_profile_default.S14_interop' must equal 'Standards/Kompatibili
        Priority: HIGH
        """
        assert "RULE-2191" in all_results['results'], "Rule RULE-2191 missing"
        result = all_results['results']["RULE-2191"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "HIGH" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-2191 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-2191 failed"


    def test_rule_2192(self, all_results):
        """
        Test RULE-2192: YAML field 'shard_profile_default.S15_observability' must equal 'Dashboards/Aler
        Priority: MEDIUM
        """
        assert "RULE-2192" in all_results['results'], "Rule RULE-2192 missing"
        result = all_results['results']["RULE-2192"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-2192 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-2192 failed"


    def test_rule_2193(self, all_results):
        """
        Test RULE-2193: YAML field 'shard_profile_default.S16_deployment' must equal 'CI/CD/Manifeste'
        Priority: MEDIUM
        """
        assert "RULE-2193" in all_results['results'], "Rule RULE-2193 missing"
        result = all_results['results']["RULE-2193"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-2193 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-2193 failed"


    def test_rule_2194(self, all_results):
        """
        Test RULE-2194: YAML line: shard_profile_default:
        Priority: MEDIUM
        """
        assert "RULE-2194" in all_results['results'], "Rule RULE-2194 missing"
        result = all_results['results']["RULE-2194"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-2194 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-2194 failed"


    def test_rule_2195(self, all_results):
        """
        Test RULE-2195: YAML line: S01_policies: "Policies/Konfigurationen"
        Priority: MEDIUM
        """
        assert "RULE-2195" in all_results['results'], "Rule RULE-2195 missing"
        result = all_results['results']["RULE-2195"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-2195 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-2195 failed"


    def test_rule_2196(self, all_results):
        """
        Test RULE-2196: YAML line: S02_evidence: "Evidenzen/Nachweise"
        Priority: MEDIUM
        """
        assert "RULE-2196" in all_results['results'], "Rule RULE-2196 missing"
        result = all_results['results']["RULE-2196"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-2196 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-2196 failed"


    def test_rule_2197(self, all_results):
        """
        Test RULE-2197: YAML line: S03_configs: "Technische Configs (YAML/JSON)"
        Priority: MEDIUM
        """
        assert "RULE-2197" in all_results['results'], "Rule RULE-2197 missing"
        result = all_results['results']["RULE-2197"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-2197 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-2197 failed"


    def test_rule_2198(self, all_results):
        """
        Test RULE-2198: YAML line: S04_registry: "Registries/Indizes (nur zentral erlaubt)"
        Priority: MEDIUM
        """
        assert "RULE-2198" in all_results['results'], "Rule RULE-2198 missing"
        result = all_results['results']["RULE-2198"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-2198 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-2198 failed"


    def test_rule_2199(self, all_results):
        """
        Test RULE-2199: YAML line: S05_tests: "Unit/Integration/Fuzz"
        Priority: MEDIUM
        """
        assert "RULE-2199" in all_results['results'], "Rule RULE-2199 missing"
        result = all_results['results']["RULE-2199"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-2199 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-2199 failed"


    def test_rule_2200(self, all_results):
        """
        Test RULE-2200: YAML line: S06_simulation: "Szenarien/Last/Fehlerbilder"
        Priority: MEDIUM
        """
        assert "RULE-2200" in all_results['results'], "Rule RULE-2200 missing"
        result = all_results['results']["RULE-2200"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-2200 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-2200 failed"


    def test_rule_2201(self, all_results):
        """
        Test RULE-2201: YAML line: S07_tooling: "CLI/Helper/Linter"
        Priority: MEDIUM
        """
        assert "RULE-2201" in all_results['results'], "Rule RULE-2201 missing"
        result = all_results['results']["RULE-2201"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-2201 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-2201 failed"


    def test_rule_2202(self, all_results):
        """
        Test RULE-2202: YAML line: S08_docs: "Docs/Runbooks/ADR"
        Priority: MEDIUM
        """
        assert "RULE-2202" in all_results['results'], "Rule RULE-2202 missing"
        result = all_results['results']["RULE-2202"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-2202 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-2202 failed"


    def test_rule_2203(self, all_results):
        """
        Test RULE-2203: YAML line: S09_api: "API/Interfaces"
        Priority: MEDIUM
        """
        assert "RULE-2203" in all_results['results'], "Rule RULE-2203 missing"
        result = all_results['results']["RULE-2203"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-2203 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-2203 failed"


    def test_rule_2204(self, all_results):
        """
        Test RULE-2204: YAML line: S10_adapters: "Bridges/Adapter zu Dritt-Systemen"
        Priority: MEDIUM
        """
        assert "RULE-2204" in all_results['results'], "Rule RULE-2204 missing"
        result = all_results['results']["RULE-2204"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-2204 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-2204 failed"


    def test_rule_2205(self, all_results):
        """
        Test RULE-2205: YAML line: S11_datasets: "Daten/Proben/Kataloge"
        Priority: MEDIUM
        """
        assert "RULE-2205" in all_results['results'], "Rule RULE-2205 missing"
        result = all_results['results']["RULE-2205"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-2205 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-2205 failed"


    def test_rule_2206(self, all_results):
        """
        Test RULE-2206: YAML line: S12_governance: "DAO/Stakeholder/Prozesse"
        Priority: MEDIUM
        """
        assert "RULE-2206" in all_results['results'], "Rule RULE-2206 missing"
        result = all_results['results']["RULE-2206"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-2206 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-2206 failed"


    def test_rule_2207(self, all_results):
        """
        Test RULE-2207: YAML line: S13_security: "Security/Keys/Rotation (ohne Secrets)"
        Priority: CRITICAL
        """
        assert "RULE-2207" in all_results['results'], "Rule RULE-2207 missing"
        result = all_results['results']["RULE-2207"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-2207 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-2207 failed"


    def test_rule_2208(self, all_results):
        """
        Test RULE-2208: YAML line: S14_interop: "Standards/Kompatibilität"
        Priority: HIGH
        """
        assert "RULE-2208" in all_results['results'], "Rule RULE-2208 missing"
        result = all_results['results']["RULE-2208"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "HIGH" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-2208 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-2208 failed"


    def test_rule_2209(self, all_results):
        """
        Test RULE-2209: YAML line: S15_observability: "Dashboards/Alerts/OTEL/Score"
        Priority: MEDIUM
        """
        assert "RULE-2209" in all_results['results'], "Rule RULE-2209 missing"
        result = all_results['results']["RULE-2209"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-2209 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-2209 failed"


    def test_rule_2210(self, all_results):
        """
        Test RULE-2210: YAML line: S16_deployment: "CI/CD/Manifeste"
        Priority: MEDIUM
        """
        assert "RULE-2210" in all_results['results'], "Rule RULE-2210 missing"
        result = all_results['results']["RULE-2210"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-2210 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-2210 failed"


    def test_rule_table_part2_2211(self, all_results):
        """
        Test TABLE-PART2-2211: Table row: Funktion | Zentraler Pfad | Zweck
        Priority: MEDIUM
        """
        assert "TABLE-PART2-2211" in all_results['results'], "Rule TABLE-PART2-2211 missing"
        result = all_results['results']["TABLE-PART2-2211"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule TABLE-PART2-2211 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule TABLE-PART2-2211 failed"


    def test_rule_table_part2_2212(self, all_results):
        """
        Test TABLE-PART2-2212: Table row: **Registry** | `24_meta_orchestration/registry/` | Kanonische Modulve
        Priority: MEDIUM
        """
        assert "TABLE-PART2-2212" in all_results['results'], "Rule TABLE-PART2-2212 missing"
        result = all_results['results']["TABLE-PART2-2212"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule TABLE-PART2-2212 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule TABLE-PART2-2212 failed"


    def test_rule_table_part2_2213(self, all_results):
        """
        Test TABLE-PART2-2213: Table row: **Policies** | `23_compliance/policies/` | Struktur-Policies zentral
        Priority: MEDIUM
        """
        assert "TABLE-PART2-2213" in all_results['results'], "Rule TABLE-PART2-2213 missing"
        result = all_results['results']["TABLE-PART2-2213"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule TABLE-PART2-2213 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule TABLE-PART2-2213 failed"


    def test_rule_table_part2_2214(self, all_results):
        """
        Test TABLE-PART2-2214: Table row: **Evidence** | `23_compliance/evidence/` | Audit-Evidence gesammelt
        Priority: MEDIUM
        """
        assert "TABLE-PART2-2214" in all_results['results'], "Rule TABLE-PART2-2214 missing"
        result = all_results['results']["TABLE-PART2-2214"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule TABLE-PART2-2214 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule TABLE-PART2-2214 failed"


    def test_rule_table_part2_2215(self, all_results):
        """
        Test TABLE-PART2-2215: Table row: **Exceptions** | `23_compliance/exceptions/` | Struktur-Ausnahmen zen
        Priority: MEDIUM
        """
        assert "TABLE-PART2-2215" in all_results['results'], "Rule TABLE-PART2-2215 missing"
        result = all_results['results']["TABLE-PART2-2215"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule TABLE-PART2-2215 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule TABLE-PART2-2215 failed"


    def test_rule_table_part2_2216(self, all_results):
        """
        Test TABLE-PART2-2216: Table row: **Risk** | `07_governance_legal/risk/` | Risk Register zentral
        Priority: MEDIUM
        """
        assert "TABLE-PART2-2216" in all_results['results'], "Rule TABLE-PART2-2216 missing"
        result = all_results['results']["TABLE-PART2-2216"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule TABLE-PART2-2216 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule TABLE-PART2-2216 failed"


    def test_rule_table_part2_2217(self, all_results):
        """
        Test TABLE-PART2-2217: Table row: **CI/CD** | `.github/workflows/` + `24_meta_orchestration/triggers/ci
        Priority: MEDIUM
        """
        assert "TABLE-PART2-2217" in all_results['results'], "Rule TABLE-PART2-2217 missing"
        result = all_results['results']["TABLE-PART2-2217"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule TABLE-PART2-2217 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule TABLE-PART2-2217 failed"


    def test_rule_list_part2_2218(self, all_results):
        """
        Test LIST-PART2-2218: List item: *VERBOTEN modulnah:** `registry/`, `policies/`, `risk/`, `evidence/`,
        Priority: CRITICAL
        """
        assert "LIST-PART2-2218" in all_results['results'], "Rule LIST-PART2-2218 missing"
        result = all_results['results']["LIST-PART2-2218"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART2-2218 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART2-2218 failed"


    def test_rule_list_part2_2219(self, all_results):
        """
        Test LIST-PART2-2219: List item: *Pfadkonvention:** Alle `path:`-Einträge sind als REPO-relative, modu
        Priority: CRITICAL
        """
        assert "LIST-PART2-2219" in all_results['results'], "Rule LIST-PART2-2219 missing"
        result = all_results['results']["LIST-PART2-2219"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART2-2219 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART2-2219 failed"


    def test_rule_kv_part2_2220(self, all_results):
        """
        Test KV-PART2-2220: version: "1.0"
        Priority: MEDIUM
        """
        assert "KV-PART2-2220" in all_results['results'], "Rule KV-PART2-2220 missing"
        result = all_results['results']["KV-PART2-2220"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART2-2220 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART2-2220 failed"


    def test_rule_kv_part2_2221(self, all_results):
        """
        Test KV-PART2-2221: date: "2025-09-15"
        Priority: MEDIUM
        """
        assert "KV-PART2-2221" in all_results['results'], "Rule KV-PART2-2221 missing"
        result = all_results['results']["KV-PART2-2221"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART2-2221 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART2-2221 failed"


    def test_rule_kv_part2_2222(self, all_results):
        """
        Test KV-PART2-2222: deprecated: false
        Priority: MEDIUM
        """
        assert "KV-PART2-2222" in all_results['results'], "Rule KV-PART2-2222 missing"
        result = all_results['results']["KV-PART2-2222"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART2-2222 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART2-2222 failed"


    def test_rule_kv_part2_2223(self, all_results):
        """
        Test KV-PART2-2223: classification: "PUBLIC - CI Guard Enforcement"
        Priority: MEDIUM
        """
        assert "KV-PART2-2223" in all_results['results'], "Rule KV-PART2-2223 missing"
        result = all_results['results']["KV-PART2-2223"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART2-2223 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART2-2223 failed"


    def test_rule_kv_part2_2224(self, all_results):
        """
        Test KV-PART2-2224: description: "EINMALIGE, autoritäre Liste aller erlaubten Root-Level Items außer
        Priority: MEDIUM
        """
        assert "KV-PART2-2224" in all_results['results'], "Rule KV-PART2-2224 missing"
        result = all_results['results']["KV-PART2-2224"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART2-2224 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART2-2224 failed"


    def test_rule_kv_part2_2225(self, all_results):
        """
        Test KV-PART2-2225: enforcement: "CI-Guard mit Exit Code 24 bei Violation"
        Priority: MEDIUM
        """
        assert "KV-PART2-2225" in all_results['results'], "Rule KV-PART2-2225 missing"
        result = all_results['results']["KV-PART2-2225"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART2-2225 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART2-2225 failed"


    def test_rule_kv_part2_2226(self, all_results):
        """
        Test KV-PART2-2226: modification_policy: "Nur durch Compliance Committee + Technical Lead Approval"
        Priority: CRITICAL
        """
        assert "KV-PART2-2226" in all_results['results'], "Rule KV-PART2-2226 missing"
        result = all_results['results']["KV-PART2-2226"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART2-2226 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART2-2226 failed"


    def test_rule_list_part2_2227(self, all_results):
        """
        Test LIST-PART2-2227: List item: ".git"           # Git repository metadata
        Priority: MEDIUM
        """
        assert "LIST-PART2-2227" in all_results['results'], "Rule LIST-PART2-2227 missing"
        result = all_results['results']["LIST-PART2-2227"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART2-2227 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART2-2227 failed"


    def test_rule_list_part2_2228(self, all_results):
        """
        Test LIST-PART2-2228: List item: ".github"        # GitHub workflows and templates
        Priority: MEDIUM
        """
        assert "LIST-PART2-2228" in all_results['results'], "Rule LIST-PART2-2228 missing"
        result = all_results['results']["LIST-PART2-2228"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART2-2228 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART2-2228 failed"


    def test_rule_list_part2_2229(self, all_results):
        """
        Test LIST-PART2-2229: List item: ".githooks"      # Git hooks directory
        Priority: MEDIUM
        """
        assert "LIST-PART2-2229" in all_results['results'], "Rule LIST-PART2-2229 missing"
        result = all_results['results']["LIST-PART2-2229"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART2-2229 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART2-2229 failed"


    def test_rule_list_part2_2230(self, all_results):
        """
        Test LIST-PART2-2230: List item: ".venv"          # Python virtual environment
        Priority: MEDIUM
        """
        assert "LIST-PART2-2230" in all_results['results'], "Rule LIST-PART2-2230 missing"
        result = all_results['results']["LIST-PART2-2230"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART2-2230 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART2-2230 failed"


    def test_rule_list_part2_2231(self, all_results):
        """
        Test LIST-PART2-2231: List item: ".continue"      # Continue.dev AI coding assistant
        Priority: MEDIUM
        """
        assert "LIST-PART2-2231" in all_results['results'], "Rule LIST-PART2-2231 missing"
        result = all_results['results']["LIST-PART2-2231"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART2-2231 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART2-2231 failed"


    def test_rule_list_part2_2232(self, all_results):
        """
        Test LIST-PART2-2232: List item: ".pytest_cache"  # Pytest cache directory
        Priority: MEDIUM
        """
        assert "LIST-PART2-2232" in all_results['results'], "Rule LIST-PART2-2232 missing"
        result = all_results['results']["LIST-PART2-2232"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART2-2232 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART2-2232 failed"


    def test_rule_kv_part2_2233(self, all_results):
        """
        Test KV-PART2-2233: excluded_directories: []  # NO additional directories allowed
        Priority: MEDIUM
        """
        assert "KV-PART2-2233" in all_results['results'], "Rule KV-PART2-2233 missing"
        result = all_results['results']["KV-PART2-2233"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART2-2233 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART2-2233 failed"


    def test_rule_list_part2_2234(self, all_results):
        """
        Test LIST-PART2-2234: List item: ".gitattributes" # Git file attributes
        Priority: MEDIUM
        """
        assert "LIST-PART2-2234" in all_results['results'], "Rule LIST-PART2-2234 missing"
        result = all_results['results']["LIST-PART2-2234"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART2-2234 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART2-2234 failed"


    def test_rule_list_part2_2235(self, all_results):
        """
        Test LIST-PART2-2235: List item: ".gitignore"     # Git ignore patterns
        Priority: MEDIUM
        """
        assert "LIST-PART2-2235" in all_results['results'], "Rule LIST-PART2-2235 missing"
        result = all_results['results']["LIST-PART2-2235"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART2-2235 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART2-2235 failed"


    def test_rule_list_part2_2236(self, all_results):
        """
        Test LIST-PART2-2236: List item: ".gitmodules"    # Git submodules configuration
        Priority: MEDIUM
        """
        assert "LIST-PART2-2236" in all_results['results'], "Rule LIST-PART2-2236 missing"
        result = all_results['results']["LIST-PART2-2236"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART2-2236 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART2-2236 failed"


    def test_rule_list_part2_2237(self, all_results):
        """
        Test LIST-PART2-2237: List item: "LICENSE"        # Project license file
        Priority: MEDIUM
        """
        assert "LIST-PART2-2237" in all_results['results'], "Rule LIST-PART2-2237 missing"
        result = all_results['results']["LIST-PART2-2237"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART2-2237 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART2-2237 failed"


    def test_rule_list_part2_2238(self, all_results):
        """
        Test LIST-PART2-2238: List item: "README.md"      # Project overview and documentation
        Priority: MEDIUM
        """
        assert "LIST-PART2-2238" in all_results['results'], "Rule LIST-PART2-2238 missing"
        result = all_results['results']["LIST-PART2-2238"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART2-2238 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART2-2238 failed"


    def test_rule_list_part2_2239(self, all_results):
        """
        Test LIST-PART2-2239: List item: "pytest.ini"     # Pytest configuration
        Priority: MEDIUM
        """
        assert "LIST-PART2-2239" in all_results['results'], "Rule LIST-PART2-2239 missing"
        result = all_results['results']["LIST-PART2-2239"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART2-2239 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART2-2239 failed"


    def test_rule_kv_part2_2240(self, all_results):
        """
        Test KV-PART2-2240: excluded_files: []   # NO additional files allowed
        Priority: MEDIUM
        """
        assert "KV-PART2-2240" in all_results['results'], "Rule KV-PART2-2240 missing"
        result = all_results['results']["KV-PART2-2240"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART2-2240 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART2-2240 failed"


    def test_rule_kv_part2_2241(self, all_results):
        """
        Test KV-PART2-2241: ci_script: "12_tooling/scripts/structure_guard.sh"
        Priority: MEDIUM
        """
        assert "KV-PART2-2241" in all_results['results'], "Rule KV-PART2-2241 missing"
        result = all_results['results']["KV-PART2-2241"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART2-2241 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART2-2241 failed"


    def test_rule_kv_part2_2242(self, all_results):
        """
        Test KV-PART2-2242: validation_function: "validate_root_exceptions"
        Priority: MEDIUM
        """
        assert "KV-PART2-2242" in all_results['results'], "Rule KV-PART2-2242 missing"
        result = all_results['results']["KV-PART2-2242"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART2-2242 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART2-2242 failed"


    def test_rule_kv_part2_2243(self, all_results):
        """
        Test KV-PART2-2243: enforcement_level: "STRICT - Zero tolerance for unlisted items"
        Priority: MEDIUM
        """
        assert "KV-PART2-2243" in all_results['results'], "Rule KV-PART2-2243 missing"
        result = all_results['results']["KV-PART2-2243"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART2-2243 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART2-2243 failed"


    def test_rule_kv_part2_2244(self, all_results):
        """
        Test KV-PART2-2244: bypass_mechanism: "NONE - No override capability"
        Priority: MEDIUM
        """
        assert "KV-PART2-2244" in all_results['results'], "Rule KV-PART2-2244 missing"
        result = all_results['results']["KV-PART2-2244"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART2-2244 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART2-2244 failed"


    def test_rule_kv_part2_2245(self, all_results):
        """
        Test KV-PART2-2245: immediate_failure: true
        Priority: MEDIUM
        """
        assert "KV-PART2-2245" in all_results['results'], "Rule KV-PART2-2245 missing"
        result = all_results['results']["KV-PART2-2245"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART2-2245 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART2-2245 failed"


    def test_rule_kv_part2_2246(self, all_results):
        """
        Test KV-PART2-2246: quarantine_trigger: true
        Priority: MEDIUM
        """
        assert "KV-PART2-2246" in all_results['results'], "Rule KV-PART2-2246 missing"
        result = all_results['results']["KV-PART2-2246"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART2-2246 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART2-2246 failed"


    def test_rule_kv_part2_2247(self, all_results):
        """
        Test KV-PART2-2247: escalation: "Compliance Committee notification"
        Priority: CRITICAL
        """
        assert "KV-PART2-2247" in all_results['results'], "Rule KV-PART2-2247 missing"
        result = all_results['results']["KV-PART2-2247"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART2-2247 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART2-2247 failed"


    def test_rule_list_part2_2248(self, all_results):
        """
        Test LIST-PART2-2248: List item: "Senior Compliance Officer"
        Priority: CRITICAL
        """
        assert "LIST-PART2-2248" in all_results['results'], "Rule LIST-PART2-2248 missing"
        result = all_results['results']["LIST-PART2-2248"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART2-2248 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART2-2248 failed"


    def test_rule_list_part2_2249(self, all_results):
        """
        Test LIST-PART2-2249: List item: "Technical Lead"
        Priority: MEDIUM
        """
        assert "LIST-PART2-2249" in all_results['results'], "Rule LIST-PART2-2249 missing"
        result = all_results['results']["LIST-PART2-2249"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART2-2249 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART2-2249 failed"


    def test_rule_list_part2_2250(self, all_results):
        """
        Test LIST-PART2-2250: List item: "Legal Review (for licensing implications)"
        Priority: CRITICAL
        """
        assert "LIST-PART2-2250" in all_results['results'], "Rule LIST-PART2-2250 missing"
        result = all_results['results']["LIST-PART2-2250"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART2-2250 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART2-2250 failed"


    def test_rule_list_part2_2251(self, all_results):
        """
        Test LIST-PART2-2251: List item: "Business justification"
        Priority: MEDIUM
        """
        assert "LIST-PART2-2251" in all_results['results'], "Rule LIST-PART2-2251 missing"
        result = all_results['results']["LIST-PART2-2251"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART2-2251 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART2-2251 failed"


    def test_rule_list_part2_2252(self, all_results):
        """
        Test LIST-PART2-2252: List item: "Security impact assessment"
        Priority: CRITICAL
        """
        assert "LIST-PART2-2252" in all_results['results'], "Rule LIST-PART2-2252 missing"
        result = all_results['results']["LIST-PART2-2252"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART2-2252 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART2-2252 failed"


    def test_rule_list_part2_2253(self, all_results):
        """
        Test LIST-PART2-2253: List item: "CI/CD impact analysis"
        Priority: MEDIUM
        """
        assert "LIST-PART2-2253" in all_results['results'], "Rule LIST-PART2-2253 missing"
        result = all_results['results']["LIST-PART2-2253"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART2-2253 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART2-2253 failed"


    def test_rule_list_part2_2254(self, all_results):
        """
        Test LIST-PART2-2254: List item: "Audit trail documentation"
        Priority: MEDIUM
        """
        assert "LIST-PART2-2254" in all_results['results'], "Rule LIST-PART2-2254 missing"
        result = all_results['results']["LIST-PART2-2254"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART2-2254 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART2-2254 failed"


    def test_rule_kv_part2_2255(self, all_results):
        """
        Test KV-PART2-2255: no_wildcards: "No wildcard patterns allowed"
        Priority: MEDIUM
        """
        assert "KV-PART2-2255" in all_results['results'], "Rule KV-PART2-2255 missing"
        result = all_results['results']["KV-PART2-2255"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART2-2255 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART2-2255 failed"


    def test_rule_kv_part2_2256(self, all_results):
        """
        Test KV-PART2-2256: no_regex: "No regex patterns allowed"
        Priority: MEDIUM
        """
        assert "KV-PART2-2256" in all_results['results'], "Rule KV-PART2-2256 missing"
        result = all_results['results']["KV-PART2-2256"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART2-2256 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART2-2256 failed"


    def test_rule_text_part2_2257(self, all_results):
        """
        Test TEXT-PART2-2257: explicit_enumeration: "Every allowed item must be explicitly listed"
        Priority: CRITICAL
        """
        assert "TEXT-PART2-2257" in all_results['results'], "Rule TEXT-PART2-2257 missing"
        result = all_results['results']["TEXT-PART2-2257"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule TEXT-PART2-2257 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule TEXT-PART2-2257 failed"


    def test_rule_text_part2_2258(self, all_results):
        """
        Test TEXT-PART2-2258: case_sensitive: "Exact case matching required"
        Priority: MEDIUM
        """
        assert "TEXT-PART2-2258" in all_results['results'], "Rule TEXT-PART2-2258 missing"
        result = all_results['results']["TEXT-PART2-2258"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule TEXT-PART2-2258 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule TEXT-PART2-2258 failed"


    def test_rule_kv_part2_2259(self, all_results):
        """
        Test KV-PART2-2259: no_hidden_directories: "Only explicitly listed hidden directories allowed"
        Priority: MEDIUM
        """
        assert "KV-PART2-2259" in all_results['results'], "Rule KV-PART2-2259 missing"
        result = all_results['results']["KV-PART2-2259"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART2-2259 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART2-2259 failed"


    def test_rule_kv_part2_2260(self, all_results):
        """
        Test KV-PART2-2260: structure_guard: "12_tooling/scripts/structure_guard.sh"
        Priority: MEDIUM
        """
        assert "KV-PART2-2260" in all_results['results'], "Rule KV-PART2-2260 missing"
        result = all_results['results']["KV-PART2-2260"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART2-2260 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART2-2260 failed"


    def test_rule_kv_part2_2261(self, all_results):
        """
        Test KV-PART2-2261: ci_gates: "24_meta_orchestration/triggers/ci/gates/structure_lock_l3.py"
        Priority: MEDIUM
        """
        assert "KV-PART2-2261" in all_results['results'], "Rule KV-PART2-2261 missing"
        result = all_results['results']["KV-PART2-2261"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART2-2261 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART2-2261 failed"


    def test_rule_kv_part2_2262(self, all_results):
        """
        Test KV-PART2-2262: quarantine_system: "02_audit_logging/quarantine/singleton/quarantine_store/"
        Priority: MEDIUM
        """
        assert "KV-PART2-2262" in all_results['results'], "Rule KV-PART2-2262 missing"
        result = all_results['results']["KV-PART2-2262"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART2-2262 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART2-2262 failed"


    def test_rule_kv_part2_2263(self, all_results):
        """
        Test KV-PART2-2263: compliance_policies: "23_compliance/policies/structure_policy.yaml"
        Priority: CRITICAL
        """
        assert "KV-PART2-2263" in all_results['results'], "Rule KV-PART2-2263 missing"
        result = all_results['results']["KV-PART2-2263"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART2-2263 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART2-2263 failed"


    def test_rule_kv_part2_2264(self, all_results):
        """
        Test KV-PART2-2264: change_log: "All modifications logged in 02_audit_logging/storage/worm/immutable
        Priority: MEDIUM
        """
        assert "KV-PART2-2264" in all_results['results'], "Rule KV-PART2-2264 missing"
        result = all_results['results']["KV-PART2-2264"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART2-2264 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART2-2264 failed"


    def test_rule_kv_part2_2265(self, all_results):
        """
        Test KV-PART2-2265: review_cycle: "Quarterly review of exceptions list"
        Priority: MEDIUM
        """
        assert "KV-PART2-2265" in all_results['results'], "Rule KV-PART2-2265 missing"
        result = all_results['results']["KV-PART2-2265"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART2-2265 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART2-2265 failed"


    def test_rule_kv_part2_2266(self, all_results):
        """
        Test KV-PART2-2266: justification_retention: "7 years minimum"
        Priority: MEDIUM
        """
        assert "KV-PART2-2266" in all_results['results'], "Rule KV-PART2-2266 missing"
        result = all_results['results']["KV-PART2-2266"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART2-2266 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART2-2266 failed"


    def test_rule_text_part2_2267(self, all_results):
        """
        Test TEXT-PART2-2267: approval_trail: "Immutable approval documentation required"
        Priority: MEDIUM
        """
        assert "TEXT-PART2-2267" in all_results['results'], "Rule TEXT-PART2-2267 missing"
        result = all_results['results']["TEXT-PART2-2267"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule TEXT-PART2-2267 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule TEXT-PART2-2267 failed"


    def test_rule_table_part2_2268(self, all_results):
        """
        Test TABLE-PART2-2268: Table row: local REPO_ROOT=$(git rev-parse --show-toplevel 2>/dev/null | pwd)
        Priority: MEDIUM
        """
        assert "TABLE-PART2-2268" in all_results['results'], "Rule TABLE-PART2-2268 missing"
        result = all_results['results']["TABLE-PART2-2268"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule TABLE-PART2-2268 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule TABLE-PART2-2268 failed"


    def test_rule_table_part2_2269(self, all_results):
        """
        Test TABLE-PART2-2269: Table row: local ALLOWED_DIRS=$(yq -r '.root_level_exceptions.allowed_directorie
        Priority: MEDIUM
        """
        assert "TABLE-PART2-2269" in all_results['results'], "Rule TABLE-PART2-2269 missing"
        result = all_results['results']["TABLE-PART2-2269"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule TABLE-PART2-2269 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule TABLE-PART2-2269 failed"


    def test_rule_table_part2_2270(self, all_results):
        """
        Test TABLE-PART2-2270: Table row: local ALLOWED_FILES=$(yq -r '.root_level_exceptions.allowed_files.*[]
        Priority: MEDIUM
        """
        assert "TABLE-PART2-2270" in all_results['results'], "Rule TABLE-PART2-2270 missing"
        result = all_results['results']["TABLE-PART2-2270"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule TABLE-PART2-2270 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule TABLE-PART2-2270 failed"


    def test_rule_table_part2_2271(self, all_results):
        """
        Test TABLE-PART2-2271: Table row: local MODULE_COUNT=$(ls -d [0-9][0-9]_* 2>/dev/null | wc -l | tr -d '
        Priority: MEDIUM
        """
        assert "TABLE-PART2-2271" in all_results['results'], "Rule TABLE-PART2-2271 missing"
        result = all_results['results']["TABLE-PART2-2271"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule TABLE-PART2-2271 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule TABLE-PART2-2271 failed"


    def test_rule_table_part2_2272(self, all_results):
        """
        Test TABLE-PART2-2272: Table row: if [[ "$item" == .* ]] && ! echo "$ALLOWED_ITEMS" | grep -qx "$item";
        Priority: MEDIUM
        """
        assert "TABLE-PART2-2272" in all_results['results'], "Rule TABLE-PART2-2272 missing"
        result = all_results['results']["TABLE-PART2-2272"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule TABLE-PART2-2272 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule TABLE-PART2-2272 failed"


    def test_rule_table_part2_2273(self, all_results):
        """
        Test TABLE-PART2-2273: Table row: if ! echo "$ALLOWED_ITEMS" | grep -qx "$item"; then
        Priority: MEDIUM
        """
        assert "TABLE-PART2-2273" in all_results['results'], "Rule TABLE-PART2-2273 missing"
        result = all_results['results']["TABLE-PART2-2273"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule TABLE-PART2-2273 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule TABLE-PART2-2273 failed"


    def test_rule_list_part2_2274(self, all_results):
        """
        Test LIST-PART2-2274: List item: -trigger "root_level_violation" \
        Priority: MEDIUM
        """
        assert "LIST-PART2-2274" in all_results['results'], "Rule LIST-PART2-2274 missing"
        result = all_results['results']["LIST-PART2-2274"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART2-2274 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART2-2274 failed"


    def test_rule_list_part2_2275(self, all_results):
        """
        Test LIST-PART2-2275: List item: -item "$item" \
        Priority: MEDIUM
        """
        assert "LIST-PART2-2275" in all_results['results'], "Rule LIST-PART2-2275 missing"
        result = all_results['results']["LIST-PART2-2275"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART2-2275 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART2-2275 failed"


    def test_rule_list_part2_2276(self, all_results):
        """
        Test LIST-PART2-2276: List item: -severity "HIGH"
        Priority: MEDIUM
        """
        assert "LIST-PART2-2276" in all_results['results'], "Rule LIST-PART2-2276 missing"
        result = all_results['results']["LIST-PART2-2276"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART2-2276 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART2-2276 failed"


    def test_rule_list_part2_2277(self, all_results):
        """
        Test LIST-PART2-2277: List item: *100-Punkte-Requirement:** Alle kritischen Dateien müssen physisch vo
        Priority: MEDIUM
        """
        assert "LIST-PART2-2277" in all_results['results'], "Rule LIST-PART2-2277 missing"
        result = all_results['results']["LIST-PART2-2277"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART2-2277 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART2-2277 failed"


    def test_rule_kv_part2_2278(self, all_results):
        """
        Test KV-PART2-2278: version: "1.0"
        Priority: MEDIUM
        """
        assert "KV-PART2-2278" in all_results['results'], "Rule KV-PART2-2278 missing"
        result = all_results['results']["KV-PART2-2278"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART2-2278 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART2-2278 failed"


    def test_rule_kv_part2_2279(self, all_results):
        """
        Test KV-PART2-2279: date: "2025-09-15"
        Priority: MEDIUM
        """
        assert "KV-PART2-2279" in all_results['results'], "Rule KV-PART2-2279 missing"
        result = all_results['results']["KV-PART2-2279"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART2-2279 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART2-2279 failed"


    def test_rule_kv_part2_2280(self, all_results):
        """
        Test KV-PART2-2280: deprecated: false
        Priority: MEDIUM
        """
        assert "KV-PART2-2280" in all_results['results'], "Rule KV-PART2-2280 missing"
        result = all_results['results']["KV-PART2-2280"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART2-2280 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART2-2280 failed"


    def test_rule_kv_part2_2281(self, all_results):
        """
        Test KV-PART2-2281: classification: "CONFIDENTIAL - Internal Use Only"
        Priority: MEDIUM
        """
        assert "KV-PART2-2281" in all_results['results'], "Rule KV-PART2-2281 missing"
        result = all_results['results']["KV-PART2-2281"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART2-2281 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART2-2281 failed"


    def test_rule_list_part2_2282(self, all_results):
        """
        Test LIST-PART2-2282: List item: name: "Hans Müller"
        Priority: MEDIUM
        """
        assert "LIST-PART2-2282" in all_results['results'], "Rule LIST-PART2-2282 missing"
        result = all_results['results']["LIST-PART2-2282"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART2-2282 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART2-2282 failed"


    def test_rule_kv_part2_2283(self, all_results):
        """
        Test KV-PART2-2283: role: "Lead Compliance Officer"
        Priority: CRITICAL
        """
        assert "KV-PART2-2283" in all_results['results'], "Rule KV-PART2-2283 missing"
        result = all_results['results']["KV-PART2-2283"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART2-2283 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART2-2283 failed"


    def test_rule_kv_part2_2284(self, all_results):
        """
        Test KV-PART2-2284: email: "hans.mueller@ssid.company"
        Priority: MEDIUM
        """
        assert "KV-PART2-2284" in all_results['results'], "Rule KV-PART2-2284 missing"
        result = all_results['results']["KV-PART2-2284"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART2-2284 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART2-2284 failed"


    def test_rule_kv_part2_2285(self, all_results):
        """
        Test KV-PART2-2285: backup: "Maria Schmidt"
        Priority: MEDIUM
        """
        assert "KV-PART2-2285" in all_results['results'], "Rule KV-PART2-2285 missing"
        result = all_results['results']["KV-PART2-2285"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART2-2285 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART2-2285 failed"


    def test_rule_kv_part2_2286(self, all_results):
        """
        Test KV-PART2-2286: areas: ["compliance_matrices", "regulatory_updates", "eu_mappings"]
        Priority: CRITICAL
        """
        assert "KV-PART2-2286" in all_results['results'], "Rule KV-PART2-2286 missing"
        result = all_results['results']["KV-PART2-2286"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART2-2286 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART2-2286 failed"


    def test_rule_kv_part2_2287(self, all_results):
        """
        Test KV-PART2-2287: clearance_level: "CONFIDENTIAL"
        Priority: MEDIUM
        """
        assert "KV-PART2-2287" in all_results['results'], "Rule KV-PART2-2287 missing"
        result = all_results['results']["KV-PART2-2287"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART2-2287 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART2-2287 failed"


    def test_rule_list_part2_2288(self, all_results):
        """
        Test LIST-PART2-2288: List item: name: "Anna Weber"
        Priority: MEDIUM
        """
        assert "LIST-PART2-2288" in all_results['results'], "Rule LIST-PART2-2288 missing"
        result = all_results['results']["LIST-PART2-2288"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART2-2288 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART2-2288 failed"


    def test_rule_kv_part2_2289(self, all_results):
        """
        Test KV-PART2-2289: role: "Technical Lead"
        Priority: MEDIUM
        """
        assert "KV-PART2-2289" in all_results['results'], "Rule KV-PART2-2289 missing"
        result = all_results['results']["KV-PART2-2289"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART2-2289 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART2-2289 failed"


    def test_rule_kv_part2_2290(self, all_results):
        """
        Test KV-PART2-2290: email: "anna.weber@ssid.company"
        Priority: MEDIUM
        """
        assert "KV-PART2-2290" in all_results['results'], "Rule KV-PART2-2290 missing"
        result = all_results['results']["KV-PART2-2290"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART2-2290 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART2-2290 failed"


    def test_rule_kv_part2_2291(self, all_results):
        """
        Test KV-PART2-2291: backup: "Thomas Klein"
        Priority: MEDIUM
        """
        assert "KV-PART2-2291" in all_results['results'], "Rule KV-PART2-2291 missing"
        result = all_results['results']["KV-PART2-2291"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART2-2291 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART2-2291 failed"


    def test_rule_kv_part2_2292(self, all_results):
        """
        Test KV-PART2-2292: areas: ["badge_logic", "anti_gaming_controls", "internal_audits"]
        Priority: MEDIUM
        """
        assert "KV-PART2-2292" in all_results['results'], "Rule KV-PART2-2292 missing"
        result = all_results['results']["KV-PART2-2292"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART2-2292 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART2-2292 failed"


    def test_rule_kv_part2_2293(self, all_results):
        """
        Test KV-PART2-2293: clearance_level: "CONFIDENTIAL"
        Priority: MEDIUM
        """
        assert "KV-PART2-2293" in all_results['results'], "Rule KV-PART2-2293 missing"
        result = all_results['results']["KV-PART2-2293"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART2-2293 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART2-2293 failed"


    def test_rule_kv_part2_2294(self, all_results):
        """
        Test KV-PART2-2294: emergency_contact: "legal@ssid.company"
        Priority: CRITICAL
        """
        assert "KV-PART2-2294" in all_results['results'], "Rule KV-PART2-2294 missing"
        result = all_results['results']["KV-PART2-2294"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART2-2294 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART2-2294 failed"


    def test_rule_kv_part2_2295(self, all_results):
        """
        Test KV-PART2-2295: external_counsel: "compliance-emergency@lawfirm.com"
        Priority: CRITICAL
        """
        assert "KV-PART2-2295" in all_results['results'], "Rule KV-PART2-2295 missing"
        result = all_results['results']["KV-PART2-2295"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART2-2295 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART2-2295 failed"


    def test_rule_kv_part2_2296(self, all_results):
        """
        Test KV-PART2-2296: monthly_reviewer: "Compliance Team Lead"
        Priority: CRITICAL
        """
        assert "KV-PART2-2296" in all_results['results'], "Rule KV-PART2-2296 missing"
        result = all_results['results']["KV-PART2-2296"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART2-2296 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART2-2296 failed"


    def test_rule_kv_part2_2297(self, all_results):
        """
        Test KV-PART2-2297: quarterly_reviewer: "Senior Compliance Officer + Legal"
        Priority: CRITICAL
        """
        assert "KV-PART2-2297" in all_results['results'], "Rule KV-PART2-2297 missing"
        result = all_results['results']["KV-PART2-2297"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART2-2297 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART2-2297 failed"


    def test_rule_kv_part2_2298(self, all_results):
        """
        Test KV-PART2-2298: semi_annual_reviewer: "Executive Compliance Committee"
        Priority: CRITICAL
        """
        assert "KV-PART2-2298" in all_results['results'], "Rule KV-PART2-2298 missing"
        result = all_results['results']["KV-PART2-2298"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART2-2298 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART2-2298 failed"


    def test_rule_list_part2_2299(self, all_results):
        """
        Test LIST-PART2-2299: List item: "Dr. Sarah Miller, Compliance Consulting LLC"
        Priority: CRITICAL
        """
        assert "LIST-PART2-2299" in all_results['results'], "Rule LIST-PART2-2299 missing"
        result = all_results['results']["LIST-PART2-2299"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART2-2299 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART2-2299 failed"


    def test_rule_list_part2_2300(self, all_results):
        """
        Test LIST-PART2-2300: List item: "Michael Brown, CPA, Audit Partners"
        Priority: MEDIUM
        """
        assert "LIST-PART2-2300" in all_results['results'], "Rule LIST-PART2-2300 missing"
        result = all_results['results']["LIST-PART2-2300"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART2-2300 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART2-2300 failed"


    def test_rule_list_part2_2301(self, all_results):
        """
        Test LIST-PART2-2301: List item: "Prof. Dr. Klaus Weber, Regulatory Consulting GmbH"
        Priority: MEDIUM
        """
        assert "LIST-PART2-2301" in all_results['results'], "Rule LIST-PART2-2301 missing"
        result = all_results['results']["LIST-PART2-2301"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART2-2301 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART2-2301 failed"


    def test_rule_kv_part2_2302(self, all_results):
        """
        Test KV-PART2-2302: review_coordinator: "Maria Schmidt"
        Priority: MEDIUM
        """
        assert "KV-PART2-2302" in all_results['results'], "Rule KV-PART2-2302 missing"
        result = all_results['results']["KV-PART2-2302"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART2-2302 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART2-2302 failed"


    def test_rule_kv_part2_2303(self, all_results):
        """
        Test KV-PART2-2303: backup_coordinator: "Thomas Klein"
        Priority: MEDIUM
        """
        assert "KV-PART2-2303" in all_results['results'], "Rule KV-PART2-2303 missing"
        result = all_results['results']["KV-PART2-2303"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART2-2303 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART2-2303 failed"


    def test_rule_kv_part2_2304(self, all_results):
        """
        Test KV-PART2-2304: notification_period: "2 weeks"
        Priority: MEDIUM
        """
        assert "KV-PART2-2304" in all_results['results'], "Rule KV-PART2-2304 missing"
        result = all_results['results']["KV-PART2-2304"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART2-2304 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART2-2304 failed"


    def test_rule_kv_part2_2305(self, all_results):
        """
        Test KV-PART2-2305: handover_required: true
        Priority: CRITICAL
        """
        assert "KV-PART2-2305" in all_results['results'], "Rule KV-PART2-2305 missing"
        result = all_results['results']["KV-PART2-2305"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART2-2305 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART2-2305 failed"


    def test_rule_kv_part2_2306(self, all_results):
        """
        Test KV-PART2-2306: documentation: "23_compliance/governance/handover_template.md"
        Priority: CRITICAL
        """
        assert "KV-PART2-2306" in all_results['results'], "Rule KV-PART2-2306 missing"
        result = all_results['results']["KV-PART2-2306"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART2-2306 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART2-2306 failed"


    def test_rule_text_part2_2307(self, all_results):
        """
        Test TEXT-PART2-2307: business_continuity: "Critical for regulatory deadlines"
        Priority: CRITICAL
        """
        assert "TEXT-PART2-2307" in all_results['results'], "Rule TEXT-PART2-2307 missing"
        result = all_results['results']["TEXT-PART2-2307"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule TEXT-PART2-2307 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule TEXT-PART2-2307 failed"


    def test_rule_list_part2_2308(self, all_results):
        """
        Test LIST-PART2-2308: List item: **Source:** `12_tooling/scripts/structure_guard.sh:line_127`
        Priority: MEDIUM
        """
        assert "LIST-PART2-2308" in all_results['results'], "Rule LIST-PART2-2308 missing"
        result = all_results['results']["LIST-PART2-2308"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART2-2308 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART2-2308 failed"


    def test_rule_list_part2_2309(self, all_results):
        """
        Test LIST-PART2-2309: List item: **Formula:** Line 89-95 in structure_guard.sh
        Priority: MEDIUM
        """
        assert "LIST-PART2-2309" in all_results['results'], "Rule LIST-PART2-2309 missing"
        result = all_results['results']["LIST-PART2-2309"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART2-2309 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART2-2309 failed"


    def test_rule_list_part2_2310(self, all_results):
        """
        Test LIST-PART2-2310: List item: **Threshold:** Defined in `23_compliance/metrics/threshold_rationale_
        Priority: CRITICAL
        """
        assert "LIST-PART2-2310" in all_results['results'], "Rule LIST-PART2-2310 missing"
        result = all_results['results']["LIST-PART2-2310"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART2-2310 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART2-2310 failed"


    def test_rule_list_part2_2311(self, all_results):
        """
        Test LIST-PART2-2311: List item: **Dependencies:** `23_compliance/policies/structure_policy.yaml`
        Priority: CRITICAL
        """
        assert "LIST-PART2-2311" in all_results['results'], "Rule LIST-PART2-2311 missing"
        result = all_results['results']["LIST-PART2-2311"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART2-2311 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART2-2311 failed"


    def test_rule_list_part2_2312(self, all_results):
        """
        Test LIST-PART2-2312: List item: **Source:** `pytest.ini:coverage_threshold` + `.github/workflows/test
        Priority: MEDIUM
        """
        assert "LIST-PART2-2312" in all_results['results'], "Rule LIST-PART2-2312 missing"
        result = all_results['results']["LIST-PART2-2312"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART2-2312 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART2-2312 failed"


    def test_rule_list_part2_2313(self, all_results):
        """
        Test LIST-PART2-2313: List item: **Formula:** pytest-cov standard calculation
        Priority: HIGH
        """
        assert "LIST-PART2-2313" in all_results['results'], "Rule LIST-PART2-2313 missing"
        result = all_results['results']["LIST-PART2-2313"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "HIGH" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART2-2313 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART2-2313 failed"


    def test_rule_list_part2_2314(self, all_results):
        """
        Test LIST-PART2-2314: List item: **Global Threshold:** 90% as defined in `23_compliance/metrics/thresh
        Priority: CRITICAL
        """
        assert "LIST-PART2-2314" in all_results['results'], "Rule LIST-PART2-2314 missing"
        result = all_results['results']["LIST-PART2-2314"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART2-2314 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART2-2314 failed"


    def test_rule_list_part2_2315(self, all_results):
        """
        Test LIST-PART2-2315: List item: **Compliance Modules:** >= 99% (regulatory requirement)
        Priority: CRITICAL
        """
        assert "LIST-PART2-2315" in all_results['results'], "Rule LIST-PART2-2315 missing"
        result = all_results['results']["LIST-PART2-2315"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART2-2315 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART2-2315 failed"


    def test_rule_list_part2_2316(self, all_results):
        """
        Test LIST-PART2-2316: List item: **Dependencies:** All module `tests/` directories
        Priority: MEDIUM
        """
        assert "LIST-PART2-2316" in all_results['results'], "Rule LIST-PART2-2316 missing"
        result = all_results['results']["LIST-PART2-2316"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART2-2316 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART2-2316 failed"


    def test_rule_list_part2_2317(self, all_results):
        """
        Test LIST-PART2-2317: List item: **Source:** `23_compliance/scripts/compliance_coverage_calculator.py:
        Priority: CRITICAL
        """
        assert "LIST-PART2-2317" in all_results['results'], "Rule LIST-PART2-2317 missing"
        result = all_results['results']["LIST-PART2-2317"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART2-2317 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART2-2317 failed"


    def test_rule_list_part2_2318(self, all_results):
        """
        Test LIST-PART2-2318: List item: **Threshold:** >= 98% (internal standard)
        Priority: HIGH
        """
        assert "LIST-PART2-2318" in all_results['results'], "Rule LIST-PART2-2318 missing"
        result = all_results['results']["LIST-PART2-2318"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "HIGH" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART2-2318 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART2-2318 failed"


    def test_rule_list_part2_2319(self, all_results):
        """
        Test LIST-PART2-2319: List item: **Jurisdictional Minimum:** >= 95% per market
        Priority: MEDIUM
        """
        assert "LIST-PART2-2319" in all_results['results'], "Rule LIST-PART2-2319 missing"
        result = all_results['results']["LIST-PART2-2319"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART2-2319 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART2-2319 failed"


    def test_rule_list_part2_2320(self, all_results):
        """
        Test LIST-PART2-2320: List item: **Dependencies:** All jurisdictional mapping YAMLs
        Priority: MEDIUM
        """
        assert "LIST-PART2-2320" in all_results['results'], "Rule LIST-PART2-2320 missing"
        result = all_results['results']["LIST-PART2-2320"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART2-2320 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART2-2320 failed"


    def test_rule_list_part2_2321(self, all_results):
        """
        Test LIST-PART2-2321: List item: **Circular Dependencies:** `23_compliance/anti_gaming/circular_depend
        Priority: CRITICAL
        """
        assert "LIST-PART2-2321" in all_results['results'], "Rule LIST-PART2-2321 missing"
        result = all_results['results']["LIST-PART2-2321"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART2-2321 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART2-2321 failed"


    def test_rule_list_part2_2322(self, all_results):
        """
        Test LIST-PART2-2322: List item: **Badge Integrity:** `23_compliance/anti_gaming/badge_integrity_check
        Priority: CRITICAL
        """
        assert "LIST-PART2-2322" in all_results['results'], "Rule LIST-PART2-2322 missing"
        result = all_results['results']["LIST-PART2-2322"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART2-2322 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART2-2322 failed"


    def test_rule_list_part2_2323(self, all_results):
        """
        Test LIST-PART2-2323: List item: **Business Logic Gaming:** `23_compliance/anti_gaming/overfitting_det
        Priority: CRITICAL
        """
        assert "LIST-PART2-2323" in all_results['results'], "Rule LIST-PART2-2323 missing"
        result = all_results['results']["LIST-PART2-2323"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART2-2323 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART2-2323 failed"


    def test_rule_list_part2_2324(self, all_results):
        """
        Test LIST-PART2-2324: List item: **Dependency Graph:** `23_compliance/anti_gaming/dependency_graph_gen
        Priority: CRITICAL
        """
        assert "LIST-PART2-2324" in all_results['results'], "Rule LIST-PART2-2324 missing"
        result = all_results['results']["LIST-PART2-2324"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART2-2324 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART2-2324 failed"


    def test_rule_kv_part2_2325(self, all_results):
        """
        Test KV-PART2-2325: version: "1.0"
        Priority: MEDIUM
        """
        assert "KV-PART2-2325" in all_results['results'], "Rule KV-PART2-2325 missing"
        result = all_results['results']["KV-PART2-2325"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART2-2325 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART2-2325 failed"


    def test_rule_kv_part2_2326(self, all_results):
        """
        Test KV-PART2-2326: date: "2025-09-15"
        Priority: MEDIUM
        """
        assert "KV-PART2-2326" in all_results['results'], "Rule KV-PART2-2326 missing"
        result = all_results['results']["KV-PART2-2326"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART2-2326 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART2-2326 failed"


    def test_rule_kv_part2_2327(self, all_results):
        """
        Test KV-PART2-2327: deprecated: false
        Priority: MEDIUM
        """
        assert "KV-PART2-2327" in all_results['results'], "Rule KV-PART2-2327 missing"
        result = all_results['results']["KV-PART2-2327"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART2-2327 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART2-2327 failed"


    def test_rule_kv_part2_2328(self, all_results):
        """
        Test KV-PART2-2328: classification: "CONFIDENTIAL - Enterprise Social Responsibility"
        Priority: MEDIUM
        """
        assert "KV-PART2-2328" in all_results['results'], "Rule KV-PART2-2328 missing"
        result = all_results['results']["KV-PART2-2328"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART2-2328 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART2-2328 failed"


    def test_rule_list_part2_2329(self, all_results):
        """
        Test LIST-PART2-2329: List item: region: "European Union"
        Priority: MEDIUM
        """
        assert "LIST-PART2-2329" in all_results['results'], "Rule LIST-PART2-2329 missing"
        result = all_results['results']["LIST-PART2-2329"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART2-2329 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART2-2329 failed"


    def test_rule_kv_part2_2330(self, all_results):
        """
        Test KV-PART2-2330: standards: ["GDPR", "AI Act", "eIDAS 2.0", "MiCA", "DORA"]
        Priority: HIGH
        """
        assert "KV-PART2-2330" in all_results['results'], "Rule KV-PART2-2330 missing"
        result = all_results['results']["KV-PART2-2330"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "HIGH" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART2-2330 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART2-2330 failed"


    def test_rule_kv_part2_2331(self, all_results):
        """
        Test KV-PART2-2331: localization: "23_compliance/regional/eu/"
        Priority: CRITICAL
        """
        assert "KV-PART2-2331" in all_results['results'], "Rule KV-PART2-2331 missing"
        result = all_results['results']["KV-PART2-2331"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART2-2331 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART2-2331 failed"


    def test_rule_text_part2_2332(self, all_results):
        """
        Test TEXT-PART2-2332: business_priority: "CRITICAL"
        Priority: CRITICAL
        """
        assert "TEXT-PART2-2332" in all_results['results'], "Rule TEXT-PART2-2332 missing"
        result = all_results['results']["TEXT-PART2-2332"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule TEXT-PART2-2332 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule TEXT-PART2-2332 failed"


    def test_rule_list_part2_2333(self, all_results):
        """
        Test LIST-PART2-2333: List item: region: "United States"
        Priority: MEDIUM
        """
        assert "LIST-PART2-2333" in all_results['results'], "Rule LIST-PART2-2333 missing"
        result = all_results['results']["LIST-PART2-2333"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART2-2333 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART2-2333 failed"


    def test_rule_kv_part2_2334(self, all_results):
        """
        Test KV-PART2-2334: standards: ["SOC2", "CCPA", "FTC Guidelines", "SEC Regulations"]
        Priority: HIGH
        """
        assert "KV-PART2-2334" in all_results['results'], "Rule KV-PART2-2334 missing"
        result = all_results['results']["KV-PART2-2334"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "HIGH" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART2-2334 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART2-2334 failed"


    def test_rule_kv_part2_2335(self, all_results):
        """
        Test KV-PART2-2335: localization: "23_compliance/regional/us/"
        Priority: CRITICAL
        """
        assert "KV-PART2-2335" in all_results['results'], "Rule KV-PART2-2335 missing"
        result = all_results['results']["KV-PART2-2335"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART2-2335 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART2-2335 failed"


    def test_rule_kv_part2_2336(self, all_results):
        """
        Test KV-PART2-2336: business_priority: "HIGH"
        Priority: MEDIUM
        """
        assert "KV-PART2-2336" in all_results['results'], "Rule KV-PART2-2336 missing"
        result = all_results['results']["KV-PART2-2336"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART2-2336 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART2-2336 failed"


    def test_rule_list_part2_2337(self, all_results):
        """
        Test LIST-PART2-2337: List item: region: "Asia Pacific"
        Priority: MEDIUM
        """
        assert "LIST-PART2-2337" in all_results['results'], "Rule LIST-PART2-2337 missing"
        result = all_results['results']["LIST-PART2-2337"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART2-2337 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART2-2337 failed"


    def test_rule_kv_part2_2338(self, all_results):
        """
        Test KV-PART2-2338: standards: ["Singapore MAS", "Japan JVCEA", "Hong Kong SFC", "Australia ASIC"]
        Priority: HIGH
        """
        assert "KV-PART2-2338" in all_results['results'], "Rule KV-PART2-2338 missing"
        result = all_results['results']["KV-PART2-2338"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "HIGH" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART2-2338 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART2-2338 failed"


    def test_rule_kv_part2_2339(self, all_results):
        """
        Test KV-PART2-2339: localization: "23_compliance/regional/apac/"
        Priority: CRITICAL
        """
        assert "KV-PART2-2339" in all_results['results'], "Rule KV-PART2-2339 missing"
        result = all_results['results']["KV-PART2-2339"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART2-2339 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART2-2339 failed"


    def test_rule_kv_part2_2340(self, all_results):
        """
        Test KV-PART2-2340: business_priority: "HIGH"
        Priority: MEDIUM
        """
        assert "KV-PART2-2340" in all_results['results'], "Rule KV-PART2-2340 missing"
        result = all_results['results']["KV-PART2-2340"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART2-2340 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART2-2340 failed"


    def test_rule_list_part2_2341(self, all_results):
        """
        Test LIST-PART2-2341: List item: region: "Switzerland"
        Priority: MEDIUM
        """
        assert "LIST-PART2-2341" in all_results['results'], "Rule LIST-PART2-2341 missing"
        result = all_results['results']["LIST-PART2-2341"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART2-2341 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART2-2341 failed"


    def test_rule_kv_part2_2342(self, all_results):
        """
        Test KV-PART2-2342: standards: ["FINMA", "DLT Act", "Swiss Data Protection Act"]
        Priority: HIGH
        """
        assert "KV-PART2-2342" in all_results['results'], "Rule KV-PART2-2342 missing"
        result = all_results['results']["KV-PART2-2342"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "HIGH" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART2-2342 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART2-2342 failed"


    def test_rule_kv_part2_2343(self, all_results):
        """
        Test KV-PART2-2343: localization: "23_compliance/regional/ch/"
        Priority: CRITICAL
        """
        assert "KV-PART2-2343" in all_results['results'], "Rule KV-PART2-2343 missing"
        result = all_results['results']["KV-PART2-2343"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART2-2343 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART2-2343 failed"


    def test_rule_kv_part2_2344(self, all_results):
        """
        Test KV-PART2-2344: business_priority: "MEDIUM"
        Priority: MEDIUM
        """
        assert "KV-PART2-2344" in all_results['results'], "Rule KV-PART2-2344 missing"
        result = all_results['results']["KV-PART2-2344"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART2-2344 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART2-2344 failed"


    def test_rule_list_part2_2345(self, all_results):
        """
        Test LIST-PART2-2345: List item: region: "United Kingdom"
        Priority: MEDIUM
        """
        assert "LIST-PART2-2345" in all_results['results'], "Rule LIST-PART2-2345 missing"
        result = all_results['results']["LIST-PART2-2345"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART2-2345 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART2-2345 failed"


    def test_rule_kv_part2_2346(self, all_results):
        """
        Test KV-PART2-2346: standards: ["FCA Rules", "UK GDPR", "PCI DSS"]
        Priority: HIGH
        """
        assert "KV-PART2-2346" in all_results['results'], "Rule KV-PART2-2346 missing"
        result = all_results['results']["KV-PART2-2346"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "HIGH" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART2-2346 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART2-2346 failed"


    def test_rule_kv_part2_2347(self, all_results):
        """
        Test KV-PART2-2347: localization: "23_compliance/regional/uk/"
        Priority: CRITICAL
        """
        assert "KV-PART2-2347" in all_results['results'], "Rule KV-PART2-2347 missing"
        result = all_results['results']["KV-PART2-2347"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART2-2347 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART2-2347 failed"


    def test_rule_kv_part2_2348(self, all_results):
        """
        Test KV-PART2-2348: business_priority: "HIGH"
        Priority: MEDIUM
        """
        assert "KV-PART2-2348" in all_results['results'], "Rule KV-PART2-2348 missing"
        result = all_results['results']["KV-PART2-2348"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART2-2348 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART2-2348 failed"


    def test_rule_kv_part2_2349(self, all_results):
        """
        Test KV-PART2-2349: wcag_version: "2.1"
        Priority: MEDIUM
        """
        assert "KV-PART2-2349" in all_results['results'], "Rule KV-PART2-2349 missing"
        result = all_results['results']["KV-PART2-2349"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART2-2349 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART2-2349 failed"


    def test_rule_kv_part2_2350(self, all_results):
        """
        Test KV-PART2-2350: baseline: "AA"
        Priority: MEDIUM
        """
        assert "KV-PART2-2350" in all_results['results'], "Rule KV-PART2-2350 missing"
        result = all_results['results']["KV-PART2-2350"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART2-2350 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART2-2350 failed"


    def test_rule_kv_part2_2351(self, all_results):
        """
        Test KV-PART2-2351: aaa_scope: "critical_flows_only"
        Priority: CRITICAL
        """
        assert "KV-PART2-2351" in all_results['results'], "Rule KV-PART2-2351 missing"
        result = all_results['results']["KV-PART2-2351"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART2-2351 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART2-2351 failed"


    def test_rule_kv_part2_2352(self, all_results):
        """
        Test KV-PART2-2352: screen_reader_compatible: true
        Priority: MEDIUM
        """
        assert "KV-PART2-2352" in all_results['results'], "Rule KV-PART2-2352 missing"
        result = all_results['results']["KV-PART2-2352"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART2-2352 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART2-2352 failed"


    def test_rule_kv_part2_2353(self, all_results):
        """
        Test KV-PART2-2353: keyboard_navigation: true
        Priority: MEDIUM
        """
        assert "KV-PART2-2353" in all_results['results'], "Rule KV-PART2-2353 missing"
        result = all_results['results']["KV-PART2-2353"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART2-2353 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART2-2353 failed"


    def test_rule_kv_part2_2354(self, all_results):
        """
        Test KV-PART2-2354: color_contrast_ratio: "4.5:1"
        Priority: MEDIUM
        """
        assert "KV-PART2-2354" in all_results['results'], "Rule KV-PART2-2354 missing"
        result = all_results['results']["KV-PART2-2354"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART2-2354 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART2-2354 failed"


    def test_rule_kv_part2_2355(self, all_results):
        """
        Test KV-PART2-2355: language_support: ["en", "de", "fr", "es", "it", "ja", "ko", "zh"]
        Priority: MEDIUM
        """
        assert "KV-PART2-2355" in all_results['results'], "Rule KV-PART2-2355 missing"
        result = all_results['results']["KV-PART2-2355"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART2-2355 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART2-2355 failed"


    def test_rule_kv_part2_2356(self, all_results):
        """
        Test KV-PART2-2356: rtl_language_support: true
        Priority: MEDIUM
        """
        assert "KV-PART2-2356" in all_results['results'], "Rule KV-PART2-2356 missing"
        result = all_results['results']["KV-PART2-2356"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART2-2356 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART2-2356 failed"


    def test_rule_kv_part2_2357(self, all_results):
        """
        Test KV-PART2-2357: business_localization: "market_specific_requirements"
        Priority: MEDIUM
        """
        assert "KV-PART2-2357" in all_results['results'], "Rule KV-PART2-2357 missing"
        result = all_results['results']["KV-PART2-2357"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART2-2357 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART2-2357 failed"


    def test_rule_text_part2_2358(self, all_results):
        """
        Test TEXT-PART2-2358: wcag_aaa_note: "AAA compliance on selected critical flows only"
        Priority: CRITICAL
        """
        assert "TEXT-PART2-2358" in all_results['results'], "Rule TEXT-PART2-2358 missing"
        result = all_results['results']["TEXT-PART2-2358"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule TEXT-PART2-2358 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule TEXT-PART2-2358 failed"


    def test_rule_kv_part2_2359(self, all_results):
        """
        Test KV-PART2-2359: open_contribution: true
        Priority: MEDIUM
        """
        assert "KV-PART2-2359" in all_results['results'], "Rule KV-PART2-2359 missing"
        result = all_results['results']["KV-PART2-2359"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART2-2359 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART2-2359 failed"


    def test_rule_kv_part2_2360(self, all_results):
        """
        Test KV-PART2-2360: translation_program: true
        Priority: MEDIUM
        """
        assert "KV-PART2-2360" in all_results['results'], "Rule KV-PART2-2360 missing"
        result = all_results['results']["KV-PART2-2360"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART2-2360 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART2-2360 failed"


    def test_rule_text_part2_2361(self, all_results):
        """
        Test TEXT-PART2-2361: accessibility_review: "required"
        Priority: MEDIUM
        """
        assert "TEXT-PART2-2361" in all_results['results'], "Rule TEXT-PART2-2361 missing"
        result = all_results['results']["TEXT-PART2-2361"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule TEXT-PART2-2361 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule TEXT-PART2-2361 failed"


    def test_rule_kv_part2_2362(self, all_results):
        """
        Test KV-PART2-2362: diverse_reviewer_pool: true
        Priority: MEDIUM
        """
        assert "KV-PART2-2362" in all_results['results'], "Rule KV-PART2-2362 missing"
        result = all_results['results']["KV-PART2-2362"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART2-2362 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART2-2362 failed"


    def test_rule_kv_part2_2363(self, all_results):
        """
        Test KV-PART2-2363: enterprise_participation: "strategic_partnerships"
        Priority: MEDIUM
        """
        assert "KV-PART2-2363" in all_results['results'], "Rule KV-PART2-2363 missing"
        result = all_results['results']["KV-PART2-2363"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART2-2363 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART2-2363 failed"


    def test_rule_kv_part2_2364(self, all_results):
        """
        Test KV-PART2-2364: support: true
        Priority: MEDIUM
        """
        assert "KV-PART2-2364" in all_results['results'], "Rule KV-PART2-2364 missing"
        result = all_results['results']["KV-PART2-2364"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART2-2364 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART2-2364 failed"


    def test_rule_kv_part2_2365(self, all_results):
        """
        Test KV-PART2-2365: accessibility_fund: "enterprise_funded"
        Priority: MEDIUM
        """
        assert "KV-PART2-2365" in all_results['results'], "Rule KV-PART2-2365 missing"
        result = all_results['results']["KV-PART2-2365"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART2-2365 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART2-2365 failed"


    def test_rule_kv_part2_2366(self, all_results):
        """
        Test KV-PART2-2366: translation_priority: ["indigenous_languages", "sign_languages"]
        Priority: MEDIUM
        """
        assert "KV-PART2-2366" in all_results['results'], "Rule KV-PART2-2366 missing"
        result = all_results['results']["KV-PART2-2366"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART2-2366 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART2-2366 failed"


    def test_rule_kv_part2_2367(self, all_results):
        """
        Test KV-PART2-2367: outreach_programs: "23_compliance/social_ecosystem/outreach/"
        Priority: CRITICAL
        """
        assert "KV-PART2-2367" in all_results['results'], "Rule KV-PART2-2367 missing"
        result = all_results['results']["KV-PART2-2367"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART2-2367 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART2-2367 failed"


    def test_rule_kv_part2_2368(self, all_results):
        """
        Test KV-PART2-2368: business_impact: "market_expansion_opportunities"
        Priority: MEDIUM
        """
        assert "KV-PART2-2368" in all_results['results'], "Rule KV-PART2-2368 missing"
        result = all_results['results']["KV-PART2-2368"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART2-2368 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART2-2368 failed"


    def test_rule_kv_part2_2369(self, all_results):
        """
        Test KV-PART2-2369: low_income_access: true
        Priority: MEDIUM
        """
        assert "KV-PART2-2369" in all_results['results'], "Rule KV-PART2-2369 missing"
        result = all_results['results']["KV-PART2-2369"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART2-2369 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART2-2369 failed"


    def test_rule_kv_part2_2370(self, all_results):
        """
        Test KV-PART2-2370: educational_discounts: true
        Priority: MEDIUM
        """
        assert "KV-PART2-2370" in all_results['results'], "Rule KV-PART2-2370 missing"
        result = all_results['results']["KV-PART2-2370"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART2-2370 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART2-2370 failed"


    def test_rule_kv_part2_2371(self, all_results):
        """
        Test KV-PART2-2371: developing_nation_support: true
        Priority: MEDIUM
        """
        assert "KV-PART2-2371" in all_results['results'], "Rule KV-PART2-2371 missing"
        result = all_results['results']["KV-PART2-2371"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART2-2371 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART2-2371 failed"


    def test_rule_kv_part2_2372(self, all_results):
        """
        Test KV-PART2-2372: internet_connectivity_alternatives: true
        Priority: MEDIUM
        """
        assert "KV-PART2-2372" in all_results['results'], "Rule KV-PART2-2372 missing"
        result = all_results['results']["KV-PART2-2372"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART2-2372 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART2-2372 failed"


    def test_rule_kv_part2_2373(self, all_results):
        """
        Test KV-PART2-2373: enterprise_social_programs: "community_investment"
        Priority: MEDIUM
        """
        assert "KV-PART2-2373" in all_results['results'], "Rule KV-PART2-2373 missing"
        result = all_results['results']["KV-PART2-2373"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART2-2373 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART2-2373 failed"


    def test_rule_list_part2_2374(self, all_results):
        """
        Test LIST-PART2-2374: List item: "Traditional Corporate"
        Priority: MEDIUM
        """
        assert "LIST-PART2-2374" in all_results['results'], "Rule LIST-PART2-2374 missing"
        result = all_results['results']["LIST-PART2-2374"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART2-2374 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART2-2374 failed"


    def test_rule_list_part2_2375(self, all_results):
        """
        Test LIST-PART2-2375: List item: "DAO (Decentralized Autonomous Organization)"
        Priority: MEDIUM
        """
        assert "LIST-PART2-2375" in all_results['results'], "Rule LIST-PART2-2375 missing"
        result = all_results['results']["LIST-PART2-2375"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART2-2375 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART2-2375 failed"


    def test_rule_list_part2_2376(self, all_results):
        """
        Test LIST-PART2-2376: List item: "Hybrid (Corporate + DAO)"
        Priority: MEDIUM
        """
        assert "LIST-PART2-2376" in all_results['results'], "Rule LIST-PART2-2376 missing"
        result = all_results['results']["LIST-PART2-2376"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART2-2376 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART2-2376 failed"


    def test_rule_list_part2_2377(self, all_results):
        """
        Test LIST-PART2-2377: List item: "NGO/Non-Profit"
        Priority: MEDIUM
        """
        assert "LIST-PART2-2377" in all_results['results'], "Rule LIST-PART2-2377 missing"
        result = all_results['results']["LIST-PART2-2377"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART2-2377 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART2-2377 failed"


    def test_rule_list_part2_2378(self, all_results):
        """
        Test LIST-PART2-2378: List item: "Government/Public Sector"
        Priority: MEDIUM
        """
        assert "LIST-PART2-2378" in all_results['results'], "Rule LIST-PART2-2378 missing"
        result = all_results['results']["LIST-PART2-2378"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART2-2378 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART2-2378 failed"


    def test_rule_list_part2_2379(self, all_results):
        """
        Test LIST-PART2-2379: List item: "Academic Institution"
        Priority: MEDIUM
        """
        assert "LIST-PART2-2379" in all_results['results'], "Rule LIST-PART2-2379 missing"
        result = all_results['results']["LIST-PART2-2379"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART2-2379 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART2-2379 failed"


    def test_rule_list_part2_2380(self, all_results):
        """
        Test LIST-PART2-2380: List item: "Community Cooperative"
        Priority: MEDIUM
        """
        assert "LIST-PART2-2380" in all_results['results'], "Rule LIST-PART2-2380 missing"
        result = all_results['results']["LIST-PART2-2380"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART2-2380 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART2-2380 failed"


    def test_rule_list_part2_2381(self, all_results):
        """
        Test LIST-PART2-2381: List item: "Enterprise Consortium"
        Priority: MEDIUM
        """
        assert "LIST-PART2-2381" in all_results['results'], "Rule LIST-PART2-2381 missing"
        result = all_results['results']["LIST-PART2-2381"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART2-2381 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART2-2381 failed"


    def test_rule_list_part2_2382(self, all_results):
        """
        Test LIST-PART2-2382: List item: "Token-based voting"
        Priority: MEDIUM
        """
        assert "LIST-PART2-2382" in all_results['results'], "Rule LIST-PART2-2382 missing"
        result = all_results['results']["LIST-PART2-2382"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART2-2382 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART2-2382 failed"


    def test_rule_list_part2_2383(self, all_results):
        """
        Test LIST-PART2-2383: List item: "Stake-weighted voting"
        Priority: MEDIUM
        """
        assert "LIST-PART2-2383" in all_results['results'], "Rule LIST-PART2-2383 missing"
        result = all_results['results']["LIST-PART2-2383"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART2-2383 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART2-2383 failed"


    def test_rule_list_part2_2384(self, all_results):
        """
        Test LIST-PART2-2384: List item: "Quadratic voting"
        Priority: MEDIUM
        """
        assert "LIST-PART2-2384" in all_results['results'], "Rule LIST-PART2-2384 missing"
        result = all_results['results']["LIST-PART2-2384"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART2-2384 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART2-2384 failed"


    def test_rule_list_part2_2385(self, all_results):
        """
        Test LIST-PART2-2385: List item: "Conviction voting"
        Priority: MEDIUM
        """
        assert "LIST-PART2-2385" in all_results['results'], "Rule LIST-PART2-2385 missing"
        result = all_results['results']["LIST-PART2-2385"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART2-2385 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART2-2385 failed"


    def test_rule_list_part2_2386(self, all_results):
        """
        Test LIST-PART2-2386: List item: "Reputation-based voting"
        Priority: MEDIUM
        """
        assert "LIST-PART2-2386" in all_results['results'], "Rule LIST-PART2-2386 missing"
        result = all_results['results']["LIST-PART2-2386"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART2-2386 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART2-2386 failed"


    def test_rule_list_part2_2387(self, all_results):
        """
        Test LIST-PART2-2387: List item: "Traditional board voting"
        Priority: MEDIUM
        """
        assert "LIST-PART2-2387" in all_results['results'], "Rule LIST-PART2-2387 missing"
        result = all_results['results']["LIST-PART2-2387"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART2-2387 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART2-2387 failed"


    def test_rule_list_part2_2388(self, all_results):
        """
        Test LIST-PART2-2388: List item: "Enterprise stakeholder voting"
        Priority: MEDIUM
        """
        assert "LIST-PART2-2388" in all_results['results'], "Rule LIST-PART2-2388 missing"
        result = all_results['results']["LIST-PART2-2388"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART2-2388 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART2-2388 failed"


    def test_rule_kv_part2_2389(self, all_results):
        """
        Test KV-PART2-2389: consensus_mechanisms: ["majority", "supermajority", "consensus", "rough_consensu
        Priority: MEDIUM
        """
        assert "KV-PART2-2389" in all_results['results'], "Rule KV-PART2-2389 missing"
        result = all_results['results']["KV-PART2-2389"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART2-2389 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART2-2389 failed"


    def test_rule_kv_part2_2390(self, all_results):
        """
        Test KV-PART2-2390: quorum_requirements: "configurable"
        Priority: MEDIUM
        """
        assert "KV-PART2-2390" in all_results['results'], "Rule KV-PART2-2390 missing"
        result = all_results['results']["KV-PART2-2390"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART2-2390 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART2-2390 failed"


    def test_rule_kv_part2_2391(self, all_results):
        """
        Test KV-PART2-2391: proposal_processes: "23_compliance/social_ecosystem/dao_proposals/"
        Priority: CRITICAL
        """
        assert "KV-PART2-2391" in all_results['results'], "Rule KV-PART2-2391 missing"
        result = all_results['results']["KV-PART2-2391"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART2-2391 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART2-2391 failed"


    def test_rule_kv_part2_2392(self, all_results):
        """
        Test KV-PART2-2392: veto_rights: "configurable"
        Priority: MEDIUM
        """
        assert "KV-PART2-2392" in all_results['results'], "Rule KV-PART2-2392 missing"
        result = all_results['results']["KV-PART2-2392"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART2-2392 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART2-2392 failed"


    def test_rule_kv_part2_2393(self, all_results):
        """
        Test KV-PART2-2393: business_stakeholder_rights: "protected"
        Priority: MEDIUM
        """
        assert "KV-PART2-2393" in all_results['results'], "Rule KV-PART2-2393 missing"
        result = all_results['results']["KV-PART2-2393"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART2-2393 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART2-2393 failed"


    def test_rule_kv_part2_2394(self, all_results):
        """
        Test KV-PART2-2394: no_bank_account_required: true
        Priority: CRITICAL
        """
        assert "KV-PART2-2394" in all_results['results'], "Rule KV-PART2-2394 missing"
        result = all_results['results']["KV-PART2-2394"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART2-2394 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART2-2394 failed"


    def test_rule_kv_part2_2395(self, all_results):
        """
        Test KV-PART2-2395: alternative_identity_verification: true
        Priority: MEDIUM
        """
        assert "KV-PART2-2395" in all_results['results'], "Rule KV-PART2-2395 missing"
        result = all_results['results']["KV-PART2-2395"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART2-2395 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART2-2395 failed"


    def test_rule_kv_part2_2396(self, all_results):
        """
        Test KV-PART2-2396: offline_capability: "limited"
        Priority: MEDIUM
        """
        assert "KV-PART2-2396" in all_results['results'], "Rule KV-PART2-2396 missing"
        result = all_results['results']["KV-PART2-2396"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART2-2396 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART2-2396 failed"


    def test_rule_kv_part2_2397(self, all_results):
        """
        Test KV-PART2-2397: sms_notifications: true
        Priority: MEDIUM
        """
        assert "KV-PART2-2397" in all_results['results'], "Rule KV-PART2-2397 missing"
        result = all_results['results']["KV-PART2-2397"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART2-2397 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART2-2397 failed"


    def test_rule_kv_part2_2398(self, all_results):
        """
        Test KV-PART2-2398: ussd_support: "planned"
        Priority: MEDIUM
        """
        assert "KV-PART2-2398" in all_results['results'], "Rule KV-PART2-2398 missing"
        result = all_results['results']["KV-PART2-2398"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART2-2398 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART2-2398 failed"


    def test_rule_kv_part2_2399(self, all_results):
        """
        Test KV-PART2-2399: agent_network_compatible: true
        Priority: MEDIUM
        """
        assert "KV-PART2-2399" in all_results['results'], "Rule KV-PART2-2399 missing"
        result = all_results['results']["KV-PART2-2399"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART2-2399 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART2-2399 failed"


    def test_rule_kv_part2_2400(self, all_results):
        """
        Test KV-PART2-2400: enterprise_financial_inclusion: "market_expansion_strategy"
        Priority: MEDIUM
        """
        assert "KV-PART2-2400" in all_results['results'], "Rule KV-PART2-2400 missing"
        result = all_results['results']["KV-PART2-2400"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART2-2400 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART2-2400 failed"


    def test_rule_kv_part2_2401(self, all_results):
        """
        Test KV-PART2-2401: version: "1.0"
        Priority: MEDIUM
        """
        assert "KV-PART2-2401" in all_results['results'], "Rule KV-PART2-2401 missing"
        result = all_results['results']["KV-PART2-2401"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART2-2401 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART2-2401 failed"


    def test_rule_kv_part2_2402(self, all_results):
        """
        Test KV-PART2-2402: date: "2025-09-15"
        Priority: MEDIUM
        """
        assert "KV-PART2-2402" in all_results['results'], "Rule KV-PART2-2402 missing"
        result = all_results['results']["KV-PART2-2402"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART2-2402 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART2-2402 failed"


    def test_rule_kv_part2_2403(self, all_results):
        """
        Test KV-PART2-2403: deprecated: false
        Priority: MEDIUM
        """
        assert "KV-PART2-2403" in all_results['results'], "Rule KV-PART2-2403 missing"
        result = all_results['results']["KV-PART2-2403"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART2-2403 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART2-2403 failed"


    def test_rule_kv_part2_2404(self, all_results):
        """
        Test KV-PART2-2404: classification: "CONFIDENTIAL - Enterprise ESG Strategy"
        Priority: MEDIUM
        """
        assert "KV-PART2-2404" in all_results['results'], "Rule KV-PART2-2404 missing"
        result = all_results['results']["KV-PART2-2404"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART2-2404 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART2-2404 failed"


    def test_rule_kv_part2_2405(self, all_results):
        """
        Test KV-PART2-2405: tracking_enabled: true
        Priority: MEDIUM
        """
        assert "KV-PART2-2405" in all_results['results'], "Rule KV-PART2-2405 missing"
        result = all_results['results']["KV-PART2-2405"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART2-2405 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART2-2405 failed"


    def test_rule_kv_part2_2406(self, all_results):
        """
        Test KV-PART2-2406: reporting_standard: "GHG Protocol"
        Priority: HIGH
        """
        assert "KV-PART2-2406" in all_results['results'], "Rule KV-PART2-2406 missing"
        result = all_results['results']["KV-PART2-2406"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "HIGH" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART2-2406 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART2-2406 failed"


    def test_rule_kv_part2_2407(self, all_results):
        """
        Test KV-PART2-2407: target: "carbon_neutral_2027"
        Priority: MEDIUM
        """
        assert "KV-PART2-2407" in all_results['results'], "Rule KV-PART2-2407 missing"
        result = all_results['results']["KV-PART2-2407"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART2-2407 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART2-2407 failed"


    def test_rule_kv_part2_2408(self, all_results):
        """
        Test KV-PART2-2408: offset_program: "enterprise_verified"
        Priority: MEDIUM
        """
        assert "KV-PART2-2408" in all_results['results'], "Rule KV-PART2-2408 missing"
        result = all_results['results']["KV-PART2-2408"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART2-2408 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART2-2408 failed"


    def test_rule_kv_part2_2409(self, all_results):
        """
        Test KV-PART2-2409: business_reporting: "annual_sustainability_report"
        Priority: MEDIUM
        """
        assert "KV-PART2-2409" in all_results['results'], "Rule KV-PART2-2409 missing"
        result = all_results['results']["KV-PART2-2409"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART2-2409 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART2-2409 failed"


    def test_rule_kv_part2_2410(self, all_results):
        """
        Test KV-PART2-2410: green_hosting_preferred: true
        Priority: MEDIUM
        """
        assert "KV-PART2-2410" in all_results['results'], "Rule KV-PART2-2410 missing"
        result = all_results['results']["KV-PART2-2410"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART2-2410 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART2-2410 failed"


    def test_rule_kv_part2_2411(self, all_results):
        """
        Test KV-PART2-2411: renewable_energy_target: "100%_by_2026"
        Priority: MEDIUM
        """
        assert "KV-PART2-2411" in all_results['results'], "Rule KV-PART2-2411 missing"
        result = all_results['results']["KV-PART2-2411"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART2-2411 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART2-2411 failed"


    def test_rule_kv_part2_2412(self, all_results):
        """
        Test KV-PART2-2412: energy_monitoring: "24_meta_orchestration/monitoring/energy/"
        Priority: MEDIUM
        """
        assert "KV-PART2-2412" in all_results['results'], "Rule KV-PART2-2412 missing"
        result = all_results['results']["KV-PART2-2412"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART2-2412 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART2-2412 failed"


    def test_rule_kv_part2_2413(self, all_results):
        """
        Test KV-PART2-2413: cost_optimization: "efficiency_roi_tracking"
        Priority: MEDIUM
        """
        assert "KV-PART2-2413" in all_results['results'], "Rule KV-PART2-2413 missing"
        result = all_results['results']["KV-PART2-2413"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART2-2413 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART2-2413 failed"


    def test_rule_kv_part2_2414(self, all_results):
        """
        Test KV-PART2-2414: code_reusability_score: "track"
        Priority: MEDIUM
        """
        assert "KV-PART2-2414" in all_results['results'], "Rule KV-PART2-2414 missing"
        result = all_results['results']["KV-PART2-2414"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART2-2414 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART2-2414 failed"


    def test_rule_kv_part2_2415(self, all_results):
        """
        Test KV-PART2-2415: resource_optimization: "continuous"
        Priority: MEDIUM
        """
        assert "KV-PART2-2415" in all_results['results'], "Rule KV-PART2-2415 missing"
        result = all_results['results']["KV-PART2-2415"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART2-2415 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART2-2415 failed"


    def test_rule_kv_part2_2416(self, all_results):
        """
        Test KV-PART2-2416: waste_reduction: "digital_first"
        Priority: MEDIUM
        """
        assert "KV-PART2-2416" in all_results['results'], "Rule KV-PART2-2416 missing"
        result = all_results['results']["KV-PART2-2416"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART2-2416 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART2-2416 failed"


    def test_rule_kv_part2_2417(self, all_results):
        """
        Test KV-PART2-2417: business_efficiency: "operational_cost_reduction"
        Priority: MEDIUM
        """
        assert "KV-PART2-2417" in all_results['results'], "Rule KV-PART2-2417 missing"
        result = all_results['results']["KV-PART2-2417"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART2-2417 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART2-2417 failed"


    def test_rule_list_part2_2418(self, all_results):
        """
        Test LIST-PART2-2418: List item: sdg_1: "No Poverty - Financial inclusion features"
        Priority: MEDIUM
        """
        assert "LIST-PART2-2418" in all_results['results'], "Rule LIST-PART2-2418 missing"
        result = all_results['results']["LIST-PART2-2418"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART2-2418 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART2-2418 failed"


    def test_rule_list_part2_2419(self, all_results):
        """
        Test LIST-PART2-2419: List item: sdg_4: "Quality Education - Open educational resources"
        Priority: MEDIUM
        """
        assert "LIST-PART2-2419" in all_results['results'], "Rule LIST-PART2-2419 missing"
        result = all_results['results']["LIST-PART2-2419"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART2-2419 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART2-2419 failed"


    def test_rule_list_part2_2420(self, all_results):
        """
        Test LIST-PART2-2420: List item: sdg_5: "Gender Equality - Inclusive design principles"
        Priority: MEDIUM
        """
        assert "LIST-PART2-2420" in all_results['results'], "Rule LIST-PART2-2420 missing"
        result = all_results['results']["LIST-PART2-2420"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART2-2420 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART2-2420 failed"


    def test_rule_list_part2_2421(self, all_results):
        """
        Test LIST-PART2-2421: List item: sdg_8: "Decent Work - Fair contributor compensation"
        Priority: MEDIUM
        """
        assert "LIST-PART2-2421" in all_results['results'], "Rule LIST-PART2-2421 missing"
        result = all_results['results']["LIST-PART2-2421"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART2-2421 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART2-2421 failed"


    def test_rule_list_part2_2422(self, all_results):
        """
        Test LIST-PART2-2422: List item: sdg_10: "Reduced Inequalities - Accessibility compliance"
        Priority: CRITICAL
        """
        assert "LIST-PART2-2422" in all_results['results'], "Rule LIST-PART2-2422 missing"
        result = all_results['results']["LIST-PART2-2422"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART2-2422 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART2-2422 failed"


    def test_rule_list_part2_2423(self, all_results):
        """
        Test LIST-PART2-2423: List item: sdg_16: "Peace, Justice, Strong Institutions - Transparent governance
        Priority: MEDIUM
        """
        assert "LIST-PART2-2423" in all_results['results'], "Rule LIST-PART2-2423 missing"
        result = all_results['results']["LIST-PART2-2423"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART2-2423 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART2-2423 failed"


    def test_rule_list_part2_2424(self, all_results):
        """
        Test LIST-PART2-2424: List item: sdg_17: "Partnerships - Multi-stakeholder collaboration"
        Priority: MEDIUM
        """
        assert "LIST-PART2-2424" in all_results['results'], "Rule LIST-PART2-2424 missing"
        result = all_results['results']["LIST-PART2-2424"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART2-2424 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART2-2424 failed"


    def test_rule_kv_part2_2425(self, all_results):
        """
        Test KV-PART2-2425: accessibility_score: "track"
        Priority: MEDIUM
        """
        assert "KV-PART2-2425" in all_results['results'], "Rule KV-PART2-2425 missing"
        result = all_results['results']["KV-PART2-2425"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART2-2425 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART2-2425 failed"


    def test_rule_kv_part2_2426(self, all_results):
        """
        Test KV-PART2-2426: inclusion_index: "track"
        Priority: MEDIUM
        """
        assert "KV-PART2-2426" in all_results['results'], "Rule KV-PART2-2426 missing"
        result = all_results['results']["KV-PART2-2426"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART2-2426 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART2-2426 failed"


    def test_rule_kv_part2_2427(self, all_results):
        """
        Test KV-PART2-2427: community_satisfaction: "survey_quarterly"
        Priority: MEDIUM
        """
        assert "KV-PART2-2427" in all_results['results'], "Rule KV-PART2-2427 missing"
        result = all_results['results']["KV-PART2-2427"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART2-2427 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART2-2427 failed"


    def test_rule_kv_part2_2428(self, all_results):
        """
        Test KV-PART2-2428: contributor_diversity: "measure_report"
        Priority: MEDIUM
        """
        assert "KV-PART2-2428" in all_results['results'], "Rule KV-PART2-2428 missing"
        result = all_results['results']["KV-PART2-2428"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART2-2428 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART2-2428 failed"


    def test_rule_kv_part2_2429(self, all_results):
        """
        Test KV-PART2-2429: business_value_creation: "community_driven_innovation"
        Priority: MEDIUM
        """
        assert "KV-PART2-2429" in all_results['results'], "Rule KV-PART2-2429 missing"
        result = all_results['results']["KV-PART2-2429"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART2-2429 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART2-2429 failed"


    def test_rule_list_part2_2430(self, all_results):
        """
        Test LIST-PART2-2430: List item: "All governance decisions public (non-confidential)"
        Priority: MEDIUM
        """
        assert "LIST-PART2-2430" in all_results['results'], "Rule LIST-PART2-2430 missing"
        result = all_results['results']["LIST-PART2-2430"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART2-2430 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART2-2430 failed"


    def test_rule_list_part2_2431(self, all_results):
        """
        Test LIST-PART2-2431: List item: "Stakeholder engagement records"
        Priority: MEDIUM
        """
        assert "LIST-PART2-2431" in all_results['results'], "Rule LIST-PART2-2431 missing"
        result = all_results['results']["LIST-PART2-2431"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART2-2431 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART2-2431 failed"


    def test_rule_list_part2_2432(self, all_results):
        """
        Test LIST-PART2-2432: List item: "Impact assessment reports"
        Priority: MEDIUM
        """
        assert "LIST-PART2-2432" in all_results['results'], "Rule LIST-PART2-2432 missing"
        result = all_results['results']["LIST-PART2-2432"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART2-2432 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART2-2432 failed"


    def test_rule_list_part2_2433(self, all_results):
        """
        Test LIST-PART2-2433: List item: "Enterprise accountability framework"
        Priority: MEDIUM
        """
        assert "LIST-PART2-2433" in all_results['results'], "Rule LIST-PART2-2433 missing"
        result = all_results['results']["LIST-PART2-2433"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART2-2433 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART2-2433 failed"


    def test_rule_kv_part2_2434(self, all_results):
        """
        Test KV-PART2-2434: code_of_conduct: "23_compliance/social_ecosystem/ethics/code_of_conduct.md"
        Priority: CRITICAL
        """
        assert "KV-PART2-2434" in all_results['results'], "Rule KV-PART2-2434 missing"
        result = all_results['results']["KV-PART2-2434"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART2-2434 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART2-2434 failed"


    def test_rule_kv_part2_2435(self, all_results):
        """
        Test KV-PART2-2435: conflict_of_interest: "23_compliance/social_ecosystem/ethics/conflict_policy.md"
        Priority: CRITICAL
        """
        assert "KV-PART2-2435" in all_results['results'], "Rule KV-PART2-2435 missing"
        result = all_results['results']["KV-PART2-2435"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART2-2435 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART2-2435 failed"


    def test_rule_kv_part2_2436(self, all_results):
        """
        Test KV-PART2-2436: whistleblower_protection: "23_compliance/social_ecosystem/ethics/whistleblower.m
        Priority: CRITICAL
        """
        assert "KV-PART2-2436" in all_results['results'], "Rule KV-PART2-2436 missing"
        result = all_results['results']["KV-PART2-2436"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART2-2436 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART2-2436 failed"


    def test_rule_kv_part2_2437(self, all_results):
        """
        Test KV-PART2-2437: business_ethics: "enterprise_compliance_integration"
        Priority: CRITICAL
        """
        assert "KV-PART2-2437" in all_results['results'], "Rule KV-PART2-2437 missing"
        result = all_results['results']["KV-PART2-2437"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART2-2437 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART2-2437 failed"


    def test_rule_kv_part2_2438(self, all_results):
        """
        Test KV-PART2-2438: user_council: "planned"
        Priority: MEDIUM
        """
        assert "KV-PART2-2438" in all_results['results'], "Rule KV-PART2-2438 missing"
        result = all_results['results']["KV-PART2-2438"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART2-2438 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART2-2438 failed"


    def test_rule_kv_part2_2439(self, all_results):
        """
        Test KV-PART2-2439: developer_advisory: "active"
        Priority: MEDIUM
        """
        assert "KV-PART2-2439" in all_results['results'], "Rule KV-PART2-2439 missing"
        result = all_results['results']["KV-PART2-2439"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART2-2439 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART2-2439 failed"


    def test_rule_kv_part2_2440(self, all_results):
        """
        Test KV-PART2-2440: regulatory_liaison: "active"
        Priority: MEDIUM
        """
        assert "KV-PART2-2440" in all_results['results'], "Rule KV-PART2-2440 missing"
        result = all_results['results']["KV-PART2-2440"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART2-2440 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART2-2440 failed"


    def test_rule_kv_part2_2441(self, all_results):
        """
        Test KV-PART2-2441: community_feedback: "continuous"
        Priority: MEDIUM
        """
        assert "KV-PART2-2441" in all_results['results'], "Rule KV-PART2-2441 missing"
        result = all_results['results']["KV-PART2-2441"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART2-2441 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART2-2441 failed"


    def test_rule_kv_part2_2442(self, all_results):
        """
        Test KV-PART2-2442: enterprise_advisory_board: "strategic_direction"
        Priority: MEDIUM
        """
        assert "KV-PART2-2442" in all_results['results'], "Rule KV-PART2-2442 missing"
        result = all_results['results']["KV-PART2-2442"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART2-2442 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART2-2442 failed"


    def test_rule_kv_part2_2443(self, all_results):
        """
        Test KV-PART2-2443: version: "1.0"
        Priority: MEDIUM
        """
        assert "KV-PART2-2443" in all_results['results'], "Rule KV-PART2-2443 missing"
        result = all_results['results']["KV-PART2-2443"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART2-2443 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART2-2443 failed"


    def test_rule_kv_part2_2444(self, all_results):
        """
        Test KV-PART2-2444: date: "2025-09-15"
        Priority: MEDIUM
        """
        assert "KV-PART2-2444" in all_results['results'], "Rule KV-PART2-2444 missing"
        result = all_results['results']["KV-PART2-2444"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART2-2444 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART2-2444 failed"


    def test_rule_kv_part2_2445(self, all_results):
        """
        Test KV-PART2-2445: deprecated: false
        Priority: MEDIUM
        """
        assert "KV-PART2-2445" in all_results['results'], "Rule KV-PART2-2445 missing"
        result = all_results['results']["KV-PART2-2445"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART2-2445 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART2-2445 failed"


    def test_rule_kv_part2_2446(self, all_results):
        """
        Test KV-PART2-2446: classification: "CONFIDENTIAL - Enterprise Market Analysis"
        Priority: MEDIUM
        """
        assert "KV-PART2-2446" in all_results['results'], "Rule KV-PART2-2446 missing"
        result = all_results['results']["KV-PART2-2446"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART2-2446 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART2-2446 failed"


    def test_rule_kv_part2_2447(self, all_results):
        """
        Test KV-PART2-2447: regulations: ["MiCA", "PSD2", "Basel III", "SOX", "FINMA", "BaFin"]
        Priority: MEDIUM
        """
        assert "KV-PART2-2447" in all_results['results'], "Rule KV-PART2-2447 missing"
        result = all_results['results']["KV-PART2-2447"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART2-2447 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART2-2447 failed"


    def test_rule_kv_part2_2448(self, all_results):
        """
        Test KV-PART2-2448: risk_level: "high"
        Priority: MEDIUM
        """
        assert "KV-PART2-2448" in all_results['results'], "Rule KV-PART2-2448 missing"
        result = all_results['results']["KV-PART2-2448"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART2-2448 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART2-2448 failed"


    def test_rule_kv_part2_2449(self, all_results):
        """
        Test KV-PART2-2449: audit_frequency: "annual"
        Priority: MEDIUM
        """
        assert "KV-PART2-2449" in all_results['results'], "Rule KV-PART2-2449 missing"
        result = all_results['results']["KV-PART2-2449"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART2-2449 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART2-2449 failed"


    def test_rule_kv_part2_2450(self, all_results):
        """
        Test KV-PART2-2450: specialized_controls: "21_post_quantum_crypto/financial/"
        Priority: MEDIUM
        """
        assert "KV-PART2-2450" in all_results['results'], "Rule KV-PART2-2450 missing"
        result = all_results['results']["KV-PART2-2450"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART2-2450 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART2-2450 failed"


    def test_rule_kv_part2_2451(self, all_results):
        """
        Test KV-PART2-2451: business_opportunity: "high_value_market"
        Priority: MEDIUM
        """
        assert "KV-PART2-2451" in all_results['results'], "Rule KV-PART2-2451 missing"
        result = all_results['results']["KV-PART2-2451"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART2-2451 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART2-2451 failed"


    def test_rule_kv_part2_2452(self, all_results):
        """
        Test KV-PART2-2452: revenue_potential: "significant"
        Priority: MEDIUM
        """
        assert "KV-PART2-2452" in all_results['results'], "Rule KV-PART2-2452 missing"
        result = all_results['results']["KV-PART2-2452"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART2-2452 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART2-2452 failed"


    def test_rule_kv_part2_2453(self, all_results):
        """
        Test KV-PART2-2453: regulations: ["HIPAA", "GDPR", "FDA 21 CFR Part 11", "ISO 13485", "MDR"]
        Priority: MEDIUM
        """
        assert "KV-PART2-2453" in all_results['results'], "Rule KV-PART2-2453 missing"
        result = all_results['results']["KV-PART2-2453"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART2-2453 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART2-2453 failed"


    def test_rule_text_part2_2454(self, all_results):
        """
        Test TEXT-PART2-2454: risk_level: "critical"
        Priority: CRITICAL
        """
        assert "TEXT-PART2-2454" in all_results['results'], "Rule TEXT-PART2-2454 missing"
        result = all_results['results']["TEXT-PART2-2454"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule TEXT-PART2-2454 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule TEXT-PART2-2454 failed"


    def test_rule_kv_part2_2455(self, all_results):
        """
        Test KV-PART2-2455: audit_frequency: "biannual"
        Priority: MEDIUM
        """
        assert "KV-PART2-2455" in all_results['results'], "Rule KV-PART2-2455 missing"
        result = all_results['results']["KV-PART2-2455"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART2-2455 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART2-2455 failed"


    def test_rule_kv_part2_2456(self, all_results):
        """
        Test KV-PART2-2456: specialized_controls: "20_foundation/security/healthcare/"
        Priority: CRITICAL
        """
        assert "KV-PART2-2456" in all_results['results'], "Rule KV-PART2-2456 missing"
        result = all_results['results']["KV-PART2-2456"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART2-2456 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART2-2456 failed"


    def test_rule_kv_part2_2457(self, all_results):
        """
        Test KV-PART2-2457: business_opportunity: "emerging_market"
        Priority: MEDIUM
        """
        assert "KV-PART2-2457" in all_results['results'], "Rule KV-PART2-2457 missing"
        result = all_results['results']["KV-PART2-2457"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART2-2457 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART2-2457 failed"


    def test_rule_kv_part2_2458(self, all_results):
        """
        Test KV-PART2-2458: revenue_potential: "moderate"
        Priority: MEDIUM
        """
        assert "KV-PART2-2458" in all_results['results'], "Rule KV-PART2-2458 missing"
        result = all_results['results']["KV-PART2-2458"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART2-2458 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART2-2458 failed"


    def test_rule_kv_part2_2459(self, all_results):
        """
        Test KV-PART2-2459: regulations: ["FedRAMP", "Authority to Operate", "NIST 800-53", "ISO 27001"]
        Priority: MEDIUM
        """
        assert "KV-PART2-2459" in all_results['results'], "Rule KV-PART2-2459 missing"
        result = all_results['results']["KV-PART2-2459"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART2-2459 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART2-2459 failed"


    def test_rule_text_part2_2460(self, all_results):
        """
        Test TEXT-PART2-2460: risk_level: "critical"
        Priority: CRITICAL
        """
        assert "TEXT-PART2-2460" in all_results['results'], "Rule TEXT-PART2-2460 missing"
        result = all_results['results']["TEXT-PART2-2460"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule TEXT-PART2-2460 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule TEXT-PART2-2460 failed"


    def test_rule_kv_part2_2461(self, all_results):
        """
        Test KV-PART2-2461: audit_frequency: "annual"
        Priority: MEDIUM
        """
        assert "KV-PART2-2461" in all_results['results'], "Rule KV-PART2-2461 missing"
        result = all_results['results']["KV-PART2-2461"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART2-2461 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART2-2461 failed"


    def test_rule_kv_part2_2462(self, all_results):
        """
        Test KV-PART2-2462: specialized_controls: "15_infra/security/government/"
        Priority: CRITICAL
        """
        assert "KV-PART2-2462" in all_results['results'], "Rule KV-PART2-2462 missing"
        result = all_results['results']["KV-PART2-2462"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART2-2462 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART2-2462 failed"


    def test_rule_kv_part2_2463(self, all_results):
        """
        Test KV-PART2-2463: business_opportunity: "stable_contracts"
        Priority: MEDIUM
        """
        assert "KV-PART2-2463" in all_results['results'], "Rule KV-PART2-2463 missing"
        result = all_results['results']["KV-PART2-2463"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART2-2463 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART2-2463 failed"


    def test_rule_kv_part2_2464(self, all_results):
        """
        Test KV-PART2-2464: revenue_potential: "high"
        Priority: MEDIUM
        """
        assert "KV-PART2-2464" in all_results['results'], "Rule KV-PART2-2464 missing"
        result = all_results['results']["KV-PART2-2464"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART2-2464 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART2-2464 failed"


    def test_rule_kv_part2_2465(self, all_results):
        """
        Test KV-PART2-2465: regulations: ["FERPA", "COPPA", "GDPR", "Accessibility Standards"]
        Priority: HIGH
        """
        assert "KV-PART2-2465" in all_results['results'], "Rule KV-PART2-2465 missing"
        result = all_results['results']["KV-PART2-2465"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "HIGH" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART2-2465 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART2-2465 failed"


    def test_rule_kv_part2_2466(self, all_results):
        """
        Test KV-PART2-2466: risk_level: "medium"
        Priority: MEDIUM
        """
        assert "KV-PART2-2466" in all_results['results'], "Rule KV-PART2-2466 missing"
        result = all_results['results']["KV-PART2-2466"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART2-2466 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART2-2466 failed"


    def test_rule_kv_part2_2467(self, all_results):
        """
        Test KV-PART2-2467: audit_frequency: "annual"
        Priority: MEDIUM
        """
        assert "KV-PART2-2467" in all_results['results'], "Rule KV-PART2-2467 missing"
        result = all_results['results']["KV-PART2-2467"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART2-2467 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART2-2467 failed"


    def test_rule_kv_part2_2468(self, all_results):
        """
        Test KV-PART2-2468: specialized_controls: "13_ui_layer/accessibility/"
        Priority: MEDIUM
        """
        assert "KV-PART2-2468" in all_results['results'], "Rule KV-PART2-2468 missing"
        result = all_results['results']["KV-PART2-2468"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART2-2468 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART2-2468 failed"


    def test_rule_kv_part2_2469(self, all_results):
        """
        Test KV-PART2-2469: business_opportunity: "social_impact"
        Priority: MEDIUM
        """
        assert "KV-PART2-2469" in all_results['results'], "Rule KV-PART2-2469 missing"
        result = all_results['results']["KV-PART2-2469"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART2-2469 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART2-2469 failed"


    def test_rule_kv_part2_2470(self, all_results):
        """
        Test KV-PART2-2470: revenue_potential: "moderate"
        Priority: MEDIUM
        """
        assert "KV-PART2-2470" in all_results['results'], "Rule KV-PART2-2470 missing"
        result = all_results['results']["KV-PART2-2470"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART2-2470 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART2-2470 failed"


    def test_rule_kv_part2_2471(self, all_results):
        """
        Test KV-PART2-2471: regulations: ["ESRB", "Age Rating", "Gambling Regulations", "Consumer Protection
        Priority: MEDIUM
        """
        assert "KV-PART2-2471" in all_results['results'], "Rule KV-PART2-2471 missing"
        result = all_results['results']["KV-PART2-2471"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART2-2471 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART2-2471 failed"


    def test_rule_kv_part2_2472(self, all_results):
        """
        Test KV-PART2-2472: risk_level: "medium"
        Priority: MEDIUM
        """
        assert "KV-PART2-2472" in all_results['results'], "Rule KV-PART2-2472 missing"
        result = all_results['results']["KV-PART2-2472"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART2-2472 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART2-2472 failed"


    def test_rule_kv_part2_2473(self, all_results):
        """
        Test KV-PART2-2473: audit_frequency: "annual"
        Priority: MEDIUM
        """
        assert "KV-PART2-2473" in all_results['results'], "Rule KV-PART2-2473 missing"
        result = all_results['results']["KV-PART2-2473"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART2-2473 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART2-2473 failed"


    def test_rule_kv_part2_2474(self, all_results):
        """
        Test KV-PART2-2474: specialized_controls: "01_ai_layer/content_moderation/"
        Priority: MEDIUM
        """
        assert "KV-PART2-2474" in all_results['results'], "Rule KV-PART2-2474 missing"
        result = all_results['results']["KV-PART2-2474"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART2-2474 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART2-2474 failed"


    def test_rule_kv_part2_2475(self, all_results):
        """
        Test KV-PART2-2475: business_opportunity: "growth_market"
        Priority: MEDIUM
        """
        assert "KV-PART2-2475" in all_results['results'], "Rule KV-PART2-2475 missing"
        result = all_results['results']["KV-PART2-2475"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART2-2475 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART2-2475 failed"


    def test_rule_kv_part2_2476(self, all_results):
        """
        Test KV-PART2-2476: revenue_potential: "high"
        Priority: MEDIUM
        """
        assert "KV-PART2-2476" in all_results['results'], "Rule KV-PART2-2476 missing"
        result = all_results['results']["KV-PART2-2476"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART2-2476 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART2-2476 failed"


    def test_rule_kv_part2_2477(self, all_results):
        """
        Test KV-PART2-2477: regulations: ["CE Marking", "FCC", "Cybersecurity Act", "Product Safety"]
        Priority: CRITICAL
        """
        assert "KV-PART2-2477" in all_results['results'], "Rule KV-PART2-2477 missing"
        result = all_results['results']["KV-PART2-2477"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART2-2477 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART2-2477 failed"


    def test_rule_kv_part2_2478(self, all_results):
        """
        Test KV-PART2-2478: risk_level: "high"
        Priority: MEDIUM
        """
        assert "KV-PART2-2478" in all_results['results'], "Rule KV-PART2-2478 missing"
        result = all_results['results']["KV-PART2-2478"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART2-2478 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART2-2478 failed"


    def test_rule_kv_part2_2479(self, all_results):
        """
        Test KV-PART2-2479: audit_frequency: "per_product"
        Priority: MEDIUM
        """
        assert "KV-PART2-2479" in all_results['results'], "Rule KV-PART2-2479 missing"
        result = all_results['results']["KV-PART2-2479"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART2-2479 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART2-2479 failed"


    def test_rule_kv_part2_2480(self, all_results):
        """
        Test KV-PART2-2480: specialized_controls: "19_adapters/iot_security/"
        Priority: CRITICAL
        """
        assert "KV-PART2-2480" in all_results['results'], "Rule KV-PART2-2480 missing"
        result = all_results['results']["KV-PART2-2480"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART2-2480 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART2-2480 failed"


    def test_rule_kv_part2_2481(self, all_results):
        """
        Test KV-PART2-2481: business_opportunity: "emerging_IoT"
        Priority: MEDIUM
        """
        assert "KV-PART2-2481" in all_results['results'], "Rule KV-PART2-2481 missing"
        result = all_results['results']["KV-PART2-2481"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART2-2481 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART2-2481 failed"


    def test_rule_kv_part2_2482(self, all_results):
        """
        Test KV-PART2-2482: revenue_potential: "significant"
        Priority: MEDIUM
        """
        assert "KV-PART2-2482" in all_results['results'], "Rule KV-PART2-2482 missing"
        result = all_results['results']["KV-PART2-2482"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART2-2482 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART2-2482 failed"


    def test_rule_kv_part2_2483(self, all_results):
        """
        Test KV-PART2-2483: regulatory_change_notification: true
        Priority: MEDIUM
        """
        assert "KV-PART2-2483" in all_results['results'], "Rule KV-PART2-2483 missing"
        result = all_results['results']["KV-PART2-2483"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART2-2483 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART2-2483 failed"


    def test_rule_kv_part2_2484(self, all_results):
        """
        Test KV-PART2-2484: sector_specific_templates: true
        Priority: MEDIUM
        """
        assert "KV-PART2-2484" in all_results['results'], "Rule KV-PART2-2484 missing"
        result = all_results['results']["KV-PART2-2484"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART2-2484 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART2-2484 failed"


    def test_rule_kv_part2_2485(self, all_results):
        """
        Test KV-PART2-2485: compliance_gap_analysis: "automated"
        Priority: CRITICAL
        """
        assert "KV-PART2-2485" in all_results['results'], "Rule KV-PART2-2485 missing"
        result = all_results['results']["KV-PART2-2485"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART2-2485 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART2-2485 failed"


    def test_rule_kv_part2_2486(self, all_results):
        """
        Test KV-PART2-2486: risk_assessment_tools: "07_governance_legal/risk_tools/"
        Priority: CRITICAL
        """
        assert "KV-PART2-2486" in all_results['results'], "Rule KV-PART2-2486 missing"
        result = all_results['results']["KV-PART2-2486"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART2-2486 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART2-2486 failed"


    def test_rule_kv_part2_2487(self, all_results):
        """
        Test KV-PART2-2487: audit_preparation: "23_compliance/sector_audits/"
        Priority: CRITICAL
        """
        assert "KV-PART2-2487" in all_results['results'], "Rule KV-PART2-2487 missing"
        result = all_results['results']["KV-PART2-2487"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART2-2487 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART2-2487 failed"


    def test_rule_kv_part2_2488(self, all_results):
        """
        Test KV-PART2-2488: business_development: "sector_specific_strategies"
        Priority: MEDIUM
        """
        assert "KV-PART2-2488" in all_results['results'], "Rule KV-PART2-2488 missing"
        result = all_results['results']["KV-PART2-2488"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART2-2488 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART2-2488 failed"


    def test_rule_list_part2_2489(self, all_results):
        """
        Test LIST-PART2-2489: List item: *01_ai_layer:** `agents/`, `prompts/`, `evaluation/`, `safety/`, `run
        Priority: MEDIUM
        """
        assert "LIST-PART2-2489" in all_results['results'], "Rule LIST-PART2-2489 missing"
        result = all_results['results']["LIST-PART2-2489"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART2-2489 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART2-2489 failed"


    def test_rule_list_part2_2490(self, all_results):
        """
        Test LIST-PART2-2490: List item: *03_core:** `domain/`, `services/`, `api/`, `schemas/`, `tokenomics/`
        Priority: MEDIUM
        """
        assert "LIST-PART2-2490" in all_results['results'], "Rule LIST-PART2-2490 missing"
        result = all_results['results']["LIST-PART2-2490"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART2-2490 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART2-2490 failed"


    def test_rule_list_part2_2491(self, all_results):
        """
        Test LIST-PART2-2491: List item: *08_identity_score:** `models/`, `rules/`, `api/`
        Priority: MEDIUM
        """
        assert "LIST-PART2-2491" in all_results['results'], "Rule LIST-PART2-2491 missing"
        result = all_results['results']["LIST-PART2-2491"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART2-2491 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART2-2491 failed"


    def test_rule_list_part2_2492(self, all_results):
        """
        Test LIST-PART2-2492: List item: *09_meta_identity:** `schemas/`, `resolvers/`, `profiles/`
        Priority: MEDIUM
        """
        assert "LIST-PART2-2492" in all_results['results'], "Rule LIST-PART2-2492 missing"
        result = all_results['results']["LIST-PART2-2492"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART2-2492 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART2-2492 failed"


    def test_rule_list_part2_2493(self, all_results):
        """
        Test LIST-PART2-2493: List item: *14_zero_time_auth:** `wallet/`, `sso/`, `flows/`, `policies_local/`
        Priority: MEDIUM
        """
        assert "LIST-PART2-2493" in all_results['results'], "Rule LIST-PART2-2493 missing"
        result = all_results['results']["LIST-PART2-2493"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART2-2493 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART2-2493 failed"


    def test_rule_list_part2_2494(self, all_results):
        """
        Test LIST-PART2-2494: List item: *02_audit_logging:** `ingest/`, `processors/`, `storage/`, `retention
        Priority: MEDIUM
        """
        assert "LIST-PART2-2494" in all_results['results'], "Rule LIST-PART2-2494 missing"
        result = all_results['results']["LIST-PART2-2494"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART2-2494 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART2-2494 failed"


    def test_rule_list_part2_2495(self, all_results):
        """
        Test LIST-PART2-2495: List item: *23_compliance:** `policies/`, `evidence/`, `mappings/`, `exceptions/
        Priority: CRITICAL
        """
        assert "LIST-PART2-2495" in all_results['results'], "Rule LIST-PART2-2495 missing"
        result = all_results['results']["LIST-PART2-2495"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART2-2495 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART2-2495 failed"


    def test_rule_list_part2_2496(self, all_results):
        """
        Test LIST-PART2-2496: List item: *24_meta_orchestration:** `triggers/ci/`, `registry/`, `pipelines/`
        Priority: MEDIUM
        """
        assert "LIST-PART2-2496" in all_results['results'], "Rule LIST-PART2-2496 missing"
        result = all_results['results']["LIST-PART2-2496"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART2-2496 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART2-2496 failed"


    def test_rule_list_part2_2497(self, all_results):
        """
        Test LIST-PART2-2497: List item: *04_deployment:** `ci/blueprints/`, `cd/strategies/`, `containers/`, 
        Priority: MEDIUM
        """
        assert "LIST-PART2-2497" in all_results['results'], "Rule LIST-PART2-2497 missing"
        result = all_results['results']["LIST-PART2-2497"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART2-2497 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART2-2497 failed"


    def test_rule_list_part2_2498(self, all_results):
        """
        Test LIST-PART2-2498: List item: *12_tooling:** `scripts/`, `linters/`, `generators/`, `hooks/`
        Priority: MEDIUM
        """
        assert "LIST-PART2-2498" in all_results['results'], "Rule LIST-PART2-2498 missing"
        result = all_results['results']["LIST-PART2-2498"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART2-2498 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART2-2498 failed"


    def test_rule_list_part2_2499(self, all_results):
        """
        Test LIST-PART2-2499: List item: *15_infra:** `k8s/`, `terraform/`, `network/`, `secrets/`
        Priority: MEDIUM
        """
        assert "LIST-PART2-2499" in all_results['results'], "Rule LIST-PART2-2499 missing"
        result = all_results['results']["LIST-PART2-2499"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART2-2499 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART2-2499 failed"


    def test_rule_list_part2_2500(self, all_results):
        """
        Test LIST-PART2-2500: List item: *17_observability:** `dashboards/`, `alerts/`, `otel/`, `score/`
        Priority: MEDIUM
        """
        assert "LIST-PART2-2500" in all_results['results'], "Rule LIST-PART2-2500 missing"
        result = all_results['results']["LIST-PART2-2500"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART2-2500 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART2-2500 failed"


    def test_rule_list_part2_2501(self, all_results):
        """
        Test LIST-PART2-2501: List item: *06_data_pipeline:** `ingestion/`, `preprocessing/`, `training/`, `ev
        Priority: MEDIUM
        """
        assert "LIST-PART2-2501" in all_results['results'], "Rule LIST-PART2-2501 missing"
        result = all_results['results']["LIST-PART2-2501"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART2-2501 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART2-2501 failed"


    def test_rule_list_part2_2502(self, all_results):
        """
        Test LIST-PART2-2502: List item: *10_interoperability:** `standards/`, `mappings/`, `connectors/`
        Priority: HIGH
        """
        assert "LIST-PART2-2502" in all_results['results'], "Rule LIST-PART2-2502 missing"
        result = all_results['results']["LIST-PART2-2502"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "HIGH" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART2-2502 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART2-2502 failed"


    def test_rule_list_part2_2503(self, all_results):
        """
        Test LIST-PART2-2503: List item: *18_data_layer:** `schemas/`, `repositories/`, `migrations/`, `adapte
        Priority: MEDIUM
        """
        assert "LIST-PART2-2503" in all_results['results'], "Rule LIST-PART2-2503 missing"
        result = all_results['results']["LIST-PART2-2503"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART2-2503 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART2-2503 failed"


    def test_rule_list_part2_2504(self, all_results):
        """
        Test LIST-PART2-2504: List item: *22_datasets:** `raw/`, `interim/`, `processed/`, `external/`, `refer
        Priority: MEDIUM
        """
        assert "LIST-PART2-2504" in all_results['results'], "Rule LIST-PART2-2504 missing"
        result = all_results['results']["LIST-PART2-2504"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART2-2504 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART2-2504 failed"


    def test_rule_list_part2_2505(self, all_results):
        """
        Test LIST-PART2-2505: List item: *05_documentation:** `architecture/`, `runbooks/`, `adr/`, `reference
        Priority: MEDIUM
        """
        assert "LIST-PART2-2505" in all_results['results'], "Rule LIST-PART2-2505 missing"
        result = all_results['results']["LIST-PART2-2505"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART2-2505 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART2-2505 failed"


    def test_rule_list_part2_2506(self, all_results):
        """
        Test LIST-PART2-2506: List item: *07_governance_legal:** `legal/`, `risk_links/`, `approvals/`
        Priority: CRITICAL
        """
        assert "LIST-PART2-2506" in all_results['results'], "Rule LIST-PART2-2506 missing"
        result = all_results['results']["LIST-PART2-2506"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART2-2506 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART2-2506 failed"


    def test_rule_list_part2_2507(self, all_results):
        """
        Test LIST-PART2-2507: List item: *11_test_simulation:** `unit/`, `integration/`, `e2e/`, `fixtures/`
        Priority: MEDIUM
        """
        assert "LIST-PART2-2507" in all_results['results'], "Rule LIST-PART2-2507 missing"
        result = all_results['results']["LIST-PART2-2507"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART2-2507 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART2-2507 failed"


    def test_rule_list_part2_2508(self, all_results):
        """
        Test LIST-PART2-2508: List item: *13_ui_layer:** `admin_frontend/`, `partner_dashboard/`, `public_fron
        Priority: MEDIUM
        """
        assert "LIST-PART2-2508" in all_results['results'], "Rule LIST-PART2-2508 missing"
        result = all_results['results']["LIST-PART2-2508"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART2-2508 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART2-2508 failed"


    def test_rule_list_part2_2509(self, all_results):
        """
        Test LIST-PART2-2509: List item: *16_codex:** `playbooks/`, `patterns/`, `guides/`
        Priority: MEDIUM
        """
        assert "LIST-PART2-2509" in all_results['results'], "Rule LIST-PART2-2509 missing"
        result = all_results['results']["LIST-PART2-2509"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART2-2509 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART2-2509 failed"


    def test_rule_list_part2_2510(self, all_results):
        """
        Test LIST-PART2-2510: List item: *19_adapters:** `web3/`, `payments/`, `messaging/`, `identity/`
        Priority: MEDIUM
        """
        assert "LIST-PART2-2510" in all_results['results'], "Rule LIST-PART2-2510 missing"
        result = all_results['results']["LIST-PART2-2510"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART2-2510 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART2-2510 failed"


    def test_rule_list_part2_2511(self, all_results):
        """
        Test LIST-PART2-2511: List item: *20_foundation:** `utils/`, `security/`, `serialization/`, `config/`,
        Priority: CRITICAL
        """
        assert "LIST-PART2-2511" in all_results['results'], "Rule LIST-PART2-2511 missing"
        result = all_results['results']["LIST-PART2-2511"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART2-2511 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART2-2511 failed"


    def test_rule_list_part2_2512(self, all_results):
        """
        Test LIST-PART2-2512: List item: *21_post_quantum_crypto:** `algorithms/`, `keystores/`, `adapters/`, 
        Priority: MEDIUM
        """
        assert "LIST-PART2-2512" in all_results['results'], "Rule LIST-PART2-2512 missing"
        result = all_results['results']["LIST-PART2-2512"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART2-2512 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART2-2512 failed"


    def test_rule_list_part2_2513(self, all_results):
        """
        Test LIST-PART2-2513: List item: *01_ai_layer:**
        Priority: MEDIUM
        """
        assert "LIST-PART2-2513" in all_results['results'], "Rule LIST-PART2-2513 missing"
        result = all_results['results']["LIST-PART2-2513"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART2-2513 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART2-2513 failed"


    def test_rule_list_part2_2514(self, all_results):
        """
        Test LIST-PART2-2514: List item: `agents/` → Agenten-Frameworks, Policy- und Workflow-Automation
        Priority: MEDIUM
        """
        assert "LIST-PART2-2514" in all_results['results'], "Rule LIST-PART2-2514 missing"
        result = all_results['results']["LIST-PART2-2514"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART2-2514 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART2-2514 failed"


    def test_rule_list_part2_2515(self, all_results):
        """
        Test LIST-PART2-2515: List item: `prompts/` → Prompt-Vorlagen, Prompt-Generatoren, Prompt-Katalog
        Priority: MEDIUM
        """
        assert "LIST-PART2-2515" in all_results['results'], "Rule LIST-PART2-2515 missing"
        result = all_results['results']["LIST-PART2-2515"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART2-2515 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART2-2515 failed"


    def test_rule_list_part2_2516(self, all_results):
        """
        Test LIST-PART2-2516: List item: `evaluation/` → Evaluationslogik, Metriken, Prompt-Tests
        Priority: MEDIUM
        """
        assert "LIST-PART2-2516" in all_results['results'], "Rule LIST-PART2-2516 missing"
        result = all_results['results']["LIST-PART2-2516"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART2-2516 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART2-2516 failed"


    def test_rule_list_part2_2517(self, all_results):
        """
        Test LIST-PART2-2517: List item: `safety/` → Safety-Checker, Blacklist, Toxicity-Filter
        Priority: MEDIUM
        """
        assert "LIST-PART2-2517" in all_results['results'], "Rule LIST-PART2-2517 missing"
        result = all_results['results']["LIST-PART2-2517"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART2-2517 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART2-2517 failed"


    def test_rule_list_part2_2518(self, all_results):
        """
        Test LIST-PART2-2518: List item: `runtimes/` → KI-Ausführungsumgebungen (Container, Runner, Adapters)
        Priority: MEDIUM
        """
        assert "LIST-PART2-2518" in all_results['results'], "Rule LIST-PART2-2518 missing"
        result = all_results['results']["LIST-PART2-2518"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART2-2518 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART2-2518 failed"


    def test_rule_list_part2_2519(self, all_results):
        """
        Test LIST-PART2-2519: List item: *03_core:**
        Priority: MEDIUM
        """
        assert "LIST-PART2-2519" in all_results['results'], "Rule LIST-PART2-2519 missing"
        result = all_results['results']["LIST-PART2-2519"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART2-2519 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART2-2519 failed"


    def test_rule_list_part2_2520(self, all_results):
        """
        Test LIST-PART2-2520: List item: `domain/` → Domain-Objekte, zentrale Datenmodelle
        Priority: MEDIUM
        """
        assert "LIST-PART2-2520" in all_results['results'], "Rule LIST-PART2-2520 missing"
        result = all_results['results']["LIST-PART2-2520"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART2-2520 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART2-2520 failed"


    def test_rule_list_part2_2521(self, all_results):
        """
        Test LIST-PART2-2521: List item: `services/` → Kernservices, Backend-Services
        Priority: MEDIUM
        """
        assert "LIST-PART2-2521" in all_results['results'], "Rule LIST-PART2-2521 missing"
        result = all_results['results']["LIST-PART2-2521"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART2-2521 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART2-2521 failed"


    def test_rule_list_part2_2522(self, all_results):
        """
        Test LIST-PART2-2522: List item: `api/` → API-Definitionen, OpenAPI, Endpunkte
        Priority: MEDIUM
        """
        assert "LIST-PART2-2522" in all_results['results'], "Rule LIST-PART2-2522 missing"
        result = all_results['results']["LIST-PART2-2522"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART2-2522 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART2-2522 failed"


    def test_rule_list_part2_2523(self, all_results):
        """
        Test LIST-PART2-2523: List item: `schemas/` → Schemas (JSON, YAML), Datenvalidierung
        Priority: MEDIUM
        """
        assert "LIST-PART2-2523" in all_results['results'], "Rule LIST-PART2-2523 missing"
        result = all_results['results']["LIST-PART2-2523"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART2-2523 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART2-2523 failed"


    def test_rule_list_part2_2524(self, all_results):
        """
        Test LIST-PART2-2524: List item: `tokenomics/` → Token-Modelle, Onchain-Schemata, Reward- und Fee-Logi
        Priority: MEDIUM
        """
        assert "LIST-PART2-2524" in all_results['results'], "Rule LIST-PART2-2524 missing"
        result = all_results['results']["LIST-PART2-2524"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART2-2524 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART2-2524 failed"


    def test_rule_list_part2_2525(self, all_results):
        """
        Test LIST-PART2-2525: List item: *08_identity_score:**
        Priority: MEDIUM
        """
        assert "LIST-PART2-2525" in all_results['results'], "Rule LIST-PART2-2525 missing"
        result = all_results['results']["LIST-PART2-2525"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART2-2525 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART2-2525 failed"


    def test_rule_list_part2_2526(self, all_results):
        """
        Test LIST-PART2-2526: List item: `models/` → Score-Modelle, Bewertungs-Algorithmen
        Priority: MEDIUM
        """
        assert "LIST-PART2-2526" in all_results['results'], "Rule LIST-PART2-2526 missing"
        result = all_results['results']["LIST-PART2-2526"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART2-2526 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART2-2526 failed"


    def test_rule_list_part2_2527(self, all_results):
        """
        Test LIST-PART2-2527: List item: `rules/` → Score-Regeln, Policy-Dateien
        Priority: MEDIUM
        """
        assert "LIST-PART2-2527" in all_results['results'], "Rule LIST-PART2-2527 missing"
        result = all_results['results']["LIST-PART2-2527"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART2-2527 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART2-2527 failed"


    def test_rule_list_part2_2528(self, all_results):
        """
        Test LIST-PART2-2528: List item: `api/` → Score-API, Integrationsschnittstellen
        Priority: MEDIUM
        """
        assert "LIST-PART2-2528" in all_results['results'], "Rule LIST-PART2-2528 missing"
        result = all_results['results']["LIST-PART2-2528"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART2-2528 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART2-2528 failed"


    def test_rule_list_part2_2529(self, all_results):
        """
        Test LIST-PART2-2529: List item: *09_meta_identity:**
        Priority: MEDIUM
        """
        assert "LIST-PART2-2529" in all_results['results'], "Rule LIST-PART2-2529 missing"
        result = all_results['results']["LIST-PART2-2529"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART2-2529 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART2-2529 failed"


    def test_rule_list_part2_2530(self, all_results):
        """
        Test LIST-PART2-2530: List item: `schemas/` → Identity-Schemas, Mapping
        Priority: MEDIUM
        """
        assert "LIST-PART2-2530" in all_results['results'], "Rule LIST-PART2-2530 missing"
        result = all_results['results']["LIST-PART2-2530"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART2-2530 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART2-2530 failed"


    def test_rule_list_part2_2531(self, all_results):
        """
        Test LIST-PART2-2531: List item: `resolvers/` → Identifier-Resolver, DID-Resolver
        Priority: MEDIUM
        """
        assert "LIST-PART2-2531" in all_results['results'], "Rule LIST-PART2-2531 missing"
        result = all_results['results']["LIST-PART2-2531"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART2-2531 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART2-2531 failed"


    def test_rule_list_part2_2532(self, all_results):
        """
        Test LIST-PART2-2532: List item: `profiles/` → Profile, Attributzuordnung, Identity-Templates
        Priority: MEDIUM
        """
        assert "LIST-PART2-2532" in all_results['results'], "Rule LIST-PART2-2532 missing"
        result = all_results['results']["LIST-PART2-2532"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART2-2532 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART2-2532 failed"


    def test_rule_list_part2_2533(self, all_results):
        """
        Test LIST-PART2-2533: List item: *14_zero_time_auth:**
        Priority: MEDIUM
        """
        assert "LIST-PART2-2533" in all_results['results'], "Rule LIST-PART2-2533 missing"
        result = all_results['results']["LIST-PART2-2533"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART2-2533 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART2-2533 failed"


    def test_rule_list_part2_2534(self, all_results):
        """
        Test LIST-PART2-2534: List item: `wallet/` → Wallet-Module, Wallet-API, Key-Verwaltung
        Priority: MEDIUM
        """
        assert "LIST-PART2-2534" in all_results['results'], "Rule LIST-PART2-2534 missing"
        result = all_results['results']["LIST-PART2-2534"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART2-2534 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART2-2534 failed"


    def test_rule_list_part2_2535(self, all_results):
        """
        Test LIST-PART2-2535: List item: `sso/` → Single-Sign-On-Mechanismen
        Priority: MEDIUM
        """
        assert "LIST-PART2-2535" in all_results['results'], "Rule LIST-PART2-2535 missing"
        result = all_results['results']["LIST-PART2-2535"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART2-2535 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART2-2535 failed"


    def test_rule_list_part2_2536(self, all_results):
        """
        Test LIST-PART2-2536: List item: `flows/` → Authentifizierungsflows
        Priority: MEDIUM
        """
        assert "LIST-PART2-2536" in all_results['results'], "Rule LIST-PART2-2536 missing"
        result = all_results['results']["LIST-PART2-2536"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART2-2536 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART2-2536 failed"


    def test_rule_list_part2_2537(self, all_results):
        """
        Test LIST-PART2-2537: List item: `policies_local/` → Lokale Auth-Policies
        Priority: MEDIUM
        """
        assert "LIST-PART2-2537" in all_results['results'], "Rule LIST-PART2-2537 missing"
        result = all_results['results']["LIST-PART2-2537"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART2-2537 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART2-2537 failed"


    def test_rule_list_part2_2538(self, all_results):
        """
        Test LIST-PART2-2538: List item: *02_audit_logging:**
        Priority: MEDIUM
        """
        assert "LIST-PART2-2538" in all_results['results'], "Rule LIST-PART2-2538 missing"
        result = all_results['results']["LIST-PART2-2538"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART2-2538 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART2-2538 failed"


    def test_rule_list_part2_2539(self, all_results):
        """
        Test LIST-PART2-2539: List item: `ingest/` → Ingest-Prozesse, Log-Intake
        Priority: MEDIUM
        """
        assert "LIST-PART2-2539" in all_results['results'], "Rule LIST-PART2-2539 missing"
        result = all_results['results']["LIST-PART2-2539"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART2-2539 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART2-2539 failed"


    def test_rule_list_part2_2540(self, all_results):
        """
        Test LIST-PART2-2540: List item: `processors/` → Log-Processor, Pre-Processing
        Priority: MEDIUM
        """
        assert "LIST-PART2-2540" in all_results['results'], "Rule LIST-PART2-2540 missing"
        result = all_results['results']["LIST-PART2-2540"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART2-2540 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART2-2540 failed"


    def test_rule_list_part2_2541(self, all_results):
        """
        Test LIST-PART2-2541: List item: `storage/` → Audit-Storage, WORM-Backends
        Priority: MEDIUM
        """
        assert "LIST-PART2-2541" in all_results['results'], "Rule LIST-PART2-2541 missing"
        result = all_results['results']["LIST-PART2-2541"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART2-2541 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART2-2541 failed"


    def test_rule_list_part2_2542(self, all_results):
        """
        Test LIST-PART2-2542: List item: `retention/` → Aufbewahrung, Lösch-Policies
        Priority: MEDIUM
        """
        assert "LIST-PART2-2542" in all_results['results'], "Rule LIST-PART2-2542 missing"
        result = all_results['results']["LIST-PART2-2542"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART2-2542 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART2-2542 failed"


    def test_rule_list_part2_2543(self, all_results):
        """
        Test LIST-PART2-2543: List item: `blockchain_anchors/` → Onchain-Anchoring, Immutable Proofs
        Priority: MEDIUM
        """
        assert "LIST-PART2-2543" in all_results['results'], "Rule LIST-PART2-2543 missing"
        result = all_results['results']["LIST-PART2-2543"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART2-2543 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART2-2543 failed"


    def test_rule_list_part2_2544(self, all_results):
        """
        Test LIST-PART2-2544: List item: *23_compliance:**
        Priority: CRITICAL
        """
        assert "LIST-PART2-2544" in all_results['results'], "Rule LIST-PART2-2544 missing"
        result = all_results['results']["LIST-PART2-2544"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART2-2544 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART2-2544 failed"


    def test_rule_list_part2_2545(self, all_results):
        """
        Test LIST-PART2-2545: List item: `policies/` → Policy-Files (YAML, JSON)
        Priority: MEDIUM
        """
        assert "LIST-PART2-2545" in all_results['results'], "Rule LIST-PART2-2545 missing"
        result = all_results['results']["LIST-PART2-2545"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART2-2545 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART2-2545 failed"


    def test_rule_list_part2_2546(self, all_results):
        """
        Test LIST-PART2-2546: List item: `evidence/` → Evidenzsammlung (Reports, Audit-Logs, Hashes)
        Priority: MEDIUM
        """
        assert "LIST-PART2-2546" in all_results['results'], "Rule LIST-PART2-2546 missing"
        result = all_results['results']["LIST-PART2-2546"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART2-2546 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART2-2546 failed"


    def test_rule_list_part2_2547(self, all_results):
        """
        Test LIST-PART2-2547: List item: `mappings/` → Policy- und Law-Mappings (MiCA, eIDAS, etc.)
        Priority: MEDIUM
        """
        assert "LIST-PART2-2547" in all_results['results'], "Rule LIST-PART2-2547 missing"
        result = all_results['results']["LIST-PART2-2547"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART2-2547 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART2-2547 failed"


    def test_rule_list_part2_2548(self, all_results):
        """
        Test LIST-PART2-2548: List item: `exceptions/` → Ausnahmen, Sonderregeln
        Priority: MEDIUM
        """
        assert "LIST-PART2-2548" in all_results['results'], "Rule LIST-PART2-2548 missing"
        result = all_results['results']["LIST-PART2-2548"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART2-2548 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART2-2548 failed"


    def test_rule_list_part2_2549(self, all_results):
        """
        Test LIST-PART2-2549: List item: `tests/` → Compliance-Testfälle, Unit-Tests
        Priority: CRITICAL
        """
        assert "LIST-PART2-2549" in all_results['results'], "Rule LIST-PART2-2549 missing"
        result = all_results['results']["LIST-PART2-2549"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART2-2549 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART2-2549 failed"


    def test_rule_list_part2_2550(self, all_results):
        """
        Test LIST-PART2-2550: List item: `anti_gaming/` → Anti-Gaming-Module, Betrugserkennung
        Priority: MEDIUM
        """
        assert "LIST-PART2-2550" in all_results['results'], "Rule LIST-PART2-2550 missing"
        result = all_results['results']["LIST-PART2-2550"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART2-2550 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART2-2550 failed"


    def test_rule_list_part2_2551(self, all_results):
        """
        Test LIST-PART2-2551: List item: `reviews/` → Policy-Reviews, Review-Protokolle
        Priority: MEDIUM
        """
        assert "LIST-PART2-2551" in all_results['results'], "Rule LIST-PART2-2551 missing"
        result = all_results['results']["LIST-PART2-2551"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART2-2551 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART2-2551 failed"


    def test_rule_list_part2_2552(self, all_results):
        """
        Test LIST-PART2-2552: List item: `governance/` → Compliance-Governance, Verantwortlichkeiten
        Priority: CRITICAL
        """
        assert "LIST-PART2-2552" in all_results['results'], "Rule LIST-PART2-2552 missing"
        result = all_results['results']["LIST-PART2-2552"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART2-2552 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART2-2552 failed"


    def test_rule_list_part2_2553(self, all_results):
        """
        Test LIST-PART2-2553: List item: *24_meta_orchestration:**
        Priority: MEDIUM
        """
        assert "LIST-PART2-2553" in all_results['results'], "Rule LIST-PART2-2553 missing"
        result = all_results['results']["LIST-PART2-2553"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART2-2553 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART2-2553 failed"


    def test_rule_list_part2_2554(self, all_results):
        """
        Test LIST-PART2-2554: List item: `triggers/ci/` → CI-Trigger, Build-Hooks
        Priority: MEDIUM
        """
        assert "LIST-PART2-2554" in all_results['results'], "Rule LIST-PART2-2554 missing"
        result = all_results['results']["LIST-PART2-2554"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART2-2554 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART2-2554 failed"


    def test_rule_list_part2_2555(self, all_results):
        """
        Test LIST-PART2-2555: List item: `registry/` → Registry, Logs, Strukturdaten
        Priority: MEDIUM
        """
        assert "LIST-PART2-2555" in all_results['results'], "Rule LIST-PART2-2555 missing"
        result = all_results['results']["LIST-PART2-2555"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART2-2555 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART2-2555 failed"


    def test_rule_list_part2_2556(self, all_results):
        """
        Test LIST-PART2-2556: List item: `pipelines/` → Orchestrator-Pipelines, Automationslogik
        Priority: MEDIUM
        """
        assert "LIST-PART2-2556" in all_results['results'], "Rule LIST-PART2-2556 missing"
        result = all_results['results']["LIST-PART2-2556"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART2-2556 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART2-2556 failed"


    def test_rule_list_part2_2557(self, all_results):
        """
        Test LIST-PART2-2557: List item: *04_deployment:**
        Priority: MEDIUM
        """
        assert "LIST-PART2-2557" in all_results['results'], "Rule LIST-PART2-2557 missing"
        result = all_results['results']["LIST-PART2-2557"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART2-2557 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART2-2557 failed"


    def test_rule_list_part2_2558(self, all_results):
        """
        Test LIST-PART2-2558: List item: `ci/blueprints/` → CI-Blueprints, Workflow-Vorlagen
        Priority: MEDIUM
        """
        assert "LIST-PART2-2558" in all_results['results'], "Rule LIST-PART2-2558 missing"
        result = all_results['results']["LIST-PART2-2558"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART2-2558 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART2-2558 failed"


    def test_rule_list_part2_2559(self, all_results):
        """
        Test LIST-PART2-2559: List item: `cd/strategies/` → CD-Strategien, Release-Logik
        Priority: MEDIUM
        """
        assert "LIST-PART2-2559" in all_results['results'], "Rule LIST-PART2-2559 missing"
        result = all_results['results']["LIST-PART2-2559"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART2-2559 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART2-2559 failed"


    def test_rule_list_part2_2560(self, all_results):
        """
        Test LIST-PART2-2560: List item: `containers/` → Container-Definitions, Dockerfiles
        Priority: MEDIUM
        """
        assert "LIST-PART2-2560" in all_results['results'], "Rule LIST-PART2-2560 missing"
        result = all_results['results']["LIST-PART2-2560"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART2-2560 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART2-2560 failed"


    def test_rule_list_part2_2561(self, all_results):
        """
        Test LIST-PART2-2561: List item: `manifests/` → Deployment-Manifeste
        Priority: MEDIUM
        """
        assert "LIST-PART2-2561" in all_results['results'], "Rule LIST-PART2-2561 missing"
        result = all_results['results']["LIST-PART2-2561"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART2-2561 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART2-2561 failed"


    def test_rule_list_part2_2562(self, all_results):
        """
        Test LIST-PART2-2562: List item: *12_tooling:**
        Priority: MEDIUM
        """
        assert "LIST-PART2-2562" in all_results['results'], "Rule LIST-PART2-2562 missing"
        result = all_results['results']["LIST-PART2-2562"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART2-2562 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART2-2562 failed"


    def test_rule_list_part2_2563(self, all_results):
        """
        Test LIST-PART2-2563: List item: `scripts/` → Python-/Bash-Skripte
        Priority: MEDIUM
        """
        assert "LIST-PART2-2563" in all_results['results'], "Rule LIST-PART2-2563 missing"
        result = all_results['results']["LIST-PART2-2563"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART2-2563 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART2-2563 failed"


    def test_rule_list_part2_2564(self, all_results):
        """
        Test LIST-PART2-2564: List item: `linters/` → Linter-Configs, Custom-Linter
        Priority: MEDIUM
        """
        assert "LIST-PART2-2564" in all_results['results'], "Rule LIST-PART2-2564 missing"
        result = all_results['results']["LIST-PART2-2564"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART2-2564 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART2-2564 failed"


    def test_rule_list_part2_2565(self, all_results):
        """
        Test LIST-PART2-2565: List item: `generators/` → Generatoren für Code, Templates
        Priority: MEDIUM
        """
        assert "LIST-PART2-2565" in all_results['results'], "Rule LIST-PART2-2565 missing"
        result = all_results['results']["LIST-PART2-2565"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART2-2565 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART2-2565 failed"


    def test_rule_list_part2_2566(self, all_results):
        """
        Test LIST-PART2-2566: List item: `hooks/` → Git-/Pre-/Post-Hooks
        Priority: MEDIUM
        """
        assert "LIST-PART2-2566" in all_results['results'], "Rule LIST-PART2-2566 missing"
        result = all_results['results']["LIST-PART2-2566"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART2-2566 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART2-2566 failed"


    def test_rule_list_part2_2567(self, all_results):
        """
        Test LIST-PART2-2567: List item: *15_infra:**
        Priority: MEDIUM
        """
        assert "LIST-PART2-2567" in all_results['results'], "Rule LIST-PART2-2567 missing"
        result = all_results['results']["LIST-PART2-2567"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART2-2567 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART2-2567 failed"


    def test_rule_list_part2_2568(self, all_results):
        """
        Test LIST-PART2-2568: List item: `k8s/` → Kubernetes-Konfigurationen
        Priority: MEDIUM
        """
        assert "LIST-PART2-2568" in all_results['results'], "Rule LIST-PART2-2568 missing"
        result = all_results['results']["LIST-PART2-2568"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART2-2568 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART2-2568 failed"


    def test_rule_list_part2_2569(self, all_results):
        """
        Test LIST-PART2-2569: List item: `terraform/` → Terraform-Module
        Priority: MEDIUM
        """
        assert "LIST-PART2-2569" in all_results['results'], "Rule LIST-PART2-2569 missing"
        result = all_results['results']["LIST-PART2-2569"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART2-2569 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART2-2569 failed"


    def test_rule_list_part2_2570(self, all_results):
        """
        Test LIST-PART2-2570: List item: `network/` → Netzwerkinfrastruktur
        Priority: MEDIUM
        """
        assert "LIST-PART2-2570" in all_results['results'], "Rule LIST-PART2-2570 missing"
        result = all_results['results']["LIST-PART2-2570"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART2-2570 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART2-2570 failed"


    def test_rule_list_part2_2571(self, all_results):
        """
        Test LIST-PART2-2571: List item: `secrets/` → Secrets-Management (keine echten Secrets ins Repo!)
        Priority: MEDIUM
        """
        assert "LIST-PART2-2571" in all_results['results'], "Rule LIST-PART2-2571 missing"
        result = all_results['results']["LIST-PART2-2571"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART2-2571 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART2-2571 failed"


    def test_rule_list_part2_2572(self, all_results):
        """
        Test LIST-PART2-2572: List item: *17_observability:**
        Priority: MEDIUM
        """
        assert "LIST-PART2-2572" in all_results['results'], "Rule LIST-PART2-2572 missing"
        result = all_results['results']["LIST-PART2-2572"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART2-2572 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART2-2572 failed"


    def test_rule_list_part2_2573(self, all_results):
        """
        Test LIST-PART2-2573: List item: `dashboards/` → Monitoring-Dashboards
        Priority: MEDIUM
        """
        assert "LIST-PART2-2573" in all_results['results'], "Rule LIST-PART2-2573 missing"
        result = all_results['results']["LIST-PART2-2573"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART2-2573 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART2-2573 failed"


    def test_rule_list_part2_2574(self, all_results):
        """
        Test LIST-PART2-2574: List item: `alerts/` → Alert-Definitions
        Priority: MEDIUM
        """
        assert "LIST-PART2-2574" in all_results['results'], "Rule LIST-PART2-2574 missing"
        result = all_results['results']["LIST-PART2-2574"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART2-2574 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART2-2574 failed"


    def test_rule_list_part2_2575(self, all_results):
        """
        Test LIST-PART2-2575: List item: `otel/` → OpenTelemetry-Konfiguration
        Priority: MEDIUM
        """
        assert "LIST-PART2-2575" in all_results['results'], "Rule LIST-PART2-2575 missing"
        result = all_results['results']["LIST-PART2-2575"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART2-2575 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART2-2575 failed"


    def test_rule_list_part2_2576(self, all_results):
        """
        Test LIST-PART2-2576: List item: `score/` → Score-Visualisierung, Score-Reports
        Priority: MEDIUM
        """
        assert "LIST-PART2-2576" in all_results['results'], "Rule LIST-PART2-2576 missing"
        result = all_results['results']["LIST-PART2-2576"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART2-2576 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART2-2576 failed"


    def test_rule_list_part2_2577(self, all_results):
        """
        Test LIST-PART2-2577: List item: *06_data_pipeline:**
        Priority: MEDIUM
        """
        assert "LIST-PART2-2577" in all_results['results'], "Rule LIST-PART2-2577 missing"
        result = all_results['results']["LIST-PART2-2577"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART2-2577 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART2-2577 failed"


    def test_rule_list_part2_2578(self, all_results):
        """
        Test LIST-PART2-2578: List item: `ingestion/` → Datenaufnahme
        Priority: MEDIUM
        """
        assert "LIST-PART2-2578" in all_results['results'], "Rule LIST-PART2-2578 missing"
        result = all_results['results']["LIST-PART2-2578"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART2-2578 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART2-2578 failed"


    def test_rule_list_part2_2579(self, all_results):
        """
        Test LIST-PART2-2579: List item: `preprocessing/` → Vorverarbeitung
        Priority: MEDIUM
        """
        assert "LIST-PART2-2579" in all_results['results'], "Rule LIST-PART2-2579 missing"
        result = all_results['results']["LIST-PART2-2579"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART2-2579 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART2-2579 failed"


    def test_rule_list_part2_2580(self, all_results):
        """
        Test LIST-PART2-2580: List item: `training/` → Trainingsdaten/-pipelines
        Priority: MEDIUM
        """
        assert "LIST-PART2-2580" in all_results['results'], "Rule LIST-PART2-2580 missing"
        result = all_results['results']["LIST-PART2-2580"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART2-2580 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART2-2580 failed"


    def test_rule_list_part2_2581(self, all_results):
        """
        Test LIST-PART2-2581: List item: `eval/` → Evaluation
        Priority: MEDIUM
        """
        assert "LIST-PART2-2581" in all_results['results'], "Rule LIST-PART2-2581 missing"
        result = all_results['results']["LIST-PART2-2581"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART2-2581 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART2-2581 failed"


    def test_rule_list_part2_2582(self, all_results):
        """
        Test LIST-PART2-2582: List item: `deployment/` → Auslieferung von ML/AI-Modellen
        Priority: MEDIUM
        """
        assert "LIST-PART2-2582" in all_results['results'], "Rule LIST-PART2-2582 missing"
        result = all_results['results']["LIST-PART2-2582"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART2-2582 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART2-2582 failed"


    def test_rule_list_part2_2583(self, all_results):
        """
        Test LIST-PART2-2583: List item: *10_interoperability:**
        Priority: MEDIUM
        """
        assert "LIST-PART2-2583" in all_results['results'], "Rule LIST-PART2-2583 missing"
        result = all_results['results']["LIST-PART2-2583"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART2-2583 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART2-2583 failed"


    def test_rule_list_part2_2584(self, all_results):
        """
        Test LIST-PART2-2584: List item: `standards/` → Standards (z. B. OIDC, SAML)
        Priority: HIGH
        """
        assert "LIST-PART2-2584" in all_results['results'], "Rule LIST-PART2-2584 missing"
        result = all_results['results']["LIST-PART2-2584"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "HIGH" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART2-2584 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART2-2584 failed"


    def test_rule_list_part2_2585(self, all_results):
        """
        Test LIST-PART2-2585: List item: `mappings/` → Schnittstellen-/Standard-Mappings
        Priority: HIGH
        """
        assert "LIST-PART2-2585" in all_results['results'], "Rule LIST-PART2-2585 missing"
        result = all_results['results']["LIST-PART2-2585"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "HIGH" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART2-2585 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART2-2585 failed"


    def test_rule_list_part2_2586(self, all_results):
        """
        Test LIST-PART2-2586: List item: `connectors/` → Connectoren zu externen Systemen
        Priority: MEDIUM
        """
        assert "LIST-PART2-2586" in all_results['results'], "Rule LIST-PART2-2586 missing"
        result = all_results['results']["LIST-PART2-2586"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART2-2586 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART2-2586 failed"


    def test_rule_list_part2_2587(self, all_results):
        """
        Test LIST-PART2-2587: List item: *18_data_layer:**
        Priority: MEDIUM
        """
        assert "LIST-PART2-2587" in all_results['results'], "Rule LIST-PART2-2587 missing"
        result = all_results['results']["LIST-PART2-2587"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART2-2587 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART2-2587 failed"


    def test_rule_list_part2_2588(self, all_results):
        """
        Test LIST-PART2-2588: List item: `schemas/` → Datenbankschemas
        Priority: MEDIUM
        """
        assert "LIST-PART2-2588" in all_results['results'], "Rule LIST-PART2-2588 missing"
        result = all_results['results']["LIST-PART2-2588"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART2-2588 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART2-2588 failed"


    def test_rule_list_part2_2589(self, all_results):
        """
        Test LIST-PART2-2589: List item: `repositories/` → DB-Repositories, ORM
        Priority: MEDIUM
        """
        assert "LIST-PART2-2589" in all_results['results'], "Rule LIST-PART2-2589 missing"
        result = all_results['results']["LIST-PART2-2589"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART2-2589 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART2-2589 failed"


    def test_rule_list_part2_2590(self, all_results):
        """
        Test LIST-PART2-2590: List item: `migrations/` → Migrationsdateien
        Priority: MEDIUM
        """
        assert "LIST-PART2-2590" in all_results['results'], "Rule LIST-PART2-2590 missing"
        result = all_results['results']["LIST-PART2-2590"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART2-2590 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART2-2590 failed"


    def test_rule_list_part2_2591(self, all_results):
        """
        Test LIST-PART2-2591: List item: `adapters/` → Adapter zu externen Data-Sources
        Priority: MEDIUM
        """
        assert "LIST-PART2-2591" in all_results['results'], "Rule LIST-PART2-2591 missing"
        result = all_results['results']["LIST-PART2-2591"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART2-2591 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART2-2591 failed"


    def test_rule_list_part2_2592(self, all_results):
        """
        Test LIST-PART2-2592: List item: *22_datasets:**
        Priority: MEDIUM
        """
        assert "LIST-PART2-2592" in all_results['results'], "Rule LIST-PART2-2592 missing"
        result = all_results['results']["LIST-PART2-2592"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART2-2592 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART2-2592 failed"


    def test_rule_list_part2_2593(self, all_results):
        """
        Test LIST-PART2-2593: List item: `raw/` → Rohdaten
        Priority: MEDIUM
        """
        assert "LIST-PART2-2593" in all_results['results'], "Rule LIST-PART2-2593 missing"
        result = all_results['results']["LIST-PART2-2593"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART2-2593 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART2-2593 failed"


    def test_rule_list_part2_2594(self, all_results):
        """
        Test LIST-PART2-2594: List item: `interim/` → Zwischenstände
        Priority: MEDIUM
        """
        assert "LIST-PART2-2594" in all_results['results'], "Rule LIST-PART2-2594 missing"
        result = all_results['results']["LIST-PART2-2594"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART2-2594 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART2-2594 failed"


    def test_rule_list_part2_2595(self, all_results):
        """
        Test LIST-PART2-2595: List item: `processed/` → Aufbereitete Datensätze
        Priority: MEDIUM
        """
        assert "LIST-PART2-2595" in all_results['results'], "Rule LIST-PART2-2595 missing"
        result = all_results['results']["LIST-PART2-2595"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART2-2595 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART2-2595 failed"


    def test_rule_list_part2_2596(self, all_results):
        """
        Test LIST-PART2-2596: List item: `external/` → Externe Datensätze
        Priority: MEDIUM
        """
        assert "LIST-PART2-2596" in all_results['results'], "Rule LIST-PART2-2596 missing"
        result = all_results['results']["LIST-PART2-2596"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART2-2596 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART2-2596 failed"


    def test_rule_list_part2_2597(self, all_results):
        """
        Test LIST-PART2-2597: List item: `reference/` → Referenzdatensätze
        Priority: MEDIUM
        """
        assert "LIST-PART2-2597" in all_results['results'], "Rule LIST-PART2-2597 missing"
        result = all_results['results']["LIST-PART2-2597"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART2-2597 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART2-2597 failed"


    def test_rule_list_part2_2598(self, all_results):
        """
        Test LIST-PART2-2598: List item: *05_documentation:**
        Priority: MEDIUM
        """
        assert "LIST-PART2-2598" in all_results['results'], "Rule LIST-PART2-2598 missing"
        result = all_results['results']["LIST-PART2-2598"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART2-2598 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART2-2598 failed"


    def test_rule_list_part2_2599(self, all_results):
        """
        Test LIST-PART2-2599: List item: `architecture/` → Architektur-Dokumentation
        Priority: MEDIUM
        """
        assert "LIST-PART2-2599" in all_results['results'], "Rule LIST-PART2-2599 missing"
        result = all_results['results']["LIST-PART2-2599"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART2-2599 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART2-2599 failed"


    def test_rule_list_part2_2600(self, all_results):
        """
        Test LIST-PART2-2600: List item: `runbooks/` → Betriebs-/Incident-Runbooks
        Priority: MEDIUM
        """
        assert "LIST-PART2-2600" in all_results['results'], "Rule LIST-PART2-2600 missing"
        result = all_results['results']["LIST-PART2-2600"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART2-2600 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART2-2600 failed"


    def test_rule_list_part2_2601(self, all_results):
        """
        Test LIST-PART2-2601: List item: `adr/` → Architecture Decision Records
        Priority: MEDIUM
        """
        assert "LIST-PART2-2601" in all_results['results'], "Rule LIST-PART2-2601 missing"
        result = all_results['results']["LIST-PART2-2601"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART2-2601 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART2-2601 failed"


    def test_rule_list_part2_2602(self, all_results):
        """
        Test LIST-PART2-2602: List item: `references/` → Referenzen, externe Quellen
        Priority: MEDIUM
        """
        assert "LIST-PART2-2602" in all_results['results'], "Rule LIST-PART2-2602 missing"
        result = all_results['results']["LIST-PART2-2602"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART2-2602 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART2-2602 failed"


    def test_rule_list_part2_2603(self, all_results):
        """
        Test LIST-PART2-2603: List item: *07_governance_legal:**
        Priority: CRITICAL
        """
        assert "LIST-PART2-2603" in all_results['results'], "Rule LIST-PART2-2603 missing"
        result = all_results['results']["LIST-PART2-2603"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART2-2603 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART2-2603 failed"


    def test_rule_list_part2_2604(self, all_results):
        """
        Test LIST-PART2-2604: List item: `legal/` → Legal Files, Verträge
        Priority: CRITICAL
        """
        assert "LIST-PART2-2604" in all_results['results'], "Rule LIST-PART2-2604 missing"
        result = all_results['results']["LIST-PART2-2604"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART2-2604 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART2-2604 failed"


    def test_rule_list_part2_2605(self, all_results):
        """
        Test LIST-PART2-2605: List item: `risk_links/` → Risikoverknüpfungen
        Priority: MEDIUM
        """
        assert "LIST-PART2-2605" in all_results['results'], "Rule LIST-PART2-2605 missing"
        result = all_results['results']["LIST-PART2-2605"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART2-2605 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART2-2605 failed"


    def test_rule_list_part2_2606(self, all_results):
        """
        Test LIST-PART2-2606: List item: `approvals/` → Approval-Dokumente
        Priority: MEDIUM
        """
        assert "LIST-PART2-2606" in all_results['results'], "Rule LIST-PART2-2606 missing"
        result = all_results['results']["LIST-PART2-2606"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART2-2606 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART2-2606 failed"


    def test_rule_list_part2_2607(self, all_results):
        """
        Test LIST-PART2-2607: List item: *11_test_simulation:**
        Priority: MEDIUM
        """
        assert "LIST-PART2-2607" in all_results['results'], "Rule LIST-PART2-2607 missing"
        result = all_results['results']["LIST-PART2-2607"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART2-2607 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART2-2607 failed"


    def test_rule_list_part2_2608(self, all_results):
        """
        Test LIST-PART2-2608: List item: `unit/` → Unittests
        Priority: MEDIUM
        """
        assert "LIST-PART2-2608" in all_results['results'], "Rule LIST-PART2-2608 missing"
        result = all_results['results']["LIST-PART2-2608"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART2-2608 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART2-2608 failed"


    def test_rule_list_part2_2609(self, all_results):
        """
        Test LIST-PART2-2609: List item: `integration/` → Integrationstests
        Priority: MEDIUM
        """
        assert "LIST-PART2-2609" in all_results['results'], "Rule LIST-PART2-2609 missing"
        result = all_results['results']["LIST-PART2-2609"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART2-2609 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART2-2609 failed"


    def test_rule_list_part2_2610(self, all_results):
        """
        Test LIST-PART2-2610: List item: `e2e/` → End-to-End-Tests
        Priority: MEDIUM
        """
        assert "LIST-PART2-2610" in all_results['results'], "Rule LIST-PART2-2610 missing"
        result = all_results['results']["LIST-PART2-2610"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART2-2610 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART2-2610 failed"


    def test_rule_list_part2_2611(self, all_results):
        """
        Test LIST-PART2-2611: List item: `fixtures/` → Testdaten, Fixtures
        Priority: MEDIUM
        """
        assert "LIST-PART2-2611" in all_results['results'], "Rule LIST-PART2-2611 missing"
        result = all_results['results']["LIST-PART2-2611"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART2-2611 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART2-2611 failed"


    def test_rule_list_part2_2612(self, all_results):
        """
        Test LIST-PART2-2612: List item: *13_ui_layer:**
        Priority: MEDIUM
        """
        assert "LIST-PART2-2612" in all_results['results'], "Rule LIST-PART2-2612 missing"
        result = all_results['results']["LIST-PART2-2612"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART2-2612 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART2-2612 failed"


    def test_rule_list_part2_2613(self, all_results):
        """
        Test LIST-PART2-2613: List item: `admin_frontend/` → Admin-UI
        Priority: MEDIUM
        """
        assert "LIST-PART2-2613" in all_results['results'], "Rule LIST-PART2-2613 missing"
        result = all_results['results']["LIST-PART2-2613"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART2-2613 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART2-2613 failed"


    def test_rule_list_part2_2614(self, all_results):
        """
        Test LIST-PART2-2614: List item: `partner_dashboard/` → Partner-Dashboard
        Priority: MEDIUM
        """
        assert "LIST-PART2-2614" in all_results['results'], "Rule LIST-PART2-2614 missing"
        result = all_results['results']["LIST-PART2-2614"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART2-2614 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART2-2614 failed"


    def test_rule_list_part2_2615(self, all_results):
        """
        Test LIST-PART2-2615: List item: `public_frontend/` → Öffentliches UI
        Priority: MEDIUM
        """
        assert "LIST-PART2-2615" in all_results['results'], "Rule LIST-PART2-2615 missing"
        result = all_results['results']["LIST-PART2-2615"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART2-2615 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART2-2615 failed"


    def test_rule_list_part2_2616(self, all_results):
        """
        Test LIST-PART2-2616: List item: `design_system/` → UI-Komponenten, Designsystem
        Priority: MEDIUM
        """
        assert "LIST-PART2-2616" in all_results['results'], "Rule LIST-PART2-2616 missing"
        result = all_results['results']["LIST-PART2-2616"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART2-2616 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART2-2616 failed"


    def test_rule_list_part2_2617(self, all_results):
        """
        Test LIST-PART2-2617: List item: *16_codex:**
        Priority: MEDIUM
        """
        assert "LIST-PART2-2617" in all_results['results'], "Rule LIST-PART2-2617 missing"
        result = all_results['results']["LIST-PART2-2617"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART2-2617 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART2-2617 failed"


    def test_rule_list_part2_2618(self, all_results):
        """
        Test LIST-PART2-2618: List item: `playbooks/` → Playbooks, Schritt-für-Schritt-Anleitungen
        Priority: MEDIUM
        """
        assert "LIST-PART2-2618" in all_results['results'], "Rule LIST-PART2-2618 missing"
        result = all_results['results']["LIST-PART2-2618"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART2-2618 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART2-2618 failed"


    def test_rule_list_part2_2619(self, all_results):
        """
        Test LIST-PART2-2619: List item: `patterns/` → Patterns, Best Practices
        Priority: MEDIUM
        """
        assert "LIST-PART2-2619" in all_results['results'], "Rule LIST-PART2-2619 missing"
        result = all_results['results']["LIST-PART2-2619"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART2-2619 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART2-2619 failed"


    def test_rule_list_part2_2620(self, all_results):
        """
        Test LIST-PART2-2620: List item: `guides/` → Guides, How-Tos
        Priority: MEDIUM
        """
        assert "LIST-PART2-2620" in all_results['results'], "Rule LIST-PART2-2620 missing"
        result = all_results['results']["LIST-PART2-2620"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART2-2620 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART2-2620 failed"


    def test_rule_list_part2_2621(self, all_results):
        """
        Test LIST-PART2-2621: List item: *19_adapters:**
        Priority: MEDIUM
        """
        assert "LIST-PART2-2621" in all_results['results'], "Rule LIST-PART2-2621 missing"
        result = all_results['results']["LIST-PART2-2621"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART2-2621 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART2-2621 failed"


    def test_rule_list_part2_2622(self, all_results):
        """
        Test LIST-PART2-2622: List item: `web3/` → Web3-Adapter
        Priority: MEDIUM
        """
        assert "LIST-PART2-2622" in all_results['results'], "Rule LIST-PART2-2622 missing"
        result = all_results['results']["LIST-PART2-2622"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART2-2622 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART2-2622 failed"


    def test_rule_list_part2_2623(self, all_results):
        """
        Test LIST-PART2-2623: List item: `payments/` → Zahlungsadapter
        Priority: MEDIUM
        """
        assert "LIST-PART2-2623" in all_results['results'], "Rule LIST-PART2-2623 missing"
        result = all_results['results']["LIST-PART2-2623"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART2-2623 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART2-2623 failed"


    def test_rule_list_part2_2624(self, all_results):
        """
        Test LIST-PART2-2624: List item: `messaging/` → Messaging-Adapter
        Priority: MEDIUM
        """
        assert "LIST-PART2-2624" in all_results['results'], "Rule LIST-PART2-2624 missing"
        result = all_results['results']["LIST-PART2-2624"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART2-2624 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART2-2624 failed"


    def test_rule_list_part2_2625(self, all_results):
        """
        Test LIST-PART2-2625: List item: `identity/` → Identity-Adapter
        Priority: MEDIUM
        """
        assert "LIST-PART2-2625" in all_results['results'], "Rule LIST-PART2-2625 missing"
        result = all_results['results']["LIST-PART2-2625"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART2-2625 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART2-2625 failed"


    def test_rule_list_part2_2626(self, all_results):
        """
        Test LIST-PART2-2626: List item: *20_foundation:**
        Priority: MEDIUM
        """
        assert "LIST-PART2-2626" in all_results['results'], "Rule LIST-PART2-2626 missing"
        result = all_results['results']["LIST-PART2-2626"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART2-2626 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART2-2626 failed"


    def test_rule_list_part2_2627(self, all_results):
        """
        Test LIST-PART2-2627: List item: `utils/` → Utilities, Helper
        Priority: MEDIUM
        """
        assert "LIST-PART2-2627" in all_results['results'], "Rule LIST-PART2-2627 missing"
        result = all_results['results']["LIST-PART2-2627"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART2-2627 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART2-2627 failed"


    def test_rule_list_part2_2628(self, all_results):
        """
        Test LIST-PART2-2628: List item: `security/` → Security-Komponenten
        Priority: CRITICAL
        """
        assert "LIST-PART2-2628" in all_results['results'], "Rule LIST-PART2-2628 missing"
        result = all_results['results']["LIST-PART2-2628"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART2-2628 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART2-2628 failed"


    def test_rule_list_part2_2629(self, all_results):
        """
        Test LIST-PART2-2629: List item: `serialization/` → Serialisierer
        Priority: MEDIUM
        """
        assert "LIST-PART2-2629" in all_results['results'], "Rule LIST-PART2-2629 missing"
        result = all_results['results']["LIST-PART2-2629"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART2-2629 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART2-2629 failed"


    def test_rule_list_part2_2630(self, all_results):
        """
        Test LIST-PART2-2630: List item: `config/` → Config-Dateien
        Priority: MEDIUM
        """
        assert "LIST-PART2-2630" in all_results['results'], "Rule LIST-PART2-2630 missing"
        result = all_results['results']["LIST-PART2-2630"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART2-2630 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART2-2630 failed"


    def test_rule_list_part2_2631(self, all_results):
        """
        Test LIST-PART2-2631: List item: `tokenomics/` → Tokenomics-Utilities
        Priority: MEDIUM
        """
        assert "LIST-PART2-2631" in all_results['results'], "Rule LIST-PART2-2631 missing"
        result = all_results['results']["LIST-PART2-2631"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART2-2631 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART2-2631 failed"


    def test_rule_list_part2_2632(self, all_results):
        """
        Test LIST-PART2-2632: List item: *21_post_quantum_crypto:**
        Priority: MEDIUM
        """
        assert "LIST-PART2-2632" in all_results['results'], "Rule LIST-PART2-2632 missing"
        result = all_results['results']["LIST-PART2-2632"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART2-2632 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART2-2632 failed"


    def test_rule_list_part2_2633(self, all_results):
        """
        Test LIST-PART2-2633: List item: `algorithms/` → Post-Quantum-Krypto-Algorithmen
        Priority: MEDIUM
        """
        assert "LIST-PART2-2633" in all_results['results'], "Rule LIST-PART2-2633 missing"
        result = all_results['results']["LIST-PART2-2633"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART2-2633 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART2-2633 failed"


    def test_rule_list_part2_2634(self, all_results):
        """
        Test LIST-PART2-2634: List item: `keystores/` → Key-Stores
        Priority: MEDIUM
        """
        assert "LIST-PART2-2634" in all_results['results'], "Rule LIST-PART2-2634 missing"
        result = all_results['results']["LIST-PART2-2634"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART2-2634 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART2-2634 failed"


    def test_rule_list_part2_2635(self, all_results):
        """
        Test LIST-PART2-2635: List item: `adapters/` → PQC-Adapter
        Priority: MEDIUM
        """
        assert "LIST-PART2-2635" in all_results['results'], "Rule LIST-PART2-2635 missing"
        result = all_results['results']["LIST-PART2-2635"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART2-2635 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART2-2635 failed"


    def test_rule_list_part2_2636(self, all_results):
        """
        Test LIST-PART2-2636: List item: `benchmarks/` → Benchmarks
        Priority: MEDIUM
        """
        assert "LIST-PART2-2636" in all_results['results'], "Rule LIST-PART2-2636 missing"
        result = all_results['results']["LIST-PART2-2636"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART2-2636 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART2-2636 failed"


    def test_rule_table_part2_2637(self, all_results):
        """
        Test TABLE-PART2-2637: Table row: Modul | Zweck / Aufgabe
        Priority: MEDIUM
        """
        assert "TABLE-PART2-2637" in all_results['results'], "Rule TABLE-PART2-2637 missing"
        result = all_results['results']["TABLE-PART2-2637"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule TABLE-PART2-2637 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule TABLE-PART2-2637 failed"


    def test_rule_table_part2_2638(self, all_results):
        """
        Test TABLE-PART2-2638: Table row: **01_ai_layer** | KI/Agenten, Prompt- und Workflow-Logik, KI-Sicherhe
        Priority: MEDIUM
        """
        assert "TABLE-PART2-2638" in all_results['results'], "Rule TABLE-PART2-2638 missing"
        result = all_results['results']["TABLE-PART2-2638"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule TABLE-PART2-2638 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule TABLE-PART2-2638 failed"


    def test_rule_table_part2_2639(self, all_results):
        """
        Test TABLE-PART2-2639: Table row: **02_audit_logging** | Audit-Logs, Retention, Onchain-Evidence
        Priority: MEDIUM
        """
        assert "TABLE-PART2-2639" in all_results['results'], "Rule TABLE-PART2-2639 missing"
        result = all_results['results']["TABLE-PART2-2639"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule TABLE-PART2-2639 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule TABLE-PART2-2639 failed"


    def test_rule_table_part2_2640(self, all_results):
        """
        Test TABLE-PART2-2640: Table row: **03_core** | Hauptlogik, Domain-Services, APIs, Tokenomics
        Priority: MEDIUM
        """
        assert "TABLE-PART2-2640" in all_results['results'], "Rule TABLE-PART2-2640 missing"
        result = all_results['results']["TABLE-PART2-2640"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule TABLE-PART2-2640 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule TABLE-PART2-2640 failed"


    def test_rule_table_part2_2641(self, all_results):
        """
        Test TABLE-PART2-2641: Table row: **04_deployment** | CI/CD, Deployments, Containerization
        Priority: MEDIUM
        """
        assert "TABLE-PART2-2641" in all_results['results'], "Rule TABLE-PART2-2641 missing"
        result = all_results['results']["TABLE-PART2-2641"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule TABLE-PART2-2641 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule TABLE-PART2-2641 failed"


    def test_rule_table_part2_2642(self, all_results):
        """
        Test TABLE-PART2-2642: Table row: **05_documentation** | Doku, Architektur, ADRs, Runbooks
        Priority: MEDIUM
        """
        assert "TABLE-PART2-2642" in all_results['results'], "Rule TABLE-PART2-2642 missing"
        result = all_results['results']["TABLE-PART2-2642"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule TABLE-PART2-2642 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule TABLE-PART2-2642 failed"


    def test_rule_table_part2_2643(self, all_results):
        """
        Test TABLE-PART2-2643: Table row: **06_data_pipeline** | Data Engineering, ML-Pipelines, Trainingsdaten
        Priority: MEDIUM
        """
        assert "TABLE-PART2-2643" in all_results['results'], "Rule TABLE-PART2-2643 missing"
        result = all_results['results']["TABLE-PART2-2643"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule TABLE-PART2-2643 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule TABLE-PART2-2643 failed"


    def test_rule_table_part2_2644(self, all_results):
        """
        Test TABLE-PART2-2644: Table row: **07_governance_legal** | Legal, Compliance-Verknüpfung, Approvals
        Priority: MEDIUM
        """
        assert "TABLE-PART2-2644" in all_results['results'], "Rule TABLE-PART2-2644 missing"
        result = all_results['results']["TABLE-PART2-2644"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule TABLE-PART2-2644 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule TABLE-PART2-2644 failed"


    def test_rule_table_part2_2645(self, all_results):
        """
        Test TABLE-PART2-2645: Table row: **08_identity_score** | Reputations-, Score- und Trustlogik
        Priority: MEDIUM
        """
        assert "TABLE-PART2-2645" in all_results['results'], "Rule TABLE-PART2-2645 missing"
        result = all_results['results']["TABLE-PART2-2645"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule TABLE-PART2-2645 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule TABLE-PART2-2645 failed"


    def test_rule_table_part2_2646(self, all_results):
        """
        Test TABLE-PART2-2646: Table row: **09_meta_identity** | Identitäts-Mapping, DID/Resolver, Attributprof
        Priority: MEDIUM
        """
        assert "TABLE-PART2-2646" in all_results['results'], "Rule TABLE-PART2-2646 missing"
        result = all_results['results']["TABLE-PART2-2646"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule TABLE-PART2-2646 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule TABLE-PART2-2646 failed"


    def test_rule_table_part2_2647(self, all_results):
        """
        Test TABLE-PART2-2647: Table row: **10_interoperability** | Standards, externe Integrationen, Connector
        Priority: MEDIUM
        """
        assert "TABLE-PART2-2647" in all_results['results'], "Rule TABLE-PART2-2647 missing"
        result = all_results['results']["TABLE-PART2-2647"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule TABLE-PART2-2647 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule TABLE-PART2-2647 failed"


    def test_rule_table_part2_2648(self, all_results):
        """
        Test TABLE-PART2-2648: Table row: **11_test_simulation** | Alle Testarten (Unit, Integration, e2e, Fixt
        Priority: MEDIUM
        """
        assert "TABLE-PART2-2648" in all_results['results'], "Rule TABLE-PART2-2648 missing"
        result = all_results['results']["TABLE-PART2-2648"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule TABLE-PART2-2648 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule TABLE-PART2-2648 failed"


    def test_rule_table_part2_2649(self, all_results):
        """
        Test TABLE-PART2-2649: Table row: **12_tooling** | Tools, Scripts, Linter, Generatoren, Hooks
        Priority: MEDIUM
        """
        assert "TABLE-PART2-2649" in all_results['results'], "Rule TABLE-PART2-2649 missing"
        result = all_results['results']["TABLE-PART2-2649"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule TABLE-PART2-2649 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule TABLE-PART2-2649 failed"


    def test_rule_table_part2_2650(self, all_results):
        """
        Test TABLE-PART2-2650: Table row: **13_ui_layer** | UI-Schichten: Admin, Partner, Public, Designsystem
        Priority: MEDIUM
        """
        assert "TABLE-PART2-2650" in all_results['results'], "Rule TABLE-PART2-2650 missing"
        result = all_results['results']["TABLE-PART2-2650"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule TABLE-PART2-2650 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule TABLE-PART2-2650 failed"


    def test_rule_table_part2_2651(self, all_results):
        """
        Test TABLE-PART2-2651: Table row: **14_zero_time_auth** | Authentifizierung, Wallet, SSO, lokale Auth-P
        Priority: MEDIUM
        """
        assert "TABLE-PART2-2651" in all_results['results'], "Rule TABLE-PART2-2651 missing"
        result = all_results['results']["TABLE-PART2-2651"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule TABLE-PART2-2651 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule TABLE-PART2-2651 failed"


    def test_rule_table_part2_2652(self, all_results):
        """
        Test TABLE-PART2-2652: Table row: **15_infra** | Infrastruktur: K8s, Terraform, Netz, Secrets
        Priority: MEDIUM
        """
        assert "TABLE-PART2-2652" in all_results['results'], "Rule TABLE-PART2-2652 missing"
        result = all_results['results']["TABLE-PART2-2652"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule TABLE-PART2-2652 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule TABLE-PART2-2652 failed"


    def test_rule_table_part2_2653(self, all_results):
        """
        Test TABLE-PART2-2653: Table row: **16_codex** | Playbooks, Guides, Patterns
        Priority: MEDIUM
        """
        assert "TABLE-PART2-2653" in all_results['results'], "Rule TABLE-PART2-2653 missing"
        result = all_results['results']["TABLE-PART2-2653"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule TABLE-PART2-2653 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule TABLE-PART2-2653 failed"


    def test_rule_table_part2_2654(self, all_results):
        """
        Test TABLE-PART2-2654: Table row: **17_observability** | Monitoring, Dashboards, Alerts, OTEL, Score
        Priority: MEDIUM
        """
        assert "TABLE-PART2-2654" in all_results['results'], "Rule TABLE-PART2-2654 missing"
        result = all_results['results']["TABLE-PART2-2654"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule TABLE-PART2-2654 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule TABLE-PART2-2654 failed"


    def test_rule_table_part2_2655(self, all_results):
        """
        Test TABLE-PART2-2655: Table row: **18_data_layer** | DB-Schemas, Migrations, Repositories, Adapter
        Priority: MEDIUM
        """
        assert "TABLE-PART2-2655" in all_results['results'], "Rule TABLE-PART2-2655 missing"
        result = all_results['results']["TABLE-PART2-2655"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule TABLE-PART2-2655 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule TABLE-PART2-2655 failed"


    def test_rule_table_part2_2656(self, all_results):
        """
        Test TABLE-PART2-2656: Table row: **19_adapters** | Adapters für Web3, Payment, Messaging, Identity
        Priority: MEDIUM
        """
        assert "TABLE-PART2-2656" in all_results['results'], "Rule TABLE-PART2-2656 missing"
        result = all_results['results']["TABLE-PART2-2656"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule TABLE-PART2-2656 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule TABLE-PART2-2656 failed"


    def test_rule_table_part2_2657(self, all_results):
        """
        Test TABLE-PART2-2657: Table row: **20_foundation** | Utilities, Security, Serialization, Config, Token
        Priority: MEDIUM
        """
        assert "TABLE-PART2-2657" in all_results['results'], "Rule TABLE-PART2-2657 missing"
        result = all_results['results']["TABLE-PART2-2657"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule TABLE-PART2-2657 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule TABLE-PART2-2657 failed"


    def test_rule_table_part2_2658(self, all_results):
        """
        Test TABLE-PART2-2658: Table row: **21_post_quantum_crypto** | Post-Quantum-Krypto, Algorithmen, Keysto
        Priority: MEDIUM
        """
        assert "TABLE-PART2-2658" in all_results['results'], "Rule TABLE-PART2-2658 missing"
        result = all_results['results']["TABLE-PART2-2658"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule TABLE-PART2-2658 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule TABLE-PART2-2658 failed"


    def test_rule_table_part2_2659(self, all_results):
        """
        Test TABLE-PART2-2659: Table row: **22_datasets** | Roh-, Zwischen-, Referenz- und Externe Datensätze
        Priority: MEDIUM
        """
        assert "TABLE-PART2-2659" in all_results['results'], "Rule TABLE-PART2-2659 missing"
        result = all_results['results']["TABLE-PART2-2659"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule TABLE-PART2-2659 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule TABLE-PART2-2659 failed"


    def test_rule_table_part2_2660(self, all_results):
        """
        Test TABLE-PART2-2660: Table row: **23_compliance** | Policies, Evidence, Mapping, Tests, Governance, A
        Priority: MEDIUM
        """
        assert "TABLE-PART2-2660" in all_results['results'], "Rule TABLE-PART2-2660 missing"
        result = all_results['results']["TABLE-PART2-2660"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule TABLE-PART2-2660 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule TABLE-PART2-2660 failed"


    def test_rule_table_part2_2661(self, all_results):
        """
        Test TABLE-PART2-2661: Table row: **24_meta_orchestration** | Orchestrator, Pipelines, Registry, CI-Tri
        Priority: MEDIUM
        """
        assert "TABLE-PART2-2661" in all_results['results'], "Rule TABLE-PART2-2661 missing"
        result = all_results['results']["TABLE-PART2-2661"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule TABLE-PART2-2661 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule TABLE-PART2-2661 failed"


    def test_rule_table_part2_2662(self, all_results):
        """
        Test TABLE-PART2-2662: Table row: Kategorie | Gewichtung | Penalty-Beispiele
        Priority: MEDIUM
        """
        assert "TABLE-PART2-2662" in all_results['results'], "Rule TABLE-PART2-2662 missing"
        result = all_results['results']["TABLE-PART2-2662"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule TABLE-PART2-2662 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule TABLE-PART2-2662 failed"


    def test_rule_table_part2_2663(self, all_results):
        """
        Test TABLE-PART2-2663: Table row: **Root-Konformität** | 40% | Extra Root: -3, Fehlend: -5
        Priority: MEDIUM
        """
        assert "TABLE-PART2-2663" in all_results['results'], "Rule TABLE-PART2-2663 missing"
        result = all_results['results']["TABLE-PART2-2663"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule TABLE-PART2-2663 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule TABLE-PART2-2663 failed"


    def test_rule_table_part2_2664(self, all_results):
        """
        Test TABLE-PART2-2664: Table row: **Naming** | 20% | Convention-Violations: -1
        Priority: MEDIUM
        """
        assert "TABLE-PART2-2664" in all_results['results'], "Rule TABLE-PART2-2664 missing"
        result = all_results['results']["TABLE-PART2-2664"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule TABLE-PART2-2664 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule TABLE-PART2-2664 failed"


    def test_rule_table_part2_2665(self, all_results):
        """
        Test TABLE-PART2-2665: Table row: **Anti-Duplikat** | 10% | Verbotene Items: -10
        Priority: MEDIUM
        """
        assert "TABLE-PART2-2665" in all_results['results'], "Rule TABLE-PART2-2665 missing"
        result = all_results['results']["TABLE-PART2-2665"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule TABLE-PART2-2665 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule TABLE-PART2-2665 failed"


    def test_rule_kv_part2_2666(self, all_results):
        """
        Test KV-PART2-2666: version: "1.1"
        Priority: MEDIUM
        """
        assert "KV-PART2-2666" in all_results['results'], "Rule KV-PART2-2666 missing"
        result = all_results['results']["KV-PART2-2666"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART2-2666 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART2-2666 failed"


    def test_rule_kv_part2_2667(self, all_results):
        """
        Test KV-PART2-2667: date: "2025-09-15"
        Priority: MEDIUM
        """
        assert "KV-PART2-2667" in all_results['results'], "Rule KV-PART2-2667 missing"
        result = all_results['results']["KV-PART2-2667"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART2-2667 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART2-2667 failed"


    def test_rule_kv_part2_2668(self, all_results):
        """
        Test KV-PART2-2668: deprecated: false
        Priority: MEDIUM
        """
        assert "KV-PART2-2668" in all_results['results'], "Rule KV-PART2-2668 missing"
        result = all_results['results']["KV-PART2-2668"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART2-2668 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART2-2668 failed"


    def test_rule_kv_part2_2669(self, all_results):
        """
        Test KV-PART2-2669: classification: "CONFIDENTIAL - Internal Standards"
        Priority: HIGH
        """
        assert "KV-PART2-2669" in all_results['results'], "Rule KV-PART2-2669 missing"
        result = all_results['results']["KV-PART2-2669"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "HIGH" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART2-2669 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART2-2669 failed"


    def test_rule_kv_part2_2670(self, all_results):
        """
        Test KV-PART2-2670: last_review: "2025-09-15"
        Priority: MEDIUM
        """
        assert "KV-PART2-2670" in all_results['results'], "Rule KV-PART2-2670 missing"
        result = all_results['results']["KV-PART2-2670"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART2-2670 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART2-2670 failed"


    def test_rule_kv_part2_2671(self, all_results):
        """
        Test KV-PART2-2671: next_review: "2026-03-15"
        Priority: MEDIUM
        """
        assert "KV-PART2-2671" in all_results['results'], "Rule KV-PART2-2671 missing"
        result = all_results['results']["KV-PART2-2671"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART2-2671 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART2-2671 failed"


    def test_rule_kv_part2_2672(self, all_results):
        """
        Test KV-PART2-2672: threshold: ">= 95%"
        Priority: MEDIUM
        """
        assert "KV-PART2-2672" in all_results['results'], "Rule KV-PART2-2672 missing"
        result = all_results['results']["KV-PART2-2672"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART2-2672 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART2-2672 failed"


    def test_rule_kv_part2_2673(self, all_results):
        """
        Test KV-PART2-2673: rationale: "Enterprise-Grade mit 5% Toleranz für Edge Cases und Transitionen"
        Priority: MEDIUM
        """
        assert "KV-PART2-2673" in all_results['results'], "Rule KV-PART2-2673 missing"
        result = all_results['results']["KV-PART2-2673"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART2-2673 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART2-2673 failed"


    def test_rule_kv_part2_2674(self, all_results):
        """
        Test KV-PART2-2674: business_impact: "Kritisch für interne Audits und externe Compliance"
        Priority: CRITICAL
        """
        assert "KV-PART2-2674" in all_results['results'], "Rule KV-PART2-2674 missing"
        result = all_results['results']["KV-PART2-2674"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART2-2674 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART2-2674 failed"


    def test_rule_kv_part2_2675(self, all_results):
        """
        Test KV-PART2-2675: deprecated: false
        Priority: MEDIUM
        """
        assert "KV-PART2-2675" in all_results['results'], "Rule KV-PART2-2675 missing"
        result = all_results['results']["KV-PART2-2675"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART2-2675 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART2-2675 failed"


    def test_rule_kv_part2_2676(self, all_results):
        """
        Test KV-PART2-2676: benchmark_source: "Internal enterprise compliance framework"
        Priority: CRITICAL
        """
        assert "KV-PART2-2676" in all_results['results'], "Rule KV-PART2-2676 missing"
        result = all_results['results']["KV-PART2-2676"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART2-2676 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART2-2676 failed"


    def test_rule_kv_part2_2677(self, all_results):
        """
        Test KV-PART2-2677: threshold: ">= 90%"
        Priority: MEDIUM
        """
        assert "KV-PART2-2677" in all_results['results'], "Rule KV-PART2-2677 missing"
        result = all_results['results']["KV-PART2-2677"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART2-2677 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART2-2677 failed"


    def test_rule_kv_part2_2678(self, all_results):
        """
        Test KV-PART2-2678: rationale: "Production-Standard mit 10% Toleranz für Legacy und Integration"
        Priority: HIGH
        """
        assert "KV-PART2-2678" in all_results['results'], "Rule KV-PART2-2678 missing"
        result = all_results['results']["KV-PART2-2678"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "HIGH" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART2-2678 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART2-2678 failed"


    def test_rule_kv_part2_2679(self, all_results):
        """
        Test KV-PART2-2679: business_impact: "Essential für Reliability und Enterprise-Einsatz"
        Priority: MEDIUM
        """
        assert "KV-PART2-2679" in all_results['results'], "Rule KV-PART2-2679 missing"
        result = all_results['results']["KV-PART2-2679"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART2-2679 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART2-2679 failed"


    def test_rule_kv_part2_2680(self, all_results):
        """
        Test KV-PART2-2680: deprecated: false
        Priority: MEDIUM
        """
        assert "KV-PART2-2680" in all_results['results'], "Rule KV-PART2-2680 missing"
        result = all_results['results']["KV-PART2-2680"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART2-2680 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART2-2680 failed"


    def test_rule_kv_part2_2681(self, all_results):
        """
        Test KV-PART2-2681: business_critical: ">= 95%"
        Priority: CRITICAL
        """
        assert "KV-PART2-2681" in all_results['results'], "Rule KV-PART2-2681 missing"
        result = all_results['results']["KV-PART2-2681"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART2-2681 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART2-2681 failed"


    def test_rule_kv_part2_2682(self, all_results):
        """
        Test KV-PART2-2682: security_modules: ">= 98%"
        Priority: CRITICAL
        """
        assert "KV-PART2-2682" in all_results['results'], "Rule KV-PART2-2682 missing"
        result = all_results['results']["KV-PART2-2682"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART2-2682 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART2-2682 failed"


    def test_rule_kv_part2_2683(self, all_results):
        """
        Test KV-PART2-2683: compliance_modules: ">= 99%"
        Priority: CRITICAL
        """
        assert "KV-PART2-2683" in all_results['results'], "Rule KV-PART2-2683 missing"
        result = all_results['results']["KV-PART2-2683"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART2-2683 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART2-2683 failed"


    def test_rule_kv_part2_2684(self, all_results):
        """
        Test KV-PART2-2684: internal_exception: "Business-kritische Module: >= 95%"
        Priority: MEDIUM
        """
        assert "KV-PART2-2684" in all_results['results'], "Rule KV-PART2-2684 missing"
        result = all_results['results']["KV-PART2-2684"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART2-2684 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART2-2684 failed"


    def test_rule_kv_part2_2685(self, all_results):
        """
        Test KV-PART2-2685: threshold: ">= 98%"
        Priority: MEDIUM
        """
        assert "KV-PART2-2685" in all_results['results'], "Rule KV-PART2-2685 missing"
        result = all_results['results']["KV-PART2-2685"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART2-2685 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART2-2685 failed"


    def test_rule_kv_part2_2686(self, all_results):
        """
        Test KV-PART2-2686: rationale: "Höchste Standards für regulatorische Vollabdeckung"
        Priority: HIGH
        """
        assert "KV-PART2-2686" in all_results['results'], "Rule KV-PART2-2686 missing"
        result = all_results['results']["KV-PART2-2686"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "HIGH" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART2-2686 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART2-2686 failed"


    def test_rule_kv_part2_2687(self, all_results):
        """
        Test KV-PART2-2687: business_impact: "Kritisch für Marktzulassungen und Audits"
        Priority: MEDIUM
        """
        assert "KV-PART2-2687" in all_results['results'], "Rule KV-PART2-2687 missing"
        result = all_results['results']["KV-PART2-2687"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART2-2687 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART2-2687 failed"


    def test_rule_kv_part2_2688(self, all_results):
        """
        Test KV-PART2-2688: deprecated: false
        Priority: MEDIUM
        """
        assert "KV-PART2-2688" in all_results['results'], "Rule KV-PART2-2688 missing"
        result = all_results['results']["KV-PART2-2688"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART2-2688 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART2-2688 failed"


    def test_rule_kv_part2_2689(self, all_results):
        """
        Test KV-PART2-2689: eu_markets: ">= 99%"
        Priority: MEDIUM
        """
        assert "KV-PART2-2689" in all_results['results'], "Rule KV-PART2-2689 missing"
        result = all_results['results']["KV-PART2-2689"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART2-2689 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART2-2689 failed"


    def test_rule_kv_part2_2690(self, all_results):
        """
        Test KV-PART2-2690: apac_markets: ">= 97%"
        Priority: MEDIUM
        """
        assert "KV-PART2-2690" in all_results['results'], "Rule KV-PART2-2690 missing"
        result = all_results['results']["KV-PART2-2690"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART2-2690 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART2-2690 failed"


    def test_rule_kv_part2_2691(self, all_results):
        """
        Test KV-PART2-2691: americas_markets: ">= 96%"
        Priority: MEDIUM
        """
        assert "KV-PART2-2691" in all_results['results'], "Rule KV-PART2-2691 missing"
        result = all_results['results']["KV-PART2-2691"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART2-2691 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART2-2691 failed"


    def test_rule_kv_part2_2692(self, all_results):
        """
        Test KV-PART2-2692: emerging_markets: ">= 95%"
        Priority: MEDIUM
        """
        assert "KV-PART2-2692" in all_results['results'], "Rule KV-PART2-2692 missing"
        result = all_results['results']["KV-PART2-2692"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART2-2692 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART2-2692 failed"


    def test_rule_kv_part2_2693(self, all_results):
        """
        Test KV-PART2-2693: jurisdictions: "Alle definierten Märkte müssen >= 95% erreichen"
        Priority: MEDIUM
        """
        assert "KV-PART2-2693" in all_results['results'], "Rule KV-PART2-2693 missing"
        result = all_results['results']["KV-PART2-2693"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART2-2693 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART2-2693 failed"


    def test_rule_kv_part2_2694(self, all_results):
        """
        Test KV-PART2-2694: requirement: "Internal 3 months + External 6 months"
        Priority: MEDIUM
        """
        assert "KV-PART2-2694" in all_results['results'], "Rule KV-PART2-2694 missing"
        result = all_results['results']["KV-PART2-2694"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART2-2694 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART2-2694 failed"


    def test_rule_kv_part2_2695(self, all_results):
        """
        Test KV-PART2-2695: rationale: "Höhere Review-Frequenz für Enterprise-Risiko-Management"
        Priority: MEDIUM
        """
        assert "KV-PART2-2695" in all_results['results'], "Rule KV-PART2-2695 missing"
        result = all_results['results']["KV-PART2-2695"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART2-2695 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART2-2695 failed"


    def test_rule_kv_part2_2696(self, all_results):
        """
        Test KV-PART2-2696: cost_benefit: "Höherer Aufwand aber maximaler Compliance-Schutz"
        Priority: CRITICAL
        """
        assert "KV-PART2-2696" in all_results['results'], "Rule KV-PART2-2696 missing"
        result = all_results['results']["KV-PART2-2696"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART2-2696 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART2-2696 failed"


    def test_rule_kv_part2_2697(self, all_results):
        """
        Test KV-PART2-2697: deprecated: false
        Priority: MEDIUM
        """
        assert "KV-PART2-2697" in all_results['results'], "Rule KV-PART2-2697 missing"
        result = all_results['results']["KV-PART2-2697"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART2-2697 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART2-2697 failed"


    def test_rule_kv_part2_2698(self, all_results):
        """
        Test KV-PART2-2698: escalation_trigger: "Review overdue by 15 days (stricter than public)"
        Priority: MEDIUM
        """
        assert "KV-PART2-2698" in all_results['results'], "Rule KV-PART2-2698 missing"
        result = all_results['results']["KV-PART2-2698"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART2-2698 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART2-2698 failed"


    def test_rule_list_part2_2699(self, all_results):
        """
        Test LIST-PART2-2699: List item: *Compliance-Level:**
        Priority: CRITICAL
        """
        assert "LIST-PART2-2699" in all_results['results'], "Rule LIST-PART2-2699 missing"
        result = all_results['results']["LIST-PART2-2699"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART2-2699 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART2-2699 failed"


    def test_rule_list_part2_2700(self, all_results):
        """
        Test LIST-PART2-2700: List item: **100 = COMPLIANT** (Produktiv)
        Priority: MEDIUM
        """
        assert "LIST-PART2-2700" in all_results['results'], "Rule LIST-PART2-2700 missing"
        result = all_results['results']["LIST-PART2-2700"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART2-2700 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART2-2700 failed"


    def test_rule_list_part2_2701(self, all_results):
        """
        Test LIST-PART2-2701: List item: **90+ = HIGH** (Release mit Monitoring)
        Priority: MEDIUM
        """
        assert "LIST-PART2-2701" in all_results['results'], "Rule LIST-PART2-2701 missing"
        result = all_results['results']["LIST-PART2-2701"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART2-2701 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART2-2701 failed"


    def test_rule_list_part2_2702(self, all_results):
        """
        Test LIST-PART2-2702: List item: **70+ = MEDIUM** (Development)
        Priority: MEDIUM
        """
        assert "LIST-PART2-2702" in all_results['results'], "Rule LIST-PART2-2702 missing"
        result = all_results['results']["LIST-PART2-2702"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART2-2702 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART2-2702 failed"


    def test_rule_list_part2_2703(self, all_results):
        """
        Test LIST-PART2-2703: List item: **<70 = LOW** (Sanierung erforderlich)
        Priority: MEDIUM
        """
        assert "LIST-PART2-2703" in all_results['results'], "Rule LIST-PART2-2703 missing"
        result = all_results['results']["LIST-PART2-2703"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART2-2703 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART2-2703 failed"


    def test_rule_kv_part2_2704(self, all_results):
        """
        Test KV-PART2-2704: version: "1.0"
        Priority: MEDIUM
        """
        assert "KV-PART2-2704" in all_results['results'], "Rule KV-PART2-2704 missing"
        result = all_results['results']["KV-PART2-2704"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART2-2704 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART2-2704 failed"


    def test_rule_kv_part2_2705(self, all_results):
        """
        Test KV-PART2-2705: date: "2025-09-15"
        Priority: MEDIUM
        """
        assert "KV-PART2-2705" in all_results['results'], "Rule KV-PART2-2705 missing"
        result = all_results['results']["KV-PART2-2705"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART2-2705 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART2-2705 failed"


    def test_rule_kv_part2_2706(self, all_results):
        """
        Test KV-PART2-2706: deprecated: false
        Priority: MEDIUM
        """
        assert "KV-PART2-2706" in all_results['results'], "Rule KV-PART2-2706 missing"
        result = all_results['results']["KV-PART2-2706"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART2-2706 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART2-2706 failed"


    def test_rule_kv_part2_2707(self, all_results):
        """
        Test KV-PART2-2707: classification: "CONFIDENTIAL - Enterprise Controls"
        Priority: MEDIUM
        """
        assert "KV-PART2-2707" in all_results['results'], "Rule KV-PART2-2707 missing"
        result = all_results['results']["KV-PART2-2707"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART2-2707 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART2-2707 failed"


    def test_rule_kv_part2_2708(self, all_results):
        """
        Test KV-PART2-2708: description: "Enterprise-Grade Validation gegen zirkuläre Referenzen"
        Priority: MEDIUM
        """
        assert "KV-PART2-2708" in all_results['results'], "Rule KV-PART2-2708 missing"
        result = all_results['results']["KV-PART2-2708"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART2-2708 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART2-2708 failed"


    def test_rule_kv_part2_2709(self, all_results):
        """
        Test KV-PART2-2709: script: "23_compliance/anti_gaming/circular_dependency_validator.py"
        Priority: CRITICAL
        """
        assert "KV-PART2-2709" in all_results['results'], "Rule KV-PART2-2709 missing"
        result = all_results['results']["KV-PART2-2709"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART2-2709 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART2-2709 failed"


    def test_rule_kv_part2_2710(self, all_results):
        """
        Test KV-PART2-2710: script_deprecated: false
        Priority: MEDIUM
        """
        assert "KV-PART2-2710" in all_results['results'], "Rule KV-PART2-2710 missing"
        result = all_results['results']["KV-PART2-2710"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART2-2710 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART2-2710 failed"


    def test_rule_kv_part2_2711(self, all_results):
        """
        Test KV-PART2-2711: frequency: "Every commit + Daily full scan"
        Priority: MEDIUM
        """
        assert "KV-PART2-2711" in all_results['results'], "Rule KV-PART2-2711 missing"
        result = all_results['results']["KV-PART2-2711"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART2-2711 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART2-2711 failed"


    def test_rule_kv_part2_2712(self, all_results):
        """
        Test KV-PART2-2712: threshold: "Zero circular dependencies allowed"
        Priority: MEDIUM
        """
        assert "KV-PART2-2712" in all_results['results'], "Rule KV-PART2-2712 missing"
        result = all_results['results']["KV-PART2-2712"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART2-2712 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART2-2712 failed"


    def test_rule_kv_part2_2713(self, all_results):
        """
        Test KV-PART2-2713: escalation: "Block deployment on violation"
        Priority: MEDIUM
        """
        assert "KV-PART2-2713" in all_results['results'], "Rule KV-PART2-2713 missing"
        result = all_results['results']["KV-PART2-2713"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART2-2713 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART2-2713 failed"


    def test_rule_kv_part2_2714(self, all_results):
        """
        Test KV-PART2-2714: dependency_map_export: "23_compliance/anti_gaming/dependency_maps/"
        Priority: CRITICAL
        """
        assert "KV-PART2-2714" in all_results['results'], "Rule KV-PART2-2714 missing"
        result = all_results['results']["KV-PART2-2714"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART2-2714 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART2-2714 failed"


    def test_rule_kv_part2_2715(self, all_results):
        """
        Test KV-PART2-2715: export_formats: ["dot", "json", "svg", "enterprise_dashboard"]
        Priority: MEDIUM
        """
        assert "KV-PART2-2715" in all_results['results'], "Rule KV-PART2-2715 missing"
        result = all_results['results']["KV-PART2-2715"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART2-2715 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART2-2715 failed"


    def test_rule_kv_part2_2716(self, all_results):
        """
        Test KV-PART2-2716: description: "Validierung gegen Business-Gaming und Metric-Optimierung"
        Priority: MEDIUM
        """
        assert "KV-PART2-2716" in all_results['results'], "Rule KV-PART2-2716 missing"
        result = all_results['results']["KV-PART2-2716"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART2-2716 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART2-2716 failed"


    def test_rule_kv_part2_2717(self, all_results):
        """
        Test KV-PART2-2717: method: "Random sampling + Quarterly manual review"
        Priority: MEDIUM
        """
        assert "KV-PART2-2717" in all_results['results'], "Rule KV-PART2-2717 missing"
        result = all_results['results']["KV-PART2-2717"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART2-2717 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART2-2717 failed"


    def test_rule_kv_part2_2718(self, all_results):
        """
        Test KV-PART2-2718: script: "23_compliance/anti_gaming/overfitting_detector.py"
        Priority: CRITICAL
        """
        assert "KV-PART2-2718" in all_results['results'], "Rule KV-PART2-2718 missing"
        result = all_results['results']["KV-PART2-2718"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART2-2718 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART2-2718 failed"


    def test_rule_kv_part2_2719(self, all_results):
        """
        Test KV-PART2-2719: script_deprecated: false
        Priority: MEDIUM
        """
        assert "KV-PART2-2719" in all_results['results'], "Rule KV-PART2-2719 missing"
        result = all_results['results']["KV-PART2-2719"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART2-2719 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART2-2719 failed"


    def test_rule_kv_part2_2720(self, all_results):
        """
        Test KV-PART2-2720: frequency: "Weekly automated + Monthly manual"
        Priority: MEDIUM
        """
        assert "KV-PART2-2720" in all_results['results'], "Rule KV-PART2-2720 missing"
        result = all_results['results']["KV-PART2-2720"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART2-2720 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART2-2720 failed"


    def test_rule_kv_part2_2721(self, all_results):
        """
        Test KV-PART2-2721: sample_size: "20%" # Higher than public 15%
        Priority: MEDIUM
        """
        assert "KV-PART2-2721" in all_results['results'], "Rule KV-PART2-2721 missing"
        result = all_results['results']["KV-PART2-2721"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART2-2721 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART2-2721 failed"


    def test_rule_kv_part2_2722(self, all_results):
        """
        Test KV-PART2-2722: reviewer_required: true
        Priority: CRITICAL
        """
        assert "KV-PART2-2722" in all_results['results'], "Rule KV-PART2-2722 missing"
        result = all_results['results']["KV-PART2-2722"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART2-2722 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART2-2722 failed"


    def test_rule_kv_part2_2723(self, all_results):
        """
        Test KV-PART2-2723: internal_audit: "Quarterly by compliance team"
        Priority: CRITICAL
        """
        assert "KV-PART2-2723" in all_results['results'], "Rule KV-PART2-2723 missing"
        result = all_results['results']["KV-PART2-2723"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART2-2723 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART2-2723 failed"


    def test_rule_kv_part2_2724(self, all_results):
        """
        Test KV-PART2-2724: description: "Enterprise Badge-Berechnungen gegen dokumentierte Formeln"
        Priority: MEDIUM
        """
        assert "KV-PART2-2724" in all_results['results'], "Rule KV-PART2-2724 missing"
        result = all_results['results']["KV-PART2-2724"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART2-2724 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART2-2724 failed"


    def test_rule_kv_part2_2725(self, all_results):
        """
        Test KV-PART2-2725: script: "23_compliance/anti_gaming/badge_integrity_checker.sh"
        Priority: CRITICAL
        """
        assert "KV-PART2-2725" in all_results['results'], "Rule KV-PART2-2725 missing"
        result = all_results['results']["KV-PART2-2725"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART2-2725 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART2-2725 failed"


    def test_rule_kv_part2_2726(self, all_results):
        """
        Test KV-PART2-2726: script_deprecated: false
        Priority: MEDIUM
        """
        assert "KV-PART2-2726" in all_results['results'], "Rule KV-PART2-2726 missing"
        result = all_results['results']["KV-PART2-2726"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART2-2726 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART2-2726 failed"


    def test_rule_kv_part2_2727(self, all_results):
        """
        Test KV-PART2-2727: frequency: "Every PR + Pre-release"
        Priority: MEDIUM
        """
        assert "KV-PART2-2727" in all_results['results'], "Rule KV-PART2-2727 missing"
        result = all_results['results']["KV-PART2-2727"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART2-2727 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART2-2727 failed"


    def test_rule_kv_part2_2728(self, all_results):
        """
        Test KV-PART2-2728: documentation_required: true
        Priority: CRITICAL
        """
        assert "KV-PART2-2728" in all_results['results'], "Rule KV-PART2-2728 missing"
        result = all_results['results']["KV-PART2-2728"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART2-2728 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART2-2728 failed"


    def test_rule_kv_part2_2729(self, all_results):
        """
        Test KV-PART2-2729: business_review: "Quarterly threshold review"
        Priority: MEDIUM
        """
        assert "KV-PART2-2729" in all_results['results'], "Rule KV-PART2-2729 missing"
        result = all_results['results']["KV-PART2-2729"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART2-2729 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART2-2729 failed"


    def test_rule_kv_part2_2730(self, all_results):
        """
        Test KV-PART2-2730: source_validation: true
        Priority: MEDIUM
        """
        assert "KV-PART2-2730" in all_results['results'], "Rule KV-PART2-2730 missing"
        result = all_results['results']["KV-PART2-2730"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART2-2730 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART2-2730 failed"


    def test_rule_kv_part2_2731(self, all_results):
        """
        Test KV-PART2-2731: formula_verification: true
        Priority: MEDIUM
        """
        assert "KV-PART2-2731" in all_results['results'], "Rule KV-PART2-2731 missing"
        result = all_results['results']["KV-PART2-2731"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART2-2731 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART2-2731 failed"


    def test_rule_kv_part2_2732(self, all_results):
        """
        Test KV-PART2-2732: enabled: true
        Priority: MEDIUM
        """
        assert "KV-PART2-2732" in all_results['results'], "Rule KV-PART2-2732 missing"
        result = all_results['results']["KV-PART2-2732"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART2-2732 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART2-2732 failed"


    def test_rule_kv_part2_2733(self, all_results):
        """
        Test KV-PART2-2733: script: "23_compliance/anti_gaming/dependency_graph_generator.py"
        Priority: CRITICAL
        """
        assert "KV-PART2-2733" in all_results['results'], "Rule KV-PART2-2733 missing"
        result = all_results['results']["KV-PART2-2733"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART2-2733 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART2-2733 failed"


    def test_rule_kv_part2_2734(self, all_results):
        """
        Test KV-PART2-2734: output_directory: "23_compliance/anti_gaming/dependency_maps/"
        Priority: CRITICAL
        """
        assert "KV-PART2-2734" in all_results['results'], "Rule KV-PART2-2734 missing"
        result = all_results['results']["KV-PART2-2734"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART2-2734 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART2-2734 failed"


    def test_rule_kv_part2_2735(self, all_results):
        """
        Test KV-PART2-2735: dot: true
        Priority: MEDIUM
        """
        assert "KV-PART2-2735" in all_results['results'], "Rule KV-PART2-2735 missing"
        result = all_results['results']["KV-PART2-2735"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART2-2735 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART2-2735 failed"


    def test_rule_kv_part2_2736(self, all_results):
        """
        Test KV-PART2-2736: json: true
        Priority: MEDIUM
        """
        assert "KV-PART2-2736" in all_results['results'], "Rule KV-PART2-2736 missing"
        result = all_results['results']["KV-PART2-2736"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART2-2736 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART2-2736 failed"


    def test_rule_kv_part2_2737(self, all_results):
        """
        Test KV-PART2-2737: svg: true
        Priority: MEDIUM
        """
        assert "KV-PART2-2737" in all_results['results'], "Rule KV-PART2-2737 missing"
        result = all_results['results']["KV-PART2-2737"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART2-2737 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART2-2737 failed"


    def test_rule_kv_part2_2738(self, all_results):
        """
        Test KV-PART2-2738: enterprise_dashboard: true
        Priority: MEDIUM
        """
        assert "KV-PART2-2738" in all_results['results'], "Rule KV-PART2-2738 missing"
        result = all_results['results']["KV-PART2-2738"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART2-2738 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART2-2738 failed"


    def test_rule_kv_part2_2739(self, all_results):
        """
        Test KV-PART2-2739: confidential_mapping: true
        Priority: MEDIUM
        """
        assert "KV-PART2-2739" in all_results['results'], "Rule KV-PART2-2739 missing"
        result = all_results['results']["KV-PART2-2739"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART2-2739 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART2-2739 failed"


    def test_rule_kv_part2_2740(self, all_results):
        """
        Test KV-PART2-2740: update_frequency: "Daily"
        Priority: MEDIUM
        """
        assert "KV-PART2-2740" in all_results['results'], "Rule KV-PART2-2740 missing"
        result = all_results['results']["KV-PART2-2740"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART2-2740 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART2-2740 failed"


    def test_rule_kv_part2_2741(self, all_results):
        """
        Test KV-PART2-2741: ci_integration: true
        Priority: MEDIUM
        """
        assert "KV-PART2-2741" in all_results['results'], "Rule KV-PART2-2741 missing"
        result = all_results['results']["KV-PART2-2741"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART2-2741 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART2-2741 failed"


    def test_rule_kv_part2_2742(self, all_results):
        """
        Test KV-PART2-2742: classification: "CONFIDENTIAL"
        Priority: MEDIUM
        """
        assert "KV-PART2-2742" in all_results['results'], "Rule KV-PART2-2742 missing"
        result = all_results['results']["KV-PART2-2742"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART2-2742 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART2-2742 failed"


    def test_rule_kv_part2_2743(self, all_results):
        """
        Test KV-PART2-2743: frequency: "Every 6 months"
        Priority: MEDIUM
        """
        assert "KV-PART2-2743" in all_results['results'], "Rule KV-PART2-2743 missing"
        result = all_results['results']["KV-PART2-2743"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART2-2743 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART2-2743 failed"


    def test_rule_kv_part2_2744(self, all_results):
        """
        Test KV-PART2-2744: last_review: "2025-09-15"
        Priority: MEDIUM
        """
        assert "KV-PART2-2744" in all_results['results'], "Rule KV-PART2-2744 missing"
        result = all_results['results']["KV-PART2-2744"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART2-2744 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART2-2744 failed"


    def test_rule_kv_part2_2745(self, all_results):
        """
        Test KV-PART2-2745: next_review: "2026-03-15"
        Priority: MEDIUM
        """
        assert "KV-PART2-2745" in all_results['results'], "Rule KV-PART2-2745 missing"
        result = all_results['results']["KV-PART2-2745"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART2-2745 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART2-2745 failed"


    def test_rule_kv_part2_2746(self, all_results):
        """
        Test KV-PART2-2746: internal_review: "Every 3 months (zusätzlich)"
        Priority: MEDIUM
        """
        assert "KV-PART2-2746" in all_results['results'], "Rule KV-PART2-2746 missing"
        result = all_results['results']["KV-PART2-2746"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART2-2746 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART2-2746 failed"


    def test_rule_list_part2_2747(self, all_results):
        """
        Test LIST-PART2-2747: List item: "External: Independent third party (nicht Projekt-Maintainer)"
        Priority: MEDIUM
        """
        assert "LIST-PART2-2747" in all_results['results'], "Rule LIST-PART2-2747 missing"
        result = all_results['results']["LIST-PART2-2747"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART2-2747 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART2-2747 failed"


    def test_rule_list_part2_2748(self, all_results):
        """
        Test LIST-PART2-2748: List item: "Internal: Senior Compliance Officer + Legal Review"
        Priority: CRITICAL
        """
        assert "LIST-PART2-2748" in all_results['results'], "Rule LIST-PART2-2748 missing"
        result = all_results['results']["LIST-PART2-2748"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART2-2748 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART2-2748 failed"


    def test_rule_list_part2_2749(self, all_results):
        """
        Test LIST-PART2-2749: List item: "Credentials: Compliance/Audit background erforderlich"
        Priority: CRITICAL
        """
        assert "LIST-PART2-2749" in all_results['results'], "Rule LIST-PART2-2749 missing"
        result = all_results['results']["LIST-PART2-2749"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART2-2749 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART2-2749 failed"


    def test_rule_list_part2_2750(self, all_results):
        """
        Test LIST-PART2-2750: List item: "Clearance: Access to confidential compliance mappings"
        Priority: CRITICAL
        """
        assert "LIST-PART2-2750" in all_results['results'], "Rule LIST-PART2-2750 missing"
        result = all_results['results']["LIST-PART2-2750"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART2-2750 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART2-2750 failed"


    def test_rule_list_part2_2751(self, all_results):
        """
        Test LIST-PART2-2751: List item: "Documentation: 23_compliance/reviews/ + internal audit trail"
        Priority: CRITICAL
        """
        assert "LIST-PART2-2751" in all_results['results'], "Rule LIST-PART2-2751 missing"
        result = all_results['results']["LIST-PART2-2751"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART2-2751 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART2-2751 failed"


    def test_rule_list_part2_2752(self, all_results):
        """
        Test LIST-PART2-2752: List item: "Badge calculation logic verification"
        Priority: MEDIUM
        """
        assert "LIST-PART2-2752" in all_results['results'], "Rule LIST-PART2-2752 missing"
        result = all_results['results']["LIST-PART2-2752"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART2-2752 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART2-2752 failed"


    def test_rule_list_part2_2753(self, all_results):
        """
        Test LIST-PART2-2753: List item: "Circular dependency analysis"
        Priority: MEDIUM
        """
        assert "LIST-PART2-2753" in all_results['results'], "Rule LIST-PART2-2753 missing"
        result = all_results['results']["LIST-PART2-2753"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART2-2753 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART2-2753 failed"


    def test_rule_list_part2_2754(self, all_results):
        """
        Test LIST-PART2-2754: List item: "Business compliance matrix accuracy check"
        Priority: CRITICAL
        """
        assert "LIST-PART2-2754" in all_results['results'], "Rule LIST-PART2-2754 missing"
        result = all_results['results']["LIST-PART2-2754"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART2-2754 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART2-2754 failed"


    def test_rule_list_part2_2755(self, all_results):
        """
        Test LIST-PART2-2755: List item: "Anti-gaming control effectiveness"
        Priority: MEDIUM
        """
        assert "LIST-PART2-2755" in all_results['results'], "Rule LIST-PART2-2755 missing"
        result = all_results['results']["LIST-PART2-2755"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART2-2755 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART2-2755 failed"


    def test_rule_list_part2_2756(self, all_results):
        """
        Test LIST-PART2-2756: List item: "Internal audit trail validation"
        Priority: MEDIUM
        """
        assert "LIST-PART2-2756" in all_results['results'], "Rule LIST-PART2-2756 missing"
        result = all_results['results']["LIST-PART2-2756"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART2-2756 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART2-2756 failed"


    def test_rule_list_part2_2757(self, all_results):
        """
        Test LIST-PART2-2757: List item: "Regulatory mapping completeness"
        Priority: MEDIUM
        """
        assert "LIST-PART2-2757" in all_results['results'], "Rule LIST-PART2-2757 missing"
        result = all_results['results']["LIST-PART2-2757"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART2-2757 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART2-2757 failed"


    def test_rule_list_part2_2758(self, all_results):
        """
        Test LIST-PART2-2758: List item: "Dependency graph validation (confidential)"
        Priority: MEDIUM
        """
        assert "LIST-PART2-2758" in all_results['results'], "Rule LIST-PART2-2758 missing"
        result = all_results['results']["LIST-PART2-2758"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART2-2758 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART2-2758 failed"


    def test_rule_list_part2_2759(self, all_results):
        """
        Test LIST-PART2-2759: List item: "Business logic gaming assessment"
        Priority: MEDIUM
        """
        assert "LIST-PART2-2759" in all_results['results'], "Rule LIST-PART2-2759 missing"
        result = all_results['results']["LIST-PART2-2759"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART2-2759 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART2-2759 failed"


    def test_rule_list_part2_2760(self, all_results):
        """
        Test LIST-PART2-2760: List item: **Circular Dependencies:** Enterprise-Grade Checks + tägliche Full-Sc
        Priority: MEDIUM
        """
        assert "LIST-PART2-2760" in all_results['results'], "Rule LIST-PART2-2760 missing"
        result = all_results['results']["LIST-PART2-2760"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART2-2760 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART2-2760 failed"


    def test_rule_list_part2_2761(self, all_results):
        """
        Test LIST-PART2-2761: List item: **Business Overfitting:** Wöchentliche + monatliche manuelle Reviews 
        Priority: MEDIUM
        """
        assert "LIST-PART2-2761" in all_results['results'], "Rule LIST-PART2-2761 missing"
        result = all_results['results']["LIST-PART2-2761"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART2-2761 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART2-2761 failed"


    def test_rule_list_part2_2762(self, all_results):
        """
        Test LIST-PART2-2762: List item: **Internal Gaming:** Zusätzliche 3-Monats interne Reviews
        Priority: MEDIUM
        """
        assert "LIST-PART2-2762" in all_results['results'], "Rule LIST-PART2-2762 missing"
        result = all_results['results']["LIST-PART2-2762"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART2-2762 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART2-2762 failed"


    def test_rule_list_part2_2763(self, all_results):
        """
        Test LIST-PART2-2763: List item: **Regulatory Gaming:** Spezielle Checks für Jurisdictions-Mappings
        Priority: MEDIUM
        """
        assert "LIST-PART2-2763" in all_results['results'], "Rule LIST-PART2-2763 missing"
        result = all_results['results']["LIST-PART2-2763"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART2-2763 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART2-2763 failed"


    def test_rule_list_part2_2764(self, all_results):
        """
        Test LIST-PART2-2764: List item: **Audit Trail Gaming:** Blockchain-verifizierte Evidence-Ketten
        Priority: MEDIUM
        """
        assert "LIST-PART2-2764" in all_results['results'], "Rule LIST-PART2-2764 missing"
        result = all_results['results']["LIST-PART2-2764"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART2-2764 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART2-2764 failed"


    def test_rule_list_part2_2765(self, all_results):
        """
        Test LIST-PART2-2765: List item: **Dependency Visualization:** Enterprise Dashboard mit Confidential M
        Priority: MEDIUM
        """
        assert "LIST-PART2-2765" in all_results['results'], "Rule LIST-PART2-2765 missing"
        result = all_results['results']["LIST-PART2-2765"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART2-2765 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART2-2765 failed"


    def test_rule_text_part2_2766(self, all_results):
        """
        Test TEXT-PART2-2766: "critical": 0,
        Priority: CRITICAL
        """
        assert "TEXT-PART2-2766" in all_results['results'], "Rule TEXT-PART2-2766 missing"
        result = all_results['results']["TEXT-PART2-2766"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule TEXT-PART2-2766 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule TEXT-PART2-2766 failed"


    def test_rule_text_part2_2767(self, all_results):
        """
        Test TEXT-PART2-2767: "review_status_check": "required",
        Priority: MEDIUM
        """
        assert "TEXT-PART2-2767" in all_results['results'], "Rule TEXT-PART2-2767 missing"
        result = all_results['results']["TEXT-PART2-2767"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule TEXT-PART2-2767 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule TEXT-PART2-2767 failed"


    def test_rule_kv_part2_2768(self, all_results):
        """
        Test KV-PART2-2768: name: Enterprise Review Status Validation
        Priority: MEDIUM
        """
        assert "KV-PART2-2768" in all_results['results'], "Rule KV-PART2-2768 missing"
        result = all_results['results']["KV-PART2-2768"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART2-2768 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART2-2768 failed"


    def test_rule_kv_part2_2769(self, all_results):
        """
        Test KV-PART2-2769: on: [pull_request, schedule]
        Priority: MEDIUM
        """
        assert "KV-PART2-2769" in all_results['results'], "Rule KV-PART2-2769 missing"
        result = all_results['results']["KV-PART2-2769"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART2-2769 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART2-2769 failed"


    def test_rule_list_part2_2770(self, all_results):
        """
        Test LIST-PART2-2770: List item: name: Validate Internal Review Currency
        Priority: MEDIUM
        """
        assert "LIST-PART2-2770" in all_results['results'], "Rule LIST-PART2-2770 missing"
        result = all_results['results']["LIST-PART2-2770"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART2-2770 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART2-2770 failed"


    def test_rule_list_part2_2771(self, all_results):
        """
        Test LIST-PART2-2771: List item: name: Validate Business Compliance
        Priority: CRITICAL
        """
        assert "LIST-PART2-2771" in all_results['results'], "Rule LIST-PART2-2771 missing"
        result = all_results['results']["LIST-PART2-2771"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART2-2771 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART2-2771 failed"


    def test_rule_list_part2_2772(self, all_results):
        """
        Test LIST-PART2-2772: List item: name: Update Review Log
        Priority: MEDIUM
        """
        assert "LIST-PART2-2772" in all_results['results'], "Rule LIST-PART2-2772 missing"
        result = all_results['results']["LIST-PART2-2772"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART2-2772 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART2-2772 failed"


    def test_rule_kv_part2_2773(self, all_results):
        """
        Test KV-PART2-2773: version: "2.1"
        Priority: MEDIUM
        """
        assert "KV-PART2-2773" in all_results['results'], "Rule KV-PART2-2773 missing"
        result = all_results['results']["KV-PART2-2773"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART2-2773 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART2-2773 failed"


    def test_rule_kv_part2_2774(self, all_results):
        """
        Test KV-PART2-2774: date: "2025-09-15"
        Priority: MEDIUM
        """
        assert "KV-PART2-2774" in all_results['results'], "Rule KV-PART2-2774 missing"
        result = all_results['results']["KV-PART2-2774"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART2-2774 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART2-2774 failed"


    def test_rule_kv_part2_2775(self, all_results):
        """
        Test KV-PART2-2775: deprecated: false
        Priority: MEDIUM
        """
        assert "KV-PART2-2775" in all_results['results'], "Rule KV-PART2-2775 missing"
        result = all_results['results']["KV-PART2-2775"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART2-2775 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART2-2775 failed"


    def test_rule_kv_part2_2776(self, all_results):
        """
        Test KV-PART2-2776: regulatory_basis: "EU-Gesamtpaket 2024/2025 + Brexit-Updates"
        Priority: MEDIUM
        """
        assert "KV-PART2-2776" in all_results['results'], "Rule KV-PART2-2776 missing"
        result = all_results['results']["KV-PART2-2776"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART2-2776 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART2-2776 failed"


    def test_rule_kv_part2_2777(self, all_results):
        """
        Test KV-PART2-2777: classification: "CONFIDENTIAL - Internal Compliance Mappings"
        Priority: CRITICAL
        """
        assert "KV-PART2-2777" in all_results['results'], "Rule KV-PART2-2777 missing"
        result = all_results['results']["KV-PART2-2777"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART2-2777 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART2-2777 failed"


    def test_rule_list_part2_2778(self, all_results):
        """
        Test LIST-PART2-2778: List item: id: "eidas_v1_old"
        Priority: MEDIUM
        """
        assert "LIST-PART2-2778" in all_results['results'], "Rule LIST-PART2-2778 missing"
        result = all_results['results']["LIST-PART2-2778"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART2-2778 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART2-2778 failed"


    def test_rule_kv_part2_2779(self, all_results):
        """
        Test KV-PART2-2779: name: "eIDAS 910/2014 (Original)"
        Priority: MEDIUM
        """
        assert "KV-PART2-2779" in all_results['results'], "Rule KV-PART2-2779 missing"
        result = all_results['results']["KV-PART2-2779"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART2-2779 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART2-2779 failed"


    def test_rule_kv_part2_2780(self, all_results):
        """
        Test KV-PART2-2780: status: "deprecated"
        Priority: MEDIUM
        """
        assert "KV-PART2-2780" in all_results['results'], "Rule KV-PART2-2780 missing"
        result = all_results['results']["KV-PART2-2780"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART2-2780 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART2-2780 failed"


    def test_rule_kv_part2_2781(self, all_results):
        """
        Test KV-PART2-2781: deprecated: true
        Priority: MEDIUM
        """
        assert "KV-PART2-2781" in all_results['results'], "Rule KV-PART2-2781 missing"
        result = all_results['results']["KV-PART2-2781"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART2-2781 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART2-2781 failed"


    def test_rule_kv_part2_2782(self, all_results):
        """
        Test KV-PART2-2782: replaced_by: "eidas2_eudi"
        Priority: MEDIUM
        """
        assert "KV-PART2-2782" in all_results['results'], "Rule KV-PART2-2782 missing"
        result = all_results['results']["KV-PART2-2782"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART2-2782 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART2-2782 failed"


    def test_rule_kv_part2_2783(self, all_results):
        """
        Test KV-PART2-2783: deprecation_date: "2025-06-01"
        Priority: MEDIUM
        """
        assert "KV-PART2-2783" in all_results['results'], "Rule KV-PART2-2783 missing"
        result = all_results['results']["KV-PART2-2783"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART2-2783 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART2-2783 failed"


    def test_rule_kv_part2_2784(self, all_results):
        """
        Test KV-PART2-2784: migration_deadline: "2026-05-20"
        Priority: MEDIUM
        """
        assert "KV-PART2-2784" in all_results['results'], "Rule KV-PART2-2784 missing"
        result = all_results['results']["KV-PART2-2784"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART2-2784 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART2-2784 failed"


    def test_rule_kv_part2_2785(self, all_results):
        """
        Test KV-PART2-2785: name: "eIDAS 2.0/EUDI"
        Priority: MEDIUM
        """
        assert "KV-PART2-2785" in all_results['results'], "Rule KV-PART2-2785 missing"
        result = all_results['results']["KV-PART2-2785"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART2-2785 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART2-2785 failed"


    def test_rule_kv_part2_2786(self, all_results):
        """
        Test KV-PART2-2786: path: "23_compliance/mappings/eidas2_eudi/"
        Priority: CRITICAL
        """
        assert "KV-PART2-2786" in all_results['results'], "Rule KV-PART2-2786 missing"
        result = all_results['results']["KV-PART2-2786"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART2-2786 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART2-2786 failed"


    def test_rule_kv_part2_2787(self, all_results):
        """
        Test KV-PART2-2787: deprecated: false
        Priority: MEDIUM
        """
        assert "KV-PART2-2787" in all_results['results'], "Rule KV-PART2-2787 missing"
        result = all_results['results']["KV-PART2-2787"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART2-2787 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART2-2787 failed"


    def test_rule_kv_part2_2788(self, all_results):
        """
        Test KV-PART2-2788: business_priority: "HIGH"
        Priority: MEDIUM
        """
        assert "KV-PART2-2788" in all_results['results'], "Rule KV-PART2-2788 missing"
        result = all_results['results']["KV-PART2-2788"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART2-2788 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART2-2788 failed"


    def test_rule_kv_part2_2789(self, all_results):
        """
        Test KV-PART2-2789: name: "GDPR (EU) 2016/679"
        Priority: MEDIUM
        """
        assert "KV-PART2-2789" in all_results['results'], "Rule KV-PART2-2789 missing"
        result = all_results['results']["KV-PART2-2789"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART2-2789 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART2-2789 failed"


    def test_rule_kv_part2_2790(self, all_results):
        """
        Test KV-PART2-2790: path: "23_compliance/mappings/gdpr/"
        Priority: CRITICAL
        """
        assert "KV-PART2-2790" in all_results['results'], "Rule KV-PART2-2790 missing"
        result = all_results['results']["KV-PART2-2790"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART2-2790 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART2-2790 failed"


    def test_rule_kv_part2_2791(self, all_results):
        """
        Test KV-PART2-2791: deprecated: false
        Priority: MEDIUM
        """
        assert "KV-PART2-2791" in all_results['results'], "Rule KV-PART2-2791 missing"
        result = all_results['results']["KV-PART2-2791"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART2-2791 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART2-2791 failed"


    def test_rule_text_part2_2792(self, all_results):
        """
        Test TEXT-PART2-2792: business_priority: "CRITICAL"
        Priority: CRITICAL
        """
        assert "TEXT-PART2-2792" in all_results['results'], "Rule TEXT-PART2-2792 missing"
        result = all_results['results']["TEXT-PART2-2792"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule TEXT-PART2-2792 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule TEXT-PART2-2792 failed"


    def test_rule_kv_part2_2793(self, all_results):
        """
        Test KV-PART2-2793: name: "MiCA (EU) 2023/1114"
        Priority: MEDIUM
        """
        assert "KV-PART2-2793" in all_results['results'], "Rule KV-PART2-2793 missing"
        result = all_results['results']["KV-PART2-2793"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART2-2793 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART2-2793 failed"


    def test_rule_kv_part2_2794(self, all_results):
        """
        Test KV-PART2-2794: path: "23_compliance/mappings/mica/"
        Priority: CRITICAL
        """
        assert "KV-PART2-2794" in all_results['results'], "Rule KV-PART2-2794 missing"
        result = all_results['results']["KV-PART2-2794"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART2-2794 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART2-2794 failed"


    def test_rule_kv_part2_2795(self, all_results):
        """
        Test KV-PART2-2795: deprecated: false
        Priority: MEDIUM
        """
        assert "KV-PART2-2795" in all_results['results'], "Rule KV-PART2-2795 missing"
        result = all_results['results']["KV-PART2-2795"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART2-2795 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART2-2795 failed"


    def test_rule_text_part2_2796(self, all_results):
        """
        Test TEXT-PART2-2796: business_priority: "CRITICAL"
        Priority: CRITICAL
        """
        assert "TEXT-PART2-2796" in all_results['results'], "Rule TEXT-PART2-2796 missing"
        result = all_results['results']["TEXT-PART2-2796"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule TEXT-PART2-2796 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule TEXT-PART2-2796 failed"


    def test_rule_kv_part2_2797(self, all_results):
        """
        Test KV-PART2-2797: name: "NIS2 (EU) 2022/2555"
        Priority: MEDIUM
        """
        assert "KV-PART2-2797" in all_results['results'], "Rule KV-PART2-2797 missing"
        result = all_results['results']["KV-PART2-2797"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART2-2797 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART2-2797 failed"


    def test_rule_kv_part2_2798(self, all_results):
        """
        Test KV-PART2-2798: path: "23_compliance/mappings/nis2/"
        Priority: CRITICAL
        """
        assert "KV-PART2-2798" in all_results['results'], "Rule KV-PART2-2798 missing"
        result = all_results['results']["KV-PART2-2798"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART2-2798 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART2-2798 failed"


    def test_rule_kv_part2_2799(self, all_results):
        """
        Test KV-PART2-2799: deprecated: false
        Priority: MEDIUM
        """
        assert "KV-PART2-2799" in all_results['results'], "Rule KV-PART2-2799 missing"
        result = all_results['results']["KV-PART2-2799"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART2-2799 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART2-2799 failed"


    def test_rule_kv_part2_2800(self, all_results):
        """
        Test KV-PART2-2800: business_priority: "HIGH"
        Priority: MEDIUM
        """
        assert "KV-PART2-2800" in all_results['results'], "Rule KV-PART2-2800 missing"
        result = all_results['results']["KV-PART2-2800"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART2-2800 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART2-2800 failed"


    def test_rule_kv_part2_2801(self, all_results):
        """
        Test KV-PART2-2801: name: "AI Act (EU) 2024/1689"
        Priority: MEDIUM
        """
        assert "KV-PART2-2801" in all_results['results'], "Rule KV-PART2-2801 missing"
        result = all_results['results']["KV-PART2-2801"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART2-2801 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART2-2801 failed"


    def test_rule_kv_part2_2802(self, all_results):
        """
        Test KV-PART2-2802: path: "23_compliance/mappings/ai_act/"
        Priority: CRITICAL
        """
        assert "KV-PART2-2802" in all_results['results'], "Rule KV-PART2-2802 missing"
        result = all_results['results']["KV-PART2-2802"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART2-2802 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART2-2802 failed"


    def test_rule_kv_part2_2803(self, all_results):
        """
        Test KV-PART2-2803: deprecated: false
        Priority: MEDIUM
        """
        assert "KV-PART2-2803" in all_results['results'], "Rule KV-PART2-2803 missing"
        result = all_results['results']["KV-PART2-2803"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART2-2803 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART2-2803 failed"


    def test_rule_kv_part2_2804(self, all_results):
        """
        Test KV-PART2-2804: business_priority: "HIGH"
        Priority: MEDIUM
        """
        assert "KV-PART2-2804" in all_results['results'], "Rule KV-PART2-2804 missing"
        result = all_results['results']["KV-PART2-2804"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART2-2804 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART2-2804 failed"


    def test_rule_kv_part2_2805(self, all_results):
        """
        Test KV-PART2-2805: name: "DORA (EU) 2022/2554"
        Priority: MEDIUM
        """
        assert "KV-PART2-2805" in all_results['results'], "Rule KV-PART2-2805 missing"
        result = all_results['results']["KV-PART2-2805"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART2-2805 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART2-2805 failed"


    def test_rule_kv_part2_2806(self, all_results):
        """
        Test KV-PART2-2806: path: "23_compliance/mappings/dora/"
        Priority: CRITICAL
        """
        assert "KV-PART2-2806" in all_results['results'], "Rule KV-PART2-2806 missing"
        result = all_results['results']["KV-PART2-2806"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART2-2806 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART2-2806 failed"


    def test_rule_kv_part2_2807(self, all_results):
        """
        Test KV-PART2-2807: deprecated: false
        Priority: MEDIUM
        """
        assert "KV-PART2-2807" in all_results['results'], "Rule KV-PART2-2807 missing"
        result = all_results['results']["KV-PART2-2807"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART2-2807 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART2-2807 failed"


    def test_rule_kv_part2_2808(self, all_results):
        """
        Test KV-PART2-2808: business_priority: "HIGH"
        Priority: MEDIUM
        """
        assert "KV-PART2-2808" in all_results['results'], "Rule KV-PART2-2808 missing"
        result = all_results['results']["KV-PART2-2808"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART2-2808 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART2-2808 failed"


    def test_rule_kv_part2_2809(self, all_results):
        """
        Test KV-PART2-2809: name: "PSD3/PSR (EU)"
        Priority: MEDIUM
        """
        assert "KV-PART2-2809" in all_results['results'], "Rule KV-PART2-2809 missing"
        result = all_results['results']["KV-PART2-2809"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART2-2809 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART2-2809 failed"


    def test_rule_kv_part2_2810(self, all_results):
        """
        Test KV-PART2-2810: path: "23_compliance/mappings/psd3/"
        Priority: CRITICAL
        """
        assert "KV-PART2-2810" in all_results['results'], "Rule KV-PART2-2810 missing"
        result = all_results['results']["KV-PART2-2810"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART2-2810 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART2-2810 failed"


    def test_rule_kv_part2_2811(self, all_results):
        """
        Test KV-PART2-2811: deprecated: false
        Priority: MEDIUM
        """
        assert "KV-PART2-2811" in all_results['results'], "Rule KV-PART2-2811 missing"
        result = all_results['results']["KV-PART2-2811"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART2-2811 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART2-2811 failed"


    def test_rule_kv_part2_2812(self, all_results):
        """
        Test KV-PART2-2812: business_priority: "MEDIUM"
        Priority: MEDIUM
        """
        assert "KV-PART2-2812" in all_results['results'], "Rule KV-PART2-2812 missing"
        result = all_results['results']["KV-PART2-2812"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART2-2812 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART2-2812 failed"


    def test_rule_kv_part2_2813(self, all_results):
        """
        Test KV-PART2-2813: name: "PSD2 (EU)"
        Priority: MEDIUM
        """
        assert "KV-PART2-2813" in all_results['results'], "Rule KV-PART2-2813 missing"
        result = all_results['results']["KV-PART2-2813"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART2-2813 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART2-2813 failed"


    def test_rule_kv_part2_2814(self, all_results):
        """
        Test KV-PART2-2814: path: "23_compliance/mappings/psd2/"
        Priority: CRITICAL
        """
        assert "KV-PART2-2814" in all_results['results'], "Rule KV-PART2-2814 missing"
        result = all_results['results']["KV-PART2-2814"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART2-2814 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART2-2814 failed"


    def test_rule_kv_part2_2815(self, all_results):
        """
        Test KV-PART2-2815: deprecated: false
        Priority: MEDIUM
        """
        assert "KV-PART2-2815" in all_results['results'], "Rule KV-PART2-2815 missing"
        result = all_results['results']["KV-PART2-2815"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART2-2815 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART2-2815 failed"


    def test_rule_kv_part2_2816(self, all_results):
        """
        Test KV-PART2-2816: business_priority: "MEDIUM"
        Priority: MEDIUM
        """
        assert "KV-PART2-2816" in all_results['results'], "Rule KV-PART2-2816 missing"
        result = all_results['results']["KV-PART2-2816"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART2-2816 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART2-2816 failed"


    def test_rule_kv_part2_2817(self, all_results):
        """
        Test KV-PART2-2817: successor: "psd3"
        Priority: MEDIUM
        """
        assert "KV-PART2-2817" in all_results['results'], "Rule KV-PART2-2817 missing"
        result = all_results['results']["KV-PART2-2817"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART2-2817 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART2-2817 failed"


    def test_rule_kv_part2_2818(self, all_results):
        """
        Test KV-PART2-2818: name: "Data Act (EU)"
        Priority: MEDIUM
        """
        assert "KV-PART2-2818" in all_results['results'], "Rule KV-PART2-2818 missing"
        result = all_results['results']["KV-PART2-2818"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART2-2818 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART2-2818 failed"


    def test_rule_kv_part2_2819(self, all_results):
        """
        Test KV-PART2-2819: path: "23_compliance/mappings/data_act/"
        Priority: CRITICAL
        """
        assert "KV-PART2-2819" in all_results['results'], "Rule KV-PART2-2819 missing"
        result = all_results['results']["KV-PART2-2819"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART2-2819 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART2-2819 failed"


    def test_rule_kv_part2_2820(self, all_results):
        """
        Test KV-PART2-2820: deprecated: false
        Priority: MEDIUM
        """
        assert "KV-PART2-2820" in all_results['results'], "Rule KV-PART2-2820 missing"
        result = all_results['results']["KV-PART2-2820"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART2-2820 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART2-2820 failed"


    def test_rule_kv_part2_2821(self, all_results):
        """
        Test KV-PART2-2821: business_priority: "MEDIUM"
        Priority: MEDIUM
        """
        assert "KV-PART2-2821" in all_results['results'], "Rule KV-PART2-2821 missing"
        result = all_results['results']["KV-PART2-2821"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART2-2821 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART2-2821 failed"


    def test_rule_kv_part2_2822(self, all_results):
        """
        Test KV-PART2-2822: name: "6th AMLD/AMLR"
        Priority: MEDIUM
        """
        assert "KV-PART2-2822" in all_results['results'], "Rule KV-PART2-2822 missing"
        result = all_results['results']["KV-PART2-2822"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART2-2822 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART2-2822 failed"


    def test_rule_kv_part2_2823(self, all_results):
        """
        Test KV-PART2-2823: path: "23_compliance/mappings/aml6_amlr/"
        Priority: CRITICAL
        """
        assert "KV-PART2-2823" in all_results['results'], "Rule KV-PART2-2823 missing"
        result = all_results['results']["KV-PART2-2823"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART2-2823 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART2-2823 failed"


    def test_rule_kv_part2_2824(self, all_results):
        """
        Test KV-PART2-2824: deprecated: false
        Priority: MEDIUM
        """
        assert "KV-PART2-2824" in all_results['results'], "Rule KV-PART2-2824 missing"
        result = all_results['results']["KV-PART2-2824"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART2-2824 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART2-2824 failed"


    def test_rule_kv_part2_2825(self, all_results):
        """
        Test KV-PART2-2825: business_priority: "HIGH"
        Priority: MEDIUM
        """
        assert "KV-PART2-2825" in all_results['results'], "Rule KV-PART2-2825 missing"
        result = all_results['results']["KV-PART2-2825"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART2-2825 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART2-2825 failed"


    def test_rule_kv_part2_2826(self, all_results):
        """
        Test KV-PART2-2826: name: "AMLA (EU Aufsicht)"
        Priority: MEDIUM
        """
        assert "KV-PART2-2826" in all_results['results'], "Rule KV-PART2-2826 missing"
        result = all_results['results']["KV-PART2-2826"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART2-2826 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART2-2826 failed"


    def test_rule_kv_part2_2827(self, all_results):
        """
        Test KV-PART2-2827: path: "23_compliance/mappings/amla/"
        Priority: CRITICAL
        """
        assert "KV-PART2-2827" in all_results['results'], "Rule KV-PART2-2827 missing"
        result = all_results['results']["KV-PART2-2827"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART2-2827 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART2-2827 failed"


    def test_rule_kv_part2_2828(self, all_results):
        """
        Test KV-PART2-2828: deprecated: false
        Priority: MEDIUM
        """
        assert "KV-PART2-2828" in all_results['results'], "Rule KV-PART2-2828 missing"
        result = all_results['results']["KV-PART2-2828"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART2-2828 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART2-2828 failed"


    def test_rule_kv_part2_2829(self, all_results):
        """
        Test KV-PART2-2829: business_priority: "HIGH"
        Priority: MEDIUM
        """
        assert "KV-PART2-2829" in all_results['results'], "Rule KV-PART2-2829 missing"
        result = all_results['results']["KV-PART2-2829"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART2-2829 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART2-2829 failed"


    def test_rule_kv_part2_2830(self, all_results):
        """
        Test KV-PART2-2830: name: "ISO/IEC 42001:2023 (AI Management System)"
        Priority: MEDIUM
        """
        assert "KV-PART2-2830" in all_results['results'], "Rule KV-PART2-2830 missing"
        result = all_results['results']["KV-PART2-2830"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART2-2830 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART2-2830 failed"


    def test_rule_kv_part2_2831(self, all_results):
        """
        Test KV-PART2-2831: path: "23_compliance/mappings/iso_42001/"
        Priority: CRITICAL
        """
        assert "KV-PART2-2831" in all_results['results'], "Rule KV-PART2-2831 missing"
        result = all_results['results']["KV-PART2-2831"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART2-2831 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART2-2831 failed"


    def test_rule_kv_part2_2832(self, all_results):
        """
        Test KV-PART2-2832: deprecated: false
        Priority: MEDIUM
        """
        assert "KV-PART2-2832" in all_results['results'], "Rule KV-PART2-2832 missing"
        result = all_results['results']["KV-PART2-2832"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART2-2832 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART2-2832 failed"


    def test_rule_list_part2_2833(self, all_results):
        """
        Test LIST-PART2-2833: List item: generated:* 2025-09-30T12:02:08Z
        Priority: MEDIUM
        """
        assert "LIST-PART2-2833" in all_results['results'], "Rule LIST-PART2-2833 missing"
        result = all_results['results']["LIST-PART2-2833"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART2-2833 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART2-2833 failed"


    def test_rule_list_part2_2834(self, all_results):
        """
        Test LIST-PART2-2834: List item: *Bau-Regel:** Wird einer dieser Pfade nicht erzeugt → **FAIL** (Exit 
        Priority: MEDIUM
        """
        assert "LIST-PART2-2834" in all_results['results'], "Rule LIST-PART2-2834 missing"
        result = all_results['results']["LIST-PART2-2834"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART2-2834 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART2-2834 failed"


    def test_rule_list_part2_2835(self, all_results):
        """
        Test LIST-PART2-2835: List item: generated:* 2025-09-30T12:02:08Z
        Priority: MEDIUM
        """
        assert "LIST-PART2-2835" in all_results['results'], "Rule LIST-PART2-2835 missing"
        result = all_results['results']["LIST-PART2-2835"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART2-2835 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART2-2835 failed"


    def test_rule_list_part2_2836(self, all_results):
        """
        Test LIST-PART2-2836: List item: module.yaml* enthält mindestens: `name`, `owner`, `version`, `status`
        Priority: MEDIUM
        """
        assert "LIST-PART2-2836" in all_results['results'], "Rule LIST-PART2-2836 missing"
        result = all_results['results']["LIST-PART2-2836"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART2-2836 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART2-2836 failed"


    def test_rule_list_part2_2837(self, all_results):
        """
        Test LIST-PART2-2837: List item: generated:* 2025-09-30T12:02:08Z
        Priority: MEDIUM
        """
        assert "LIST-PART2-2837" in all_results['results'], "Rule LIST-PART2-2837 missing"
        result = all_results['results']["LIST-PART2-2837"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART2-2837 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART2-2837 failed"


    def test_rule_list_part2_2838(self, all_results):
        """
        Test LIST-PART2-2838: List item: "internationalization/jurisdiction_specific/zh/技术文档/"
        Priority: MEDIUM
        """
        assert "LIST-PART2-2838" in all_results['results'], "Rule LIST-PART2-2838 missing"
        result = all_results['results']["LIST-PART2-2838"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART2-2838 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART2-2838 failed"


    def test_rule_kv_part2_2839(self, all_results):
        """
        Test KV-PART2-2839: __Regel__: `max_depth` ist *erlaubte* Tiefe. Pfade unter `disabled:` dürfen **ni
        Priority: MEDIUM
        """
        assert "KV-PART2-2839" in all_results['results'], "Rule KV-PART2-2839 missing"
        result = all_results['results']["KV-PART2-2839"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART2-2839 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART2-2839 failed"


    def test_rule_list_part2_2840(self, all_results):
        """
        Test LIST-PART2-2840: List item: generated:* 2025-09-30T12:02:08Z
        Priority: MEDIUM
        """
        assert "LIST-PART2-2840" in all_results['results'], "Rule LIST-PART2-2840 missing"
        result = all_results['results']["LIST-PART2-2840"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART2-2840 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART2-2840 failed"


    def test_rule_list_part2_2841(self, all_results):
        """
        Test LIST-PART2-2841: List item: *Zuordnung:** Pro Modul werden S01–S16 auf die vorhandenen Ordner gem
        Priority: CRITICAL
        """
        assert "LIST-PART2-2841" in all_results['results'], "Rule LIST-PART2-2841 missing"
        result = all_results['results']["LIST-PART2-2841"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART2-2841 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART2-2841 failed"


    def test_rule_list_part2_2842(self, all_results):
        """
        Test LIST-PART2-2842: List item: generated:* 2025-09-30T12:05:53Z
        Priority: MEDIUM
        """
        assert "LIST-PART2-2842" in all_results['results'], "Rule LIST-PART2-2842 missing"
        result = all_results['results']["LIST-PART2-2842"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART2-2842 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART2-2842 failed"


    def test_rule_list_part2_2843(self, all_results):
        """
        Test LIST-PART2-2843: List item: **chat_ingest/**: von `registry/logs/` → **`registry/intake/chat_inge
        Priority: MEDIUM
        """
        assert "LIST-PART2-2843" in all_results['results'], "Rule LIST-PART2-2843 missing"
        result = all_results['results']["LIST-PART2-2843"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART2-2843 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART2-2843 failed"


    def test_rule_list_part2_2844(self, all_results):
        """
        Test LIST-PART2-2844: List item: **registry_audit.yaml**: von `registry/logs/` → **`23_compliance/evid
        Priority: CRITICAL
        """
        assert "LIST-PART2-2844" in all_results['results'], "Rule LIST-PART2-2844 missing"
        result = all_results['results']["LIST-PART2-2844"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART2-2844 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART2-2844 failed"


    def test_rule_list_part2_2845(self, all_results):
        """
        Test LIST-PART2-2845: List item: **integrity_checksums.json**: von `registry/logs/` → **`registry/mani
        Priority: MEDIUM
        """
        assert "LIST-PART2-2845" in all_results['results'], "Rule LIST-PART2-2845 missing"
        result = all_results['results']["LIST-PART2-2845"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART2-2845 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART2-2845 failed"


    def test_rule_list_part2_2846(self, all_results):
        """
        Test LIST-PART2-2846: List item: `registry/logs/`: **nur** `*.log` oder `*.log.jsonl` (append-only). K
        Priority: MEDIUM
        """
        assert "LIST-PART2-2846" in all_results['results'], "Rule LIST-PART2-2846 missing"
        result = all_results['results']["LIST-PART2-2846"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART2-2846 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART2-2846 failed"


    def test_rule_list_part2_2847(self, all_results):
        """
        Test LIST-PART2-2847: List item: `registry/locks/`: write-once / append-only (Owner/Lock/Hash-Kette). 
        Priority: MEDIUM
        """
        assert "LIST-PART2-2847" in all_results['results'], "Rule LIST-PART2-2847 missing"
        result = all_results['results']["LIST-PART2-2847"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART2-2847 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART2-2847 failed"


    def test_rule_list_part2_2848(self, all_results):
        """
        Test LIST-PART2-2848: List item: `registry/manifests/`: berechnete Zustände/Indexe/Checksums (mutable,
        Priority: MEDIUM
        """
        assert "LIST-PART2-2848" in all_results['results'], "Rule LIST-PART2-2848 missing"
        result = all_results['results']["LIST-PART2-2848"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART2-2848 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART2-2848 failed"


    def test_rule_list_part2_2849(self, all_results):
        """
        Test LIST-PART2-2849: List item: `registry/intake/`: Eingangsdaten (z. B. Chat-Dateien), werden nach V
        Priority: MEDIUM
        """
        assert "LIST-PART2-2849" in all_results['results'], "Rule LIST-PART2-2849 missing"
        result = all_results['results']["LIST-PART2-2849"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART2-2849 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART2-2849 failed"


    def test_rule_list_part2_2850(self, all_results):
        """
        Test LIST-PART2-2850: List item: **FAIL (Exit 24)**, wenn
        Priority: MEDIUM
        """
        assert "LIST-PART2-2850" in all_results['results'], "Rule LIST-PART2-2850 missing"
        result = all_results['results']["LIST-PART2-2850"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART2-2850 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART2-2850 failed"


    def test_rule_list_part2_2851(self, all_results):
        """
        Test LIST-PART2-2851: List item: unter `registry/logs/` Dateien ≠ `*.log` / `*.log.jsonl` liegen
        Priority: MEDIUM
        """
        assert "LIST-PART2-2851" in all_results['results'], "Rule LIST-PART2-2851 missing"
        result = all_results['results']["LIST-PART2-2851"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART2-2851 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART2-2851 failed"


    def test_rule_list_part2_2852(self, all_results):
        """
        Test LIST-PART2-2852: List item: `registry/locks/` fehlt oder unsignierte Änderungen erkannt werden
        Priority: MEDIUM
        """
        assert "LIST-PART2-2852" in all_results['results'], "Rule LIST-PART2-2852 missing"
        result = all_results['results']["LIST-PART2-2852"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART2-2852 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART2-2852 failed"


    def test_rule_list_part2_2853(self, all_results):
        """
        Test LIST-PART2-2853: List item: `integrity_checksums.json` nicht unter `registry/manifests/` liegt
        Priority: MEDIUM
        """
        assert "LIST-PART2-2853" in all_results['results'], "Rule LIST-PART2-2853 missing"
        result = all_results['results']["LIST-PART2-2853"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART2-2853 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART2-2853 failed"


    def test_rule_list_part2_2854(self, all_results):
        """
        Test LIST-PART2-2854: List item: `chat_ingest/` nicht unter `registry/intake/` liegt
        Priority: MEDIUM
        """
        assert "LIST-PART2-2854" in all_results['results'], "Rule LIST-PART2-2854 missing"
        result = all_results['results']["LIST-PART2-2854"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART2-2854 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART2-2854 failed"


    def test_rule_list_part2_2855(self, all_results):
        """
        Test LIST-PART2-2855: List item: Gate-Datei (Beispiel): `24_meta_orchestration/triggers/ci/gates/struc
        Priority: MEDIUM
        """
        assert "LIST-PART2-2855" in all_results['results'], "Rule LIST-PART2-2855 missing"
        result = all_results['results']["LIST-PART2-2855"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART2-2855 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART2-2855 failed"


    def test_rule_list_part2_2856(self, all_results):
        """
        Test LIST-PART2-2856: List item: Die 6 Chat-Dateien aus `registry/intake/chat_ingest/` werden durch de
        Priority: CRITICAL
        """
        assert "LIST-PART2-2856" in all_results['results'], "Rule LIST-PART2-2856 missing"
        result = all_results['results']["LIST-PART2-2856"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART2-2856 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART2-2856 failed"


    def test_rule_2857(self, all_results):
        """
        Test RULE-2857: YAML field 'version' must equal '2.2'
        Priority: HIGH
        """
        assert "RULE-2857" in all_results['results'], "Rule RULE-2857 missing"
        result = all_results['results']["RULE-2857"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "HIGH" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-2857 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-2857 failed"


    def test_rule_2858(self, all_results):
        """
        Test RULE-2858: YAML field 'date' must equal '2025-09-15'
        Priority: MEDIUM
        """
        assert "RULE-2858" in all_results['results'], "Rule RULE-2858 missing"
        result = all_results['results']["RULE-2858"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-2858 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-2858 failed"


    def test_rule_2859(self, all_results):
        """
        Test RULE-2859: YAML field 'deprecated' must equal 'False'
        Priority: CRITICAL
        """
        assert "RULE-2859" in all_results['results'], "Rule RULE-2859 missing"
        result = all_results['results']["RULE-2859"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-2859 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-2859 failed"


    def test_rule_2860(self, all_results):
        """
        Test RULE-2860: YAML field 'regulatory_basis' must equal 'Global Privacy Landscape 2025 + Emergi
        Priority: MEDIUM
        """
        assert "RULE-2860" in all_results['results'], "Rule RULE-2860 missing"
        result = all_results['results']["RULE-2860"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-2860 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-2860 failed"


    def test_rule_2861(self, all_results):
        """
        Test RULE-2861: YAML field 'classification' must equal 'CONFIDENTIAL'
        Priority: MEDIUM
        """
        assert "RULE-2861" in all_results['results'], "Rule RULE-2861 missing"
        result = all_results['results']["RULE-2861"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-2861 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-2861 failed"


    def test_rule_2862(self, all_results):
        """
        Test RULE-2862: YAML field 'ccpa_cpra/.name' must equal 'Kalifornien CCPA/CPRA'
        Priority: MEDIUM
        """
        assert "RULE-2862" in all_results['results'], "Rule RULE-2862 missing"
        result = all_results['results']["RULE-2862"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-2862 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-2862 failed"


    def test_rule_2863(self, all_results):
        """
        Test RULE-2863: YAML field 'ccpa_cpra/.path' must equal '23_compliance/privacy/ccpa_cpra/'
        Priority: CRITICAL
        """
        assert "RULE-2863" in all_results['results'], "Rule RULE-2863 missing"
        result = all_results['results']["RULE-2863"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-2863 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-2863 failed"


    def test_rule_2864(self, all_results):
        """
        Test RULE-2864: YAML field 'ccpa_cpra/.deprecated' must equal 'False'
        Priority: CRITICAL
        """
        assert "RULE-2864" in all_results['results'], "Rule RULE-2864 missing"
        result = all_results['results']["RULE-2864"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-2864 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-2864 failed"


    def test_rule_2865(self, all_results):
        """
        Test RULE-2865: YAML field 'ccpa_cpra/.business_priority' must equal 'HIGH'
        Priority: MEDIUM
        """
        assert "RULE-2865" in all_results['results'], "Rule RULE-2865 missing"
        result = all_results['results']["RULE-2865"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-2865 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-2865 failed"


    def test_rule_2866(self, all_results):
        """
        Test RULE-2866: YAML field 'lgpd_br/.name' must equal 'Brasilien LGPD'
        Priority: MEDIUM
        """
        assert "RULE-2866" in all_results['results'], "Rule RULE-2866 missing"
        result = all_results['results']["RULE-2866"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-2866 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-2866 failed"


    def test_rule_2867(self, all_results):
        """
        Test RULE-2867: YAML field 'lgpd_br/.path' must equal '23_compliance/privacy/lgpd_br/'
        Priority: CRITICAL
        """
        assert "RULE-2867" in all_results['results'], "Rule RULE-2867 missing"
        result = all_results['results']["RULE-2867"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-2867 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-2867 failed"


    def test_rule_2868(self, all_results):
        """
        Test RULE-2868: YAML field 'lgpd_br/.deprecated' must equal 'False'
        Priority: CRITICAL
        """
        assert "RULE-2868" in all_results['results'], "Rule RULE-2868 missing"
        result = all_results['results']["RULE-2868"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-2868 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-2868 failed"


    def test_rule_2869(self, all_results):
        """
        Test RULE-2869: YAML field 'lgpd_br/.business_priority' must equal 'MEDIUM'
        Priority: MEDIUM
        """
        assert "RULE-2869" in all_results['results'], "Rule RULE-2869 missing"
        result = all_results['results']["RULE-2869"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-2869 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-2869 failed"


    def test_rule_2870(self, all_results):
        """
        Test RULE-2870: YAML field 'pdpa_sg/.name' must equal 'Singapur PDPA'
        Priority: MEDIUM
        """
        assert "RULE-2870" in all_results['results'], "Rule RULE-2870 missing"
        result = all_results['results']["RULE-2870"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-2870 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-2870 failed"


    def test_rule_2871(self, all_results):
        """
        Test RULE-2871: YAML field 'pdpa_sg/.path' must equal '23_compliance/privacy/pdpa_sg/'
        Priority: CRITICAL
        """
        assert "RULE-2871" in all_results['results'], "Rule RULE-2871 missing"
        result = all_results['results']["RULE-2871"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-2871 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-2871 failed"


    def test_rule_2872(self, all_results):
        """
        Test RULE-2872: YAML field 'pdpa_sg/.deprecated' must equal 'False'
        Priority: CRITICAL
        """
        assert "RULE-2872" in all_results['results'], "Rule RULE-2872 missing"
        result = all_results['results']["RULE-2872"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-2872 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-2872 failed"


    def test_rule_2873(self, all_results):
        """
        Test RULE-2873: YAML field 'pdpa_sg/.business_priority' must equal 'HIGH'
        Priority: MEDIUM
        """
        assert "RULE-2873" in all_results['results'], "Rule RULE-2873 missing"
        result = all_results['results']["RULE-2873"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-2873 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-2873 failed"


    def test_rule_2874(self, all_results):
        """
        Test RULE-2874: YAML field 'appi_jp/.name' must equal 'Japan APPI'
        Priority: MEDIUM
        """
        assert "RULE-2874" in all_results['results'], "Rule RULE-2874 missing"
        result = all_results['results']["RULE-2874"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-2874 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-2874 failed"


    def test_rule_2875(self, all_results):
        """
        Test RULE-2875: YAML field 'appi_jp/.path' must equal '23_compliance/privacy/appi_jp/'
        Priority: CRITICAL
        """
        assert "RULE-2875" in all_results['results'], "Rule RULE-2875 missing"
        result = all_results['results']["RULE-2875"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-2875 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-2875 failed"


    def test_rule_2876(self, all_results):
        """
        Test RULE-2876: YAML field 'appi_jp/.deprecated' must equal 'False'
        Priority: CRITICAL
        """
        assert "RULE-2876" in all_results['results'], "Rule RULE-2876 missing"
        result = all_results['results']["RULE-2876"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-2876 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-2876 failed"


    def test_rule_2877(self, all_results):
        """
        Test RULE-2877: YAML field 'appi_jp/.business_priority' must equal 'MEDIUM'
        Priority: MEDIUM
        """
        assert "RULE-2877" in all_results['results'], "Rule RULE-2877 missing"
        result = all_results['results']["RULE-2877"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-2877 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-2877 failed"


    def test_rule_2878(self, all_results):
        """
        Test RULE-2878: YAML field 'pipl_cn/.name' must equal 'China PIPL'
        Priority: MEDIUM
        """
        assert "RULE-2878" in all_results['results'], "Rule RULE-2878 missing"
        result = all_results['results']["RULE-2878"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-2878 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-2878 failed"


    def test_rule_2879(self, all_results):
        """
        Test RULE-2879: YAML field 'pipl_cn/.path' must equal '23_compliance/privacy/pipl_cn/'
        Priority: CRITICAL
        """
        assert "RULE-2879" in all_results['results'], "Rule RULE-2879 missing"
        result = all_results['results']["RULE-2879"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-2879 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-2879 failed"


    def test_rule_2880(self, all_results):
        """
        Test RULE-2880: YAML field 'pipl_cn/.deprecated' must equal 'False'
        Priority: CRITICAL
        """
        assert "RULE-2880" in all_results['results'], "Rule RULE-2880 missing"
        result = all_results['results']["RULE-2880"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-2880 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-2880 failed"


    def test_rule_2881(self, all_results):
        """
        Test RULE-2881: YAML field 'pipl_cn/.business_priority' must equal 'LOW'
        Priority: MEDIUM
        """
        assert "RULE-2881" in all_results['results'], "Rule RULE-2881 missing"
        result = all_results['results']["RULE-2881"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-2881 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-2881 failed"


    def test_rule_2882(self, all_results):
        """
        Test RULE-2882: YAML field 'popia_za/.name' must equal 'Südafrika POPIA'
        Priority: MEDIUM
        """
        assert "RULE-2882" in all_results['results'], "Rule RULE-2882 missing"
        result = all_results['results']["RULE-2882"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-2882 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-2882 failed"


    def test_rule_2883(self, all_results):
        """
        Test RULE-2883: YAML field 'popia_za/.path' must equal '23_compliance/privacy/popia_za/'
        Priority: CRITICAL
        """
        assert "RULE-2883" in all_results['results'], "Rule RULE-2883 missing"
        result = all_results['results']["RULE-2883"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-2883 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-2883 failed"


    def test_rule_2884(self, all_results):
        """
        Test RULE-2884: YAML field 'popia_za/.deprecated' must equal 'False'
        Priority: CRITICAL
        """
        assert "RULE-2884" in all_results['results'], "Rule RULE-2884 missing"
        result = all_results['results']["RULE-2884"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-2884 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-2884 failed"


    def test_rule_2885(self, all_results):
        """
        Test RULE-2885: YAML field 'popia_za/.business_priority' must equal 'LOW'
        Priority: MEDIUM
        """
        assert "RULE-2885" in all_results['results'], "Rule RULE-2885 missing"
        result = all_results['results']["RULE-2885"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-2885 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-2885 failed"


    def test_rule_2886(self, all_results):
        """
        Test RULE-2886: YAML field 'pipeda_ca/.name' must equal 'Kanada PIPEDA + Provinzrecht-Notizen'
        Priority: MEDIUM
        """
        assert "RULE-2886" in all_results['results'], "Rule RULE-2886 missing"
        result = all_results['results']["RULE-2886"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-2886 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-2886 failed"


    def test_rule_2887(self, all_results):
        """
        Test RULE-2887: YAML field 'pipeda_ca/.path' must equal '23_compliance/privacy/pipeda_ca/'
        Priority: CRITICAL
        """
        assert "RULE-2887" in all_results['results'], "Rule RULE-2887 missing"
        result = all_results['results']["RULE-2887"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-2887 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-2887 failed"


    def test_rule_2888(self, all_results):
        """
        Test RULE-2888: YAML field 'pipeda_ca/.deprecated' must equal 'False'
        Priority: CRITICAL
        """
        assert "RULE-2888" in all_results['results'], "Rule RULE-2888 missing"
        result = all_results['results']["RULE-2888"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-2888 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-2888 failed"


    def test_rule_2889(self, all_results):
        """
        Test RULE-2889: YAML field 'pipeda_ca/.business_priority' must equal 'MEDIUM'
        Priority: MEDIUM
        """
        assert "RULE-2889" in all_results['results'], "Rule RULE-2889 missing"
        result = all_results['results']["RULE-2889"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-2889 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-2889 failed"


    def test_rule_2890(self, all_results):
        """
        Test RULE-2890: YAML field 'dpdp_in/.name' must equal 'Indien DPDP Act 2023'
        Priority: MEDIUM
        """
        assert "RULE-2890" in all_results['results'], "Rule RULE-2890 missing"
        result = all_results['results']["RULE-2890"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-2890 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-2890 failed"


    def test_rule_2891(self, all_results):
        """
        Test RULE-2891: YAML field 'dpdp_in/.path' must equal '23_compliance/privacy/dpdp_in/'
        Priority: CRITICAL
        """
        assert "RULE-2891" in all_results['results'], "Rule RULE-2891 missing"
        result = all_results['results']["RULE-2891"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-2891 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-2891 failed"


    def test_rule_2892(self, all_results):
        """
        Test RULE-2892: YAML field 'dpdp_in/.deprecated' must equal 'False'
        Priority: CRITICAL
        """
        assert "RULE-2892" in all_results['results'], "Rule RULE-2892 missing"
        result = all_results['results']["RULE-2892"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-2892 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-2892 failed"


    def test_rule_2893(self, all_results):
        """
        Test RULE-2893: YAML field 'dpdp_in/.business_priority' must equal 'MEDIUM'
        Priority: MEDIUM
        """
        assert "RULE-2893" in all_results['results'], "Rule RULE-2893 missing"
        result = all_results['results']["RULE-2893"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-2893 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-2893 failed"


    def test_rule_2894(self, all_results):
        """
        Test RULE-2894: YAML list 'deprecated_privacy' must contain 1 elements
        Priority: CRITICAL
        """
        assert "RULE-2894" in all_results['results'], "Rule RULE-2894 missing"
        result = all_results['results']["RULE-2894"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-2894 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-2894 failed"


    def test_rule_2895(self, all_results):
        """
        Test RULE-2895: YAML line: version: "2.2"
        Priority: MEDIUM
        """
        assert "RULE-2895" in all_results['results'], "Rule RULE-2895 missing"
        result = all_results['results']["RULE-2895"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-2895 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-2895 failed"


    def test_rule_2896(self, all_results):
        """
        Test RULE-2896: YAML line: date: "2025-09-15"
        Priority: MEDIUM
        """
        assert "RULE-2896" in all_results['results'], "Rule RULE-2896 missing"
        result = all_results['results']["RULE-2896"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-2896 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-2896 failed"


    def test_rule_2897(self, all_results):
        """
        Test RULE-2897: YAML line: deprecated: false
        Priority: MEDIUM
        """
        assert "RULE-2897" in all_results['results'], "Rule RULE-2897 missing"
        result = all_results['results']["RULE-2897"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-2897 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-2897 failed"


    def test_rule_2898(self, all_results):
        """
        Test RULE-2898: YAML line: regulatory_basis: "Global Privacy Landscape 2025 + Emerging Markets"
        Priority: MEDIUM
        """
        assert "RULE-2898" in all_results['results'], "Rule RULE-2898 missing"
        result = all_results['results']["RULE-2898"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-2898 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-2898 failed"


    def test_rule_2899(self, all_results):
        """
        Test RULE-2899: YAML line: classification: "CONFIDENTIAL"
        Priority: MEDIUM
        """
        assert "RULE-2899" in all_results['results'], "Rule RULE-2899 missing"
        result = all_results['results']["RULE-2899"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-2899 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-2899 failed"


    def test_rule_2900(self, all_results):
        """
        Test RULE-2900: YAML line: ccpa_cpra/:
        Priority: MEDIUM
        """
        assert "RULE-2900" in all_results['results'], "Rule RULE-2900 missing"
        result = all_results['results']["RULE-2900"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-2900 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-2900 failed"


    def test_rule_2901(self, all_results):
        """
        Test RULE-2901: YAML line: name: "Kalifornien CCPA/CPRA"
        Priority: MEDIUM
        """
        assert "RULE-2901" in all_results['results'], "Rule RULE-2901 missing"
        result = all_results['results']["RULE-2901"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-2901 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-2901 failed"


    def test_rule_2902(self, all_results):
        """
        Test RULE-2902: YAML line: path: "23_compliance/privacy/ccpa_cpra/"
        Priority: CRITICAL
        """
        assert "RULE-2902" in all_results['results'], "Rule RULE-2902 missing"
        result = all_results['results']["RULE-2902"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-2902 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-2902 failed"


    def test_rule_2903(self, all_results):
        """
        Test RULE-2903: YAML line: deprecated: false
        Priority: MEDIUM
        """
        assert "RULE-2903" in all_results['results'], "Rule RULE-2903 missing"
        result = all_results['results']["RULE-2903"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-2903 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-2903 failed"


    def test_rule_2904(self, all_results):
        """
        Test RULE-2904: YAML line: business_priority: "HIGH"
        Priority: MEDIUM
        """
        assert "RULE-2904" in all_results['results'], "Rule RULE-2904 missing"
        result = all_results['results']["RULE-2904"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-2904 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-2904 failed"


    def test_rule_2905(self, all_results):
        """
        Test RULE-2905: YAML line: lgpd_br/:
        Priority: MEDIUM
        """
        assert "RULE-2905" in all_results['results'], "Rule RULE-2905 missing"
        result = all_results['results']["RULE-2905"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-2905 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-2905 failed"


    def test_rule_2906(self, all_results):
        """
        Test RULE-2906: YAML line: name: "Brasilien LGPD"
        Priority: MEDIUM
        """
        assert "RULE-2906" in all_results['results'], "Rule RULE-2906 missing"
        result = all_results['results']["RULE-2906"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-2906 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-2906 failed"


    def test_rule_2907(self, all_results):
        """
        Test RULE-2907: YAML line: path: "23_compliance/privacy/lgpd_br/"
        Priority: CRITICAL
        """
        assert "RULE-2907" in all_results['results'], "Rule RULE-2907 missing"
        result = all_results['results']["RULE-2907"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-2907 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-2907 failed"


    def test_rule_2908(self, all_results):
        """
        Test RULE-2908: YAML line: deprecated: false
        Priority: MEDIUM
        """
        assert "RULE-2908" in all_results['results'], "Rule RULE-2908 missing"
        result = all_results['results']["RULE-2908"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-2908 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-2908 failed"


    def test_rule_2909(self, all_results):
        """
        Test RULE-2909: YAML line: business_priority: "MEDIUM"
        Priority: MEDIUM
        """
        assert "RULE-2909" in all_results['results'], "Rule RULE-2909 missing"
        result = all_results['results']["RULE-2909"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-2909 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-2909 failed"


    def test_rule_2910(self, all_results):
        """
        Test RULE-2910: YAML line: pdpa_sg/:
        Priority: MEDIUM
        """
        assert "RULE-2910" in all_results['results'], "Rule RULE-2910 missing"
        result = all_results['results']["RULE-2910"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-2910 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-2910 failed"


    def test_rule_2911(self, all_results):
        """
        Test RULE-2911: YAML line: name: "Singapur PDPA"
        Priority: MEDIUM
        """
        assert "RULE-2911" in all_results['results'], "Rule RULE-2911 missing"
        result = all_results['results']["RULE-2911"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-2911 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-2911 failed"


    def test_rule_2912(self, all_results):
        """
        Test RULE-2912: YAML line: path: "23_compliance/privacy/pdpa_sg/"
        Priority: CRITICAL
        """
        assert "RULE-2912" in all_results['results'], "Rule RULE-2912 missing"
        result = all_results['results']["RULE-2912"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-2912 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-2912 failed"


    def test_rule_2913(self, all_results):
        """
        Test RULE-2913: YAML line: deprecated: false
        Priority: MEDIUM
        """
        assert "RULE-2913" in all_results['results'], "Rule RULE-2913 missing"
        result = all_results['results']["RULE-2913"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-2913 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-2913 failed"


    def test_rule_2914(self, all_results):
        """
        Test RULE-2914: YAML line: business_priority: "HIGH"
        Priority: MEDIUM
        """
        assert "RULE-2914" in all_results['results'], "Rule RULE-2914 missing"
        result = all_results['results']["RULE-2914"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-2914 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-2914 failed"


    def test_rule_2915(self, all_results):
        """
        Test RULE-2915: YAML line: appi_jp/:
        Priority: MEDIUM
        """
        assert "RULE-2915" in all_results['results'], "Rule RULE-2915 missing"
        result = all_results['results']["RULE-2915"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-2915 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-2915 failed"


    def test_rule_2916(self, all_results):
        """
        Test RULE-2916: YAML line: name: "Japan APPI"
        Priority: MEDIUM
        """
        assert "RULE-2916" in all_results['results'], "Rule RULE-2916 missing"
        result = all_results['results']["RULE-2916"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-2916 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-2916 failed"


    def test_rule_2917(self, all_results):
        """
        Test RULE-2917: YAML line: path: "23_compliance/privacy/appi_jp/"
        Priority: CRITICAL
        """
        assert "RULE-2917" in all_results['results'], "Rule RULE-2917 missing"
        result = all_results['results']["RULE-2917"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-2917 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-2917 failed"


    def test_rule_2918(self, all_results):
        """
        Test RULE-2918: YAML line: deprecated: false
        Priority: MEDIUM
        """
        assert "RULE-2918" in all_results['results'], "Rule RULE-2918 missing"
        result = all_results['results']["RULE-2918"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-2918 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-2918 failed"


    def test_rule_2919(self, all_results):
        """
        Test RULE-2919: YAML line: business_priority: "MEDIUM"
        Priority: MEDIUM
        """
        assert "RULE-2919" in all_results['results'], "Rule RULE-2919 missing"
        result = all_results['results']["RULE-2919"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-2919 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-2919 failed"


    def test_rule_2920(self, all_results):
        """
        Test RULE-2920: YAML line: pipl_cn/:
        Priority: MEDIUM
        """
        assert "RULE-2920" in all_results['results'], "Rule RULE-2920 missing"
        result = all_results['results']["RULE-2920"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-2920 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-2920 failed"


    def test_rule_2921(self, all_results):
        """
        Test RULE-2921: YAML line: name: "China PIPL"
        Priority: MEDIUM
        """
        assert "RULE-2921" in all_results['results'], "Rule RULE-2921 missing"
        result = all_results['results']["RULE-2921"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-2921 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-2921 failed"


    def test_rule_2922(self, all_results):
        """
        Test RULE-2922: YAML line: path: "23_compliance/privacy/pipl_cn/"
        Priority: CRITICAL
        """
        assert "RULE-2922" in all_results['results'], "Rule RULE-2922 missing"
        result = all_results['results']["RULE-2922"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-2922 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-2922 failed"


    def test_rule_2923(self, all_results):
        """
        Test RULE-2923: YAML line: deprecated: false
        Priority: MEDIUM
        """
        assert "RULE-2923" in all_results['results'], "Rule RULE-2923 missing"
        result = all_results['results']["RULE-2923"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-2923 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-2923 failed"


    def test_rule_2924(self, all_results):
        """
        Test RULE-2924: YAML line: business_priority: "LOW"
        Priority: MEDIUM
        """
        assert "RULE-2924" in all_results['results'], "Rule RULE-2924 missing"
        result = all_results['results']["RULE-2924"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-2924 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-2924 failed"


    def test_rule_2925(self, all_results):
        """
        Test RULE-2925: YAML line: popia_za/:
        Priority: MEDIUM
        """
        assert "RULE-2925" in all_results['results'], "Rule RULE-2925 missing"
        result = all_results['results']["RULE-2925"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-2925 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-2925 failed"


    def test_rule_2926(self, all_results):
        """
        Test RULE-2926: YAML line: name: "Südafrika POPIA"
        Priority: MEDIUM
        """
        assert "RULE-2926" in all_results['results'], "Rule RULE-2926 missing"
        result = all_results['results']["RULE-2926"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-2926 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-2926 failed"


    def test_rule_2927(self, all_results):
        """
        Test RULE-2927: YAML line: path: "23_compliance/privacy/popia_za/"
        Priority: CRITICAL
        """
        assert "RULE-2927" in all_results['results'], "Rule RULE-2927 missing"
        result = all_results['results']["RULE-2927"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-2927 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-2927 failed"


    def test_rule_2928(self, all_results):
        """
        Test RULE-2928: YAML line: deprecated: false
        Priority: MEDIUM
        """
        assert "RULE-2928" in all_results['results'], "Rule RULE-2928 missing"
        result = all_results['results']["RULE-2928"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-2928 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-2928 failed"


    def test_rule_2929(self, all_results):
        """
        Test RULE-2929: YAML line: business_priority: "LOW"
        Priority: MEDIUM
        """
        assert "RULE-2929" in all_results['results'], "Rule RULE-2929 missing"
        result = all_results['results']["RULE-2929"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-2929 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-2929 failed"


    def test_rule_2930(self, all_results):
        """
        Test RULE-2930: YAML line: pipeda_ca/:
        Priority: MEDIUM
        """
        assert "RULE-2930" in all_results['results'], "Rule RULE-2930 missing"
        result = all_results['results']["RULE-2930"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-2930 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-2930 failed"


    def test_rule_2931(self, all_results):
        """
        Test RULE-2931: YAML line: name: "Kanada PIPEDA + Provinzrecht-Notizen"
        Priority: MEDIUM
        """
        assert "RULE-2931" in all_results['results'], "Rule RULE-2931 missing"
        result = all_results['results']["RULE-2931"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-2931 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-2931 failed"


    def test_rule_2932(self, all_results):
        """
        Test RULE-2932: YAML line: path: "23_compliance/privacy/pipeda_ca/"
        Priority: CRITICAL
        """
        assert "RULE-2932" in all_results['results'], "Rule RULE-2932 missing"
        result = all_results['results']["RULE-2932"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-2932 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-2932 failed"


    def test_rule_2933(self, all_results):
        """
        Test RULE-2933: YAML line: deprecated: false
        Priority: MEDIUM
        """
        assert "RULE-2933" in all_results['results'], "Rule RULE-2933 missing"
        result = all_results['results']["RULE-2933"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-2933 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-2933 failed"


    def test_rule_2934(self, all_results):
        """
        Test RULE-2934: YAML line: business_priority: "MEDIUM"
        Priority: MEDIUM
        """
        assert "RULE-2934" in all_results['results'], "Rule RULE-2934 missing"
        result = all_results['results']["RULE-2934"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-2934 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-2934 failed"


    def test_rule_2935(self, all_results):
        """
        Test RULE-2935: YAML line: dpdp_in/:
        Priority: MEDIUM
        """
        assert "RULE-2935" in all_results['results'], "Rule RULE-2935 missing"
        result = all_results['results']["RULE-2935"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-2935 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-2935 failed"


    def test_rule_2936(self, all_results):
        """
        Test RULE-2936: YAML line: name: "Indien DPDP Act 2023"
        Priority: MEDIUM
        """
        assert "RULE-2936" in all_results['results'], "Rule RULE-2936 missing"
        result = all_results['results']["RULE-2936"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-2936 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-2936 failed"


    def test_rule_2937(self, all_results):
        """
        Test RULE-2937: YAML line: path: "23_compliance/privacy/dpdp_in/"
        Priority: CRITICAL
        """
        assert "RULE-2937" in all_results['results'], "Rule RULE-2937 missing"
        result = all_results['results']["RULE-2937"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-2937 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-2937 failed"


    def test_rule_2938(self, all_results):
        """
        Test RULE-2938: YAML line: deprecated: false
        Priority: MEDIUM
        """
        assert "RULE-2938" in all_results['results'], "Rule RULE-2938 missing"
        result = all_results['results']["RULE-2938"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-2938 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-2938 failed"


    def test_rule_2939(self, all_results):
        """
        Test RULE-2939: YAML line: business_priority: "MEDIUM"
        Priority: MEDIUM
        """
        assert "RULE-2939" in all_results['results'], "Rule RULE-2939 missing"
        result = all_results['results']["RULE-2939"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-2939 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-2939 failed"


    def test_rule_2940(self, all_results):
        """
        Test RULE-2940: YAML line: deprecated_privacy:
        Priority: MEDIUM
        """
        assert "RULE-2940" in all_results['results'], "Rule RULE-2940 missing"
        result = all_results['results']["RULE-2940"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-2940 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-2940 failed"


    def test_rule_2941(self, all_results):
        """
        Test RULE-2941: YAML line: - id: "ccpa_original"
        Priority: MEDIUM
        """
        assert "RULE-2941" in all_results['results'], "Rule RULE-2941 missing"
        result = all_results['results']["RULE-2941"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-2941 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-2941 failed"


    def test_rule_2942(self, all_results):
        """
        Test RULE-2942: YAML line: status: "deprecated"
        Priority: MEDIUM
        """
        assert "RULE-2942" in all_results['results'], "Rule RULE-2942 missing"
        result = all_results['results']["RULE-2942"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-2942 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-2942 failed"


    def test_rule_2943(self, all_results):
        """
        Test RULE-2943: YAML line: deprecated: true
        Priority: MEDIUM
        """
        assert "RULE-2943" in all_results['results'], "Rule RULE-2943 missing"
        result = all_results['results']["RULE-2943"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-2943 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-2943 failed"


    def test_rule_2944(self, all_results):
        """
        Test RULE-2944: YAML line: replaced_by: "ccpa_cpra"
        Priority: MEDIUM
        """
        assert "RULE-2944" in all_results['results'], "Rule RULE-2944 missing"
        result = all_results['results']["RULE-2944"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-2944 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-2944 failed"


    def test_rule_2945(self, all_results):
        """
        Test RULE-2945: YAML line: deprecation_date: "2023-01-01"
        Priority: MEDIUM
        """
        assert "RULE-2945" in all_results['results'], "Rule RULE-2945 missing"
        result = all_results['results']["RULE-2945"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-2945 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-2945 failed"


    def test_rule_2946(self, all_results):
        """
        Test RULE-2946: YAML line: notes: "CPRA-Updates 2023/2024 integriert"
        Priority: MEDIUM
        """
        assert "RULE-2946" in all_results['results'], "Rule RULE-2946 missing"
        result = all_results['results']["RULE-2946"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-2946 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-2946 failed"


    def test_rule_2947(self, all_results):
        """
        Test RULE-2947: YAML field 'version' must equal '1.1'
        Priority: HIGH
        """
        assert "RULE-2947" in all_results['results'], "Rule RULE-2947 missing"
        result = all_results['results']["RULE-2947"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "HIGH" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-2947 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-2947 failed"


    def test_rule_2948(self, all_results):
        """
        Test RULE-2948: YAML field 'date' must equal '2025-09-15'
        Priority: MEDIUM
        """
        assert "RULE-2948" in all_results['results'], "Rule RULE-2948 missing"
        result = all_results['results']["RULE-2948"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-2948 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-2948 failed"


    def test_rule_2949(self, all_results):
        """
        Test RULE-2949: YAML field 'deprecated' must equal 'False'
        Priority: CRITICAL
        """
        assert "RULE-2949" in all_results['results'], "Rule RULE-2949 missing"
        result = all_results['results']["RULE-2949"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-2949 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-2949 failed"


    def test_rule_2950(self, all_results):
        """
        Test RULE-2950: YAML field 'classification' must equal 'CONFIDENTIAL'
        Priority: MEDIUM
        """
        assert "RULE-2950" in all_results['results'], "Rule RULE-2950 missing"
        result = all_results['results']["RULE-2950"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-2950 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-2950 failed"


    def test_rule_2951(self, all_results):
        """
        Test RULE-2951: YAML field 'nist_csf_20/.name' must equal 'NIST CSF 2.0 (Govern/Identify/Protect
        Priority: MEDIUM
        """
        assert "RULE-2951" in all_results['results'], "Rule RULE-2951 missing"
        result = all_results['results']["RULE-2951"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-2951 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-2951 failed"


    def test_rule_2952(self, all_results):
        """
        Test RULE-2952: YAML field 'nist_csf_20/.path' must equal '23_compliance/security/nist_csf_20/'
        Priority: CRITICAL
        """
        assert "RULE-2952" in all_results['results'], "Rule RULE-2952 missing"
        result = all_results['results']["RULE-2952"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-2952 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-2952 failed"


    def test_rule_2953(self, all_results):
        """
        Test RULE-2953: YAML field 'nist_csf_20/.deprecated' must equal 'False'
        Priority: CRITICAL
        """
        assert "RULE-2953" in all_results['results'], "Rule RULE-2953 missing"
        result = all_results['results']["RULE-2953"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-2953 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-2953 failed"


    def test_rule_2954(self, all_results):
        """
        Test RULE-2954: YAML field 'nist_csf_20/.business_priority' must equal 'HIGH'
        Priority: MEDIUM
        """
        assert "RULE-2954" in all_results['results'], "Rule RULE-2954 missing"
        result = all_results['results']["RULE-2954"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-2954 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-2954 failed"


    def test_rule_2955(self, all_results):
        """
        Test RULE-2955: YAML field 'pqc/.name' must equal 'FIPS 203/204/205: ML-KEM, ML-DSA, SLH-DSA - K
        Priority: MEDIUM
        """
        assert "RULE-2955" in all_results['results'], "Rule RULE-2955 missing"
        result = all_results['results']["RULE-2955"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-2955 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-2955 failed"


    def test_rule_2956(self, all_results):
        """
        Test RULE-2956: YAML field 'pqc/.path' must equal '23_compliance/security/pqc/'
        Priority: CRITICAL
        """
        assert "RULE-2956" in all_results['results'], "Rule RULE-2956 missing"
        result = all_results['results']["RULE-2956"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-2956 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-2956 failed"


    def test_rule_2957(self, all_results):
        """
        Test RULE-2957: YAML field 'pqc/.deprecated' must equal 'False'
        Priority: CRITICAL
        """
        assert "RULE-2957" in all_results['results'], "Rule RULE-2957 missing"
        result = all_results['results']["RULE-2957"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-2957 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-2957 failed"


    def test_rule_2958(self, all_results):
        """
        Test RULE-2958: YAML field 'pqc/.business_priority' must equal 'HIGH'
        Priority: MEDIUM
        """
        assert "RULE-2958" in all_results['results'], "Rule RULE-2958 missing"
        result = all_results['results']["RULE-2958"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-2958 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-2958 failed"


    def test_rule_2959(self, all_results):
        """
        Test RULE-2959: YAML field 'etsi_trust/.name' must equal 'eIDAS/Signaturen: EN 319 401/411/421 (
        Priority: MEDIUM
        """
        assert "RULE-2959" in all_results['results'], "Rule RULE-2959 missing"
        result = all_results['results']["RULE-2959"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-2959 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-2959 failed"


    def test_rule_2960(self, all_results):
        """
        Test RULE-2960: YAML field 'etsi_trust/.path' must equal '23_compliance/security/etsi_trust/'
        Priority: CRITICAL
        """
        assert "RULE-2960" in all_results['results'], "Rule RULE-2960 missing"
        result = all_results['results']["RULE-2960"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-2960 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-2960 failed"


    def test_rule_2961(self, all_results):
        """
        Test RULE-2961: YAML field 'etsi_trust/.deprecated' must equal 'False'
        Priority: CRITICAL
        """
        assert "RULE-2961" in all_results['results'], "Rule RULE-2961 missing"
        result = all_results['results']["RULE-2961"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-2961 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-2961 failed"


    def test_rule_2962(self, all_results):
        """
        Test RULE-2962: YAML field 'etsi_trust/.business_priority' must equal 'MEDIUM'
        Priority: MEDIUM
        """
        assert "RULE-2962" in all_results['results'], "Rule RULE-2962 missing"
        result = all_results['results']["RULE-2962"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-2962 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-2962 failed"


    def test_rule_2963(self, all_results):
        """
        Test RULE-2963: YAML line: version: "1.1"
        Priority: MEDIUM
        """
        assert "RULE-2963" in all_results['results'], "Rule RULE-2963 missing"
        result = all_results['results']["RULE-2963"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-2963 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-2963 failed"


    def test_rule_2964(self, all_results):
        """
        Test RULE-2964: YAML line: date: "2025-09-15"
        Priority: MEDIUM
        """
        assert "RULE-2964" in all_results['results'], "Rule RULE-2964 missing"
        result = all_results['results']["RULE-2964"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-2964 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-2964 failed"


    def test_rule_2965(self, all_results):
        """
        Test RULE-2965: YAML line: deprecated: false
        Priority: MEDIUM
        """
        assert "RULE-2965" in all_results['results'], "Rule RULE-2965 missing"
        result = all_results['results']["RULE-2965"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-2965 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-2965 failed"


    def test_rule_2966(self, all_results):
        """
        Test RULE-2966: YAML line: classification: "CONFIDENTIAL"
        Priority: MEDIUM
        """
        assert "RULE-2966" in all_results['results'], "Rule RULE-2966 missing"
        result = all_results['results']["RULE-2966"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-2966 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-2966 failed"


    def test_rule_2967(self, all_results):
        """
        Test RULE-2967: YAML line: nist_csf_20/:
        Priority: MEDIUM
        """
        assert "RULE-2967" in all_results['results'], "Rule RULE-2967 missing"
        result = all_results['results']["RULE-2967"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-2967 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-2967 failed"


    def test_rule_2968(self, all_results):
        """
        Test RULE-2968: YAML line: name: "NIST CSF 2.0 (Govern/Identify/Protect/Detect/Respond/Recover) 
        Priority: MEDIUM
        """
        assert "RULE-2968" in all_results['results'], "Rule RULE-2968 missing"
        result = all_results['results']["RULE-2968"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-2968 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-2968 failed"


    def test_rule_2969(self, all_results):
        """
        Test RULE-2969: YAML line: path: "23_compliance/security/nist_csf_20/"
        Priority: CRITICAL
        """
        assert "RULE-2969" in all_results['results'], "Rule RULE-2969 missing"
        result = all_results['results']["RULE-2969"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-2969 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-2969 failed"


    def test_rule_2970(self, all_results):
        """
        Test RULE-2970: YAML line: deprecated: false
        Priority: MEDIUM
        """
        assert "RULE-2970" in all_results['results'], "Rule RULE-2970 missing"
        result = all_results['results']["RULE-2970"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-2970 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-2970 failed"


    def test_rule_2971(self, all_results):
        """
        Test RULE-2971: YAML line: business_priority: "HIGH"
        Priority: MEDIUM
        """
        assert "RULE-2971" in all_results['results'], "Rule RULE-2971 missing"
        result = all_results['results']["RULE-2971"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-2971 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-2971 failed"


    def test_rule_2972(self, all_results):
        """
        Test RULE-2972: YAML line: pqc/:
        Priority: MEDIUM
        """
        assert "RULE-2972" in all_results['results'], "Rule RULE-2972 missing"
        result = all_results['results']["RULE-2972"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-2972 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-2972 failed"


    def test_rule_2973(self, all_results):
        """
        Test RULE-2973: YAML line: name: "FIPS 203/204/205: ML-KEM, ML-DSA, SLH-DSA - Krypto-Agilität & 
        Priority: MEDIUM
        """
        assert "RULE-2973" in all_results['results'], "Rule RULE-2973 missing"
        result = all_results['results']["RULE-2973"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-2973 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-2973 failed"


    def test_rule_2974(self, all_results):
        """
        Test RULE-2974: YAML line: path: "23_compliance/security/pqc/"
        Priority: CRITICAL
        """
        assert "RULE-2974" in all_results['results'], "Rule RULE-2974 missing"
        result = all_results['results']["RULE-2974"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-2974 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-2974 failed"


    def test_rule_2975(self, all_results):
        """
        Test RULE-2975: YAML line: deprecated: false
        Priority: MEDIUM
        """
        assert "RULE-2975" in all_results['results'], "Rule RULE-2975 missing"
        result = all_results['results']["RULE-2975"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-2975 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-2975 failed"


    def test_rule_2976(self, all_results):
        """
        Test RULE-2976: YAML line: business_priority: "HIGH"
        Priority: MEDIUM
        """
        assert "RULE-2976" in all_results['results'], "Rule RULE-2976 missing"
        result = all_results['results']["RULE-2976"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-2976 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-2976 failed"


    def test_rule_2977(self, all_results):
        """
        Test RULE-2977: YAML line: etsi_trust/:
        Priority: MEDIUM
        """
        assert "RULE-2977" in all_results['results'], "Rule RULE-2977 missing"
        result = all_results['results']["RULE-2977"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-2977 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-2977 failed"


    def test_rule_2978(self, all_results):
        """
        Test RULE-2978: YAML line: name: "eIDAS/Signaturen: EN 319 401/411/421 (Policy/CA/TSL)"
        Priority: MEDIUM
        """
        assert "RULE-2978" in all_results['results'], "Rule RULE-2978 missing"
        result = all_results['results']["RULE-2978"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-2978 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-2978 failed"


    def test_rule_2979(self, all_results):
        """
        Test RULE-2979: YAML line: path: "23_compliance/security/etsi_trust/"
        Priority: CRITICAL
        """
        assert "RULE-2979" in all_results['results'], "Rule RULE-2979 missing"
        result = all_results['results']["RULE-2979"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-2979 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-2979 failed"


    def test_rule_2980(self, all_results):
        """
        Test RULE-2980: YAML line: deprecated: false
        Priority: MEDIUM
        """
        assert "RULE-2980" in all_results['results'], "Rule RULE-2980 missing"
        result = all_results['results']["RULE-2980"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-2980 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-2980 failed"


    def test_rule_2981(self, all_results):
        """
        Test RULE-2981: YAML line: business_priority: "MEDIUM"
        Priority: MEDIUM
        """
        assert "RULE-2981" in all_results['results'], "Rule RULE-2981 missing"
        result = all_results['results']["RULE-2981"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-2981 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-2981 failed"


    def test_rule_2982(self, all_results):
        """
        Test RULE-2982: YAML field 'name' must equal 'Regulatory Update Request (Internal)'
        Priority: MEDIUM
        """
        assert "RULE-2982" in all_results['results'], "Rule RULE-2982 missing"
        result = all_results['results']["RULE-2982"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-2982 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-2982 failed"


    def test_rule_2983(self, all_results):
        """
        Test RULE-2983: YAML field 'description' must equal 'Internal regulatory change tracking'
        Priority: MEDIUM
        """
        assert "RULE-2983" in all_results['results'], "Rule RULE-2983 missing"
        result = all_results['results']["RULE-2983"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-2983 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-2983 failed"


    def test_rule_2984(self, all_results):
        """
        Test RULE-2984: YAML field 'title' must equal '[INTERNAL-REGULATORY] '
        Priority: MEDIUM
        """
        assert "RULE-2984" in all_results['results'], "Rule RULE-2984 missing"
        result = all_results['results']["RULE-2984"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-2984 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-2984 failed"


    def test_rule_2985(self, all_results):
        """
        Test RULE-2985: YAML list 'labels' must contain 4 elements
        Priority: CRITICAL
        """
        assert "RULE-2985" in all_results['results'], "Rule RULE-2985 missing"
        result = all_results['results']["RULE-2985"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-2985 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-2985 failed"


    def test_rule_2986(self, all_results):
        """
        Test RULE-2986: YAML list 'body' must contain 5 elements
        Priority: CRITICAL
        """
        assert "RULE-2986" in all_results['results'], "Rule RULE-2986 missing"
        result = all_results['results']["RULE-2986"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-2986 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-2986 failed"


    def test_rule_2987(self, all_results):
        """
        Test RULE-2987: YAML line: name: Regulatory Update Request (Internal)
        Priority: MEDIUM
        """
        assert "RULE-2987" in all_results['results'], "Rule RULE-2987 missing"
        result = all_results['results']["RULE-2987"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-2987 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-2987 failed"


    def test_rule_2988(self, all_results):
        """
        Test RULE-2988: YAML line: description: Internal regulatory change tracking
        Priority: MEDIUM
        """
        assert "RULE-2988" in all_results['results'], "Rule RULE-2988 missing"
        result = all_results['results']["RULE-2988"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-2988 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-2988 failed"


    def test_rule_2989(self, all_results):
        """
        Test RULE-2989: YAML line: title: "[INTERNAL-REGULATORY] "
        Priority: MEDIUM
        """
        assert "RULE-2989" in all_results['results'], "Rule RULE-2989 missing"
        result = all_results['results']["RULE-2989"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-2989 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-2989 failed"


    def test_rule_2990(self, all_results):
        """
        Test RULE-2990: YAML line: labels: ["compliance", "regulatory", "internal", "confidential"]
        Priority: CRITICAL
        """
        assert "RULE-2990" in all_results['results'], "Rule RULE-2990 missing"
        result = all_results['results']["RULE-2990"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-2990 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-2990 failed"


    def test_rule_2991(self, all_results):
        """
        Test RULE-2991: YAML line: body:
        Priority: MEDIUM
        """
        assert "RULE-2991" in all_results['results'], "Rule RULE-2991 missing"
        result = all_results['results']["RULE-2991"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-2991 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-2991 failed"


    def test_rule_2992(self, all_results):
        """
        Test RULE-2992: YAML line: - type: dropdown
        Priority: MEDIUM
        """
        assert "RULE-2992" in all_results['results'], "Rule RULE-2992 missing"
        result = all_results['results']["RULE-2992"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-2992 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-2992 failed"


    def test_rule_2993(self, all_results):
        """
        Test RULE-2993: YAML line: id: regulation_type
        Priority: MEDIUM
        """
        assert "RULE-2993" in all_results['results'], "Rule RULE-2993 missing"
        result = all_results['results']["RULE-2993"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-2993 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-2993 failed"


    def test_rule_2994(self, all_results):
        """
        Test RULE-2994: YAML line: attributes:
        Priority: MEDIUM
        """
        assert "RULE-2994" in all_results['results'], "Rule RULE-2994 missing"
        result = all_results['results']["RULE-2994"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-2994 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-2994 failed"


    def test_rule_2995(self, all_results):
        """
        Test RULE-2995: YAML line: label: Regulation Type
        Priority: MEDIUM
        """
        assert "RULE-2995" in all_results['results'], "Rule RULE-2995 missing"
        result = all_results['results']["RULE-2995"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-2995 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-2995 failed"


    def test_rule_2996(self, all_results):
        """
        Test RULE-2996: YAML line: options:
        Priority: MEDIUM
        """
        assert "RULE-2996" in all_results['results'], "Rule RULE-2996 missing"
        result = all_results['results']["RULE-2996"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-2996 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-2996 failed"


    def test_rule_2997(self, all_results):
        """
        Test RULE-2997: YAML line: - New Regulation
        Priority: MEDIUM
        """
        assert "RULE-2997" in all_results['results'], "Rule RULE-2997 missing"
        result = all_results['results']["RULE-2997"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-2997 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-2997 failed"


    def test_rule_2998(self, all_results):
        """
        Test RULE-2998: YAML line: - Regulation Update
        Priority: MEDIUM
        """
        assert "RULE-2998" in all_results['results'], "Rule RULE-2998 missing"
        result = all_results['results']["RULE-2998"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-2998 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-2998 failed"


    def test_rule_2999(self, all_results):
        """
        Test RULE-2999: YAML line: - Internal Policy Change
        Priority: MEDIUM
        """
        assert "RULE-2999" in all_results['results'], "Rule RULE-2999 missing"
        result = all_results['results']["RULE-2999"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-2999 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-2999 failed"


    def test_rule_3000(self, all_results):
        """
        Test RULE-3000: YAML line: - Deprecation Notice
        Priority: MEDIUM
        """
        assert "RULE-3000" in all_results['results'], "Rule RULE-3000 missing"
        result = all_results['results']["RULE-3000"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-3000 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-3000 failed"


    def test_rule_3001(self, all_results):
        """
        Test RULE-3001: YAML line: - Business Impact Assessment
        Priority: MEDIUM
        """
        assert "RULE-3001" in all_results['results'], "Rule RULE-3001 missing"
        result = all_results['results']["RULE-3001"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-3001 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-3001 failed"


    def test_rule_3002(self, all_results):
        """
        Test RULE-3002: YAML line: validations:
        Priority: MEDIUM
        """
        assert "RULE-3002" in all_results['results'], "Rule RULE-3002 missing"
        result = all_results['results']["RULE-3002"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-3002 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-3002 failed"


    def test_rule_3003(self, all_results):
        """
        Test RULE-3003: YAML line: required: true
        Priority: CRITICAL
        """
        assert "RULE-3003" in all_results['results'], "Rule RULE-3003 missing"
        result = all_results['results']["RULE-3003"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-3003 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-3003 failed"


    def test_rule_3004(self, all_results):
        """
        Test RULE-3004: YAML line: - type: dropdown
        Priority: MEDIUM
        """
        assert "RULE-3004" in all_results['results'], "Rule RULE-3004 missing"
        result = all_results['results']["RULE-3004"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-3004 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-3004 failed"


    def test_rule_3005(self, all_results):
        """
        Test RULE-3005: YAML line: id: business_priority
        Priority: MEDIUM
        """
        assert "RULE-3005" in all_results['results'], "Rule RULE-3005 missing"
        result = all_results['results']["RULE-3005"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-3005 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-3005 failed"


    def test_rule_3006(self, all_results):
        """
        Test RULE-3006: YAML line: attributes:
        Priority: MEDIUM
        """
        assert "RULE-3006" in all_results['results'], "Rule RULE-3006 missing"
        result = all_results['results']["RULE-3006"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-3006 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-3006 failed"


    def test_rule_3007(self, all_results):
        """
        Test RULE-3007: YAML line: label: Business Priority
        Priority: MEDIUM
        """
        assert "RULE-3007" in all_results['results'], "Rule RULE-3007 missing"
        result = all_results['results']["RULE-3007"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-3007 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-3007 failed"


    def test_rule_3008(self, all_results):
        """
        Test RULE-3008: YAML line: options:
        Priority: MEDIUM
        """
        assert "RULE-3008" in all_results['results'], "Rule RULE-3008 missing"
        result = all_results['results']["RULE-3008"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-3008 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-3008 failed"


    def test_rule_3009(self, all_results):
        """
        Test RULE-3009: YAML line: - CRITICAL (Market access impact)
        Priority: CRITICAL
        """
        assert "RULE-3009" in all_results['results'], "Rule RULE-3009 missing"
        result = all_results['results']["RULE-3009"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-3009 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-3009 failed"


    def test_rule_3010(self, all_results):
        """
        Test RULE-3010: YAML line: - HIGH (Compliance risk)
        Priority: CRITICAL
        """
        assert "RULE-3010" in all_results['results'], "Rule RULE-3010 missing"
        result = all_results['results']["RULE-3010"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-3010 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-3010 failed"


    def test_rule_3011(self, all_results):
        """
        Test RULE-3011: YAML line: - MEDIUM (Process optimization)
        Priority: MEDIUM
        """
        assert "RULE-3011" in all_results['results'], "Rule RULE-3011 missing"
        result = all_results['results']["RULE-3011"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-3011 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-3011 failed"


    def test_rule_3012(self, all_results):
        """
        Test RULE-3012: YAML line: - LOW (Future consideration)
        Priority: MEDIUM
        """
        assert "RULE-3012" in all_results['results'], "Rule RULE-3012 missing"
        result = all_results['results']["RULE-3012"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-3012 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-3012 failed"


    def test_rule_3013(self, all_results):
        """
        Test RULE-3013: YAML line: validations:
        Priority: MEDIUM
        """
        assert "RULE-3013" in all_results['results'], "Rule RULE-3013 missing"
        result = all_results['results']["RULE-3013"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-3013 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-3013 failed"


    def test_rule_3014(self, all_results):
        """
        Test RULE-3014: YAML line: required: true
        Priority: CRITICAL
        """
        assert "RULE-3014" in all_results['results'], "Rule RULE-3014 missing"
        result = all_results['results']["RULE-3014"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-3014 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-3014 failed"


    def test_rule_3015(self, all_results):
        """
        Test RULE-3015: YAML line: - type: input
        Priority: MEDIUM
        """
        assert "RULE-3015" in all_results['results'], "Rule RULE-3015 missing"
        result = all_results['results']["RULE-3015"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-3015 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-3015 failed"


    def test_rule_3016(self, all_results):
        """
        Test RULE-3016: YAML line: id: regulation_name
        Priority: MEDIUM
        """
        assert "RULE-3016" in all_results['results'], "Rule RULE-3016 missing"
        result = all_results['results']["RULE-3016"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-3016 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-3016 failed"


    def test_rule_3017(self, all_results):
        """
        Test RULE-3017: YAML line: attributes:
        Priority: MEDIUM
        """
        assert "RULE-3017" in all_results['results'], "Rule RULE-3017 missing"
        result = all_results['results']["RULE-3017"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-3017 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-3017 failed"


    def test_rule_3018(self, all_results):
        """
        Test RULE-3018: YAML line: label: Regulation/Standard Name
        Priority: HIGH
        """
        assert "RULE-3018" in all_results['results'], "Rule RULE-3018 missing"
        result = all_results['results']["RULE-3018"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "HIGH" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-3018 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-3018 failed"


    def test_rule_3019(self, all_results):
        """
        Test RULE-3019: YAML line: description: Full name and reference (internal classification)
        Priority: MEDIUM
        """
        assert "RULE-3019" in all_results['results'], "Rule RULE-3019 missing"
        result = all_results['results']["RULE-3019"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-3019 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-3019 failed"


    def test_rule_3020(self, all_results):
        """
        Test RULE-3020: YAML line: validations:
        Priority: MEDIUM
        """
        assert "RULE-3020" in all_results['results'], "Rule RULE-3020 missing"
        result = all_results['results']["RULE-3020"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-3020 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-3020 failed"


    def test_rule_3021(self, all_results):
        """
        Test RULE-3021: YAML line: required: true
        Priority: CRITICAL
        """
        assert "RULE-3021" in all_results['results'], "Rule RULE-3021 missing"
        result = all_results['results']["RULE-3021"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-3021 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-3021 failed"


    def test_rule_3022(self, all_results):
        """
        Test RULE-3022: YAML line: - type: textarea
        Priority: MEDIUM
        """
        assert "RULE-3022" in all_results['results'], "Rule RULE-3022 missing"
        result = all_results['results']["RULE-3022"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-3022 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-3022 failed"


    def test_rule_3023(self, all_results):
        """
        Test RULE-3023: YAML line: id: business_impact
        Priority: MEDIUM
        """
        assert "RULE-3023" in all_results['results'], "Rule RULE-3023 missing"
        result = all_results['results']["RULE-3023"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-3023 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-3023 failed"


    def test_rule_3024(self, all_results):
        """
        Test RULE-3024: YAML line: attributes:
        Priority: MEDIUM
        """
        assert "RULE-3024" in all_results['results'], "Rule RULE-3024 missing"
        result = all_results['results']["RULE-3024"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-3024 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-3024 failed"


    def test_rule_3025(self, all_results):
        """
        Test RULE-3025: YAML line: label: Business Impact Assessment
        Priority: MEDIUM
        """
        assert "RULE-3025" in all_results['results'], "Rule RULE-3025 missing"
        result = all_results['results']["RULE-3025"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-3025 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-3025 failed"


    def test_rule_3026(self, all_results):
        """
        Test RULE-3026: YAML line: description: Detailed assessment of competitive and operational impac
        Priority: MEDIUM
        """
        assert "RULE-3026" in all_results['results'], "Rule RULE-3026 missing"
        result = all_results['results']["RULE-3026"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-3026 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-3026 failed"


    def test_rule_3027(self, all_results):
        """
        Test RULE-3027: YAML line: validations:
        Priority: MEDIUM
        """
        assert "RULE-3027" in all_results['results'], "Rule RULE-3027 missing"
        result = all_results['results']["RULE-3027"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-3027 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-3027 failed"


    def test_rule_3028(self, all_results):
        """
        Test RULE-3028: YAML line: required: true
        Priority: CRITICAL
        """
        assert "RULE-3028" in all_results['results'], "Rule RULE-3028 missing"
        result = all_results['results']["RULE-3028"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-3028 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-3028 failed"


    def test_rule_3029(self, all_results):
        """
        Test RULE-3029: YAML line: - type: checkboxes
        Priority: MEDIUM
        """
        assert "RULE-3029" in all_results['results'], "Rule RULE-3029 missing"
        result = all_results['results']["RULE-3029"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-3029 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-3029 failed"


    def test_rule_3030(self, all_results):
        """
        Test RULE-3030: YAML line: id: internal_clearance
        Priority: MEDIUM
        """
        assert "RULE-3030" in all_results['results'], "Rule RULE-3030 missing"
        result = all_results['results']["RULE-3030"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-3030 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-3030 failed"


    def test_rule_3031(self, all_results):
        """
        Test RULE-3031: YAML line: attributes:
        Priority: MEDIUM
        """
        assert "RULE-3031" in all_results['results'], "Rule RULE-3031 missing"
        result = all_results['results']["RULE-3031"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-3031 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-3031 failed"


    def test_rule_3032(self, all_results):
        """
        Test RULE-3032: YAML line: label: Internal Clearance
        Priority: MEDIUM
        """
        assert "RULE-3032" in all_results['results'], "Rule RULE-3032 missing"
        result = all_results['results']["RULE-3032"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-3032 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-3032 failed"


    def test_rule_3033(self, all_results):
        """
        Test RULE-3033: YAML line: options:
        Priority: MEDIUM
        """
        assert "RULE-3033" in all_results['results'], "Rule RULE-3033 missing"
        result = all_results['results']["RULE-3033"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-3033 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-3033 failed"


    def test_rule_3034(self, all_results):
        """
        Test RULE-3034: YAML line: - label: Legal team reviewed
        Priority: CRITICAL
        """
        assert "RULE-3034" in all_results['results'], "Rule RULE-3034 missing"
        result = all_results['results']["RULE-3034"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-3034 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-3034 failed"


    def test_rule_3035(self, all_results):
        """
        Test RULE-3035: YAML line: - label: Compliance team assessed
        Priority: CRITICAL
        """
        assert "RULE-3035" in all_results['results'], "Rule RULE-3035 missing"
        result = all_results['results']["RULE-3035"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-3035 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-3035 failed"


    def test_rule_3036(self, all_results):
        """
        Test RULE-3036: YAML line: - label: Business impact evaluated
        Priority: MEDIUM
        """
        assert "RULE-3036" in all_results['results'], "Rule RULE-3036 missing"
        result = all_results['results']["RULE-3036"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-3036 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-3036 failed"


    def test_rule_3037(self, all_results):
        """
        Test RULE-3037: YAML line: - label: Competitive analysis completed
        Priority: MEDIUM
        """
        assert "RULE-3037" in all_results['results'], "Rule RULE-3037 missing"
        result = all_results['results']["RULE-3037"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-3037 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-3037 failed"


    def test_rule_3038(self, all_results):
        """
        Test RULE-3038: YAML field 'version' must equal '1.0'
        Priority: HIGH
        """
        assert "RULE-3038" in all_results['results'], "Rule RULE-3038 missing"
        result = all_results['results']["RULE-3038"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "HIGH" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-3038 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-3038 failed"


    def test_rule_3039(self, all_results):
        """
        Test RULE-3039: YAML field 'deprecated' must equal 'False'
        Priority: CRITICAL
        """
        assert "RULE-3039" in all_results['results'], "Rule RULE-3039 missing"
        result = all_results['results']["RULE-3039"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-3039 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-3039 failed"


    def test_rule_3040(self, all_results):
        """
        Test RULE-3040: YAML field 'classification' must equal 'CONFIDENTIAL - Enterprise Evidence Manag
        Priority: MEDIUM
        """
        assert "RULE-3040" in all_results['results'], "Rule RULE-3040 missing"
        result = all_results['results']["RULE-3040"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-3040 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-3040 failed"


    def test_rule_3041(self, all_results):
        """
        Test RULE-3041: YAML field 'storage_tiers.immutable_store.path' must equal '02_audit_logging/sto
        Priority: MEDIUM
        """
        assert "RULE-3041" in all_results['results'], "Rule RULE-3041 missing"
        result = all_results['results']["RULE-3041"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-3041 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-3041 failed"


    def test_rule_3042(self, all_results):
        """
        Test RULE-3042: YAML field 'storage_tiers.immutable_store.retention' must equal 'permanent'
        Priority: MEDIUM
        """
        assert "RULE-3042" in all_results['results'], "Rule RULE-3042 missing"
        result = all_results['results']["RULE-3042"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-3042 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-3042 failed"


    def test_rule_3043(self, all_results):
        """
        Test RULE-3043: YAML field 'storage_tiers.immutable_store.integrity' must equal 'sha256_hash'
        Priority: MEDIUM
        """
        assert "RULE-3043" in all_results['results'], "Rule RULE-3043 missing"
        result = all_results['results']["RULE-3043"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-3043 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-3043 failed"


    def test_rule_3044(self, all_results):
        """
        Test RULE-3044: YAML field 'storage_tiers.immutable_store.encryption' must equal 'aes256_enterpr
        Priority: MEDIUM
        """
        assert "RULE-3044" in all_results['results'], "Rule RULE-3044 missing"
        result = all_results['results']["RULE-3044"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-3044 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-3044 failed"


    def test_rule_3045(self, all_results):
        """
        Test RULE-3045: YAML field 'storage_tiers.blockchain_anchors.enabled' must equal 'True'
        Priority: CRITICAL
        """
        assert "RULE-3045" in all_results['results'], "Rule RULE-3045 missing"
        result = all_results['results']["RULE-3045"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-3045 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-3045 failed"


    def test_rule_3046(self, all_results):
        """
        Test RULE-3046: YAML field 'storage_tiers.blockchain_anchors.path' must equal '02_audit_logging/
        Priority: HIGH
        """
        assert "RULE-3046" in all_results['results'], "Rule RULE-3046 missing"
        result = all_results['results']["RULE-3046"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "HIGH" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-3046 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-3046 failed"


    def test_rule_3047(self, all_results):
        """
        Test RULE-3047: YAML field 'storage_tiers.blockchain_anchors.service' must equal 'opentimestamp'
        Priority: MEDIUM
        """
        assert "RULE-3047" in all_results['results'], "Rule RULE-3047 missing"
        result = all_results['results']["RULE-3047"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-3047 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-3047 failed"


    def test_rule_3048(self, all_results):
        """
        Test RULE-3048: YAML field 'storage_tiers.blockchain_anchors.frequency' must equal 'weekly'
        Priority: MEDIUM
        """
        assert "RULE-3048" in all_results['results'], "Rule RULE-3048 missing"
        result = all_results['results']["RULE-3048"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-3048 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-3048 failed"


    def test_rule_3049(self, all_results):
        """
        Test RULE-3049: YAML field 'storage_tiers.blockchain_anchors.classification' must equal 'CONFIDE
        Priority: MEDIUM
        """
        assert "RULE-3049" in all_results['results'], "Rule RULE-3049 missing"
        result = all_results['results']["RULE-3049"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-3049 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-3049 failed"


    def test_rule_3050(self, all_results):
        """
        Test RULE-3050: YAML field 'storage_tiers.evidence_chain.path' must equal '23_compliance/evidenc
        Priority: CRITICAL
        """
        assert "RULE-3050" in all_results['results'], "Rule RULE-3050 missing"
        result = all_results['results']["RULE-3050"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-3050 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-3050 failed"


    def test_rule_3051(self, all_results):
        """
        Test RULE-3051: YAML field 'storage_tiers.evidence_chain.retention' must equal '10_years'
        Priority: MEDIUM
        """
        assert "RULE-3051" in all_results['results'], "Rule RULE-3051 missing"
        result = all_results['results']["RULE-3051"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-3051 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-3051 failed"


    def test_rule_3052(self, all_results):
        """
        Test RULE-3052: YAML field 'storage_tiers.evidence_chain.encryption' must equal 'aes256'
        Priority: MEDIUM
        """
        assert "RULE-3052" in all_results['results'], "Rule RULE-3052 missing"
        result = all_results['results']["RULE-3052"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-3052 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-3052 failed"


    def test_rule_3053(self, all_results):
        """
        Test RULE-3053: YAML field 'storage_tiers.evidence_chain.backup' must equal 'encrypted_offsite'
        Priority: MEDIUM
        """
        assert "RULE-3053" in all_results['results'], "Rule RULE-3053 missing"
        result = all_results['results']["RULE-3053"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-3053 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-3053 failed"


    def test_rule_3054(self, all_results):
        """
        Test RULE-3054: YAML field 'storage_tiers.internal_review_documentation.path' must equal '23_com
        Priority: CRITICAL
        """
        assert "RULE-3054" in all_results['results'], "Rule RULE-3054 missing"
        result = all_results['results']["RULE-3054"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-3054 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-3054 failed"


    def test_rule_3055(self, all_results):
        """
        Test RULE-3055: YAML field 'storage_tiers.internal_review_documentation.retention' must equal '1
        Priority: MEDIUM
        """
        assert "RULE-3055" in all_results['results'], "Rule RULE-3055 missing"
        result = all_results['results']["RULE-3055"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-3055 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-3055 failed"


    def test_rule_3056(self, all_results):
        """
        Test RULE-3056: YAML field 'storage_tiers.internal_review_documentation.encryption' must equal '
        Priority: MEDIUM
        """
        assert "RULE-3056" in all_results['results'], "Rule RULE-3056 missing"
        result = all_results['results']["RULE-3056"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-3056 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-3056 failed"


    def test_rule_3057(self, all_results):
        """
        Test RULE-3057: YAML field 'storage_tiers.internal_review_documentation.classification' must equ
        Priority: MEDIUM
        """
        assert "RULE-3057" in all_results['results'], "Rule RULE-3057 missing"
        result = all_results['results']["RULE-3057"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-3057 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-3057 failed"


    def test_rule_3058(self, all_results):
        """
        Test RULE-3058: YAML field 'storage_tiers.business_evidence.path' must equal '23_compliance/evid
        Priority: CRITICAL
        """
        assert "RULE-3058" in all_results['results'], "Rule RULE-3058 missing"
        result = all_results['results']["RULE-3058"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-3058 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-3058 failed"


    def test_rule_3059(self, all_results):
        """
        Test RULE-3059: YAML field 'storage_tiers.business_evidence.retention' must equal 'permanent'
        Priority: MEDIUM
        """
        assert "RULE-3059" in all_results['results'], "Rule RULE-3059 missing"
        result = all_results['results']["RULE-3059"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-3059 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-3059 failed"


    def test_rule_3060(self, all_results):
        """
        Test RULE-3060: YAML field 'storage_tiers.business_evidence.encryption' must equal 'aes256'
        Priority: MEDIUM
        """
        assert "RULE-3060" in all_results['results'], "Rule RULE-3060 missing"
        result = all_results['results']["RULE-3060"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-3060 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-3060 failed"


    def test_rule_3061(self, all_results):
        """
        Test RULE-3061: YAML field 'storage_tiers.business_evidence.classification' must equal 'CONFIDEN
        Priority: MEDIUM
        """
        assert "RULE-3061" in all_results['results'], "Rule RULE-3061 missing"
        result = all_results['results']["RULE-3061"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-3061 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-3061 failed"


    def test_rule_3062(self, all_results):
        """
        Test RULE-3062: YAML field 'audit_enhancement.blockchain_anchoring' must equal 'enabled'
        Priority: HIGH
        """
        assert "RULE-3062" in all_results['results'], "Rule RULE-3062 missing"
        result = all_results['results']["RULE-3062"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "HIGH" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-3062 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-3062 failed"


    def test_rule_3063(self, all_results):
        """
        Test RULE-3063: YAML field 'audit_enhancement.opentimestamp_enabled' must equal 'True'
        Priority: CRITICAL
        """
        assert "RULE-3063" in all_results['results'], "Rule RULE-3063 missing"
        result = all_results['results']["RULE-3063"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-3063 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-3063 failed"


    def test_rule_3064(self, all_results):
        """
        Test RULE-3064: YAML field 'audit_enhancement.evidence_timestamping' must equal 'full_blockchain
        Priority: HIGH
        """
        assert "RULE-3064" in all_results['results'], "Rule RULE-3064 missing"
        result = all_results['results']["RULE-3064"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "HIGH" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-3064 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-3064 failed"


    def test_rule_3065(self, all_results):
        """
        Test RULE-3065: YAML field 'audit_enhancement.proof_of_existence' must equal 'sha256+blockchain+
        Priority: HIGH
        """
        assert "RULE-3065" in all_results['results'], "Rule RULE-3065 missing"
        result = all_results['results']["RULE-3065"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "HIGH" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-3065 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-3065 failed"


    def test_rule_3066(self, all_results):
        """
        Test RULE-3066: YAML field 'audit_enhancement.verification_method' must equal 'hash_chain+blockc
        Priority: HIGH
        """
        assert "RULE-3066" in all_results['results'], "Rule RULE-3066 missing"
        result = all_results['results']["RULE-3066"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "HIGH" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-3066 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-3066 failed"


    def test_rule_3067(self, all_results):
        """
        Test RULE-3067: YAML field 'audit_enhancement.enterprise_controls' must equal 'full_audit_trail'
        Priority: MEDIUM
        """
        assert "RULE-3067" in all_results['results'], "Rule RULE-3067 missing"
        result = all_results['results']["RULE-3067"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-3067 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-3067 failed"


    def test_rule_3068(self, all_results):
        """
        Test RULE-3068: YAML line: version: "1.0"
        Priority: MEDIUM
        """
        assert "RULE-3068" in all_results['results'], "Rule RULE-3068 missing"
        result = all_results['results']["RULE-3068"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-3068 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-3068 failed"


    def test_rule_3069(self, all_results):
        """
        Test RULE-3069: YAML line: deprecated: false
        Priority: MEDIUM
        """
        assert "RULE-3069" in all_results['results'], "Rule RULE-3069 missing"
        result = all_results['results']["RULE-3069"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-3069 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-3069 failed"


    def test_rule_3070(self, all_results):
        """
        Test RULE-3070: YAML line: classification: "CONFIDENTIAL - Enterprise Evidence Management"
        Priority: MEDIUM
        """
        assert "RULE-3070" in all_results['results'], "Rule RULE-3070 missing"
        result = all_results['results']["RULE-3070"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-3070 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-3070 failed"


    def test_rule_3071(self, all_results):
        """
        Test RULE-3071: YAML line: storage_tiers:
        Priority: MEDIUM
        """
        assert "RULE-3071" in all_results['results'], "Rule RULE-3071 missing"
        result = all_results['results']["RULE-3071"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-3071 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-3071 failed"


    def test_rule_3072(self, all_results):
        """
        Test RULE-3072: YAML line: immutable_store:
        Priority: MEDIUM
        """
        assert "RULE-3072" in all_results['results'], "Rule RULE-3072 missing"
        result = all_results['results']["RULE-3072"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-3072 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-3072 failed"


    def test_rule_3073(self, all_results):
        """
        Test RULE-3073: YAML line: path: "02_audit_logging/storage/worm/immutable_store/"
        Priority: MEDIUM
        """
        assert "RULE-3073" in all_results['results'], "Rule RULE-3073 missing"
        result = all_results['results']["RULE-3073"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-3073 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-3073 failed"


    def test_rule_3074(self, all_results):
        """
        Test RULE-3074: YAML line: retention: "permanent"
        Priority: MEDIUM
        """
        assert "RULE-3074" in all_results['results'], "Rule RULE-3074 missing"
        result = all_results['results']["RULE-3074"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-3074 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-3074 failed"


    def test_rule_3075(self, all_results):
        """
        Test RULE-3075: YAML line: integrity: "sha256_hash"
        Priority: MEDIUM
        """
        assert "RULE-3075" in all_results['results'], "Rule RULE-3075 missing"
        result = all_results['results']["RULE-3075"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-3075 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-3075 failed"


    def test_rule_3076(self, all_results):
        """
        Test RULE-3076: YAML line: encryption: "aes256_enterprise"
        Priority: MEDIUM
        """
        assert "RULE-3076" in all_results['results'], "Rule RULE-3076 missing"
        result = all_results['results']["RULE-3076"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-3076 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-3076 failed"


    def test_rule_3077(self, all_results):
        """
        Test RULE-3077: YAML line: blockchain_anchors:
        Priority: MEDIUM
        """
        assert "RULE-3077" in all_results['results'], "Rule RULE-3077 missing"
        result = all_results['results']["RULE-3077"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-3077 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-3077 failed"


    def test_rule_3078(self, all_results):
        """
        Test RULE-3078: YAML line: enabled: true  # Enabled for enterprise
        Priority: MEDIUM
        """
        assert "RULE-3078" in all_results['results'], "Rule RULE-3078 missing"
        result = all_results['results']["RULE-3078"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-3078 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-3078 failed"


    def test_rule_3079(self, all_results):
        """
        Test RULE-3079: YAML line: path: "02_audit_logging/storage/blockchain_anchors/"
        Priority: MEDIUM
        """
        assert "RULE-3079" in all_results['results'], "Rule RULE-3079 missing"
        result = all_results['results']["RULE-3079"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-3079 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-3079 failed"


    def test_rule_3080(self, all_results):
        """
        Test RULE-3080: YAML line: service: "opentimestamp"
        Priority: MEDIUM
        """
        assert "RULE-3080" in all_results['results'], "Rule RULE-3080 missing"
        result = all_results['results']["RULE-3080"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-3080 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-3080 failed"


    def test_rule_3081(self, all_results):
        """
        Test RULE-3081: YAML line: frequency: "weekly"
        Priority: MEDIUM
        """
        assert "RULE-3081" in all_results['results'], "Rule RULE-3081 missing"
        result = all_results['results']["RULE-3081"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-3081 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-3081 failed"


    def test_rule_3082(self, all_results):
        """
        Test RULE-3082: YAML line: classification: "CONFIDENTIAL"
        Priority: MEDIUM
        """
        assert "RULE-3082" in all_results['results'], "Rule RULE-3082 missing"
        result = all_results['results']["RULE-3082"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-3082 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-3082 failed"


    def test_rule_3083(self, all_results):
        """
        Test RULE-3083: YAML line: evidence_chain:
        Priority: MEDIUM
        """
        assert "RULE-3083" in all_results['results'], "Rule RULE-3083 missing"
        result = all_results['results']["RULE-3083"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-3083 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-3083 failed"


    def test_rule_3084(self, all_results):
        """
        Test RULE-3084: YAML line: path: "23_compliance/evidence/ci_runs/"
        Priority: CRITICAL
        """
        assert "RULE-3084" in all_results['results'], "Rule RULE-3084 missing"
        result = all_results['results']["RULE-3084"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-3084 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-3084 failed"


    def test_rule_3085(self, all_results):
        """
        Test RULE-3085: YAML line: retention: "10_years" # Longer than public
        Priority: MEDIUM
        """
        assert "RULE-3085" in all_results['results'], "Rule RULE-3085 missing"
        result = all_results['results']["RULE-3085"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-3085 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-3085 failed"


    def test_rule_3086(self, all_results):
        """
        Test RULE-3086: YAML line: encryption: "aes256"
        Priority: MEDIUM
        """
        assert "RULE-3086" in all_results['results'], "Rule RULE-3086 missing"
        result = all_results['results']["RULE-3086"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-3086 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-3086 failed"


    def test_rule_3087(self, all_results):
        """
        Test RULE-3087: YAML line: backup: "encrypted_offsite"
        Priority: MEDIUM
        """
        assert "RULE-3087" in all_results['results'], "Rule RULE-3087 missing"
        result = all_results['results']["RULE-3087"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-3087 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-3087 failed"


    def test_rule_3088(self, all_results):
        """
        Test RULE-3088: YAML line: internal_review_documentation:
        Priority: MEDIUM
        """
        assert "RULE-3088" in all_results['results'], "Rule RULE-3088 missing"
        result = all_results['results']["RULE-3088"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-3088 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-3088 failed"


    def test_rule_3089(self, all_results):
        """
        Test RULE-3089: YAML line: path: "23_compliance/reviews/internal/"
        Priority: CRITICAL
        """
        assert "RULE-3089" in all_results['results'], "Rule RULE-3089 missing"
        result = all_results['results']["RULE-3089"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-3089 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-3089 failed"


    def test_rule_3090(self, all_results):
        """
        Test RULE-3090: YAML line: retention: "15_years" # Business records retention
        Priority: MEDIUM
        """
        assert "RULE-3090" in all_results['results'], "Rule RULE-3090 missing"
        result = all_results['results']["RULE-3090"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-3090 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-3090 failed"


    def test_rule_3091(self, all_results):
        """
        Test RULE-3091: YAML line: encryption: "aes256"
        Priority: MEDIUM
        """
        assert "RULE-3091" in all_results['results'], "Rule RULE-3091 missing"
        result = all_results['results']["RULE-3091"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-3091 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-3091 failed"


    def test_rule_3092(self, all_results):
        """
        Test RULE-3092: YAML line: classification: "CONFIDENTIAL"
        Priority: MEDIUM
        """
        assert "RULE-3092" in all_results['results'], "Rule RULE-3092 missing"
        result = all_results['results']["RULE-3092"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-3092 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-3092 failed"


    def test_rule_3093(self, all_results):
        """
        Test RULE-3093: YAML line: business_evidence:
        Priority: MEDIUM
        """
        assert "RULE-3093" in all_results['results'], "Rule RULE-3093 missing"
        result = all_results['results']["RULE-3093"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-3093 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-3093 failed"


    def test_rule_3094(self, all_results):
        """
        Test RULE-3094: YAML line: path: "23_compliance/evidence/business_assessments/"
        Priority: CRITICAL
        """
        assert "RULE-3094" in all_results['results'], "Rule RULE-3094 missing"
        result = all_results['results']["RULE-3094"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-3094 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-3094 failed"


    def test_rule_3095(self, all_results):
        """
        Test RULE-3095: YAML line: retention: "permanent"
        Priority: MEDIUM
        """
        assert "RULE-3095" in all_results['results'], "Rule RULE-3095 missing"
        result = all_results['results']["RULE-3095"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-3095 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-3095 failed"


    def test_rule_3096(self, all_results):
        """
        Test RULE-3096: YAML line: encryption: "aes256"
        Priority: MEDIUM
        """
        assert "RULE-3096" in all_results['results'], "Rule RULE-3096 missing"
        result = all_results['results']["RULE-3096"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-3096 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-3096 failed"


    def test_rule_3097(self, all_results):
        """
        Test RULE-3097: YAML line: classification: "CONFIDENTIAL"
        Priority: MEDIUM
        """
        assert "RULE-3097" in all_results['results'], "Rule RULE-3097 missing"
        result = all_results['results']["RULE-3097"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-3097 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-3097 failed"


    def test_rule_3098(self, all_results):
        """
        Test RULE-3098: YAML line: audit_enhancement:
        Priority: MEDIUM
        """
        assert "RULE-3098" in all_results['results'], "Rule RULE-3098 missing"
        result = all_results['results']["RULE-3098"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-3098 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-3098 failed"


    def test_rule_3099(self, all_results):
        """
        Test RULE-3099: YAML line: blockchain_anchoring: "enabled"
        Priority: MEDIUM
        """
        assert "RULE-3099" in all_results['results'], "Rule RULE-3099 missing"
        result = all_results['results']["RULE-3099"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-3099 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-3099 failed"


    def test_rule_3100(self, all_results):
        """
        Test RULE-3100: YAML line: opentimestamp_enabled: true
        Priority: MEDIUM
        """
        assert "RULE-3100" in all_results['results'], "Rule RULE-3100 missing"
        result = all_results['results']["RULE-3100"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-3100 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-3100 failed"


    def test_rule_3101(self, all_results):
        """
        Test RULE-3101: YAML line: evidence_timestamping: "full_blockchain"
        Priority: MEDIUM
        """
        assert "RULE-3101" in all_results['results'], "Rule RULE-3101 missing"
        result = all_results['results']["RULE-3101"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-3101 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-3101 failed"


    def test_rule_3102(self, all_results):
        """
        Test RULE-3102: YAML line: proof_of_existence: "sha256+blockchain+timestamp"
        Priority: MEDIUM
        """
        assert "RULE-3102" in all_results['results'], "Rule RULE-3102 missing"
        result = all_results['results']["RULE-3102"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-3102 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-3102 failed"


    def test_rule_3103(self, all_results):
        """
        Test RULE-3103: YAML line: verification_method: "hash_chain+blockchain"
        Priority: MEDIUM
        """
        assert "RULE-3103" in all_results['results'], "Rule RULE-3103 missing"
        result = all_results['results']["RULE-3103"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-3103 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-3103 failed"


    def test_rule_3104(self, all_results):
        """
        Test RULE-3104: YAML line: enterprise_controls: "full_audit_trail"
        Priority: MEDIUM
        """
        assert "RULE-3104" in all_results['results'], "Rule RULE-3104 missing"
        result = all_results['results']["RULE-3104"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-3104 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-3104 failed"


    def test_rule_3105(self, all_results):
        """
        Test RULE-3105: YAML field 'version' must equal '1.0'
        Priority: HIGH
        """
        assert "RULE-3105" in all_results['results'], "Rule RULE-3105 missing"
        result = all_results['results']["RULE-3105"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "HIGH" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-3105 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-3105 failed"


    def test_rule_3106(self, all_results):
        """
        Test RULE-3106: YAML field 'date' must equal '2025-09-15'
        Priority: MEDIUM
        """
        assert "RULE-3106" in all_results['results'], "Rule RULE-3106 missing"
        result = all_results['results']["RULE-3106"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-3106 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-3106 failed"


    def test_rule_3107(self, all_results):
        """
        Test RULE-3107: YAML field 'deprecated' must equal 'False'
        Priority: CRITICAL
        """
        assert "RULE-3107" in all_results['results'], "Rule RULE-3107 missing"
        result = all_results['results']["RULE-3107"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-3107 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-3107 failed"


    def test_rule_3108(self, all_results):
        """
        Test RULE-3108: YAML field 'classification' must equal 'CONFIDENTIAL - Enterprise Quarantine Man
        Priority: MEDIUM
        """
        assert "RULE-3108" in all_results['results'], "Rule RULE-3108 missing"
        result = all_results['results']["RULE-3108"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-3108 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-3108 failed"


    def test_rule_3109(self, all_results):
        """
        Test RULE-3109: YAML field 'quarantine_singleton.canonical_path' must equal '02_audit_logging/qu
        Priority: MEDIUM
        """
        assert "RULE-3109" in all_results['results'], "Rule RULE-3109 missing"
        result = all_results['results']["RULE-3109"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-3109 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-3109 failed"


    def test_rule_3110(self, all_results):
        """
        Test RULE-3110: YAML field 'quarantine_singleton.principle' must equal 'Single source of truth f
        Priority: MEDIUM
        """
        assert "RULE-3110" in all_results['results'], "Rule RULE-3110 missing"
        result = all_results['results']["RULE-3110"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-3110 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-3110 failed"


    def test_rule_3111(self, all_results):
        """
        Test RULE-3111: YAML field 'quarantine_singleton.access_control' must equal 'Restricted to compl
        Priority: CRITICAL
        """
        assert "RULE-3111" in all_results['results'], "Rule RULE-3111 missing"
        result = all_results['results']["RULE-3111"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-3111 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-3111 failed"


    def test_rule_3112(self, all_results):
        """
        Test RULE-3112: YAML field 'quarantine_singleton.encryption' must equal 'AES-256 with enterprise
        Priority: MEDIUM
        """
        assert "RULE-3112" in all_results['results'], "Rule RULE-3112 missing"
        result = all_results['results']["RULE-3112"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-3112 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-3112 failed"


    def test_rule_3113(self, all_results):
        """
        Test RULE-3113: YAML list 'quarantine_triggers.compliance_violations' must contain 6 elements
        Priority: CRITICAL
        """
        assert "RULE-3113" in all_results['results'], "Rule RULE-3113 missing"
        result = all_results['results']["RULE-3113"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-3113 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-3113 failed"


    def test_rule_3114(self, all_results):
        """
        Test RULE-3114: YAML list 'quarantine_triggers.regulatory_flags' must contain 5 elements
        Priority: CRITICAL
        """
        assert "RULE-3114" in all_results['results'], "Rule RULE-3114 missing"
        result = all_results['results']["RULE-3114"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-3114 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-3114 failed"


    def test_rule_3115(self, all_results):
        """
        Test RULE-3115: YAML list 'quarantine_triggers.technical_violations' must contain 5 elements
        Priority: HIGH
        """
        assert "RULE-3115" in all_results['results'], "Rule RULE-3115 missing"
        result = all_results['results']["RULE-3115"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "HIGH" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-3115 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-3115 failed"


    def test_rule_3116(self, all_results):
        """
        Test RULE-3116: YAML field 'quarantine_processing.intake_processor' must equal '02_audit_logging
        Priority: MEDIUM
        """
        assert "RULE-3116" in all_results['results'], "Rule RULE-3116 missing"
        result = all_results['results']["RULE-3116"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-3116 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-3116 failed"


    def test_rule_3117(self, all_results):
        """
        Test RULE-3117: YAML field 'quarantine_processing.auto_quarantine' must equal 'True'
        Priority: CRITICAL
        """
        assert "RULE-3117" in all_results['results'], "Rule RULE-3117 missing"
        result = all_results['results']["RULE-3117"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-3117 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-3117 failed"


    def test_rule_3118(self, all_results):
        """
        Test RULE-3118: YAML field 'quarantine_processing.manual_override_required' must equal 'Complian
        Priority: CRITICAL
        """
        assert "RULE-3118" in all_results['results'], "Rule RULE-3118 missing"
        result = all_results['results']["RULE-3118"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-3118 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-3118 failed"


    def test_rule_3119(self, all_results):
        """
        Test RULE-3119: YAML field 'quarantine_processing.escalation_timeline' must equal '24 hours for 
        Priority: CRITICAL
        """
        assert "RULE-3119" in all_results['results'], "Rule RULE-3119 missing"
        result = all_results['results']["RULE-3119"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-3119 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-3119 failed"


    def test_rule_3120(self, all_results):
        """
        Test RULE-3120: YAML field 'quarantine_retention.policies_file' must equal '02_audit_logging/qua
        Priority: MEDIUM
        """
        assert "RULE-3120" in all_results['results'], "Rule RULE-3120 missing"
        result = all_results['results']["RULE-3120"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-3120 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-3120 failed"


    def test_rule_3121(self, all_results):
        """
        Test RULE-3121: YAML field 'quarantine_retention.retention_periods.compliance_violations' must e
        Priority: CRITICAL
        """
        assert "RULE-3121" in all_results['results'], "Rule RULE-3121 missing"
        result = all_results['results']["RULE-3121"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-3121 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-3121 failed"


    def test_rule_3122(self, all_results):
        """
        Test RULE-3122: YAML field 'quarantine_retention.retention_periods.regulatory_flags' must equal 
        Priority: MEDIUM
        """
        assert "RULE-3122" in all_results['results'], "Rule RULE-3122 missing"
        result = all_results['results']["RULE-3122"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-3122 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-3122 failed"


    def test_rule_3123(self, all_results):
        """
        Test RULE-3123: YAML field 'quarantine_retention.retention_periods.technical_violations' must eq
        Priority: MEDIUM
        """
        assert "RULE-3123" in all_results['results'], "Rule RULE-3123 missing"
        result = all_results['results']["RULE-3123"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-3123 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-3123 failed"


    def test_rule_3124(self, all_results):
        """
        Test RULE-3124: YAML field 'quarantine_retention.retention_periods.business_critical' must equal
        Priority: CRITICAL
        """
        assert "RULE-3124" in all_results['results'], "Rule RULE-3124 missing"
        result = all_results['results']["RULE-3124"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-3124 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-3124 failed"


    def test_rule_3125(self, all_results):
        """
        Test RULE-3125: YAML field 'quarantine_retention.retention_periods.legal_hold' must equal 'Until
        Priority: CRITICAL
        """
        assert "RULE-3125" in all_results['results'], "Rule RULE-3125 missing"
        result = all_results['results']["RULE-3125"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-3125 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-3125 failed"


    def test_rule_3126(self, all_results):
        """
        Test RULE-3126: YAML field 'quarantine_retention.purge_automation' must equal 'False'
        Priority: CRITICAL
        """
        assert "RULE-3126" in all_results['results'], "Rule RULE-3126 missing"
        result = all_results['results']["RULE-3126"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-3126 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-3126 failed"


    def test_rule_3127(self, all_results):
        """
        Test RULE-3127: YAML field 'quarantine_retention.archive_to_cold_storage' must equal 'After 2 ye
        Priority: MEDIUM
        """
        assert "RULE-3127" in all_results['results'], "Rule RULE-3127 missing"
        result = all_results['results']["RULE-3127"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-3127 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-3127 failed"


    def test_rule_3128(self, all_results):
        """
        Test RULE-3128: YAML field 'quarantine_retention.enterprise_backup' must equal 'Encrypted offsit
        Priority: HIGH
        """
        assert "RULE-3128" in all_results['results'], "Rule RULE-3128 missing"
        result = all_results['results']["RULE-3128"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "HIGH" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-3128 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-3128 failed"


    def test_rule_3129(self, all_results):
        """
        Test RULE-3129: YAML field 'hash_ledger_system.ledger_file' must equal '02_audit_logging/quarant
        Priority: MEDIUM
        """
        assert "RULE-3129" in all_results['results'], "Rule RULE-3129 missing"
        result = all_results['results']["RULE-3129"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-3129 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-3129 failed"


    def test_rule_3130(self, all_results):
        """
        Test RULE-3130: YAML field 'hash_ledger_system.hash_algorithm' must equal 'SHA-256'
        Priority: MEDIUM
        """
        assert "RULE-3130" in all_results['results'], "Rule RULE-3130 missing"
        result = all_results['results']["RULE-3130"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-3130 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-3130 failed"


    def test_rule_3131(self, all_results):
        """
        Test RULE-3131: YAML field 'hash_ledger_system.chain_integrity' must equal 'Each entry includes 
        Priority: MEDIUM
        """
        assert "RULE-3131" in all_results['results'], "Rule RULE-3131 missing"
        result = all_results['results']["RULE-3131"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-3131 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-3131 failed"


    def test_rule_3132(self, all_results):
        """
        Test RULE-3132: YAML field 'hash_ledger_system.immutable_properties' must equal 'True'
        Priority: CRITICAL
        """
        assert "RULE-3132" in all_results['results'], "Rule RULE-3132 missing"
        result = all_results['results']["RULE-3132"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-3132 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-3132 failed"


    def test_rule_3133(self, all_results):
        """
        Test RULE-3133: YAML field 'hash_ledger_system.blockchain_anchoring' must equal 'Daily commitmen
        Priority: HIGH
        """
        assert "RULE-3133" in all_results['results'], "Rule RULE-3133 missing"
        result = all_results['results']["RULE-3133"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "HIGH" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-3133 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-3133 failed"


    def test_rule_3134(self, all_results):
        """
        Test RULE-3134: YAML field 'hash_ledger_system.ledger_structure.entry_id' must equal 'UUID v4'
        Priority: MEDIUM
        """
        assert "RULE-3134" in all_results['results'], "Rule RULE-3134 missing"
        result = all_results['results']["RULE-3134"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-3134 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-3134 failed"


    def test_rule_3135(self, all_results):
        """
        Test RULE-3135: YAML field 'hash_ledger_system.ledger_structure.timestamp' must equal 'ISO 8601 
        Priority: MEDIUM
        """
        assert "RULE-3135" in all_results['results'], "Rule RULE-3135 missing"
        result = all_results['results']["RULE-3135"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-3135 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-3135 failed"


    def test_rule_3136(self, all_results):
        """
        Test RULE-3136: YAML field 'hash_ledger_system.ledger_structure.item_hash' must equal 'SHA-256 o
        Priority: MEDIUM
        """
        assert "RULE-3136" in all_results['results'], "Rule RULE-3136 missing"
        result = all_results['results']["RULE-3136"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-3136 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-3136 failed"


    def test_rule_3137(self, all_results):
        """
        Test RULE-3137: YAML field 'hash_ledger_system.ledger_structure.trigger_reason' must equal 'Clas
        Priority: MEDIUM
        """
        assert "RULE-3137" in all_results['results'], "Rule RULE-3137 missing"
        result = all_results['results']["RULE-3137"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-3137 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-3137 failed"


    def test_rule_3138(self, all_results):
        """
        Test RULE-3138: YAML field 'hash_ledger_system.ledger_structure.quarantine_officer' must equal '
        Priority: MEDIUM
        """
        assert "RULE-3138" in all_results['results'], "Rule RULE-3138 missing"
        result = all_results['results']["RULE-3138"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-3138 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-3138 failed"


    def test_rule_3139(self, all_results):
        """
        Test RULE-3139: YAML field 'hash_ledger_system.ledger_structure.business_impact' must equal 'Rev
        Priority: CRITICAL
        """
        assert "RULE-3139" in all_results['results'], "Rule RULE-3139 missing"
        result = all_results['results']["RULE-3139"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-3139 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-3139 failed"


    def test_rule_3140(self, all_results):
        """
        Test RULE-3140: YAML field 'hash_ledger_system.ledger_structure.previous_hash' must equal 'Chain
        Priority: MEDIUM
        """
        assert "RULE-3140" in all_results['results'], "Rule RULE-3140 missing"
        result = all_results['results']["RULE-3140"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-3140 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-3140 failed"


    def test_rule_3141(self, all_results):
        """
        Test RULE-3141: YAML field 'hash_ledger_system.ledger_structure.blockchain_anchor' must equal 'E
        Priority: HIGH
        """
        assert "RULE-3141" in all_results['results'], "Rule RULE-3141 missing"
        result = all_results['results']["RULE-3141"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "HIGH" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-3141 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-3141 failed"


    def test_rule_3142(self, all_results):
        """
        Test RULE-3142: YAML list 'quarantine_governance.review_committee' must contain 5 elements
        Priority: CRITICAL
        """
        assert "RULE-3142" in all_results['results'], "Rule RULE-3142 missing"
        result = all_results['results']["RULE-3142"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-3142 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-3142 failed"


    def test_rule_3143(self, all_results):
        """
        Test RULE-3143: YAML field 'quarantine_governance.review_schedule.daily' must equal 'New quarant
        Priority: MEDIUM
        """
        assert "RULE-3143" in all_results['results'], "Rule RULE-3143 missing"
        result = all_results['results']["RULE-3143"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-3143 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-3143 failed"


    def test_rule_3144(self, all_results):
        """
        Test RULE-3144: YAML field 'quarantine_governance.review_schedule.weekly' must equal 'Pending re
        Priority: MEDIUM
        """
        assert "RULE-3144" in all_results['results'], "Rule RULE-3144 missing"
        result = all_results['results']["RULE-3144"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-3144 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-3144 failed"


    def test_rule_3145(self, all_results):
        """
        Test RULE-3145: YAML field 'quarantine_governance.review_schedule.monthly' must equal 'Quarantin
        Priority: MEDIUM
        """
        assert "RULE-3145" in all_results['results'], "Rule RULE-3145 missing"
        result = all_results['results']["RULE-3145"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-3145 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-3145 failed"


    def test_rule_3146(self, all_results):
        """
        Test RULE-3146: YAML field 'quarantine_governance.review_schedule.quarterly' must equal 'Full qu
        Priority: MEDIUM
        """
        assert "RULE-3146" in all_results['results'], "Rule RULE-3146 missing"
        result = all_results['results']["RULE-3146"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-3146 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-3146 failed"


    def test_rule_3147(self, all_results):
        """
        Test RULE-3147: YAML field 'quarantine_governance.release_criteria.compliance_remediation' must 
        Priority: CRITICAL
        """
        assert "RULE-3147" in all_results['results'], "Rule RULE-3147 missing"
        result = all_results['results']["RULE-3147"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-3147 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-3147 failed"


    def test_rule_3148(self, all_results):
        """
        Test RULE-3148: YAML field 'quarantine_governance.release_criteria.legal_clearance' must equal '
        Priority: CRITICAL
        """
        assert "RULE-3148" in all_results['results'], "Rule RULE-3148 missing"
        result = all_results['results']["RULE-3148"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-3148 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-3148 failed"


    def test_rule_3149(self, all_results):
        """
        Test RULE-3149: YAML field 'quarantine_governance.release_criteria.business_approval' must equal
        Priority: MEDIUM
        """
        assert "RULE-3149" in all_results['results'], "Rule RULE-3149 missing"
        result = all_results['results']["RULE-3149"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-3149 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-3149 failed"


    def test_rule_3150(self, all_results):
        """
        Test RULE-3150: YAML field 'quarantine_governance.release_criteria.technical_validation' must eq
        Priority: CRITICAL
        """
        assert "RULE-3150" in all_results['results'], "Rule RULE-3150 missing"
        result = all_results['results']["RULE-3150"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-3150 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-3150 failed"


    def test_rule_3151(self, all_results):
        """
        Test RULE-3151: YAML field 'quarantine_governance.release_criteria.documentation_complete' must 
        Priority: MEDIUM
        """
        assert "RULE-3151" in all_results['results'], "Rule RULE-3151 missing"
        result = all_results['results']["RULE-3151"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-3151 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-3151 failed"


    def test_rule_3152(self, all_results):
        """
        Test RULE-3152: YAML field 'quarantine_monitoring.dashboard_integration' must equal 'Real-time q
        Priority: MEDIUM
        """
        assert "RULE-3152" in all_results['results'], "Rule RULE-3152 missing"
        result = all_results['results']["RULE-3152"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-3152 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-3152 failed"


    def test_rule_3153(self, all_results):
        """
        Test RULE-3153: YAML field 'quarantine_monitoring.alert_system' must equal 'Immediate notificati
        Priority: MEDIUM
        """
        assert "RULE-3153" in all_results['results'], "Rule RULE-3153 missing"
        result = all_results['results']["RULE-3153"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-3153 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-3153 failed"


    def test_rule_3154(self, all_results):
        """
        Test RULE-3154: YAML field 'quarantine_monitoring.reporting_integration' must equal 'Quarterly b
        Priority: MEDIUM
        """
        assert "RULE-3154" in all_results['results'], "Rule RULE-3154 missing"
        result = all_results['results']["RULE-3154"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-3154 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-3154 failed"


    def test_rule_3155(self, all_results):
        """
        Test RULE-3155: YAML field 'quarantine_monitoring.competitive_intelligence' must equal 'Market i
        Priority: MEDIUM
        """
        assert "RULE-3155" in all_results['results'], "Rule RULE-3155 missing"
        result = all_results['results']["RULE-3155"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-3155 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-3155 failed"


    def test_rule_3156(self, all_results):
        """
        Test RULE-3156: YAML list 'quarantine_monitoring.quarantine_metrics' must contain 6 elements
        Priority: CRITICAL
        """
        assert "RULE-3156" in all_results['results'], "Rule RULE-3156 missing"
        result = all_results['results']["RULE-3156"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-3156 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-3156 failed"


    def test_rule_3157(self, all_results):
        """
        Test RULE-3157: YAML field 'anti_gaming_quarantine.quarantine_gaming_detection' must equal 'Moni
        Priority: MEDIUM
        """
        assert "RULE-3157" in all_results['results'], "Rule RULE-3157 missing"
        result = all_results['results']["RULE-3157"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-3157 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-3157 failed"


    def test_rule_3158(self, all_results):
        """
        Test RULE-3158: YAML field 'anti_gaming_quarantine.bypass_attempt_logging' must equal 'Log all q
        Priority: MEDIUM
        """
        assert "RULE-3158" in all_results['results'], "Rule RULE-3158 missing"
        result = all_results['results']["RULE-3158"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-3158 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-3158 failed"


    def test_rule_3159(self, all_results):
        """
        Test RULE-3159: YAML field 'anti_gaming_quarantine.false_quarantine_prevention' must equal 'Prev
        Priority: CRITICAL
        """
        assert "RULE-3159" in all_results['results'], "Rule RULE-3159 missing"
        result = all_results['results']["RULE-3159"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-3159 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-3159 failed"


    def test_rule_3160(self, all_results):
        """
        Test RULE-3160: YAML field 'anti_gaming_quarantine.quarantine_integrity_verification' must equal
        Priority: MEDIUM
        """
        assert "RULE-3160" in all_results['results'], "Rule RULE-3160 missing"
        result = all_results['results']["RULE-3160"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-3160 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-3160 failed"


    def test_rule_3161(self, all_results):
        """
        Test RULE-3161: YAML field 'anti_gaming_quarantine.insider_threat_monitoring' must equal 'Monito
        Priority: MEDIUM
        """
        assert "RULE-3161" in all_results['results'], "Rule RULE-3161 missing"
        result = all_results['results']["RULE-3161"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-3161 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-3161 failed"


    def test_rule_3162(self, all_results):
        """
        Test RULE-3162: YAML field 'integration_points.compliance_system' must equal '23_compliance/poli
        Priority: CRITICAL
        """
        assert "RULE-3162" in all_results['results'], "Rule RULE-3162 missing"
        result = all_results['results']["RULE-3162"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-3162 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-3162 failed"


    def test_rule_3163(self, all_results):
        """
        Test RULE-3163: YAML field 'integration_points.audit_logging' must equal '02_audit_logging/stora
        Priority: MEDIUM
        """
        assert "RULE-3163" in all_results['results'], "Rule RULE-3163 missing"
        result = all_results['results']["RULE-3163"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-3163 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-3163 failed"


    def test_rule_3164(self, all_results):
        """
        Test RULE-3164: YAML field 'integration_points.governance_legal' must equal '07_governance_legal
        Priority: CRITICAL
        """
        assert "RULE-3164" in all_results['results'], "Rule RULE-3164 missing"
        result = all_results['results']["RULE-3164"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-3164 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-3164 failed"


    def test_rule_3165(self, all_results):
        """
        Test RULE-3165: YAML field 'integration_points.business_intelligence' must equal 'Competitive im
        Priority: MEDIUM
        """
        assert "RULE-3165" in all_results['results'], "Rule RULE-3165 missing"
        result = all_results['results']["RULE-3165"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-3165 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-3165 failed"


    def test_rule_3166(self, all_results):
        """
        Test RULE-3166: YAML field 'integration_points.enterprise_dashboard' must equal 'Real-time quara
        Priority: MEDIUM
        """
        assert "RULE-3166" in all_results['results'], "Rule RULE-3166 missing"
        result = all_results['results']["RULE-3166"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-3166 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-3166 failed"


    def test_rule_3167(self, all_results):
        """
        Test RULE-3167: YAML line: version: "1.0"
        Priority: MEDIUM
        """
        assert "RULE-3167" in all_results['results'], "Rule RULE-3167 missing"
        result = all_results['results']["RULE-3167"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-3167 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-3167 failed"


    def test_rule_3168(self, all_results):
        """
        Test RULE-3168: YAML line: date: "2025-09-15"
        Priority: MEDIUM
        """
        assert "RULE-3168" in all_results['results'], "Rule RULE-3168 missing"
        result = all_results['results']["RULE-3168"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-3168 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-3168 failed"


    def test_rule_3169(self, all_results):
        """
        Test RULE-3169: YAML line: deprecated: false
        Priority: MEDIUM
        """
        assert "RULE-3169" in all_results['results'], "Rule RULE-3169 missing"
        result = all_results['results']["RULE-3169"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-3169 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-3169 failed"


    def test_rule_3170(self, all_results):
        """
        Test RULE-3170: YAML line: classification: "CONFIDENTIAL - Enterprise Quarantine Management"
        Priority: MEDIUM
        """
        assert "RULE-3170" in all_results['results'], "Rule RULE-3170 missing"
        result = all_results['results']["RULE-3170"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-3170 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-3170 failed"


    def test_rule_3171(self, all_results):
        """
        Test RULE-3171: YAML line: quarantine_singleton:
        Priority: MEDIUM
        """
        assert "RULE-3171" in all_results['results'], "Rule RULE-3171 missing"
        result = all_results['results']["RULE-3171"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-3171 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-3171 failed"


    def test_rule_3172(self, all_results):
        """
        Test RULE-3172: YAML line: canonical_path: "02_audit_logging/quarantine/singleton/quarantine_sto
        Priority: MEDIUM
        """
        assert "RULE-3172" in all_results['results'], "Rule RULE-3172 missing"
        result = all_results['results']["RULE-3172"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-3172 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-3172 failed"


    def test_rule_3173(self, all_results):
        """
        Test RULE-3173: YAML line: principle: "Single source of truth for all quarantined items"
        Priority: MEDIUM
        """
        assert "RULE-3173" in all_results['results'], "Rule RULE-3173 missing"
        result = all_results['results']["RULE-3173"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-3173 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-3173 failed"


    def test_rule_3174(self, all_results):
        """
        Test RULE-3174: YAML line: access_control: "Restricted to compliance officers and senior managem
        Priority: CRITICAL
        """
        assert "RULE-3174" in all_results['results'], "Rule RULE-3174 missing"
        result = all_results['results']["RULE-3174"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-3174 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-3174 failed"


    def test_rule_3175(self, all_results):
        """
        Test RULE-3175: YAML line: encryption: "AES-256 with enterprise key management"
        Priority: MEDIUM
        """
        assert "RULE-3175" in all_results['results'], "Rule RULE-3175 missing"
        result = all_results['results']["RULE-3175"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-3175 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-3175 failed"


    def test_rule_3176(self, all_results):
        """
        Test RULE-3176: YAML line: quarantine_triggers:
        Priority: MEDIUM
        """
        assert "RULE-3176" in all_results['results'], "Rule RULE-3176 missing"
        result = all_results['results']["RULE-3176"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-3176 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-3176 failed"


    def test_rule_3177(self, all_results):
        """
        Test RULE-3177: YAML line: compliance_violations:
        Priority: CRITICAL
        """
        assert "RULE-3177" in all_results['results'], "Rule RULE-3177 missing"
        result = all_results['results']["RULE-3177"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-3177 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-3177 failed"


    def test_rule_3178(self, all_results):
        """
        Test RULE-3178: YAML line: - "Failed structure validation (score < 70)"
        Priority: MEDIUM
        """
        assert "RULE-3178" in all_results['results'], "Rule RULE-3178 missing"
        result = all_results['results']["RULE-3178"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-3178 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-3178 failed"


    def test_rule_3179(self, all_results):
        """
        Test RULE-3179: YAML line: - "Circular dependency detection"
        Priority: MEDIUM
        """
        assert "RULE-3179" in all_results['results'], "Rule RULE-3179 missing"
        result = all_results['results']["RULE-3179"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-3179 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-3179 failed"


    def test_rule_3180(self, all_results):
        """
        Test RULE-3180: YAML line: - "Badge integrity violations"
        Priority: MEDIUM
        """
        assert "RULE-3180" in all_results['results'], "Rule RULE-3180 missing"
        result = all_results['results']["RULE-3180"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-3180 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-3180 failed"


    def test_rule_3181(self, all_results):
        """
        Test RULE-3181: YAML line: - "Review deadline overdue (>30 days)"
        Priority: MEDIUM
        """
        assert "RULE-3181" in all_results['results'], "Rule RULE-3181 missing"
        result = all_results['results']["RULE-3181"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-3181 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-3181 failed"


    def test_rule_3182(self, all_results):
        """
        Test RULE-3182: YAML line: - "Business logic gaming detection"
        Priority: MEDIUM
        """
        assert "RULE-3182" in all_results['results'], "Rule RULE-3182 missing"
        result = all_results['results']["RULE-3182"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-3182 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-3182 failed"


    def test_rule_3183(self, all_results):
        """
        Test RULE-3183: YAML line: - "Confidentiality breach attempts"
        Priority: MEDIUM
        """
        assert "RULE-3183" in all_results['results'], "Rule RULE-3183 missing"
        result = all_results['results']["RULE-3183"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-3183 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-3183 failed"


    def test_rule_3184(self, all_results):
        """
        Test RULE-3184: YAML line: regulatory_flags:
        Priority: MEDIUM
        """
        assert "RULE-3184" in all_results['results'], "Rule RULE-3184 missing"
        result = all_results['results']["RULE-3184"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-3184 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-3184 failed"


    def test_rule_3185(self, all_results):
        """
        Test RULE-3185: YAML line: - "Sanctioned entity interaction"
        Priority: MEDIUM
        """
        assert "RULE-3185" in all_results['results'], "Rule RULE-3185 missing"
        result = all_results['results']["RULE-3185"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-3185 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-3185 failed"


    def test_rule_3186(self, all_results):
        """
        Test RULE-3186: YAML line: - "Jurisdiction exclusion violations"
        Priority: MEDIUM
        """
        assert "RULE-3186" in all_results['results'], "Rule RULE-3186 missing"
        result = all_results['results']["RULE-3186"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-3186 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-3186 failed"


    def test_rule_3187(self, all_results):
        """
        Test RULE-3187: YAML line: - "AML/KYC failure patterns"
        Priority: MEDIUM
        """
        assert "RULE-3187" in all_results['results'], "Rule RULE-3187 missing"
        result = all_results['results']["RULE-3187"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-3187 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-3187 failed"


    def test_rule_3188(self, all_results):
        """
        Test RULE-3188: YAML line: - "Regulatory mapping inconsistencies"
        Priority: MEDIUM
        """
        assert "RULE-3188" in all_results['results'], "Rule RULE-3188 missing"
        result = all_results['results']["RULE-3188"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-3188 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-3188 failed"


    def test_rule_3189(self, all_results):
        """
        Test RULE-3189: YAML line: - "Audit trail tampering attempts"
        Priority: MEDIUM
        """
        assert "RULE-3189" in all_results['results'], "Rule RULE-3189 missing"
        result = all_results['results']["RULE-3189"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-3189 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-3189 failed"


    def test_rule_3190(self, all_results):
        """
        Test RULE-3190: YAML line: technical_violations:
        Priority: MEDIUM
        """
        assert "RULE-3190" in all_results['results'], "Rule RULE-3190 missing"
        result = all_results['results']["RULE-3190"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-3190 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-3190 failed"


    def test_rule_3191(self, all_results):
        """
        Test RULE-3191: YAML line: - "Version compatibility failures"
        Priority: MEDIUM
        """
        assert "RULE-3191" in all_results['results'], "Rule RULE-3191 missing"
        result = all_results['results']["RULE-3191"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-3191 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-3191 failed"


    def test_rule_3192(self, all_results):
        """
        Test RULE-3192: YAML line: - "Anti-gaming control bypasses"
        Priority: MEDIUM
        """
        assert "RULE-3192" in all_results['results'], "Rule RULE-3192 missing"
        result = all_results['results']["RULE-3192"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-3192 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-3192 failed"


    def test_rule_3193(self, all_results):
        """
        Test RULE-3193: YAML line: - "Unauthorized access patterns"
        Priority: MEDIUM
        """
        assert "RULE-3193" in all_results['results'], "Rule RULE-3193 missing"
        result = all_results['results']["RULE-3193"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-3193 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-3193 failed"


    def test_rule_3194(self, all_results):
        """
        Test RULE-3194: YAML line: - "Data integrity hash mismatches"
        Priority: MEDIUM
        """
        assert "RULE-3194" in all_results['results'], "Rule RULE-3194 missing"
        result = all_results['results']["RULE-3194"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-3194 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-3194 failed"


    def test_rule_3195(self, all_results):
        """
        Test RULE-3195: YAML line: - "Enterprise boundary violations"
        Priority: MEDIUM
        """
        assert "RULE-3195" in all_results['results'], "Rule RULE-3195 missing"
        result = all_results['results']["RULE-3195"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-3195 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-3195 failed"


    def test_rule_3196(self, all_results):
        """
        Test RULE-3196: YAML line: quarantine_processing:
        Priority: MEDIUM
        """
        assert "RULE-3196" in all_results['results'], "Rule RULE-3196 missing"
        result = all_results['results']["RULE-3196"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-3196 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-3196 failed"


    def test_rule_3197(self, all_results):
        """
        Test RULE-3197: YAML line: intake_processor: "02_audit_logging/quarantine/processing/quarantine_
        Priority: MEDIUM
        """
        assert "RULE-3197" in all_results['results'], "Rule RULE-3197 missing"
        result = all_results['results']["RULE-3197"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-3197 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-3197 failed"


    def test_rule_3198(self, all_results):
        """
        Test RULE-3198: YAML line: auto_quarantine: true
        Priority: MEDIUM
        """
        assert "RULE-3198" in all_results['results'], "Rule RULE-3198 missing"
        result = all_results['results']["RULE-3198"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-3198 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-3198 failed"


    def test_rule_3199(self, all_results):
        """
        Test RULE-3199: YAML line: manual_override_required: "Compliance Officer + Legal approval"
        Priority: CRITICAL
        """
        assert "RULE-3199" in all_results['results'], "Rule RULE-3199 missing"
        result = all_results['results']["RULE-3199"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-3199 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-3199 failed"


    def test_rule_3200(self, all_results):
        """
        Test RULE-3200: YAML line: escalation_timeline: "24 hours for critical, 72 hours for high priori
        Priority: CRITICAL
        """
        assert "RULE-3200" in all_results['results'], "Rule RULE-3200 missing"
        result = all_results['results']["RULE-3200"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-3200 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-3200 failed"


    def test_rule_3201(self, all_results):
        """
        Test RULE-3201: YAML line: quarantine_retention:
        Priority: MEDIUM
        """
        assert "RULE-3201" in all_results['results'], "Rule RULE-3201 missing"
        result = all_results['results']["RULE-3201"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-3201 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-3201 failed"


    def test_rule_3202(self, all_results):
        """
        Test RULE-3202: YAML line: policies_file: "02_audit_logging/quarantine/retention/quarantine_poli
        Priority: MEDIUM
        """
        assert "RULE-3202" in all_results['results'], "Rule RULE-3202 missing"
        result = all_results['results']["RULE-3202"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-3202 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-3202 failed"


    def test_rule_3203(self, all_results):
        """
        Test RULE-3203: YAML line: retention_periods:
        Priority: MEDIUM
        """
        assert "RULE-3203" in all_results['results'], "Rule RULE-3203 missing"
        result = all_results['results']["RULE-3203"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-3203 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-3203 failed"


    def test_rule_3204(self, all_results):
        """
        Test RULE-3204: YAML line: compliance_violations: "7 years minimum"
        Priority: CRITICAL
        """
        assert "RULE-3204" in all_results['results'], "Rule RULE-3204 missing"
        result = all_results['results']["RULE-3204"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-3204 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-3204 failed"


    def test_rule_3205(self, all_results):
        """
        Test RULE-3205: YAML line: regulatory_flags: "10 years minimum"
        Priority: MEDIUM
        """
        assert "RULE-3205" in all_results['results'], "Rule RULE-3205 missing"
        result = all_results['results']["RULE-3205"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-3205 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-3205 failed"


    def test_rule_3206(self, all_results):
        """
        Test RULE-3206: YAML line: technical_violations: "5 years minimum"
        Priority: MEDIUM
        """
        assert "RULE-3206" in all_results['results'], "Rule RULE-3206 missing"
        result = all_results['results']["RULE-3206"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-3206 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-3206 failed"


    def test_rule_3207(self, all_results):
        """
        Test RULE-3207: YAML line: business_critical: "Permanent retention"
        Priority: CRITICAL
        """
        assert "RULE-3207" in all_results['results'], "Rule RULE-3207 missing"
        result = all_results['results']["RULE-3207"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-3207 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-3207 failed"


    def test_rule_3208(self, all_results):
        """
        Test RULE-3208: YAML line: legal_hold: "Until litigation resolution"
        Priority: CRITICAL
        """
        assert "RULE-3208" in all_results['results'], "Rule RULE-3208 missing"
        result = all_results['results']["RULE-3208"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-3208 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-3208 failed"


    def test_rule_3209(self, all_results):
        """
        Test RULE-3209: YAML line: purge_automation: false # Manual approval required
        Priority: CRITICAL
        """
        assert "RULE-3209" in all_results['results'], "Rule RULE-3209 missing"
        result = all_results['results']["RULE-3209"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-3209 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-3209 failed"


    def test_rule_3210(self, all_results):
        """
        Test RULE-3210: YAML line: archive_to_cold_storage: "After 2 years active retention"
        Priority: MEDIUM
        """
        assert "RULE-3210" in all_results['results'], "Rule RULE-3210 missing"
        result = all_results['results']["RULE-3210"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-3210 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-3210 failed"


    def test_rule_3211(self, all_results):
        """
        Test RULE-3211: YAML line: enterprise_backup: "Encrypted offsite + blockchain anchoring"
        Priority: MEDIUM
        """
        assert "RULE-3211" in all_results['results'], "Rule RULE-3211 missing"
        result = all_results['results']["RULE-3211"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-3211 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-3211 failed"


    def test_rule_3212(self, all_results):
        """
        Test RULE-3212: YAML line: hash_ledger_system:
        Priority: MEDIUM
        """
        assert "RULE-3212" in all_results['results'], "Rule RULE-3212 missing"
        result = all_results['results']["RULE-3212"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-3212 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-3212 failed"


    def test_rule_3213(self, all_results):
        """
        Test RULE-3213: YAML line: ledger_file: "02_audit_logging/quarantine/hash_ledger/quarantine_chai
        Priority: MEDIUM
        """
        assert "RULE-3213" in all_results['results'], "Rule RULE-3213 missing"
        result = all_results['results']["RULE-3213"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-3213 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-3213 failed"


    def test_rule_3214(self, all_results):
        """
        Test RULE-3214: YAML line: hash_algorithm: "SHA-256"
        Priority: MEDIUM
        """
        assert "RULE-3214" in all_results['results'], "Rule RULE-3214 missing"
        result = all_results['results']["RULE-3214"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-3214 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-3214 failed"


    def test_rule_3215(self, all_results):
        """
        Test RULE-3215: YAML line: chain_integrity: "Each entry includes previous hash"
        Priority: MEDIUM
        """
        assert "RULE-3215" in all_results['results'], "Rule RULE-3215 missing"
        result = all_results['results']["RULE-3215"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-3215 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-3215 failed"


    def test_rule_3216(self, all_results):
        """
        Test RULE-3216: YAML line: immutable_properties: true
        Priority: MEDIUM
        """
        assert "RULE-3216" in all_results['results'], "Rule RULE-3216 missing"
        result = all_results['results']["RULE-3216"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-3216 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-3216 failed"


    def test_rule_3217(self, all_results):
        """
        Test RULE-3217: YAML line: blockchain_anchoring: "Daily commitment to private enterprise blockch
        Priority: MEDIUM
        """
        assert "RULE-3217" in all_results['results'], "Rule RULE-3217 missing"
        result = all_results['results']["RULE-3217"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-3217 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-3217 failed"


    def test_rule_3218(self, all_results):
        """
        Test RULE-3218: YAML line: ledger_structure:
        Priority: MEDIUM
        """
        assert "RULE-3218" in all_results['results'], "Rule RULE-3218 missing"
        result = all_results['results']["RULE-3218"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-3218 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-3218 failed"


    def test_rule_3219(self, all_results):
        """
        Test RULE-3219: YAML line: entry_id: "UUID v4"
        Priority: MEDIUM
        """
        assert "RULE-3219" in all_results['results'], "Rule RULE-3219 missing"
        result = all_results['results']["RULE-3219"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-3219 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-3219 failed"


    def test_rule_3220(self, all_results):
        """
        Test RULE-3220: YAML line: timestamp: "ISO 8601 UTC"
        Priority: MEDIUM
        """
        assert "RULE-3220" in all_results['results'], "Rule RULE-3220 missing"
        result = all_results['results']["RULE-3220"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-3220 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-3220 failed"


    def test_rule_3221(self, all_results):
        """
        Test RULE-3221: YAML line: item_hash: "SHA-256 of quarantined item"
        Priority: MEDIUM
        """
        assert "RULE-3221" in all_results['results'], "Rule RULE-3221 missing"
        result = all_results['results']["RULE-3221"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-3221 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-3221 failed"


    def test_rule_3222(self, all_results):
        """
        Test RULE-3222: YAML line: trigger_reason: "Classification and details"
        Priority: MEDIUM
        """
        assert "RULE-3222" in all_results['results'], "Rule RULE-3222 missing"
        result = all_results['results']["RULE-3222"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-3222 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-3222 failed"


    def test_rule_3223(self, all_results):
        """
        Test RULE-3223: YAML line: quarantine_officer: "Person responsible for quarantine action"
        Priority: MEDIUM
        """
        assert "RULE-3223" in all_results['results'], "Rule RULE-3223 missing"
        result = all_results['results']["RULE-3223"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-3223 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-3223 failed"


    def test_rule_3224(self, all_results):
        """
        Test RULE-3224: YAML line: business_impact: "Revenue/compliance risk assessment"
        Priority: CRITICAL
        """
        assert "RULE-3224" in all_results['results'], "Rule RULE-3224 missing"
        result = all_results['results']["RULE-3224"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-3224 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-3224 failed"


    def test_rule_3225(self, all_results):
        """
        Test RULE-3225: YAML line: previous_hash: "Chain integrity verification"
        Priority: MEDIUM
        """
        assert "RULE-3225" in all_results['results'], "Rule RULE-3225 missing"
        result = all_results['results']["RULE-3225"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-3225 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-3225 failed"


    def test_rule_3226(self, all_results):
        """
        Test RULE-3226: YAML line: blockchain_anchor: "Enterprise blockchain transaction ID"
        Priority: MEDIUM
        """
        assert "RULE-3226" in all_results['results'], "Rule RULE-3226 missing"
        result = all_results['results']["RULE-3226"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-3226 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-3226 failed"


    def test_rule_3227(self, all_results):
        """
        Test RULE-3227: YAML line: quarantine_governance:
        Priority: MEDIUM
        """
        assert "RULE-3227" in all_results['results'], "Rule RULE-3227 missing"
        result = all_results['results']["RULE-3227"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-3227 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-3227 failed"


    def test_rule_3228(self, all_results):
        """
        Test RULE-3228: YAML line: review_committee:
        Priority: MEDIUM
        """
        assert "RULE-3228" in all_results['results'], "Rule RULE-3228 missing"
        result = all_results['results']["RULE-3228"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-3228 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-3228 failed"


    def test_rule_3229(self, all_results):
        """
        Test RULE-3229: YAML line: - "Senior Compliance Officer (Chair)"
        Priority: CRITICAL
        """
        assert "RULE-3229" in all_results['results'], "Rule RULE-3229 missing"
        result = all_results['results']["RULE-3229"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-3229 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-3229 failed"


    def test_rule_3230(self, all_results):
        """
        Test RULE-3230: YAML line: - "Legal Counsel"
        Priority: CRITICAL
        """
        assert "RULE-3230" in all_results['results'], "Rule RULE-3230 missing"
        result = all_results['results']["RULE-3230"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-3230 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-3230 failed"


    def test_rule_3231(self, all_results):
        """
        Test RULE-3231: YAML line: - "Technical Security Lead"
        Priority: CRITICAL
        """
        assert "RULE-3231" in all_results['results'], "Rule RULE-3231 missing"
        result = all_results['results']["RULE-3231"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-3231 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-3231 failed"


    def test_rule_3232(self, all_results):
        """
        Test RULE-3232: YAML line: - "Business Risk Manager"
        Priority: MEDIUM
        """
        assert "RULE-3232" in all_results['results'], "Rule RULE-3232 missing"
        result = all_results['results']["RULE-3232"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-3232 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-3232 failed"


    def test_rule_3233(self, all_results):
        """
        Test RULE-3233: YAML line: - "External Auditor (quarterly reviews)"
        Priority: MEDIUM
        """
        assert "RULE-3233" in all_results['results'], "Rule RULE-3233 missing"
        result = all_results['results']["RULE-3233"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-3233 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-3233 failed"


    def test_rule_3234(self, all_results):
        """
        Test RULE-3234: YAML line: review_schedule:
        Priority: MEDIUM
        """
        assert "RULE-3234" in all_results['results'], "Rule RULE-3234 missing"
        result = all_results['results']["RULE-3234"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-3234 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-3234 failed"


    def test_rule_3235(self, all_results):
        """
        Test RULE-3235: YAML line: daily: "New quarantine items assessment"
        Priority: MEDIUM
        """
        assert "RULE-3235" in all_results['results'], "Rule RULE-3235 missing"
        result = all_results['results']["RULE-3235"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-3235 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-3235 failed"


    def test_rule_3236(self, all_results):
        """
        Test RULE-3236: YAML line: weekly: "Pending release evaluations"
        Priority: MEDIUM
        """
        assert "RULE-3236" in all_results['results'], "Rule RULE-3236 missing"
        result = all_results['results']["RULE-3236"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-3236 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-3236 failed"


    def test_rule_3237(self, all_results):
        """
        Test RULE-3237: YAML line: monthly: "Quarantine policy effectiveness review"
        Priority: MEDIUM
        """
        assert "RULE-3237" in all_results['results'], "Rule RULE-3237 missing"
        result = all_results['results']["RULE-3237"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-3237 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-3237 failed"


    def test_rule_3238(self, all_results):
        """
        Test RULE-3238: YAML line: quarterly: "Full quarantine audit with external validation"
        Priority: MEDIUM
        """
        assert "RULE-3238" in all_results['results'], "Rule RULE-3238 missing"
        result = all_results['results']["RULE-3238"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-3238 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-3238 failed"


    def test_rule_3239(self, all_results):
        """
        Test RULE-3239: YAML line: release_criteria:
        Priority: MEDIUM
        """
        assert "RULE-3239" in all_results['results'], "Rule RULE-3239 missing"
        result = all_results['results']["RULE-3239"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-3239 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-3239 failed"


    def test_rule_3240(self, all_results):
        """
        Test RULE-3240: YAML line: compliance_remediation: "All compliance violations addressed"
        Priority: CRITICAL
        """
        assert "RULE-3240" in all_results['results'], "Rule RULE-3240 missing"
        result = all_results['results']["RULE-3240"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-3240 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-3240 failed"


    def test_rule_3241(self, all_results):
        """
        Test RULE-3241: YAML line: legal_clearance: "Legal team sign-off required"
        Priority: CRITICAL
        """
        assert "RULE-3241" in all_results['results'], "Rule RULE-3241 missing"
        result = all_results['results']["RULE-3241"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-3241 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-3241 failed"


    def test_rule_3242(self, all_results):
        """
        Test RULE-3242: YAML line: business_approval: "Business impact assessment completed"
        Priority: MEDIUM
        """
        assert "RULE-3242" in all_results['results'], "Rule RULE-3242 missing"
        result = all_results['results']["RULE-3242"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-3242 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-3242 failed"


    def test_rule_3243(self, all_results):
        """
        Test RULE-3243: YAML line: technical_validation: "Technical security clearance"
        Priority: CRITICAL
        """
        assert "RULE-3243" in all_results['results'], "Rule RULE-3243 missing"
        result = all_results['results']["RULE-3243"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-3243 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-3243 failed"


    def test_rule_3244(self, all_results):
        """
        Test RULE-3244: YAML line: documentation_complete: "Full audit trail and lessons learned"
        Priority: MEDIUM
        """
        assert "RULE-3244" in all_results['results'], "Rule RULE-3244 missing"
        result = all_results['results']["RULE-3244"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-3244 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-3244 failed"


    def test_rule_3245(self, all_results):
        """
        Test RULE-3245: YAML line: quarantine_monitoring:
        Priority: MEDIUM
        """
        assert "RULE-3245" in all_results['results'], "Rule RULE-3245 missing"
        result = all_results['results']["RULE-3245"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-3245 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-3245 failed"


    def test_rule_3246(self, all_results):
        """
        Test RULE-3246: YAML line: dashboard_integration: "Real-time quarantine status monitoring"
        Priority: MEDIUM
        """
        assert "RULE-3246" in all_results['results'], "Rule RULE-3246 missing"
        result = all_results['results']["RULE-3246"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-3246 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-3246 failed"


    def test_rule_3247(self, all_results):
        """
        Test RULE-3247: YAML line: alert_system: "Immediate notification for high-risk quarantines"
        Priority: MEDIUM
        """
        assert "RULE-3247" in all_results['results'], "Rule RULE-3247 missing"
        result = all_results['results']["RULE-3247"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-3247 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-3247 failed"


    def test_rule_3248(self, all_results):
        """
        Test RULE-3248: YAML line: reporting_integration: "Quarterly board reporting inclusion"
        Priority: MEDIUM
        """
        assert "RULE-3248" in all_results['results'], "Rule RULE-3248 missing"
        result = all_results['results']["RULE-3248"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-3248 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-3248 failed"


    def test_rule_3249(self, all_results):
        """
        Test RULE-3249: YAML line: competitive_intelligence: "Market impact assessment for quarantined i
        Priority: MEDIUM
        """
        assert "RULE-3249" in all_results['results'], "Rule RULE-3249 missing"
        result = all_results['results']["RULE-3249"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-3249 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-3249 failed"


    def test_rule_3250(self, all_results):
        """
        Test RULE-3250: YAML line: quarantine_metrics:
        Priority: MEDIUM
        """
        assert "RULE-3250" in all_results['results'], "Rule RULE-3250 missing"
        result = all_results['results']["RULE-3250"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-3250 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-3250 failed"


    def test_rule_3251(self, all_results):
        """
        Test RULE-3251: YAML line: - "Average quarantine duration by category"
        Priority: MEDIUM
        """
        assert "RULE-3251" in all_results['results'], "Rule RULE-3251 missing"
        result = all_results['results']["RULE-3251"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-3251 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-3251 failed"


    def test_rule_3252(self, all_results):
        """
        Test RULE-3252: YAML line: - "Release success rate"
        Priority: MEDIUM
        """
        assert "RULE-3252" in all_results['results'], "Rule RULE-3252 missing"
        result = all_results['results']["RULE-3252"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-3252 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-3252 failed"


    def test_rule_3253(self, all_results):
        """
        Test RULE-3253: YAML line: - "Repeat quarantine patterns"
        Priority: MEDIUM
        """
        assert "RULE-3253" in all_results['results'], "Rule RULE-3253 missing"
        result = all_results['results']["RULE-3253"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-3253 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-3253 failed"


    def test_rule_3254(self, all_results):
        """
        Test RULE-3254: YAML line: - "Business impact of quarantined items"
        Priority: MEDIUM
        """
        assert "RULE-3254" in all_results['results'], "Rule RULE-3254 missing"
        result = all_results['results']["RULE-3254"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-3254 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-3254 failed"


    def test_rule_3255(self, all_results):
        """
        Test RULE-3255: YAML line: - "Compliance effectiveness scores"
        Priority: CRITICAL
        """
        assert "RULE-3255" in all_results['results'], "Rule RULE-3255 missing"
        result = all_results['results']["RULE-3255"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-3255 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-3255 failed"


    def test_rule_3256(self, all_results):
        """
        Test RULE-3256: YAML line: - "Cost of quarantine operations"
        Priority: MEDIUM
        """
        assert "RULE-3256" in all_results['results'], "Rule RULE-3256 missing"
        result = all_results['results']["RULE-3256"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-3256 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-3256 failed"


    def test_rule_3257(self, all_results):
        """
        Test RULE-3257: YAML line: anti_gaming_quarantine:
        Priority: MEDIUM
        """
        assert "RULE-3257" in all_results['results'], "Rule RULE-3257 missing"
        result = all_results['results']["RULE-3257"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-3257 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-3257 failed"


    def test_rule_3258(self, all_results):
        """
        Test RULE-3258: YAML line: quarantine_gaming_detection: "Monitor attempts to game quarantine sys
        Priority: MEDIUM
        """
        assert "RULE-3258" in all_results['results'], "Rule RULE-3258 missing"
        result = all_results['results']["RULE-3258"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-3258 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-3258 failed"


    def test_rule_3259(self, all_results):
        """
        Test RULE-3259: YAML line: bypass_attempt_logging: "Log all quarantine bypass attempts"
        Priority: MEDIUM
        """
        assert "RULE-3259" in all_results['results'], "Rule RULE-3259 missing"
        result = all_results['results']["RULE-3259"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-3259 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-3259 failed"


    def test_rule_3260(self, all_results):
        """
        Test RULE-3260: YAML line: false_quarantine_prevention: "Prevent malicious quarantine triggers"
        Priority: MEDIUM
        """
        assert "RULE-3260" in all_results['results'], "Rule RULE-3260 missing"
        result = all_results['results']["RULE-3260"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-3260 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-3260 failed"


    def test_rule_3261(self, all_results):
        """
        Test RULE-3261: YAML line: quarantine_integrity_verification: "Regular integrity checks"
        Priority: MEDIUM
        """
        assert "RULE-3261" in all_results['results'], "Rule RULE-3261 missing"
        result = all_results['results']["RULE-3261"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-3261 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-3261 failed"


    def test_rule_3262(self, all_results):
        """
        Test RULE-3262: YAML line: insider_threat_monitoring: "Monitor internal quarantine manipulations
        Priority: MEDIUM
        """
        assert "RULE-3262" in all_results['results'], "Rule RULE-3262 missing"
        result = all_results['results']["RULE-3262"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-3262 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-3262 failed"


    def test_rule_3263(self, all_results):
        """
        Test RULE-3263: YAML line: integration_points:
        Priority: MEDIUM
        """
        assert "RULE-3263" in all_results['results'], "Rule RULE-3263 missing"
        result = all_results['results']["RULE-3263"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-3263 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-3263 failed"


    def test_rule_3264(self, all_results):
        """
        Test RULE-3264: YAML line: compliance_system: "23_compliance/policies/ → quarantine triggers"
        Priority: CRITICAL
        """
        assert "RULE-3264" in all_results['results'], "Rule RULE-3264 missing"
        result = all_results['results']["RULE-3264"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-3264 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-3264 failed"


    def test_rule_3265(self, all_results):
        """
        Test RULE-3265: YAML line: audit_logging: "02_audit_logging/storage/ → quarantine evidence"
        Priority: MEDIUM
        """
        assert "RULE-3265" in all_results['results'], "Rule RULE-3265 missing"
        result = all_results['results']["RULE-3265"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-3265 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-3265 failed"


    def test_rule_3266(self, all_results):
        """
        Test RULE-3266: YAML line: governance_legal: "07_governance_legal/risk/ → quarantine risk assess
        Priority: CRITICAL
        """
        assert "RULE-3266" in all_results['results'], "Rule RULE-3266 missing"
        result = all_results['results']["RULE-3266"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-3266 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-3266 failed"


    def test_rule_3267(self, all_results):
        """
        Test RULE-3267: YAML line: business_intelligence: "Competitive impact analysis for quarantined i
        Priority: MEDIUM
        """
        assert "RULE-3267" in all_results['results'], "Rule RULE-3267 missing"
        result = all_results['results']["RULE-3267"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-3267 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-3267 failed"


    def test_rule_3268(self, all_results):
        """
        Test RULE-3268: YAML line: enterprise_dashboard: "Real-time quarantine visibility for executives
        Priority: MEDIUM
        """
        assert "RULE-3268" in all_results['results'], "Rule RULE-3268 missing"
        result = all_results['results']["RULE-3268"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-3268 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-3268 failed"


    def test_rule_3269(self, all_results):
        """
        Test RULE-3269: YAML field 'version' must equal '1.5'
        Priority: HIGH
        """
        assert "RULE-3269" in all_results['results'], "Rule RULE-3269 missing"
        result = all_results['results']["RULE-3269"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "HIGH" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-3269 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-3269 failed"


    def test_rule_3270(self, all_results):
        """
        Test RULE-3270: YAML field 'date' must equal '2025-09-15'
        Priority: MEDIUM
        """
        assert "RULE-3270" in all_results['results'], "Rule RULE-3270 missing"
        result = all_results['results']["RULE-3270"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-3270 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-3270 failed"


    def test_rule_3271(self, all_results):
        """
        Test RULE-3271: YAML field 'deprecated' must equal 'False'
        Priority: CRITICAL
        """
        assert "RULE-3271" in all_results['results'], "Rule RULE-3271 missing"
        result = all_results['results']["RULE-3271"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-3271 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-3271 failed"


    def test_rule_3272(self, all_results):
        """
        Test RULE-3272: YAML field 'classification' must equal 'CONFIDENTIAL'
        Priority: MEDIUM
        """
        assert "RULE-3272" in all_results['results'], "Rule RULE-3272 missing"
        result = all_results['results']["RULE-3272"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-3272 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-3272 failed"


    def test_rule_3273(self, all_results):
        """
        Test RULE-3273: YAML field 'active_standards.W3C_VC_20.name' must equal 'W3C Verifiable Credenti
        Priority: MEDIUM
        """
        assert "RULE-3273" in all_results['results'], "Rule RULE-3273 missing"
        result = all_results['results']["RULE-3273"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-3273 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-3273 failed"


    def test_rule_3274(self, all_results):
        """
        Test RULE-3274: YAML field 'active_standards.W3C_VC_20.path' must equal '10_interoperability/sta
        Priority: HIGH
        """
        assert "RULE-3274" in all_results['results'], "Rule RULE-3274 missing"
        result = all_results['results']["RULE-3274"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "HIGH" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-3274 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-3274 failed"


    def test_rule_3275(self, all_results):
        """
        Test RULE-3275: YAML field 'active_standards.W3C_VC_20.deprecated' must equal 'False'
        Priority: CRITICAL
        """
        assert "RULE-3275" in all_results['results'], "Rule RULE-3275 missing"
        result = all_results['results']["RULE-3275"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-3275 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-3275 failed"


    def test_rule_3276(self, all_results):
        """
        Test RULE-3276: YAML field 'active_standards.W3C_VC_20.business_priority' must equal 'HIGH'
        Priority: MEDIUM
        """
        assert "RULE-3276" in all_results['results'], "Rule RULE-3276 missing"
        result = all_results['results']["RULE-3276"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-3276 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-3276 failed"


    def test_rule_3277(self, all_results):
        """
        Test RULE-3277: YAML field 'active_standards.OpenID_Connect_4_VC.name' must equal 'OpenID Connec
        Priority: MEDIUM
        """
        assert "RULE-3277" in all_results['results'], "Rule RULE-3277 missing"
        result = all_results['results']["RULE-3277"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-3277 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-3277 failed"


    def test_rule_3278(self, all_results):
        """
        Test RULE-3278: YAML field 'active_standards.OpenID_Connect_4_VC.path' must equal '14_zero_time_
        Priority: MEDIUM
        """
        assert "RULE-3278" in all_results['results'], "Rule RULE-3278 missing"
        result = all_results['results']["RULE-3278"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-3278 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-3278 failed"


    def test_rule_3279(self, all_results):
        """
        Test RULE-3279: YAML field 'active_standards.OpenID_Connect_4_VC.deprecated' must equal 'False'
        Priority: CRITICAL
        """
        assert "RULE-3279" in all_results['results'], "Rule RULE-3279 missing"
        result = all_results['results']["RULE-3279"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-3279 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-3279 failed"


    def test_rule_3280(self, all_results):
        """
        Test RULE-3280: YAML field 'active_standards.OpenID_Connect_4_VC.business_priority' must equal '
        Priority: MEDIUM
        """
        assert "RULE-3280" in all_results['results'], "Rule RULE-3280 missing"
        result = all_results['results']["RULE-3280"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-3280 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-3280 failed"


    def test_rule_3281(self, all_results):
        """
        Test RULE-3281: YAML field 'active_standards.ISO_IEC_27001_2022.name' must equal 'ISO/IEC 27001:
        Priority: MEDIUM
        """
        assert "RULE-3281" in all_results['results'], "Rule RULE-3281 missing"
        result = all_results['results']["RULE-3281"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-3281 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-3281 failed"


    def test_rule_3282(self, all_results):
        """
        Test RULE-3282: YAML field 'active_standards.ISO_IEC_27001_2022.path' must equal '23_compliance/
        Priority: CRITICAL
        """
        assert "RULE-3282" in all_results['results'], "Rule RULE-3282 missing"
        result = all_results['results']["RULE-3282"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-3282 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-3282 failed"


    def test_rule_3283(self, all_results):
        """
        Test RULE-3283: YAML field 'active_standards.ISO_IEC_27001_2022.deprecated' must equal 'False'
        Priority: CRITICAL
        """
        assert "RULE-3283" in all_results['results'], "Rule RULE-3283 missing"
        result = all_results['results']["RULE-3283"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-3283 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-3283 failed"


    def test_rule_3284(self, all_results):
        """
        Test RULE-3284: YAML field 'active_standards.ISO_IEC_27001_2022.business_priority' must equal 'C
        Priority: CRITICAL
        """
        assert "RULE-3284" in all_results['results'], "Rule RULE-3284 missing"
        result = all_results['results']["RULE-3284"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-3284 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-3284 failed"


    def test_rule_3285(self, all_results):
        """
        Test RULE-3285: YAML field 'active_standards.NIST_SSDF.name' must equal 'NIST Secure Software De
        Priority: MEDIUM
        """
        assert "RULE-3285" in all_results['results'], "Rule RULE-3285 missing"
        result = all_results['results']["RULE-3285"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-3285 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-3285 failed"


    def test_rule_3286(self, all_results):
        """
        Test RULE-3286: YAML field 'active_standards.NIST_SSDF.path' must equal '23_compliance/mappings/
        Priority: CRITICAL
        """
        assert "RULE-3286" in all_results['results'], "Rule RULE-3286 missing"
        result = all_results['results']["RULE-3286"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-3286 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-3286 failed"


    def test_rule_3287(self, all_results):
        """
        Test RULE-3287: YAML field 'active_standards.NIST_SSDF.deprecated' must equal 'False'
        Priority: CRITICAL
        """
        assert "RULE-3287" in all_results['results'], "Rule RULE-3287 missing"
        result = all_results['results']["RULE-3287"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-3287 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-3287 failed"


    def test_rule_3288(self, all_results):
        """
        Test RULE-3288: YAML field 'active_standards.NIST_SSDF.business_priority' must equal 'HIGH'
        Priority: MEDIUM
        """
        assert "RULE-3288" in all_results['results'], "Rule RULE-3288 missing"
        result = all_results['results']["RULE-3288"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-3288 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-3288 failed"


    def test_rule_3289(self, all_results):
        """
        Test RULE-3289: YAML field 'active_standards.SLSA.name' must equal 'Supply Chain Levels for Soft
        Priority: MEDIUM
        """
        assert "RULE-3289" in all_results['results'], "Rule RULE-3289 missing"
        result = all_results['results']["RULE-3289"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-3289 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-3289 failed"


    def test_rule_3290(self, all_results):
        """
        Test RULE-3290: YAML field 'active_standards.SLSA.path' must equal '23_compliance/mappings/slsa/
        Priority: CRITICAL
        """
        assert "RULE-3290" in all_results['results'], "Rule RULE-3290 missing"
        result = all_results['results']["RULE-3290"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-3290 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-3290 failed"


    def test_rule_3291(self, all_results):
        """
        Test RULE-3291: YAML field 'active_standards.SLSA.deprecated' must equal 'False'
        Priority: CRITICAL
        """
        assert "RULE-3291" in all_results['results'], "Rule RULE-3291 missing"
        result = all_results['results']["RULE-3291"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-3291 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-3291 failed"


    def test_rule_3292(self, all_results):
        """
        Test RULE-3292: YAML field 'active_standards.SLSA.business_priority' must equal 'MEDIUM'
        Priority: MEDIUM
        """
        assert "RULE-3292" in all_results['results'], "Rule RULE-3292 missing"
        result = all_results['results']["RULE-3292"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-3292 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-3292 failed"


    def test_rule_3293(self, all_results):
        """
        Test RULE-3293: YAML list 'deprecated_standards' must contain 1 elements
        Priority: CRITICAL
        """
        assert "RULE-3293" in all_results['results'], "Rule RULE-3293 missing"
        result = all_results['results']["RULE-3293"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-3293 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-3293 failed"


    def test_rule_3294(self, all_results):
        """
        Test RULE-3294: YAML line: version: "1.5"
        Priority: MEDIUM
        """
        assert "RULE-3294" in all_results['results'], "Rule RULE-3294 missing"
        result = all_results['results']["RULE-3294"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-3294 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-3294 failed"


    def test_rule_3295(self, all_results):
        """
        Test RULE-3295: YAML line: date: "2025-09-15"
        Priority: MEDIUM
        """
        assert "RULE-3295" in all_results['results'], "Rule RULE-3295 missing"
        result = all_results['results']["RULE-3295"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-3295 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-3295 failed"


    def test_rule_3296(self, all_results):
        """
        Test RULE-3296: YAML line: deprecated: false
        Priority: MEDIUM
        """
        assert "RULE-3296" in all_results['results'], "Rule RULE-3296 missing"
        result = all_results['results']["RULE-3296"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-3296 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-3296 failed"


    def test_rule_3297(self, all_results):
        """
        Test RULE-3297: YAML line: classification: "CONFIDENTIAL"
        Priority: MEDIUM
        """
        assert "RULE-3297" in all_results['results'], "Rule RULE-3297 missing"
        result = all_results['results']["RULE-3297"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-3297 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-3297 failed"


    def test_rule_3298(self, all_results):
        """
        Test RULE-3298: YAML line: active_standards:
        Priority: HIGH
        """
        assert "RULE-3298" in all_results['results'], "Rule RULE-3298 missing"
        result = all_results['results']["RULE-3298"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "HIGH" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-3298 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-3298 failed"


    def test_rule_3299(self, all_results):
        """
        Test RULE-3299: YAML line: W3C_VC_20:
        Priority: MEDIUM
        """
        assert "RULE-3299" in all_results['results'], "Rule RULE-3299 missing"
        result = all_results['results']["RULE-3299"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-3299 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-3299 failed"


    def test_rule_3300(self, all_results):
        """
        Test RULE-3300: YAML line: name: "W3C Verifiable Credentials 2.0"
        Priority: MEDIUM
        """
        assert "RULE-3300" in all_results['results'], "Rule RULE-3300 missing"
        result = all_results['results']["RULE-3300"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-3300 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-3300 failed"


    def test_rule_3301(self, all_results):
        """
        Test RULE-3301: YAML line: path: "10_interoperability/standards/w3c_vc2/"
        Priority: HIGH
        """
        assert "RULE-3301" in all_results['results'], "Rule RULE-3301 missing"
        result = all_results['results']["RULE-3301"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "HIGH" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-3301 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-3301 failed"


    def test_rule_3302(self, all_results):
        """
        Test RULE-3302: YAML line: deprecated: false
        Priority: MEDIUM
        """
        assert "RULE-3302" in all_results['results'], "Rule RULE-3302 missing"
        result = all_results['results']["RULE-3302"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-3302 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-3302 failed"


    def test_rule_3303(self, all_results):
        """
        Test RULE-3303: YAML line: business_priority: "HIGH"
        Priority: MEDIUM
        """
        assert "RULE-3303" in all_results['results'], "Rule RULE-3303 missing"
        result = all_results['results']["RULE-3303"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-3303 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-3303 failed"


    def test_rule_3304(self, all_results):
        """
        Test RULE-3304: YAML line: OpenID_Connect_4_VC:
        Priority: MEDIUM
        """
        assert "RULE-3304" in all_results['results'], "Rule RULE-3304 missing"
        result = all_results['results']["RULE-3304"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-3304 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-3304 failed"


    def test_rule_3305(self, all_results):
        """
        Test RULE-3305: YAML line: name: "OpenID Connect 4 Verifiable Credentials"
        Priority: MEDIUM
        """
        assert "RULE-3305" in all_results['results'], "Rule RULE-3305 missing"
        result = all_results['results']["RULE-3305"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-3305 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-3305 failed"


    def test_rule_3306(self, all_results):
        """
        Test RULE-3306: YAML line: path: "14_zero_time_auth/sso/protocols/oidc4vc/"
        Priority: MEDIUM
        """
        assert "RULE-3306" in all_results['results'], "Rule RULE-3306 missing"
        result = all_results['results']["RULE-3306"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-3306 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-3306 failed"


    def test_rule_3307(self, all_results):
        """
        Test RULE-3307: YAML line: deprecated: false
        Priority: MEDIUM
        """
        assert "RULE-3307" in all_results['results'], "Rule RULE-3307 missing"
        result = all_results['results']["RULE-3307"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-3307 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-3307 failed"


    def test_rule_3308(self, all_results):
        """
        Test RULE-3308: YAML line: business_priority: "HIGH"
        Priority: MEDIUM
        """
        assert "RULE-3308" in all_results['results'], "Rule RULE-3308 missing"
        result = all_results['results']["RULE-3308"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-3308 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-3308 failed"


    def test_rule_3309(self, all_results):
        """
        Test RULE-3309: YAML line: ISO_IEC_27001_2022:
        Priority: MEDIUM
        """
        assert "RULE-3309" in all_results['results'], "Rule RULE-3309 missing"
        result = all_results['results']["RULE-3309"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-3309 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-3309 failed"


    def test_rule_3310(self, all_results):
        """
        Test RULE-3310: YAML line: name: "ISO/IEC 27001:2022"
        Priority: MEDIUM
        """
        assert "RULE-3310" in all_results['results'], "Rule RULE-3310 missing"
        result = all_results['results']["RULE-3310"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-3310 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-3310 failed"


    def test_rule_3311(self, all_results):
        """
        Test RULE-3311: YAML line: path: "23_compliance/mappings/iso27001/"
        Priority: CRITICAL
        """
        assert "RULE-3311" in all_results['results'], "Rule RULE-3311 missing"
        result = all_results['results']["RULE-3311"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-3311 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-3311 failed"


    def test_rule_3312(self, all_results):
        """
        Test RULE-3312: YAML line: deprecated: false
        Priority: MEDIUM
        """
        assert "RULE-3312" in all_results['results'], "Rule RULE-3312 missing"
        result = all_results['results']["RULE-3312"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-3312 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-3312 failed"


    def test_rule_3313(self, all_results):
        """
        Test RULE-3313: YAML line: business_priority: "CRITICAL"
        Priority: CRITICAL
        """
        assert "RULE-3313" in all_results['results'], "Rule RULE-3313 missing"
        result = all_results['results']["RULE-3313"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-3313 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-3313 failed"


    def test_rule_3314(self, all_results):
        """
        Test RULE-3314: YAML line: NIST_SSDF:
        Priority: MEDIUM
        """
        assert "RULE-3314" in all_results['results'], "Rule RULE-3314 missing"
        result = all_results['results']["RULE-3314"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-3314 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-3314 failed"


    def test_rule_3315(self, all_results):
        """
        Test RULE-3315: YAML line: name: "NIST Secure Software Development Framework"
        Priority: MEDIUM
        """
        assert "RULE-3315" in all_results['results'], "Rule RULE-3315 missing"
        result = all_results['results']["RULE-3315"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-3315 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-3315 failed"


    def test_rule_3316(self, all_results):
        """
        Test RULE-3316: YAML line: path: "23_compliance/mappings/nist_ssdf/"
        Priority: CRITICAL
        """
        assert "RULE-3316" in all_results['results'], "Rule RULE-3316 missing"
        result = all_results['results']["RULE-3316"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-3316 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-3316 failed"


    def test_rule_3317(self, all_results):
        """
        Test RULE-3317: YAML line: deprecated: false
        Priority: MEDIUM
        """
        assert "RULE-3317" in all_results['results'], "Rule RULE-3317 missing"
        result = all_results['results']["RULE-3317"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-3317 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-3317 failed"


    def test_rule_3318(self, all_results):
        """
        Test RULE-3318: YAML line: business_priority: "HIGH"
        Priority: MEDIUM
        """
        assert "RULE-3318" in all_results['results'], "Rule RULE-3318 missing"
        result = all_results['results']["RULE-3318"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-3318 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-3318 failed"


    def test_rule_3319(self, all_results):
        """
        Test RULE-3319: YAML line: SLSA:
        Priority: MEDIUM
        """
        assert "RULE-3319" in all_results['results'], "Rule RULE-3319 missing"
        result = all_results['results']["RULE-3319"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-3319 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-3319 failed"


    def test_rule_3320(self, all_results):
        """
        Test RULE-3320: YAML line: name: "Supply Chain Levels for Software Artifacts"
        Priority: MEDIUM
        """
        assert "RULE-3320" in all_results['results'], "Rule RULE-3320 missing"
        result = all_results['results']["RULE-3320"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-3320 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-3320 failed"


    def test_rule_3321(self, all_results):
        """
        Test RULE-3321: YAML line: path: "23_compliance/mappings/slsa/"
        Priority: CRITICAL
        """
        assert "RULE-3321" in all_results['results'], "Rule RULE-3321 missing"
        result = all_results['results']["RULE-3321"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-3321 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-3321 failed"


    def test_rule_3322(self, all_results):
        """
        Test RULE-3322: YAML line: deprecated: false
        Priority: MEDIUM
        """
        assert "RULE-3322" in all_results['results'], "Rule RULE-3322 missing"
        result = all_results['results']["RULE-3322"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-3322 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-3322 failed"


    def test_rule_3323(self, all_results):
        """
        Test RULE-3323: YAML line: business_priority: "MEDIUM"
        Priority: MEDIUM
        """
        assert "RULE-3323" in all_results['results'], "Rule RULE-3323 missing"
        result = all_results['results']["RULE-3323"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-3323 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-3323 failed"


    def test_rule_3324(self, all_results):
        """
        Test RULE-3324: YAML line: deprecated_standards:
        Priority: HIGH
        """
        assert "RULE-3324" in all_results['results'], "Rule RULE-3324 missing"
        result = all_results['results']["RULE-3324"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "HIGH" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-3324 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-3324 failed"


    def test_rule_3325(self, all_results):
        """
        Test RULE-3325: YAML line: - id: "ISO27001_2013"
        Priority: MEDIUM
        """
        assert "RULE-3325" in all_results['results'], "Rule RULE-3325 missing"
        result = all_results['results']["RULE-3325"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-3325 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-3325 failed"


    def test_rule_3326(self, all_results):
        """
        Test RULE-3326: YAML line: status: "deprecated"
        Priority: MEDIUM
        """
        assert "RULE-3326" in all_results['results'], "Rule RULE-3326 missing"
        result = all_results['results']["RULE-3326"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-3326 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-3326 failed"


    def test_rule_3327(self, all_results):
        """
        Test RULE-3327: YAML line: deprecated: true
        Priority: MEDIUM
        """
        assert "RULE-3327" in all_results['results'], "Rule RULE-3327 missing"
        result = all_results['results']["RULE-3327"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-3327 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-3327 failed"


    def test_rule_3328(self, all_results):
        """
        Test RULE-3328: YAML line: replaced_by: "ISO_IEC_27001_2022"
        Priority: MEDIUM
        """
        assert "RULE-3328" in all_results['results'], "Rule RULE-3328 missing"
        result = all_results['results']["RULE-3328"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-3328 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-3328 failed"


    def test_rule_3329(self, all_results):
        """
        Test RULE-3329: YAML line: migration_deadline: "2025-12-31"
        Priority: MEDIUM
        """
        assert "RULE-3329" in all_results['results'], "Rule RULE-3329 missing"
        result = all_results['results']["RULE-3329"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-3329 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-3329 failed"


    def test_rule_3330(self, all_results):
        """
        Test RULE-3330: YAML line: business_impact: "Migration required for enterprise compliance"
        Priority: CRITICAL
        """
        assert "RULE-3330" in all_results['results'], "Rule RULE-3330 missing"
        result = all_results['results']["RULE-3330"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-3330 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-3330 failed"


    def test_rule_3331(self, all_results):
        """
        Test RULE-3331: YAML field 'version' must equal '1.0'
        Priority: HIGH
        """
        assert "RULE-3331" in all_results['results'], "Rule RULE-3331 missing"
        result = all_results['results']["RULE-3331"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "HIGH" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-3331 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-3331 failed"


    def test_rule_3332(self, all_results):
        """
        Test RULE-3332: YAML field 'deprecated' must equal 'False'
        Priority: CRITICAL
        """
        assert "RULE-3332" in all_results['results'], "Rule RULE-3332 missing"
        result = all_results['results']["RULE-3332"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-3332 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-3332 failed"


    def test_rule_3333(self, all_results):
        """
        Test RULE-3333: YAML field 'classification' must equal 'CONFIDENTIAL'
        Priority: MEDIUM
        """
        assert "RULE-3333" in all_results['results'], "Rule RULE-3333 missing"
        result = all_results['results']["RULE-3333"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-3333 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-3333 failed"


    def test_rule_3334(self, all_results):
        """
        Test RULE-3334: YAML field 'internal_reviews.monthly.scope' must equal 'Badge metrics validation
        Priority: CRITICAL
        """
        assert "RULE-3334" in all_results['results'], "Rule RULE-3334 missing"
        result = all_results['results']["RULE-3334"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-3334 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-3334 failed"


    def test_rule_3335(self, all_results):
        """
        Test RULE-3335: YAML field 'internal_reviews.monthly.owner' must equal 'Compliance Team Lead'
        Priority: CRITICAL
        """
        assert "RULE-3335" in all_results['results'], "Rule RULE-3335 missing"
        result = all_results['results']["RULE-3335"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-3335 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-3335 failed"


    def test_rule_3336(self, all_results):
        """
        Test RULE-3336: YAML field 'internal_reviews.monthly.deliverable' must equal 'internal_monthly_Y
        Priority: MEDIUM
        """
        assert "RULE-3336" in all_results['results'], "Rule RULE-3336 missing"
        result = all_results['results']["RULE-3336"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-3336 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-3336 failed"


    def test_rule_3337(self, all_results):
        """
        Test RULE-3337: YAML field 'internal_reviews.monthly.classification' must equal 'CONFIDENTIAL'
        Priority: MEDIUM
        """
        assert "RULE-3337" in all_results['results'], "Rule RULE-3337 missing"
        result = all_results['results']["RULE-3337"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-3337 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-3337 failed"


    def test_rule_3338(self, all_results):
        """
        Test RULE-3338: YAML field 'internal_reviews.monthly.business_review' must equal 'True'
        Priority: CRITICAL
        """
        assert "RULE-3338" in all_results['results'], "Rule RULE-3338 missing"
        result = all_results['results']["RULE-3338"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-3338 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-3338 failed"


    def test_rule_3339(self, all_results):
        """
        Test RULE-3339: YAML field 'internal_reviews.quarterly.scope' must equal 'Full compliance matrix
        Priority: CRITICAL
        """
        assert "RULE-3339" in all_results['results'], "Rule RULE-3339 missing"
        result = all_results['results']["RULE-3339"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-3339 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-3339 failed"


    def test_rule_3340(self, all_results):
        """
        Test RULE-3340: YAML field 'internal_reviews.quarterly.owner' must equal 'Senior Compliance Offi
        Priority: CRITICAL
        """
        assert "RULE-3340" in all_results['results'], "Rule RULE-3340 missing"
        result = all_results['results']["RULE-3340"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-3340 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-3340 failed"


    def test_rule_3341(self, all_results):
        """
        Test RULE-3341: YAML field 'internal_reviews.quarterly.deliverable' must equal 'internal_quarter
        Priority: MEDIUM
        """
        assert "RULE-3341" in all_results['results'], "Rule RULE-3341 missing"
        result = all_results['results']["RULE-3341"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-3341 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-3341 failed"


    def test_rule_3342(self, all_results):
        """
        Test RULE-3342: YAML field 'internal_reviews.quarterly.classification' must equal 'CONFIDENTIAL'
        Priority: MEDIUM
        """
        assert "RULE-3342" in all_results['results'], "Rule RULE-3342 missing"
        result = all_results['results']["RULE-3342"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-3342 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-3342 failed"


    def test_rule_3343(self, all_results):
        """
        Test RULE-3343: YAML field 'internal_reviews.quarterly.external_validation' must equal 'Optional
        Priority: MEDIUM
        """
        assert "RULE-3343" in all_results['results'], "Rule RULE-3343 missing"
        result = all_results['results']["RULE-3343"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-3343 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-3343 failed"


    def test_rule_3344(self, all_results):
        """
        Test RULE-3344: YAML field 'internal_reviews.quarterly.board_reporting' must equal 'True'
        Priority: CRITICAL
        """
        assert "RULE-3344" in all_results['results'], "Rule RULE-3344 missing"
        result = all_results['results']["RULE-3344"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-3344 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-3344 failed"


    def test_rule_3345(self, all_results):
        """
        Test RULE-3345: YAML field 'internal_reviews.semi_annual.scope' must equal 'Strategic compliance
        Priority: CRITICAL
        """
        assert "RULE-3345" in all_results['results'], "Rule RULE-3345 missing"
        result = all_results['results']["RULE-3345"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-3345 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-3345 failed"


    def test_rule_3346(self, all_results):
        """
        Test RULE-3346: YAML field 'internal_reviews.semi_annual.owner' must equal 'Executive Compliance
        Priority: CRITICAL
        """
        assert "RULE-3346" in all_results['results'], "Rule RULE-3346 missing"
        result = all_results['results']["RULE-3346"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-3346 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-3346 failed"


    def test_rule_3347(self, all_results):
        """
        Test RULE-3347: YAML field 'internal_reviews.semi_annual.deliverable' must equal 'strategic_comp
        Priority: CRITICAL
        """
        assert "RULE-3347" in all_results['results'], "Rule RULE-3347 missing"
        result = all_results['results']["RULE-3347"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-3347 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-3347 failed"


    def test_rule_3348(self, all_results):
        """
        Test RULE-3348: YAML field 'internal_reviews.semi_annual.classification' must equal 'CONFIDENTIA
        Priority: MEDIUM
        """
        assert "RULE-3348" in all_results['results'], "Rule RULE-3348 missing"
        result = all_results['results']["RULE-3348"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-3348 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-3348 failed"


    def test_rule_3349(self, all_results):
        """
        Test RULE-3349: YAML field 'internal_reviews.semi_annual.c_suite_presentation' must equal 'True'
        Priority: CRITICAL
        """
        assert "RULE-3349" in all_results['results'], "Rule RULE-3349 missing"
        result = all_results['results']["RULE-3349"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-3349 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-3349 failed"


    def test_rule_3350(self, all_results):
        """
        Test RULE-3350: YAML field 'external_reviews.frequency' must equal 'Every 6 months'
        Priority: MEDIUM
        """
        assert "RULE-3350" in all_results['results'], "Rule RULE-3350 missing"
        result = all_results['results']["RULE-3350"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-3350 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-3350 failed"


    def test_rule_3351(self, all_results):
        """
        Test RULE-3351: YAML field 'external_reviews.mandatory' must equal 'True'
        Priority: CRITICAL
        """
        assert "RULE-3351" in all_results['results'], "Rule RULE-3351 missing"
        result = all_results['results']["RULE-3351"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-3351 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-3351 failed"


    def test_rule_3352(self, all_results):
        """
        Test RULE-3352: YAML field 'external_reviews.scope' must equal 'Badge logic, anti-gaming control
        Priority: MEDIUM
        """
        assert "RULE-3352" in all_results['results'], "Rule RULE-3352 missing"
        result = all_results['results']["RULE-3352"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-3352 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-3352 failed"


    def test_rule_3353(self, all_results):
        """
        Test RULE-3353: YAML field 'external_reviews.deliverable' must equal 'external_review_YYYY-MM.md
        Priority: MEDIUM
        """
        assert "RULE-3353" in all_results['results'], "Rule RULE-3353 missing"
        result = all_results['results']["RULE-3353"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-3353 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-3353 failed"


    def test_rule_3354(self, all_results):
        """
        Test RULE-3354: YAML field 'external_reviews.confidentiality_agreement' must equal 'required'
        Priority: MEDIUM
        """
        assert "RULE-3354" in all_results['results'], "Rule RULE-3354 missing"
        result = all_results['results']["RULE-3354"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-3354 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-3354 failed"


    def test_rule_3355(self, all_results):
        """
        Test RULE-3355: YAML field 'external_reviews.clearance_verification' must equal 'True'
        Priority: CRITICAL
        """
        assert "RULE-3355" in all_results['results'], "Rule RULE-3355 missing"
        result = all_results['results']["RULE-3355"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-3355 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-3355 failed"


    def test_rule_3356(self, all_results):
        """
        Test RULE-3356: YAML line: version: "1.0"
        Priority: MEDIUM
        """
        assert "RULE-3356" in all_results['results'], "Rule RULE-3356 missing"
        result = all_results['results']["RULE-3356"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-3356 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-3356 failed"


    def test_rule_3357(self, all_results):
        """
        Test RULE-3357: YAML line: deprecated: false
        Priority: MEDIUM
        """
        assert "RULE-3357" in all_results['results'], "Rule RULE-3357 missing"
        result = all_results['results']["RULE-3357"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-3357 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-3357 failed"


    def test_rule_3358(self, all_results):
        """
        Test RULE-3358: YAML line: classification: "CONFIDENTIAL"
        Priority: MEDIUM
        """
        assert "RULE-3358" in all_results['results'], "Rule RULE-3358 missing"
        result = all_results['results']["RULE-3358"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-3358 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-3358 failed"


    def test_rule_3359(self, all_results):
        """
        Test RULE-3359: YAML line: internal_reviews:
        Priority: MEDIUM
        """
        assert "RULE-3359" in all_results['results'], "Rule RULE-3359 missing"
        result = all_results['results']["RULE-3359"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-3359 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-3359 failed"


    def test_rule_3360(self, all_results):
        """
        Test RULE-3360: YAML line: monthly:
        Priority: MEDIUM
        """
        assert "RULE-3360" in all_results['results'], "Rule RULE-3360 missing"
        result = all_results['results']["RULE-3360"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-3360 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-3360 failed"


    def test_rule_3361(self, all_results):
        """
        Test RULE-3361: YAML line: scope: "Badge metrics validation, compliance updates, business impact
        Priority: CRITICAL
        """
        assert "RULE-3361" in all_results['results'], "Rule RULE-3361 missing"
        result = all_results['results']["RULE-3361"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-3361 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-3361 failed"


    def test_rule_3362(self, all_results):
        """
        Test RULE-3362: YAML line: owner: "Compliance Team Lead"
        Priority: CRITICAL
        """
        assert "RULE-3362" in all_results['results'], "Rule RULE-3362 missing"
        result = all_results['results']["RULE-3362"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-3362 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-3362 failed"


    def test_rule_3363(self, all_results):
        """
        Test RULE-3363: YAML line: deliverable: "internal_monthly_YYYY-MM.md"
        Priority: MEDIUM
        """
        assert "RULE-3363" in all_results['results'], "Rule RULE-3363 missing"
        result = all_results['results']["RULE-3363"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-3363 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-3363 failed"


    def test_rule_3364(self, all_results):
        """
        Test RULE-3364: YAML line: classification: "CONFIDENTIAL"
        Priority: MEDIUM
        """
        assert "RULE-3364" in all_results['results'], "Rule RULE-3364 missing"
        result = all_results['results']["RULE-3364"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-3364 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-3364 failed"


    def test_rule_3365(self, all_results):
        """
        Test RULE-3365: YAML line: business_review: true
        Priority: MEDIUM
        """
        assert "RULE-3365" in all_results['results'], "Rule RULE-3365 missing"
        result = all_results['results']["RULE-3365"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-3365 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-3365 failed"


    def test_rule_3366(self, all_results):
        """
        Test RULE-3366: YAML line: quarterly:
        Priority: MEDIUM
        """
        assert "RULE-3366" in all_results['results'], "Rule RULE-3366 missing"
        result = all_results['results']["RULE-3366"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-3366 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-3366 failed"


    def test_rule_3367(self, all_results):
        """
        Test RULE-3367: YAML line: scope: "Full compliance matrix review, threshold validation, competit
        Priority: CRITICAL
        """
        assert "RULE-3367" in all_results['results'], "Rule RULE-3367 missing"
        result = all_results['results']["RULE-3367"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-3367 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-3367 failed"


    def test_rule_3368(self, all_results):
        """
        Test RULE-3368: YAML line: owner: "Senior Compliance Officer + Legal"
        Priority: CRITICAL
        """
        assert "RULE-3368" in all_results['results'], "Rule RULE-3368 missing"
        result = all_results['results']["RULE-3368"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-3368 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-3368 failed"


    def test_rule_3369(self, all_results):
        """
        Test RULE-3369: YAML line: deliverable: "internal_quarterly_YYYY-QX.md"
        Priority: MEDIUM
        """
        assert "RULE-3369" in all_results['results'], "Rule RULE-3369 missing"
        result = all_results['results']["RULE-3369"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-3369 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-3369 failed"


    def test_rule_3370(self, all_results):
        """
        Test RULE-3370: YAML line: classification: "CONFIDENTIAL"
        Priority: MEDIUM
        """
        assert "RULE-3370" in all_results['results'], "Rule RULE-3370 missing"
        result = all_results['results']["RULE-3370"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-3370 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-3370 failed"


    def test_rule_3371(self, all_results):
        """
        Test RULE-3371: YAML line: external_validation: "Optional external consultant"
        Priority: MEDIUM
        """
        assert "RULE-3371" in all_results['results'], "Rule RULE-3371 missing"
        result = all_results['results']["RULE-3371"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-3371 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-3371 failed"


    def test_rule_3372(self, all_results):
        """
        Test RULE-3372: YAML line: board_reporting: true
        Priority: MEDIUM
        """
        assert "RULE-3372" in all_results['results'], "Rule RULE-3372 missing"
        result = all_results['results']["RULE-3372"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-3372 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-3372 failed"


    def test_rule_3373(self, all_results):
        """
        Test RULE-3373: YAML line: semi_annual:
        Priority: MEDIUM
        """
        assert "RULE-3373" in all_results['results'], "Rule RULE-3373 missing"
        result = all_results['results']["RULE-3373"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-3373 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-3373 failed"


    def test_rule_3374(self, all_results):
        """
        Test RULE-3374: YAML line: scope: "Strategic compliance roadmap, regulatory horizon scan, market
        Priority: CRITICAL
        """
        assert "RULE-3374" in all_results['results'], "Rule RULE-3374 missing"
        result = all_results['results']["RULE-3374"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-3374 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-3374 failed"


    def test_rule_3375(self, all_results):
        """
        Test RULE-3375: YAML line: owner: "Executive Compliance Committee"
        Priority: CRITICAL
        """
        assert "RULE-3375" in all_results['results'], "Rule RULE-3375 missing"
        result = all_results['results']["RULE-3375"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-3375 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-3375 failed"


    def test_rule_3376(self, all_results):
        """
        Test RULE-3376: YAML line: deliverable: "strategic_compliance_YYYY-H1H2.md"
        Priority: CRITICAL
        """
        assert "RULE-3376" in all_results['results'], "Rule RULE-3376 missing"
        result = all_results['results']["RULE-3376"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-3376 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-3376 failed"


    def test_rule_3377(self, all_results):
        """
        Test RULE-3377: YAML line: classification: "CONFIDENTIAL"
        Priority: MEDIUM
        """
        assert "RULE-3377" in all_results['results'], "Rule RULE-3377 missing"
        result = all_results['results']["RULE-3377"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-3377 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-3377 failed"


    def test_rule_3378(self, all_results):
        """
        Test RULE-3378: YAML line: c_suite_presentation: true
        Priority: MEDIUM
        """
        assert "RULE-3378" in all_results['results'], "Rule RULE-3378 missing"
        result = all_results['results']["RULE-3378"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-3378 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-3378 failed"


    def test_rule_3379(self, all_results):
        """
        Test RULE-3379: YAML line: external_reviews:
        Priority: MEDIUM
        """
        assert "RULE-3379" in all_results['results'], "Rule RULE-3379 missing"
        result = all_results['results']["RULE-3379"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-3379 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-3379 failed"


    def test_rule_3380(self, all_results):
        """
        Test RULE-3380: YAML line: frequency: "Every 6 months"
        Priority: MEDIUM
        """
        assert "RULE-3380" in all_results['results'], "Rule RULE-3380 missing"
        result = all_results['results']["RULE-3380"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-3380 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-3380 failed"


    def test_rule_3381(self, all_results):
        """
        Test RULE-3381: YAML line: mandatory: true
        Priority: CRITICAL
        """
        assert "RULE-3381" in all_results['results'], "Rule RULE-3381 missing"
        result = all_results['results']["RULE-3381"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-3381 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-3381 failed"


    def test_rule_3382(self, all_results):
        """
        Test RULE-3382: YAML line: scope: "Badge logic, anti-gaming controls, regulatory accuracy"
        Priority: MEDIUM
        """
        assert "RULE-3382" in all_results['results'], "Rule RULE-3382 missing"
        result = all_results['results']["RULE-3382"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-3382 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-3382 failed"


    def test_rule_3383(self, all_results):
        """
        Test RULE-3383: YAML line: deliverable: "external_review_YYYY-MM.md"
        Priority: MEDIUM
        """
        assert "RULE-3383" in all_results['results'], "Rule RULE-3383 missing"
        result = all_results['results']["RULE-3383"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-3383 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-3383 failed"


    def test_rule_3384(self, all_results):
        """
        Test RULE-3384: YAML line: confidentiality_agreement: "required"
        Priority: CRITICAL
        """
        assert "RULE-3384" in all_results['results'], "Rule RULE-3384 missing"
        result = all_results['results']["RULE-3384"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-3384 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-3384 failed"


    def test_rule_3385(self, all_results):
        """
        Test RULE-3385: YAML line: clearance_verification: true
        Priority: MEDIUM
        """
        assert "RULE-3385" in all_results['results'], "Rule RULE-3385 missing"
        result = all_results['results']["RULE-3385"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-3385 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-3385 failed"


    def test_rule_3386(self, all_results):
        """
        Test RULE-3386: YAML field 'version' must equal '1.0'
        Priority: HIGH
        """
        assert "RULE-3386" in all_results['results'], "Rule RULE-3386 missing"
        result = all_results['results']["RULE-3386"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "HIGH" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-3386 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-3386 failed"


    def test_rule_3387(self, all_results):
        """
        Test RULE-3387: YAML field 'date' must equal '2025-09-21'
        Priority: MEDIUM
        """
        assert "RULE-3387" in all_results['results'], "Rule RULE-3387 missing"
        result = all_results['results']["RULE-3387"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-3387 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-3387 failed"


    def test_rule_3388(self, all_results):
        """
        Test RULE-3388: YAML field 'deprecated' must equal 'False'
        Priority: CRITICAL
        """
        assert "RULE-3388" in all_results['results'], "Rule RULE-3388 missing"
        result = all_results['results']["RULE-3388"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-3388 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-3388 failed"


    def test_rule_3389(self, all_results):
        """
        Test RULE-3389: YAML field 'classification' must equal 'CONFIDENTIAL - Security Operations'
        Priority: CRITICAL
        """
        assert "RULE-3389" in all_results['results'], "Rule RULE-3389 missing"
        result = all_results['results']["RULE-3389"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-3389 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-3389 failed"


    def test_rule_3390(self, all_results):
        """
        Test RULE-3390: YAML field 'quarantine_structure.canonical_path' must equal '02_audit_logging/qu
        Priority: MEDIUM
        """
        assert "RULE-3390" in all_results['results'], "Rule RULE-3390 missing"
        result = all_results['results']["RULE-3390"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-3390 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-3390 failed"


    def test_rule_3391(self, all_results):
        """
        Test RULE-3391: YAML field 'quarantine_structure.subfolders.staging' must equal '02_audit_loggin
        Priority: MEDIUM
        """
        assert "RULE-3391" in all_results['results'], "Rule RULE-3391 missing"
        result = all_results['results']["RULE-3391"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-3391 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-3391 failed"


    def test_rule_3392(self, all_results):
        """
        Test RULE-3392: YAML field 'quarantine_structure.subfolders.triage' must equal '02_audit_logging
        Priority: MEDIUM
        """
        assert "RULE-3392" in all_results['results'], "Rule RULE-3392 missing"
        result = all_results['results']["RULE-3392"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-3392 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-3392 failed"


    def test_rule_3393(self, all_results):
        """
        Test RULE-3393: YAML field 'quarantine_structure.subfolders.hash_buckets' must equal '02_audit_l
        Priority: MEDIUM
        """
        assert "RULE-3393" in all_results['results'], "Rule RULE-3393 missing"
        result = all_results['results']["RULE-3393"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-3393 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-3393 failed"


    def test_rule_3394(self, all_results):
        """
        Test RULE-3394: YAML field 'quarantine_structure.subfolders.quarantined' must equal '02_audit_lo
        Priority: MEDIUM
        """
        assert "RULE-3394" in all_results['results'], "Rule RULE-3394 missing"
        result = all_results['results']["RULE-3394"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-3394 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-3394 failed"


    def test_rule_3395(self, all_results):
        """
        Test RULE-3395: YAML field 'quarantine_structure.processing' must equal '02_audit_logging/quaran
        Priority: MEDIUM
        """
        assert "RULE-3395" in all_results['results'], "Rule RULE-3395 missing"
        result = all_results['results']["RULE-3395"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-3395 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-3395 failed"


    def test_rule_3396(self, all_results):
        """
        Test RULE-3396: YAML field 'quarantine_structure.retention' must equal '02_audit_logging/quarant
        Priority: MEDIUM
        """
        assert "RULE-3396" in all_results['results'], "Rule RULE-3396 missing"
        result = all_results['results']["RULE-3396"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-3396 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-3396 failed"


    def test_rule_3397(self, all_results):
        """
        Test RULE-3397: YAML field 'quarantine_structure.hash_ledger' must equal '02_audit_logging/quara
        Priority: MEDIUM
        """
        assert "RULE-3397" in all_results['results'], "Rule RULE-3397 missing"
        result = all_results['results']["RULE-3397"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-3397 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-3397 failed"


    def test_rule_3398(self, all_results):
        """
        Test RULE-3398: YAML field 'quarantine_structure.evidence_path' must equal '23_compliance/eviden
        Priority: CRITICAL
        """
        assert "RULE-3398" in all_results['results'], "Rule RULE-3398 missing"
        result = all_results['results']["RULE-3398"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-3398 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-3398 failed"


    def test_rule_3399(self, all_results):
        """
        Test RULE-3399: YAML field 'quarantine_structure.hash_ledger_export' must equal '23_compliance/e
        Priority: CRITICAL
        """
        assert "RULE-3399" in all_results['results'], "Rule RULE-3399 missing"
        result = all_results['results']["RULE-3399"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-3399 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-3399 failed"


    def test_rule_3400(self, all_results):
        """
        Test RULE-3400: YAML field 'quarantine_structure.evidence_path_note' must equal 'Primary hash-le
        Priority: CRITICAL
        """
        assert "RULE-3400" in all_results['results'], "Rule RULE-3400 missing"
        result = all_results['results']["RULE-3400"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-3400 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-3400 failed"


    def test_rule_3401(self, all_results):
        """
        Test RULE-3401: YAML list 'forbidden_locations' must contain 4 elements
        Priority: CRITICAL
        """
        assert "RULE-3401" in all_results['results'], "Rule RULE-3401 missing"
        result = all_results['results']["RULE-3401"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-3401 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-3401 failed"


    def test_rule_3402(self, all_results):
        """
        Test RULE-3402: YAML field 'retention_policy.staging_retention' must equal '24 hours'
        Priority: MEDIUM
        """
        assert "RULE-3402" in all_results['results'], "Rule RULE-3402 missing"
        result = all_results['results']["RULE-3402"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-3402 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-3402 failed"


    def test_rule_3403(self, all_results):
        """
        Test RULE-3403: YAML field 'retention_policy.triage_retention' must equal '7 days'
        Priority: MEDIUM
        """
        assert "RULE-3403" in all_results['results'], "Rule RULE-3403 missing"
        result = all_results['results']["RULE-3403"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-3403 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-3403 failed"


    def test_rule_3404(self, all_results):
        """
        Test RULE-3404: YAML field 'retention_policy.quarantined_retention' must equal '30 days'
        Priority: MEDIUM
        """
        assert "RULE-3404" in all_results['results'], "Rule RULE-3404 missing"
        result = all_results['results']["RULE-3404"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-3404 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-3404 failed"


    def test_rule_3405(self, all_results):
        """
        Test RULE-3405: YAML field 'retention_policy.hash_evidence_retention' must equal 'permanent'
        Priority: MEDIUM
        """
        assert "RULE-3405" in all_results['results'], "Rule RULE-3405 missing"
        result = all_results['results']["RULE-3405"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-3405 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-3405 failed"


    def test_rule_3406(self, all_results):
        """
        Test RULE-3406: YAML field 'security_controls.read_only_quarantine' must equal 'True'
        Priority: CRITICAL
        """
        assert "RULE-3406" in all_results['results'], "Rule RULE-3406 missing"
        result = all_results['results']["RULE-3406"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-3406 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-3406 failed"


    def test_rule_3407(self, all_results):
        """
        Test RULE-3407: YAML field 'security_controls.hash_verification' must equal 'SHA256 + Blake3'
        Priority: MEDIUM
        """
        assert "RULE-3407" in all_results['results'], "Rule RULE-3407 missing"
        result = all_results['results']["RULE-3407"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-3407 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-3407 failed"


    def test_rule_3408(self, all_results):
        """
        Test RULE-3408: YAML field 'security_controls.evidence_immutable' must equal 'True'
        Priority: CRITICAL
        """
        assert "RULE-3408" in all_results['results'], "Rule RULE-3408 missing"
        result = all_results['results']["RULE-3408"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-3408 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-3408 failed"


    def test_rule_3409(self, all_results):
        """
        Test RULE-3409: YAML field 'security_controls.worm_compliance' must equal 'True'
        Priority: CRITICAL
        """
        assert "RULE-3409" in all_results['results'], "Rule RULE-3409 missing"
        result = all_results['results']["RULE-3409"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-3409 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-3409 failed"


    def test_rule_3410(self, all_results):
        """
        Test RULE-3410: YAML line: version: "1.0"
        Priority: MEDIUM
        """
        assert "RULE-3410" in all_results['results'], "Rule RULE-3410 missing"
        result = all_results['results']["RULE-3410"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-3410 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-3410 failed"


    def test_rule_3411(self, all_results):
        """
        Test RULE-3411: YAML line: date: "2025-09-21"
        Priority: MEDIUM
        """
        assert "RULE-3411" in all_results['results'], "Rule RULE-3411 missing"
        result = all_results['results']["RULE-3411"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-3411 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-3411 failed"


    def test_rule_3412(self, all_results):
        """
        Test RULE-3412: YAML line: deprecated: false
        Priority: MEDIUM
        """
        assert "RULE-3412" in all_results['results'], "Rule RULE-3412 missing"
        result = all_results['results']["RULE-3412"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-3412 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-3412 failed"


    def test_rule_3413(self, all_results):
        """
        Test RULE-3413: YAML line: classification: "CONFIDENTIAL - Security Operations"
        Priority: CRITICAL
        """
        assert "RULE-3413" in all_results['results'], "Rule RULE-3413 missing"
        result = all_results['results']["RULE-3413"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-3413 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-3413 failed"


    def test_rule_3414(self, all_results):
        """
        Test RULE-3414: YAML line: quarantine_structure:
        Priority: MEDIUM
        """
        assert "RULE-3414" in all_results['results'], "Rule RULE-3414 missing"
        result = all_results['results']["RULE-3414"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-3414 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-3414 failed"


    def test_rule_3415(self, all_results):
        """
        Test RULE-3415: YAML line: canonical_path: "02_audit_logging/quarantine/singleton/quarantine_sto
        Priority: MEDIUM
        """
        assert "RULE-3415" in all_results['results'], "Rule RULE-3415 missing"
        result = all_results['results']["RULE-3415"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-3415 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-3415 failed"


    def test_rule_3416(self, all_results):
        """
        Test RULE-3416: YAML line: subfolders:
        Priority: MEDIUM
        """
        assert "RULE-3416" in all_results['results'], "Rule RULE-3416 missing"
        result = all_results['results']["RULE-3416"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-3416 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-3416 failed"


    def test_rule_3417(self, all_results):
        """
        Test RULE-3417: YAML line: staging: "02_audit_logging/quarantine/singleton/quarantine_store/stag
        Priority: MEDIUM
        """
        assert "RULE-3417" in all_results['results'], "Rule RULE-3417 missing"
        result = all_results['results']["RULE-3417"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-3417 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-3417 failed"


    def test_rule_3418(self, all_results):
        """
        Test RULE-3418: YAML line: triage: "02_audit_logging/quarantine/singleton/quarantine_store/triag
        Priority: MEDIUM
        """
        assert "RULE-3418" in all_results['results'], "Rule RULE-3418 missing"
        result = all_results['results']["RULE-3418"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-3418 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-3418 failed"


    def test_rule_3419(self, all_results):
        """
        Test RULE-3419: YAML line: hash_buckets: "02_audit_logging/quarantine/singleton/quarantine_store
        Priority: MEDIUM
        """
        assert "RULE-3419" in all_results['results'], "Rule RULE-3419 missing"
        result = all_results['results']["RULE-3419"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-3419 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-3419 failed"


    def test_rule_3420(self, all_results):
        """
        Test RULE-3420: YAML line: quarantined: "02_audit_logging/quarantine/singleton/quarantine_store/
        Priority: MEDIUM
        """
        assert "RULE-3420" in all_results['results'], "Rule RULE-3420 missing"
        result = all_results['results']["RULE-3420"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-3420 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-3420 failed"


    def test_rule_3421(self, all_results):
        """
        Test RULE-3421: YAML line: processing: "02_audit_logging/quarantine/processing/"
        Priority: MEDIUM
        """
        assert "RULE-3421" in all_results['results'], "Rule RULE-3421 missing"
        result = all_results['results']["RULE-3421"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-3421 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-3421 failed"


    def test_rule_3422(self, all_results):
        """
        Test RULE-3422: YAML line: retention: "02_audit_logging/quarantine/retention/"
        Priority: MEDIUM
        """
        assert "RULE-3422" in all_results['results'], "Rule RULE-3422 missing"
        result = all_results['results']["RULE-3422"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-3422 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-3422 failed"


    def test_rule_3423(self, all_results):
        """
        Test RULE-3423: YAML line: hash_ledger: "02_audit_logging/quarantine/hash_ledger/"
        Priority: MEDIUM
        """
        assert "RULE-3423" in all_results['results'], "Rule RULE-3423 missing"
        result = all_results['results']["RULE-3423"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-3423 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-3423 failed"


    def test_rule_3424(self, all_results):
        """
        Test RULE-3424: YAML line: evidence_path: "23_compliance/evidence/malware_quarantine_hashes/"
        Priority: CRITICAL
        """
        assert "RULE-3424" in all_results['results'], "Rule RULE-3424 missing"
        result = all_results['results']["RULE-3424"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-3424 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-3424 failed"


    def test_rule_3425(self, all_results):
        """
        Test RULE-3425: YAML line: hash_ledger_export: "23_compliance/evidence/malware_quarantine_hashes
        Priority: CRITICAL
        """
        assert "RULE-3425" in all_results['results'], "Rule RULE-3425 missing"
        result = all_results['results']["RULE-3425"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-3425 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-3425 failed"


    def test_rule_3426(self, all_results):
        """
        Test RULE-3426: YAML line: evidence_path_note: "Primary hash-ledger is stored under 02_audit_log
        Priority: CRITICAL
        """
        assert "RULE-3426" in all_results['results'], "Rule RULE-3426 missing"
        result = all_results['results']["RULE-3426"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-3426 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-3426 failed"


    def test_rule_3427(self, all_results):
        """
        Test RULE-3427: YAML line: forbidden_locations:
        Priority: CRITICAL
        """
        assert "RULE-3427" in all_results['results'], "Rule RULE-3427 missing"
        result = all_results['results']["RULE-3427"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-3427 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-3427 failed"


    def test_rule_3428(self, all_results):
        """
        Test RULE-3428: YAML line: - "Verboten: jeder andere */quarantine/**-Pfad (inkl. 12_tooling/**, 
        Priority: CRITICAL
        """
        assert "RULE-3428" in all_results['results'], "Rule RULE-3428 missing"
        result = all_results['results']["RULE-3428"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-3428 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-3428 failed"


    def test_rule_3429(self, all_results):
        """
        Test RULE-3429: YAML line: - "Nur der kanonische Pfad unter 02_audit_logging/quarantine/ ist zul
        Priority: MEDIUM
        """
        assert "RULE-3429" in all_results['results'], "Rule RULE-3429 missing"
        result = all_results['results']["RULE-3429"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-3429 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-3429 failed"


    def test_rule_3430(self, all_results):
        """
        Test RULE-3430: YAML line: - "Evidence nur als Hash-Checksums unter 23_compliance/evidence/"
        Priority: CRITICAL
        """
        assert "RULE-3430" in all_results['results'], "Rule RULE-3430 missing"
        result = all_results['results']["RULE-3430"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-3430 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-3430 failed"


    def test_rule_3431(self, all_results):
        """
        Test RULE-3431: YAML line: - "Tooling nur Client-Skripte unter 12_tooling/scripts/security/ (kei
        Priority: CRITICAL
        """
        assert "RULE-3431" in all_results['results'], "Rule RULE-3431 missing"
        result = all_results['results']["RULE-3431"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-3431 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-3431 failed"


    def test_rule_3432(self, all_results):
        """
        Test RULE-3432: YAML line: retention_policy:
        Priority: MEDIUM
        """
        assert "RULE-3432" in all_results['results'], "Rule RULE-3432 missing"
        result = all_results['results']["RULE-3432"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-3432 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-3432 failed"


    def test_rule_3433(self, all_results):
        """
        Test RULE-3433: YAML line: staging_retention: "24 hours"
        Priority: MEDIUM
        """
        assert "RULE-3433" in all_results['results'], "Rule RULE-3433 missing"
        result = all_results['results']["RULE-3433"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-3433 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-3433 failed"


    def test_rule_3434(self, all_results):
        """
        Test RULE-3434: YAML line: triage_retention: "7 days"
        Priority: MEDIUM
        """
        assert "RULE-3434" in all_results['results'], "Rule RULE-3434 missing"
        result = all_results['results']["RULE-3434"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-3434 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-3434 failed"


    def test_rule_3435(self, all_results):
        """
        Test RULE-3435: YAML line: quarantined_retention: "30 days"
        Priority: MEDIUM
        """
        assert "RULE-3435" in all_results['results'], "Rule RULE-3435 missing"
        result = all_results['results']["RULE-3435"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-3435 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-3435 failed"


    def test_rule_3436(self, all_results):
        """
        Test RULE-3436: YAML line: hash_evidence_retention: "permanent"
        Priority: MEDIUM
        """
        assert "RULE-3436" in all_results['results'], "Rule RULE-3436 missing"
        result = all_results['results']["RULE-3436"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-3436 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-3436 failed"


    def test_rule_3437(self, all_results):
        """
        Test RULE-3437: YAML line: security_controls:
        Priority: CRITICAL
        """
        assert "RULE-3437" in all_results['results'], "Rule RULE-3437 missing"
        result = all_results['results']["RULE-3437"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-3437 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-3437 failed"


    def test_rule_3438(self, all_results):
        """
        Test RULE-3438: YAML line: read_only_quarantine: true
        Priority: MEDIUM
        """
        assert "RULE-3438" in all_results['results'], "Rule RULE-3438 missing"
        result = all_results['results']["RULE-3438"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-3438 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-3438 failed"


    def test_rule_3439(self, all_results):
        """
        Test RULE-3439: YAML line: hash_verification: "SHA256 + Blake3"
        Priority: MEDIUM
        """
        assert "RULE-3439" in all_results['results'], "Rule RULE-3439 missing"
        result = all_results['results']["RULE-3439"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-3439 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-3439 failed"


    def test_rule_3440(self, all_results):
        """
        Test RULE-3440: YAML line: evidence_immutable: true
        Priority: MEDIUM
        """
        assert "RULE-3440" in all_results['results'], "Rule RULE-3440 missing"
        result = all_results['results']["RULE-3440"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-3440 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-3440 failed"


    def test_rule_3441(self, all_results):
        """
        Test RULE-3441: YAML line: worm_compliance: true
        Priority: CRITICAL
        """
        assert "RULE-3441" in all_results['results'], "Rule RULE-3441 missing"
        result = all_results['results']["RULE-3441"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-3441 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-3441 failed"


    def test_rule_kv_part3_3442(self, all_results):
        """
        Test KV-PART3-3442: ss_priority: "MEDIUM"
        Priority: MEDIUM
        """
        assert "KV-PART3-3442" in all_results['results'], "Rule KV-PART3-3442 missing"
        result = all_results['results']["KV-PART3-3442"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART3-3442 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART3-3442 failed"


    def test_rule_kv_part3_3443(self, all_results):
        """
        Test KV-PART3-3443: name: "SOC 2 (Trust Services Criteria)"
        Priority: MEDIUM
        """
        assert "KV-PART3-3443" in all_results['results'], "Rule KV-PART3-3443 missing"
        result = all_results['results']["KV-PART3-3443"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART3-3443 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART3-3443 failed"


    def test_rule_kv_part3_3444(self, all_results):
        """
        Test KV-PART3-3444: path: "23_compliance/mappings/soc2/"
        Priority: CRITICAL
        """
        assert "KV-PART3-3444" in all_results['results'], "Rule KV-PART3-3444 missing"
        result = all_results['results']["KV-PART3-3444"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART3-3444 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART3-3444 failed"


    def test_rule_kv_part3_3445(self, all_results):
        """
        Test KV-PART3-3445: deprecated: false
        Priority: MEDIUM
        """
        assert "KV-PART3-3445" in all_results['results'], "Rule KV-PART3-3445 missing"
        result = all_results['results']["KV-PART3-3445"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART3-3445 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART3-3445 failed"


    def test_rule_kv_part3_3446(self, all_results):
        """
        Test KV-PART3-3446: business_priority: "HIGH"
        Priority: MEDIUM
        """
        assert "KV-PART3-3446" in all_results['results'], "Rule KV-PART3-3446 missing"
        result = all_results['results']["KV-PART3-3446"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART3-3446 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART3-3446 failed"


    def test_rule_kv_part3_3447(self, all_results):
        """
        Test KV-PART3-3447: name: "Gaia-X"
        Priority: MEDIUM
        """
        assert "KV-PART3-3447" in all_results['results'], "Rule KV-PART3-3447 missing"
        result = all_results['results']["KV-PART3-3447"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART3-3447 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART3-3447 failed"


    def test_rule_kv_part3_3448(self, all_results):
        """
        Test KV-PART3-3448: path: "23_compliance/mappings/gaia_x/"
        Priority: CRITICAL
        """
        assert "KV-PART3-3448" in all_results['results'], "Rule KV-PART3-3448 missing"
        result = all_results['results']["KV-PART3-3448"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART3-3448 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART3-3448 failed"


    def test_rule_kv_part3_3449(self, all_results):
        """
        Test KV-PART3-3449: deprecated: false
        Priority: MEDIUM
        """
        assert "KV-PART3-3449" in all_results['results'], "Rule KV-PART3-3449 missing"
        result = all_results['results']["KV-PART3-3449"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART3-3449 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART3-3449 failed"


    def test_rule_kv_part3_3450(self, all_results):
        """
        Test KV-PART3-3450: business_priority: "LOW"
        Priority: MEDIUM
        """
        assert "KV-PART3-3450" in all_results['results'], "Rule KV-PART3-3450 missing"
        result = all_results['results']["KV-PART3-3450"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART3-3450 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART3-3450 failed"


    def test_rule_kv_part3_3451(self, all_results):
        """
        Test KV-PART3-3451: name: "ETSI EN 319 421"
        Priority: MEDIUM
        """
        assert "KV-PART3-3451" in all_results['results'], "Rule KV-PART3-3451 missing"
        result = all_results['results']["KV-PART3-3451"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART3-3451 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART3-3451 failed"


    def test_rule_kv_part3_3452(self, all_results):
        """
        Test KV-PART3-3452: path: "23_compliance/mappings/etsi_en_319_421/"
        Priority: CRITICAL
        """
        assert "KV-PART3-3452" in all_results['results'], "Rule KV-PART3-3452 missing"
        result = all_results['results']["KV-PART3-3452"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART3-3452 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART3-3452 failed"


    def test_rule_kv_part3_3453(self, all_results):
        """
        Test KV-PART3-3453: deprecated: false
        Priority: MEDIUM
        """
        assert "KV-PART3-3453" in all_results['results'], "Rule KV-PART3-3453 missing"
        result = all_results['results']["KV-PART3-3453"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART3-3453 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART3-3453 failed"


    def test_rule_kv_part3_3454(self, all_results):
        """
        Test KV-PART3-3454: business_priority: "MEDIUM"
        Priority: MEDIUM
        """
        assert "KV-PART3-3454" in all_results['results'], "Rule KV-PART3-3454 missing"
        result = all_results['results']["KV-PART3-3454"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART3-3454 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART3-3454 failed"


    def test_rule_kv_part3_3455(self, all_results):
        """
        Test KV-PART3-3455: version: "2.0"
        Priority: MEDIUM
        """
        assert "KV-PART3-3455" in all_results['results'], "Rule KV-PART3-3455 missing"
        result = all_results['results']["KV-PART3-3455"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART3-3455 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART3-3455 failed"


    def test_rule_kv_part3_3456(self, all_results):
        """
        Test KV-PART3-3456: date: "2025-09-15"
        Priority: MEDIUM
        """
        assert "KV-PART3-3456" in all_results['results'], "Rule KV-PART3-3456 missing"
        result = all_results['results']["KV-PART3-3456"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART3-3456 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART3-3456 failed"


    def test_rule_kv_part3_3457(self, all_results):
        """
        Test KV-PART3-3457: deprecated: false
        Priority: MEDIUM
        """
        assert "KV-PART3-3457" in all_results['results'], "Rule KV-PART3-3457 missing"
        result = all_results['results']["KV-PART3-3457"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART3-3457 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART3-3457 failed"


    def test_rule_kv_part3_3458(self, all_results):
        """
        Test KV-PART3-3458: regulatory_basis: "FATF 2025, OECD CARF 2025-07, ISO Updates 2025"
        Priority: MEDIUM
        """
        assert "KV-PART3-3458" in all_results['results'], "Rule KV-PART3-3458 missing"
        result = all_results['results']["KV-PART3-3458"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART3-3458 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART3-3458 failed"


    def test_rule_kv_part3_3459(self, all_results):
        """
        Test KV-PART3-3459: classification: "CONFIDENTIAL - Internal Compliance Matrix"
        Priority: CRITICAL
        """
        assert "KV-PART3-3459" in all_results['results'], "Rule KV-PART3-3459 missing"
        result = all_results['results']["KV-PART3-3459"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART3-3459 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART3-3459 failed"


    def test_rule_kv_part3_3460(self, all_results):
        """
        Test KV-PART3-3460: name: "IVMS101-2023 Datenmodell & Mapping-Templates"
        Priority: MEDIUM
        """
        assert "KV-PART3-3460" in all_results['results'], "Rule KV-PART3-3460 missing"
        result = all_results['results']["KV-PART3-3460"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART3-3460 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART3-3460 failed"


    def test_rule_kv_part3_3461(self, all_results):
        """
        Test KV-PART3-3461: path: "23_compliance/global/fatf/travel_rule/ivms101_2023/"
        Priority: CRITICAL
        """
        assert "KV-PART3-3461" in all_results['results'], "Rule KV-PART3-3461 missing"
        result = all_results['results']["KV-PART3-3461"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART3-3461 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART3-3461 failed"


    def test_rule_kv_part3_3462(self, all_results):
        """
        Test KV-PART3-3462: deprecated: false
        Priority: MEDIUM
        """
        assert "KV-PART3-3462" in all_results['results'], "Rule KV-PART3-3462 missing"
        result = all_results['results']["KV-PART3-3462"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART3-3462 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART3-3462 failed"


    def test_rule_text_part3_3463(self, all_results):
        """
        Test TEXT-PART3-3463: business_priority: "CRITICAL"
        Priority: CRITICAL
        """
        assert "TEXT-PART3-3463" in all_results['results'], "Rule TEXT-PART3-3463 missing"
        result = all_results['results']["TEXT-PART3-3463"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule TEXT-PART3-3463 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule TEXT-PART3-3463 failed"


    def test_rule_kv_part3_3464(self, all_results):
        """
        Test KV-PART3-3464: name: "R.16-Änderungen Juni 2025 Gap-Analyse"
        Priority: MEDIUM
        """
        assert "KV-PART3-3464" in all_results['results'], "Rule KV-PART3-3464 missing"
        result = all_results['results']["KV-PART3-3464"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART3-3464 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART3-3464 failed"


    def test_rule_kv_part3_3465(self, all_results):
        """
        Test KV-PART3-3465: path: "23_compliance/global/fatf/travel_rule/fatf_rec16_2025_update/"
        Priority: CRITICAL
        """
        assert "KV-PART3-3465" in all_results['results'], "Rule KV-PART3-3465 missing"
        result = all_results['results']["KV-PART3-3465"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART3-3465 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART3-3465 failed"


    def test_rule_kv_part3_3466(self, all_results):
        """
        Test KV-PART3-3466: deprecated: false
        Priority: MEDIUM
        """
        assert "KV-PART3-3466" in all_results['results'], "Rule KV-PART3-3466 missing"
        result = all_results['results']["KV-PART3-3466"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART3-3466 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART3-3466 failed"


    def test_rule_kv_part3_3467(self, all_results):
        """
        Test KV-PART3-3467: business_priority: "HIGH"
        Priority: MEDIUM
        """
        assert "KV-PART3-3467" in all_results['results'], "Rule KV-PART3-3467 missing"
        result = all_results['results']["KV-PART3-3467"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART3-3467 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART3-3467 failed"


    def test_rule_kv_part3_3468(self, all_results):
        """
        Test KV-PART3-3468: name: "User Guide + Feldprüfung, Testfälle"
        Priority: MEDIUM
        """
        assert "KV-PART3-3468" in all_results['results'], "Rule KV-PART3-3468 missing"
        result = all_results['results']["KV-PART3-3468"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART3-3468 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART3-3468 failed"


    def test_rule_kv_part3_3469(self, all_results):
        """
        Test KV-PART3-3469: path: "23_compliance/global/oecd_carf/xml_schema_2025_07/"
        Priority: CRITICAL
        """
        assert "KV-PART3-3469" in all_results['results'], "Rule KV-PART3-3469 missing"
        result = all_results['results']["KV-PART3-3469"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART3-3469 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART3-3469 failed"


    def test_rule_kv_part3_3470(self, all_results):
        """
        Test KV-PART3-3470: deprecated: false
        Priority: MEDIUM
        """
        assert "KV-PART3-3470" in all_results['results'], "Rule KV-PART3-3470 missing"
        result = all_results['results']["KV-PART3-3470"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART3-3470 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART3-3470 failed"


    def test_rule_kv_part3_3471(self, all_results):
        """
        Test KV-PART3-3471: business_priority: "HIGH"
        Priority: MEDIUM
        """
        assert "KV-PART3-3471" in all_results['results'], "Rule KV-PART3-3471 missing"
        result = all_results['results']["KV-PART3-3471"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART3-3471 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART3-3471 failed"


    def test_rule_kv_part3_3472(self, all_results):
        """
        Test KV-PART3-3472: name: "ISO 24165-2:2025 Registry-Flows, DTIF-RA-Hinweise"
        Priority: MEDIUM
        """
        assert "KV-PART3-3472" in all_results['results'], "Rule KV-PART3-3472 missing"
        result = all_results['results']["KV-PART3-3472"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART3-3472 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART3-3472 failed"


    def test_rule_kv_part3_3473(self, all_results):
        """
        Test KV-PART3-3473: path: "23_compliance/global/iso/iso24165_dti/"
        Priority: CRITICAL
        """
        assert "KV-PART3-3473" in all_results['results'], "Rule KV-PART3-3473 missing"
        result = all_results['results']["KV-PART3-3473"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART3-3473 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART3-3473 failed"


    def test_rule_kv_part3_3474(self, all_results):
        """
        Test KV-PART3-3474: deprecated: false
        Priority: MEDIUM
        """
        assert "KV-PART3-3474" in all_results['results'], "Rule KV-PART3-3474 missing"
        result = all_results['results']["KV-PART3-3474"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART3-3474 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART3-3474 failed"


    def test_rule_kv_part3_3475(self, all_results):
        """
        Test KV-PART3-3475: business_priority: "MEDIUM"
        Priority: MEDIUM
        """
        assert "KV-PART3-3475" in all_results['results'], "Rule KV-PART3-3475 missing"
        result = all_results['results']["KV-PART3-3475"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART3-3475 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART3-3475 failed"


    def test_rule_kv_part3_3476(self, all_results):
        """
        Test KV-PART3-3476: name: "FSB Policy-Matrizen Marktmissbrauch/Transparenz"
        Priority: MEDIUM
        """
        assert "KV-PART3-3476" in all_results['results'], "Rule KV-PART3-3476 missing"
        result = all_results['results']["KV-PART3-3476"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART3-3476 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART3-3476 failed"


    def test_rule_kv_part3_3477(self, all_results):
        """
        Test KV-PART3-3477: path: "23_compliance/global/standards/fsb_stablecoins_2023/"
        Priority: CRITICAL
        """
        assert "KV-PART3-3477" in all_results['results'], "Rule KV-PART3-3477 missing"
        result = all_results['results']["KV-PART3-3477"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART3-3477 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART3-3477 failed"


    def test_rule_kv_part3_3478(self, all_results):
        """
        Test KV-PART3-3478: deprecated: false
        Priority: MEDIUM
        """
        assert "KV-PART3-3478" in all_results['results'], "Rule KV-PART3-3478 missing"
        result = all_results['results']["KV-PART3-3478"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART3-3478 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART3-3478 failed"


    def test_rule_kv_part3_3479(self, all_results):
        """
        Test KV-PART3-3479: business_priority: "HIGH"
        Priority: MEDIUM
        """
        assert "KV-PART3-3479" in all_results['results'], "Rule KV-PART3-3479 missing"
        result = all_results['results']["KV-PART3-3479"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART3-3479 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART3-3479 failed"


    def test_rule_kv_part3_3480(self, all_results):
        """
        Test KV-PART3-3480: name: "IOSCO Policy-Matrizen"
        Priority: MEDIUM
        """
        assert "KV-PART3-3480" in all_results['results'], "Rule KV-PART3-3480 missing"
        result = all_results['results']["KV-PART3-3480"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART3-3480 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART3-3480 failed"


    def test_rule_kv_part3_3481(self, all_results):
        """
        Test KV-PART3-3481: path: "23_compliance/global/standards/iosco_crypto_markets_2023/"
        Priority: CRITICAL
        """
        assert "KV-PART3-3481" in all_results['results'], "Rule KV-PART3-3481 missing"
        result = all_results['results']["KV-PART3-3481"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART3-3481 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART3-3481 failed"


    def test_rule_kv_part3_3482(self, all_results):
        """
        Test KV-PART3-3482: deprecated: false
        Priority: MEDIUM
        """
        assert "KV-PART3-3482" in all_results['results'], "Rule KV-PART3-3482 missing"
        result = all_results['results']["KV-PART3-3482"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART3-3482 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART3-3482 failed"


    def test_rule_kv_part3_3483(self, all_results):
        """
        Test KV-PART3-3483: business_priority: "MEDIUM"
        Priority: MEDIUM
        """
        assert "KV-PART3-3483" in all_results['results'], "Rule KV-PART3-3483 missing"
        result = all_results['results']["KV-PART3-3483"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART3-3483 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART3-3483 failed"


    def test_rule_kv_part3_3484(self, all_results):
        """
        Test KV-PART3-3484: name: "Govern/Map/Measure/Manage Quick-Profiles"
        Priority: MEDIUM
        """
        assert "KV-PART3-3484" in all_results['results'], "Rule KV-PART3-3484 missing"
        result = all_results['results']["KV-PART3-3484"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART3-3484 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART3-3484 failed"


    def test_rule_kv_part3_3485(self, all_results):
        """
        Test KV-PART3-3485: path: "23_compliance/global/standards/nist_ai_rmf_1_0/"
        Priority: CRITICAL
        """
        assert "KV-PART3-3485" in all_results['results'], "Rule KV-PART3-3485 missing"
        result = all_results['results']["KV-PART3-3485"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART3-3485 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART3-3485 failed"


    def test_rule_kv_part3_3486(self, all_results):
        """
        Test KV-PART3-3486: deprecated: false
        Priority: MEDIUM
        """
        assert "KV-PART3-3486" in all_results['results'], "Rule KV-PART3-3486 missing"
        result = all_results['results']["KV-PART3-3486"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART3-3486 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART3-3486 failed"


    def test_rule_kv_part3_3487(self, all_results):
        """
        Test KV-PART3-3487: business_priority: "MEDIUM"
        Priority: MEDIUM
        """
        assert "KV-PART3-3487" in all_results['results'], "Rule KV-PART3-3487 missing"
        result = all_results['results']["KV-PART3-3487"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART3-3487 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART3-3487 failed"


    def test_rule_list_part3_3488(self, all_results):
        """
        Test LIST-PART3-3488: List item: id: "fatf_rec16_2024"
        Priority: MEDIUM
        """
        assert "LIST-PART3-3488" in all_results['results'], "Rule LIST-PART3-3488 missing"
        result = all_results['results']["LIST-PART3-3488"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART3-3488 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART3-3488 failed"


    def test_rule_kv_part3_3489(self, all_results):
        """
        Test KV-PART3-3489: status: "deprecated"
        Priority: MEDIUM
        """
        assert "KV-PART3-3489" in all_results['results'], "Rule KV-PART3-3489 missing"
        result = all_results['results']["KV-PART3-3489"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART3-3489 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART3-3489 failed"


    def test_rule_kv_part3_3490(self, all_results):
        """
        Test KV-PART3-3490: deprecated: true
        Priority: MEDIUM
        """
        assert "KV-PART3-3490" in all_results['results'], "Rule KV-PART3-3490 missing"
        result = all_results['results']["KV-PART3-3490"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART3-3490 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART3-3490 failed"


    def test_rule_kv_part3_3491(self, all_results):
        """
        Test KV-PART3-3491: replaced_by: "fatf_rec16_2025_update"
        Priority: MEDIUM
        """
        assert "KV-PART3-3491" in all_results['results'], "Rule KV-PART3-3491 missing"
        result = all_results['results']["KV-PART3-3491"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART3-3491 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART3-3491 failed"


    def test_rule_kv_part3_3492(self, all_results):
        """
        Test KV-PART3-3492: deprecation_date: "2025-06-01"
        Priority: MEDIUM
        """
        assert "KV-PART3-3492" in all_results['results'], "Rule KV-PART3-3492 missing"
        result = all_results['results']["KV-PART3-3492"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART3-3492 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART3-3492 failed"


    def test_rule_kv_part3_3493(self, all_results):
        """
        Test KV-PART3-3493: migration_deadline: "2025-12-31"
        Priority: MEDIUM
        """
        assert "KV-PART3-3493" in all_results['results'], "Rule KV-PART3-3493 missing"
        result = all_results['results']["KV-PART3-3493"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART3-3493 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART3-3493 failed"


    def test_rule_kv_part3_3494(self, all_results):
        """
        Test KV-PART3-3494: version: "1.5"
        Priority: MEDIUM
        """
        assert "KV-PART3-3494" in all_results['results'], "Rule KV-PART3-3494 missing"
        result = all_results['results']["KV-PART3-3494"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART3-3494 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART3-3494 failed"


    def test_rule_kv_part3_3495(self, all_results):
        """
        Test KV-PART3-3495: date: "2025-09-15"
        Priority: MEDIUM
        """
        assert "KV-PART3-3495" in all_results['results'], "Rule KV-PART3-3495 missing"
        result = all_results['results']["KV-PART3-3495"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART3-3495 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART3-3495 failed"


    def test_rule_kv_part3_3496(self, all_results):
        """
        Test KV-PART3-3496: deprecated: false
        Priority: MEDIUM
        """
        assert "KV-PART3-3496" in all_results['results'], "Rule KV-PART3-3496 missing"
        result = all_results['results']["KV-PART3-3496"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART3-3496 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART3-3496 failed"


    def test_rule_kv_part3_3497(self, all_results):
        """
        Test KV-PART3-3497: classification: "CONFIDENTIAL"
        Priority: MEDIUM
        """
        assert "KV-PART3-3497" in all_results['results'], "Rule KV-PART3-3497 missing"
        result = all_results['results']["KV-PART3-3497"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART3-3497 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART3-3497 failed"


    def test_rule_kv_part3_3498(self, all_results):
        """
        Test KV-PART3-3498: name: "Werbe-Pflichten, POS-Friction, Risk-Warnings"
        Priority: CRITICAL
        """
        assert "KV-PART3-3498" in all_results['results'], "Rule KV-PART3-3498 missing"
        result = all_results['results']["KV-PART3-3498"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART3-3498 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART3-3498 failed"


    def test_rule_kv_part3_3499(self, all_results):
        """
        Test KV-PART3-3499: path: "23_compliance/jurisdictions/uk_crypto_regime/fca_ps23_6_promotions/"
        Priority: CRITICAL
        """
        assert "KV-PART3-3499" in all_results['results'], "Rule KV-PART3-3499 missing"
        result = all_results['results']["KV-PART3-3499"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART3-3499 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART3-3499 failed"


    def test_rule_kv_part3_3500(self, all_results):
        """
        Test KV-PART3-3500: deprecated: false
        Priority: MEDIUM
        """
        assert "KV-PART3-3500" in all_results['results'], "Rule KV-PART3-3500 missing"
        result = all_results['results']["KV-PART3-3500"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART3-3500 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART3-3500 failed"


    def test_rule_kv_part3_3501(self, all_results):
        """
        Test KV-PART3-3501: business_priority: "HIGH"
        Priority: MEDIUM
        """
        assert "KV-PART3-3501" in all_results['results'], "Rule KV-PART3-3501 missing"
        result = all_results['results']["KV-PART3-3501"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART3-3501 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART3-3501 failed"


    def test_rule_kv_part3_3502(self, all_results):
        """
        Test KV-PART3-3502: name: "near-final Draft + FCA CP25/14 Stablecoins, Custody"
        Priority: MEDIUM
        """
        assert "KV-PART3-3502" in all_results['results'], "Rule KV-PART3-3502 missing"
        result = all_results['results']["KV-PART3-3502"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART3-3502 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART3-3502 failed"


    def test_rule_kv_part3_3503(self, all_results):
        """
        Test KV-PART3-3503: path: "23_compliance/jurisdictions/uk_crypto_regime/hmt_cryptoassets_order_2025/
        Priority: CRITICAL
        """
        assert "KV-PART3-3503" in all_results['results'], "Rule KV-PART3-3503 missing"
        result = all_results['results']["KV-PART3-3503"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART3-3503 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART3-3503 failed"


    def test_rule_kv_part3_3504(self, all_results):
        """
        Test KV-PART3-3504: deprecated: false
        Priority: MEDIUM
        """
        assert "KV-PART3-3504" in all_results['results'], "Rule KV-PART3-3504 missing"
        result = all_results['results']["KV-PART3-3504"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART3-3504 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART3-3504 failed"


    def test_rule_kv_part3_3505(self, all_results):
        """
        Test KV-PART3-3505: business_priority: "HIGH"
        Priority: MEDIUM
        """
        assert "KV-PART3-3505" in all_results['results'], "Rule KV-PART3-3505 missing"
        result = all_results['results']["KV-PART3-3505"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART3-3505 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART3-3505 failed"


    def test_rule_kv_part3_3506(self, all_results):
        """
        Test KV-PART3-3506: name: "FINMA-Lizenz als Evidenz & Controls"
        Priority: MEDIUM
        """
        assert "KV-PART3-3506" in all_results['results'], "Rule KV-PART3-3506 missing"
        result = all_results['results']["KV-PART3-3506"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART3-3506 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART3-3506 failed"


    def test_rule_kv_part3_3507(self, all_results):
        """
        Test KV-PART3-3507: path: "23_compliance/jurisdictions/ch_dlt/2025_dlt_trading_facility/"
        Priority: CRITICAL
        """
        assert "KV-PART3-3507" in all_results['results'], "Rule KV-PART3-3507 missing"
        result = all_results['results']["KV-PART3-3507"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART3-3507 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART3-3507 failed"


    def test_rule_kv_part3_3508(self, all_results):
        """
        Test KV-PART3-3508: deprecated: false
        Priority: MEDIUM
        """
        assert "KV-PART3-3508" in all_results['results'], "Rule KV-PART3-3508 missing"
        result = all_results['results']["KV-PART3-3508"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART3-3508 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART3-3508 failed"


    def test_rule_kv_part3_3509(self, all_results):
        """
        Test KV-PART3-3509: business_priority: "MEDIUM"
        Priority: MEDIUM
        """
        assert "KV-PART3-3509" in all_results['results'], "Rule KV-PART3-3509 missing"
        result = all_results['results']["KV-PART3-3509"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART3-3509 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART3-3509 failed"


    def test_rule_kv_part3_3510(self, all_results):
        """
        Test KV-PART3-3510: name: "aktualisierte EN-Übersetzung & FMA-Hinweise"
        Priority: MEDIUM
        """
        assert "KV-PART3-3510" in all_results['results'], "Rule KV-PART3-3510 missing"
        result = all_results['results']["KV-PART3-3510"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART3-3510 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART3-3510 failed"


    def test_rule_kv_part3_3511(self, all_results):
        """
        Test KV-PART3-3511: path: "23_compliance/jurisdictions/li_tvtg/tvtg_consolidated_2025/"
        Priority: CRITICAL
        """
        assert "KV-PART3-3511" in all_results['results'], "Rule KV-PART3-3511 missing"
        result = all_results['results']["KV-PART3-3511"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART3-3511 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART3-3511 failed"


    def test_rule_kv_part3_3512(self, all_results):
        """
        Test KV-PART3-3512: deprecated: false
        Priority: MEDIUM
        """
        assert "KV-PART3-3512" in all_results['results'], "Rule KV-PART3-3512 missing"
        result = all_results['results']["KV-PART3-3512"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART3-3512 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART3-3512 failed"


    def test_rule_kv_part3_3513(self, all_results):
        """
        Test KV-PART3-3513: business_priority: "MEDIUM"
        Priority: MEDIUM
        """
        assert "KV-PART3-3513" in all_results['results'], "Rule KV-PART3-3513 missing"
        result = all_results['results']["KV-PART3-3513"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART3-3513 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART3-3513 failed"


    def test_rule_kv_part3_3514(self, all_results):
        """
        Test KV-PART3-3514: version: "1.2"
        Priority: MEDIUM
        """
        assert "KV-PART3-3514" in all_results['results'], "Rule KV-PART3-3514 missing"
        result = all_results['results']["KV-PART3-3514"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART3-3514 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART3-3514 failed"


    def test_rule_kv_part3_3515(self, all_results):
        """
        Test KV-PART3-3515: date: "2025-09-15"
        Priority: MEDIUM
        """
        assert "KV-PART3-3515" in all_results['results'], "Rule KV-PART3-3515 missing"
        result = all_results['results']["KV-PART3-3515"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART3-3515 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART3-3515 failed"


    def test_rule_kv_part3_3516(self, all_results):
        """
        Test KV-PART3-3516: deprecated: false
        Priority: MEDIUM
        """
        assert "KV-PART3-3516" in all_results['results'], "Rule KV-PART3-3516 missing"
        result = all_results['results']["KV-PART3-3516"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART3-3516 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART3-3516 failed"


    def test_rule_kv_part3_3517(self, all_results):
        """
        Test KV-PART3-3517: classification: "CONFIDENTIAL"
        Priority: MEDIUM
        """
        assert "KV-PART3-3517" in all_results['results'], "Rule KV-PART3-3517 missing"
        result = all_results['results']["KV-PART3-3517"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART3-3517 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART3-3517 failed"


    def test_rule_kv_part3_3518(self, all_results):
        """
        Test KV-PART3-3518: name: "Rulebook Vol.6 CRA konsolidiert"
        Priority: MEDIUM
        """
        assert "KV-PART3-3518" in all_results['results'], "Rule KV-PART3-3518 missing"
        result = all_results['results']["KV-PART3-3518"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART3-3518 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART3-3518 failed"


    def test_rule_kv_part3_3519(self, all_results):
        """
        Test KV-PART3-3519: path: "23_compliance/jurisdictions/ae_bh_za_mu/bh_cbb_cryptoasset_module_2024/"
        Priority: CRITICAL
        """
        assert "KV-PART3-3519" in all_results['results'], "Rule KV-PART3-3519 missing"
        result = all_results['results']["KV-PART3-3519"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART3-3519 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART3-3519 failed"


    def test_rule_kv_part3_3520(self, all_results):
        """
        Test KV-PART3-3520: deprecated: false
        Priority: MEDIUM
        """
        assert "KV-PART3-3520" in all_results['results'], "Rule KV-PART3-3520 missing"
        result = all_results['results']["KV-PART3-3520"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART3-3520 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART3-3520 failed"


    def test_rule_kv_part3_3521(self, all_results):
        """
        Test KV-PART3-3521: business_priority: "MEDIUM"
        Priority: MEDIUM
        """
        assert "KV-PART3-3521" in all_results['results'], "Rule KV-PART3-3521 missing"
        result = all_results['results']["KV-PART3-3521"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART3-3521 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART3-3521 failed"


    def test_rule_kv_part3_3522(self, all_results):
        """
        Test KV-PART3-3522: name: "Lizenztypen VASP/ITO, Checklisten"
        Priority: MEDIUM
        """
        assert "KV-PART3-3522" in all_results['results'], "Rule KV-PART3-3522 missing"
        result = all_results['results']["KV-PART3-3522"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART3-3522 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART3-3522 failed"


    def test_rule_kv_part3_3523(self, all_results):
        """
        Test KV-PART3-3523: path: "23_compliance/jurisdictions/ae_bh_za_mu/mu_vaitos_act_2021/"
        Priority: CRITICAL
        """
        assert "KV-PART3-3523" in all_results['results'], "Rule KV-PART3-3523 missing"
        result = all_results['results']["KV-PART3-3523"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART3-3523 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART3-3523 failed"


    def test_rule_kv_part3_3524(self, all_results):
        """
        Test KV-PART3-3524: deprecated: false
        Priority: MEDIUM
        """
        assert "KV-PART3-3524" in all_results['results'], "Rule KV-PART3-3524 missing"
        result = all_results['results']["KV-PART3-3524"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART3-3524 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART3-3524 failed"


    def test_rule_kv_part3_3525(self, all_results):
        """
        Test KV-PART3-3525: business_priority: "LOW"
        Priority: MEDIUM
        """
        assert "KV-PART3-3525" in all_results['results'], "Rule KV-PART3-3525 missing"
        result = all_results['results']["KV-PART3-3525"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART3-3525 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART3-3525 failed"


    def test_rule_kv_part3_3526(self, all_results):
        """
        Test KV-PART3-3526: version: "1.8"
        Priority: MEDIUM
        """
        assert "KV-PART3-3526" in all_results['results'], "Rule KV-PART3-3526 missing"
        result = all_results['results']["KV-PART3-3526"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART3-3526 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART3-3526 failed"


    def test_rule_kv_part3_3527(self, all_results):
        """
        Test KV-PART3-3527: date: "2025-09-15"
        Priority: MEDIUM
        """
        assert "KV-PART3-3527" in all_results['results'], "Rule KV-PART3-3527 missing"
        result = all_results['results']["KV-PART3-3527"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART3-3527 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART3-3527 failed"


    def test_rule_kv_part3_3528(self, all_results):
        """
        Test KV-PART3-3528: deprecated: false
        Priority: MEDIUM
        """
        assert "KV-PART3-3528" in all_results['results'], "Rule KV-PART3-3528 missing"
        result = all_results['results']["KV-PART3-3528"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART3-3528 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART3-3528 failed"


    def test_rule_kv_part3_3529(self, all_results):
        """
        Test KV-PART3-3529: classification: "CONFIDENTIAL"
        Priority: MEDIUM
        """
        assert "KV-PART3-3529" in all_results['results'], "Rule KV-PART3-3529 missing"
        result = all_results['results']["KV-PART3-3529"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART3-3529 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART3-3529 failed"


    def test_rule_kv_part3_3530(self, all_results):
        """
        Test KV-PART3-3530: name: "Notice + Guidelines, EDD-Trigger"
        Priority: MEDIUM
        """
        assert "KV-PART3-3530" in all_results['results'], "Rule KV-PART3-3530 missing"
        result = all_results['results']["KV-PART3-3530"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART3-3530 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART3-3530 failed"


    def test_rule_kv_part3_3531(self, all_results):
        """
        Test KV-PART3-3531: path: "23_compliance/jurisdictions/sg_hk_jp_au/sg_psn02_2024/"
        Priority: CRITICAL
        """
        assert "KV-PART3-3531" in all_results['results'], "Rule KV-PART3-3531 missing"
        result = all_results['results']["KV-PART3-3531"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART3-3531 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART3-3531 failed"


    def test_rule_kv_part3_3532(self, all_results):
        """
        Test KV-PART3-3532: deprecated: false
        Priority: MEDIUM
        """
        assert "KV-PART3-3532" in all_results['results'], "Rule KV-PART3-3532 missing"
        result = all_results['results']["KV-PART3-3532"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART3-3532 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART3-3532 failed"


    def test_rule_kv_part3_3533(self, all_results):
        """
        Test KV-PART3-3533: business_priority: "HIGH"
        Priority: MEDIUM
        """
        assert "KV-PART3-3533" in all_results['results'], "Rule KV-PART3-3533 missing"
        result = all_results['results']["KV-PART3-3533"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART3-3533 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART3-3533 failed"


    def test_rule_kv_part3_3534(self, all_results):
        """
        Test KV-PART3-3534: name: "SCS-Anforderungen"
        Priority: MEDIUM
        """
        assert "KV-PART3-3534" in all_results['results'], "Rule KV-PART3-3534 missing"
        result = all_results['results']["KV-PART3-3534"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART3-3534 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART3-3534 failed"


    def test_rule_kv_part3_3535(self, all_results):
        """
        Test KV-PART3-3535: path: "23_compliance/jurisdictions/sg_hk_jp_au/sg_stablecoin_framework_2023/"
        Priority: CRITICAL
        """
        assert "KV-PART3-3535" in all_results['results'], "Rule KV-PART3-3535 missing"
        result = all_results['results']["KV-PART3-3535"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART3-3535 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART3-3535 failed"


    def test_rule_kv_part3_3536(self, all_results):
        """
        Test KV-PART3-3536: deprecated: false
        Priority: MEDIUM
        """
        assert "KV-PART3-3536" in all_results['results'], "Rule KV-PART3-3536 missing"
        result = all_results['results']["KV-PART3-3536"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART3-3536 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART3-3536 failed"


    def test_rule_kv_part3_3537(self, all_results):
        """
        Test KV-PART3-3537: business_priority: "HIGH"
        Priority: MEDIUM
        """
        assert "KV-PART3-3537" in all_results['results'], "Rule KV-PART3-3537 missing"
        result = all_results['results']["KV-PART3-3537"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART3-3537 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART3-3537 failed"


    def test_rule_kv_part3_3538(self, all_results):
        """
        Test KV-PART3-3538: name: "Licensing Handbook & SFC-Rundschreiben"
        Priority: MEDIUM
        """
        assert "KV-PART3-3538" in all_results['results'], "Rule KV-PART3-3538 missing"
        result = all_results['results']["KV-PART3-3538"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART3-3538 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART3-3538 failed"


    def test_rule_kv_part3_3539(self, all_results):
        """
        Test KV-PART3-3539: path: "23_compliance/jurisdictions/sg_hk_jp_au/hk_sfc_vatp/"
        Priority: CRITICAL
        """
        assert "KV-PART3-3539" in all_results['results'], "Rule KV-PART3-3539 missing"
        result = all_results['results']["KV-PART3-3539"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART3-3539 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART3-3539 failed"


    def test_rule_kv_part3_3540(self, all_results):
        """
        Test KV-PART3-3540: deprecated: false
        Priority: MEDIUM
        """
        assert "KV-PART3-3540" in all_results['results'], "Rule KV-PART3-3540 missing"
        result = all_results['results']["KV-PART3-3540"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART3-3540 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART3-3540 failed"


    def test_rule_kv_part3_3541(self, all_results):
        """
        Test KV-PART3-3541: business_priority: "HIGH"
        Priority: MEDIUM
        """
        assert "KV-PART3-3541" in all_results['results'], "Rule KV-PART3-3541 missing"
        result = all_results['results']["KV-PART3-3541"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART3-3541 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART3-3541 failed"


    def test_rule_kv_part3_3542(self, all_results):
        """
        Test KV-PART3-3542: name: "Electronic Payment Instruments - Rollen & Pflichten"
        Priority: CRITICAL
        """
        assert "KV-PART3-3542" in all_results['results'], "Rule KV-PART3-3542 missing"
        result = all_results['results']["KV-PART3-3542"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART3-3542 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART3-3542 failed"


    def test_rule_kv_part3_3543(self, all_results):
        """
        Test KV-PART3-3543: path: "23_compliance/jurisdictions/sg_hk_jp_au/jp_psa_stablecoins/"
        Priority: CRITICAL
        """
        assert "KV-PART3-3543" in all_results['results'], "Rule KV-PART3-3543 missing"
        result = all_results['results']["KV-PART3-3543"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART3-3543 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART3-3543 failed"


    def test_rule_kv_part3_3544(self, all_results):
        """
        Test KV-PART3-3544: deprecated: false
        Priority: MEDIUM
        """
        assert "KV-PART3-3544" in all_results['results'], "Rule KV-PART3-3544 missing"
        result = all_results['results']["KV-PART3-3544"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART3-3544 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART3-3544 failed"


    def test_rule_kv_part3_3545(self, all_results):
        """
        Test KV-PART3-3545: business_priority: "MEDIUM"
        Priority: MEDIUM
        """
        assert "KV-PART3-3545" in all_results['results'], "Rule KV-PART3-3545 missing"
        result = all_results['results']["KV-PART3-3545"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART3-3545 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART3-3545 failed"


    def test_rule_kv_part3_3546(self, all_results):
        """
        Test KV-PART3-3546: name: "Registrierungspflicht & Onboarding"
        Priority: CRITICAL
        """
        assert "KV-PART3-3546" in all_results['results'], "Rule KV-PART3-3546 missing"
        result = all_results['results']["KV-PART3-3546"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART3-3546 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART3-3546 failed"


    def test_rule_kv_part3_3547(self, all_results):
        """
        Test KV-PART3-3547: path: "23_compliance/jurisdictions/sg_hk_jp_au/au_austrac_dce/"
        Priority: CRITICAL
        """
        assert "KV-PART3-3547" in all_results['results'], "Rule KV-PART3-3547 missing"
        result = all_results['results']["KV-PART3-3547"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART3-3547 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART3-3547 failed"


    def test_rule_kv_part3_3548(self, all_results):
        """
        Test KV-PART3-3548: deprecated: false
        Priority: MEDIUM
        """
        assert "KV-PART3-3548" in all_results['results'], "Rule KV-PART3-3548 missing"
        result = all_results['results']["KV-PART3-3548"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART3-3548 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART3-3548 failed"


    def test_rule_kv_part3_3549(self, all_results):
        """
        Test KV-PART3-3549: business_priority: "MEDIUM"
        Priority: MEDIUM
        """
        assert "KV-PART3-3549" in all_results['results'], "Rule KV-PART3-3549 missing"
        result = all_results['results']["KV-PART3-3549"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART3-3549 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART3-3549 failed"


    def test_rule_kv_part3_3550(self, all_results):
        """
        Test KV-PART3-3550: version: "1.3"
        Priority: MEDIUM
        """
        assert "KV-PART3-3550" in all_results['results'], "Rule KV-PART3-3550 missing"
        result = all_results['results']["KV-PART3-3550"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART3-3550 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART3-3550 failed"


    def test_rule_kv_part3_3551(self, all_results):
        """
        Test KV-PART3-3551: date: "2025-09-15"
        Priority: MEDIUM
        """
        assert "KV-PART3-3551" in all_results['results'], "Rule KV-PART3-3551 missing"
        result = all_results['results']["KV-PART3-3551"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART3-3551 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART3-3551 failed"


    def test_rule_kv_part3_3552(self, all_results):
        """
        Test KV-PART3-3552: deprecated: false
        Priority: MEDIUM
        """
        assert "KV-PART3-3552" in all_results['results'], "Rule KV-PART3-3552 missing"
        result = all_results['results']["KV-PART3-3552"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART3-3552 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART3-3552 failed"


    def test_rule_kv_part3_3553(self, all_results):
        """
        Test KV-PART3-3553: classification: "CONFIDENTIAL"
        Priority: MEDIUM
        """
        assert "KV-PART3-3553" in all_results['results'], "Rule KV-PART3-3553 missing"
        result = all_results['results']["KV-PART3-3553"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART3-3553 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART3-3553 failed"


    def test_rule_kv_part3_3554(self, all_results):
        """
        Test KV-PART3-3554: name: "Broker-Reporting ab Transaktionen 2025, Datenfelder"
        Priority: MEDIUM
        """
        assert "KV-PART3-3554" in all_results['results'], "Rule KV-PART3-3554 missing"
        result = all_results['results']["KV-PART3-3554"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART3-3554 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART3-3554 failed"


    def test_rule_kv_part3_3555(self, all_results):
        """
        Test KV-PART3-3555: path: "23_compliance/jurisdictions/us_ca_br_mx/us_irs_1099_da_final/"
        Priority: CRITICAL
        """
        assert "KV-PART3-3555" in all_results['results'], "Rule KV-PART3-3555 missing"
        result = all_results['results']["KV-PART3-3555"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART3-3555 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART3-3555 failed"


    def test_rule_kv_part3_3556(self, all_results):
        """
        Test KV-PART3-3556: deprecated: false
        Priority: MEDIUM
        """
        assert "KV-PART3-3556" in all_results['results'], "Rule KV-PART3-3556 missing"
        result = all_results['results']["KV-PART3-3556"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART3-3556 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART3-3556 failed"


    def test_rule_kv_part3_3557(self, all_results):
        """
        Test KV-PART3-3557: business_priority: "HIGH"
        Priority: MEDIUM
        """
        assert "KV-PART3-3557" in all_results['results'], "Rule KV-PART3-3557 missing"
        result = all_results['results']["KV-PART3-3557"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART3-3557 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART3-3557 failed"


    def test_rule_kv_part3_3558(self, all_results):
        """
        Test KV-PART3-3558: name: "OFAC VC-Guidance 2021, FinCEN CVC-Auslegung 2019"
        Priority: MEDIUM
        """
        assert "KV-PART3-3558" in all_results['results'], "Rule KV-PART3-3558 missing"
        result = all_results['results']["KV-PART3-3558"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART3-3558 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART3-3558 failed"


    def test_rule_kv_part3_3559(self, all_results):
        """
        Test KV-PART3-3559: path: "23_compliance/jurisdictions/us_ca_br_mx/us_ofac_fincen/"
        Priority: CRITICAL
        """
        assert "KV-PART3-3559" in all_results['results'], "Rule KV-PART3-3559 missing"
        result = all_results['results']["KV-PART3-3559"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART3-3559 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART3-3559 failed"


    def test_rule_kv_part3_3560(self, all_results):
        """
        Test KV-PART3-3560: deprecated: false
        Priority: MEDIUM
        """
        assert "KV-PART3-3560" in all_results['results'], "Rule KV-PART3-3560 missing"
        result = all_results['results']["KV-PART3-3560"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART3-3560 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART3-3560 failed"


    def test_rule_text_part3_3561(self, all_results):
        """
        Test TEXT-PART3-3561: business_priority: "CRITICAL"
        Priority: CRITICAL
        """
        assert "TEXT-PART3-3561" in all_results['results'], "Rule TEXT-PART3-3561 missing"
        result = all_results['results']["TEXT-PART3-3561"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule TEXT-PART3-3561 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule TEXT-PART3-3561 failed"


    def test_rule_kv_part3_3562(self, all_results):
        """
        Test KV-PART3-3562: name: "LVCTR-Pflicht ≥10.000 CAD, 24-Stunden-Regel"
        Priority: CRITICAL
        """
        assert "KV-PART3-3562" in all_results['results'], "Rule KV-PART3-3562 missing"
        result = all_results['results']["KV-PART3-3562"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART3-3562 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART3-3562 failed"


    def test_rule_kv_part3_3563(self, all_results):
        """
        Test KV-PART3-3563: path: "23_compliance/jurisdictions/us_ca_br_mx/ca_fintrac_lvctr/"
        Priority: CRITICAL
        """
        assert "KV-PART3-3563" in all_results['results'], "Rule KV-PART3-3563 missing"
        result = all_results['results']["KV-PART3-3563"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART3-3563 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART3-3563 failed"


    def test_rule_kv_part3_3564(self, all_results):
        """
        Test KV-PART3-3564: deprecated: false
        Priority: MEDIUM
        """
        assert "KV-PART3-3564" in all_results['results'], "Rule KV-PART3-3564 missing"
        result = all_results['results']["KV-PART3-3564"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART3-3564 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART3-3564 failed"


    def test_rule_kv_part3_3565(self, all_results):
        """
        Test KV-PART3-3565: business_priority: "MEDIUM"
        Priority: MEDIUM
        """
        assert "KV-PART3-3565" in all_results['results'], "Rule KV-PART3-3565 missing"
        result = all_results['results']["KV-PART3-3565"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART3-3565 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART3-3565 failed"


    def test_rule_kv_part3_3566(self, all_results):
        """
        Test KV-PART3-3566: name: "NYDFS BitLicense (23 NYCRR Part 200) + MSBLA (NMLS-Rahmen)"
        Priority: MEDIUM
        """
        assert "KV-PART3-3566" in all_results['results'], "Rule KV-PART3-3566 missing"
        result = all_results['results']["KV-PART3-3566"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART3-3566 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART3-3566 failed"


    def test_rule_kv_part3_3567(self, all_results):
        """
        Test KV-PART3-3567: path: "23_compliance/jurisdictions/us_ca_br_mx/us_state_mtl/"
        Priority: CRITICAL
        """
        assert "KV-PART3-3567" in all_results['results'], "Rule KV-PART3-3567 missing"
        result = all_results['results']["KV-PART3-3567"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART3-3567 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART3-3567 failed"


    def test_rule_kv_part3_3568(self, all_results):
        """
        Test KV-PART3-3568: deprecated: false
        Priority: MEDIUM
        """
        assert "KV-PART3-3568" in all_results['results'], "Rule KV-PART3-3568 missing"
        result = all_results['results']["KV-PART3-3568"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART3-3568 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART3-3568 failed"


    def test_rule_kv_part3_3569(self, all_results):
        """
        Test KV-PART3-3569: business_priority: "LOW"
        Priority: MEDIUM
        """
        assert "KV-PART3-3569" in all_results['results'], "Rule KV-PART3-3569 missing"
        result = all_results['results']["KV-PART3-3569"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART3-3569 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART3-3569 failed"


    def test_rule_kv_part3_3570(self, all_results):
        """
        Test KV-PART3-3570: conditional: "Market entry dependent"
        Priority: MEDIUM
        """
        assert "KV-PART3-3570" in all_results['results'], "Rule KV-PART3-3570 missing"
        result = all_results['results']["KV-PART3-3570"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART3-3570 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART3-3570 failed"


    def test_rule_kv_part3_3571(self, all_results):
        """
        Test KV-PART3-3571: version: "2.2"
        Priority: MEDIUM
        """
        assert "KV-PART3-3571" in all_results['results'], "Rule KV-PART3-3571 missing"
        result = all_results['results']["KV-PART3-3571"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART3-3571 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART3-3571 failed"


    def test_rule_kv_part3_3572(self, all_results):
        """
        Test KV-PART3-3572: date: "2025-09-15"
        Priority: MEDIUM
        """
        assert "KV-PART3-3572" in all_results['results'], "Rule KV-PART3-3572 missing"
        result = all_results['results']["KV-PART3-3572"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART3-3572 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART3-3572 failed"


    def test_rule_kv_part3_3573(self, all_results):
        """
        Test KV-PART3-3573: deprecated: false
        Priority: MEDIUM
        """
        assert "KV-PART3-3573" in all_results['results'], "Rule KV-PART3-3573 missing"
        result = all_results['results']["KV-PART3-3573"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART3-3573 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART3-3573 failed"


    def test_rule_kv_part3_3574(self, all_results):
        """
        Test KV-PART3-3574: regulatory_basis: "Global Privacy Landscape 2025 + Emerging Markets"
        Priority: MEDIUM
        """
        assert "KV-PART3-3574" in all_results['results'], "Rule KV-PART3-3574 missing"
        result = all_results['results']["KV-PART3-3574"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART3-3574 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART3-3574 failed"


    def test_rule_kv_part3_3575(self, all_results):
        """
        Test KV-PART3-3575: classification: "CONFIDENTIAL"
        Priority: MEDIUM
        """
        assert "KV-PART3-3575" in all_results['results'], "Rule KV-PART3-3575 missing"
        result = all_results['results']["KV-PART3-3575"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART3-3575 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART3-3575 failed"


    def test_rule_kv_part3_3576(self, all_results):
        """
        Test KV-PART3-3576: name: "Kalifornien CCPA/CPRA"
        Priority: MEDIUM
        """
        assert "KV-PART3-3576" in all_results['results'], "Rule KV-PART3-3576 missing"
        result = all_results['results']["KV-PART3-3576"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART3-3576 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART3-3576 failed"


    def test_rule_kv_part3_3577(self, all_results):
        """
        Test KV-PART3-3577: path: "23_compliance/privacy/ccpa_cpra/"
        Priority: CRITICAL
        """
        assert "KV-PART3-3577" in all_results['results'], "Rule KV-PART3-3577 missing"
        result = all_results['results']["KV-PART3-3577"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART3-3577 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART3-3577 failed"


    def test_rule_kv_part3_3578(self, all_results):
        """
        Test KV-PART3-3578: deprecated: false
        Priority: MEDIUM
        """
        assert "KV-PART3-3578" in all_results['results'], "Rule KV-PART3-3578 missing"
        result = all_results['results']["KV-PART3-3578"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART3-3578 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART3-3578 failed"


    def test_rule_kv_part3_3579(self, all_results):
        """
        Test KV-PART3-3579: business_priority: "HIGH"
        Priority: MEDIUM
        """
        assert "KV-PART3-3579" in all_results['results'], "Rule KV-PART3-3579 missing"
        result = all_results['results']["KV-PART3-3579"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART3-3579 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART3-3579 failed"


    def test_rule_kv_part3_3580(self, all_results):
        """
        Test KV-PART3-3580: name: "Brasilien LGPD"
        Priority: MEDIUM
        """
        assert "KV-PART3-3580" in all_results['results'], "Rule KV-PART3-3580 missing"
        result = all_results['results']["KV-PART3-3580"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART3-3580 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART3-3580 failed"


    def test_rule_kv_part3_3581(self, all_results):
        """
        Test KV-PART3-3581: path: "23_compliance/privacy/lgpd_br/"
        Priority: CRITICAL
        """
        assert "KV-PART3-3581" in all_results['results'], "Rule KV-PART3-3581 missing"
        result = all_results['results']["KV-PART3-3581"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART3-3581 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART3-3581 failed"


    def test_rule_kv_part3_3582(self, all_results):
        """
        Test KV-PART3-3582: deprecated: false
        Priority: MEDIUM
        """
        assert "KV-PART3-3582" in all_results['results'], "Rule KV-PART3-3582 missing"
        result = all_results['results']["KV-PART3-3582"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART3-3582 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART3-3582 failed"


    def test_rule_kv_part3_3583(self, all_results):
        """
        Test KV-PART3-3583: business_priority: "MEDIUM"
        Priority: MEDIUM
        """
        assert "KV-PART3-3583" in all_results['results'], "Rule KV-PART3-3583 missing"
        result = all_results['results']["KV-PART3-3583"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART3-3583 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART3-3583 failed"


    def test_rule_kv_part3_3584(self, all_results):
        """
        Test KV-PART3-3584: name: "Singapur PDPA"
        Priority: MEDIUM
        """
        assert "KV-PART3-3584" in all_results['results'], "Rule KV-PART3-3584 missing"
        result = all_results['results']["KV-PART3-3584"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART3-3584 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART3-3584 failed"


    def test_rule_kv_part3_3585(self, all_results):
        """
        Test KV-PART3-3585: path: "23_compliance/privacy/pdpa_sg/"
        Priority: CRITICAL
        """
        assert "KV-PART3-3585" in all_results['results'], "Rule KV-PART3-3585 missing"
        result = all_results['results']["KV-PART3-3585"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART3-3585 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART3-3585 failed"


    def test_rule_kv_part3_3586(self, all_results):
        """
        Test KV-PART3-3586: deprecated: false
        Priority: MEDIUM
        """
        assert "KV-PART3-3586" in all_results['results'], "Rule KV-PART3-3586 missing"
        result = all_results['results']["KV-PART3-3586"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART3-3586 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART3-3586 failed"


    def test_rule_kv_part3_3587(self, all_results):
        """
        Test KV-PART3-3587: business_priority: "HIGH"
        Priority: MEDIUM
        """
        assert "KV-PART3-3587" in all_results['results'], "Rule KV-PART3-3587 missing"
        result = all_results['results']["KV-PART3-3587"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART3-3587 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART3-3587 failed"


    def test_rule_kv_part3_3588(self, all_results):
        """
        Test KV-PART3-3588: name: "Japan APPI"
        Priority: MEDIUM
        """
        assert "KV-PART3-3588" in all_results['results'], "Rule KV-PART3-3588 missing"
        result = all_results['results']["KV-PART3-3588"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART3-3588 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART3-3588 failed"


    def test_rule_kv_part3_3589(self, all_results):
        """
        Test KV-PART3-3589: path: "23_compliance/privacy/appi_jp/"
        Priority: CRITICAL
        """
        assert "KV-PART3-3589" in all_results['results'], "Rule KV-PART3-3589 missing"
        result = all_results['results']["KV-PART3-3589"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART3-3589 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART3-3589 failed"


    def test_rule_kv_part3_3590(self, all_results):
        """
        Test KV-PART3-3590: deprecated: false
        Priority: MEDIUM
        """
        assert "KV-PART3-3590" in all_results['results'], "Rule KV-PART3-3590 missing"
        result = all_results['results']["KV-PART3-3590"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART3-3590 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART3-3590 failed"


    def test_rule_kv_part3_3591(self, all_results):
        """
        Test KV-PART3-3591: business_priority: "MEDIUM"
        Priority: MEDIUM
        """
        assert "KV-PART3-3591" in all_results['results'], "Rule KV-PART3-3591 missing"
        result = all_results['results']["KV-PART3-3591"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART3-3591 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART3-3591 failed"


    def test_rule_kv_part3_3592(self, all_results):
        """
        Test KV-PART3-3592: name: "China PIPL"
        Priority: MEDIUM
        """
        assert "KV-PART3-3592" in all_results['results'], "Rule KV-PART3-3592 missing"
        result = all_results['results']["KV-PART3-3592"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART3-3592 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART3-3592 failed"


    def test_rule_kv_part3_3593(self, all_results):
        """
        Test KV-PART3-3593: path: "23_compliance/privacy/pipl_cn/"
        Priority: CRITICAL
        """
        assert "KV-PART3-3593" in all_results['results'], "Rule KV-PART3-3593 missing"
        result = all_results['results']["KV-PART3-3593"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART3-3593 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART3-3593 failed"


    def test_rule_kv_part3_3594(self, all_results):
        """
        Test KV-PART3-3594: deprecated: false
        Priority: MEDIUM
        """
        assert "KV-PART3-3594" in all_results['results'], "Rule KV-PART3-3594 missing"
        result = all_results['results']["KV-PART3-3594"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART3-3594 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART3-3594 failed"


    def test_rule_kv_part3_3595(self, all_results):
        """
        Test KV-PART3-3595: business_priority: "LOW"
        Priority: MEDIUM
        """
        assert "KV-PART3-3595" in all_results['results'], "Rule KV-PART3-3595 missing"
        result = all_results['results']["KV-PART3-3595"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART3-3595 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART3-3595 failed"


    def test_rule_kv_part3_3596(self, all_results):
        """
        Test KV-PART3-3596: name: "Südafrika POPIA"
        Priority: MEDIUM
        """
        assert "KV-PART3-3596" in all_results['results'], "Rule KV-PART3-3596 missing"
        result = all_results['results']["KV-PART3-3596"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART3-3596 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART3-3596 failed"


    def test_rule_kv_part3_3597(self, all_results):
        """
        Test KV-PART3-3597: path: "23_compliance/privacy/popia_za/"
        Priority: CRITICAL
        """
        assert "KV-PART3-3597" in all_results['results'], "Rule KV-PART3-3597 missing"
        result = all_results['results']["KV-PART3-3597"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART3-3597 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART3-3597 failed"


    def test_rule_kv_part3_3598(self, all_results):
        """
        Test KV-PART3-3598: deprecated: false
        Priority: MEDIUM
        """
        assert "KV-PART3-3598" in all_results['results'], "Rule KV-PART3-3598 missing"
        result = all_results['results']["KV-PART3-3598"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART3-3598 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART3-3598 failed"


    def test_rule_kv_part3_3599(self, all_results):
        """
        Test KV-PART3-3599: business_priority: "LOW"
        Priority: MEDIUM
        """
        assert "KV-PART3-3599" in all_results['results'], "Rule KV-PART3-3599 missing"
        result = all_results['results']["KV-PART3-3599"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART3-3599 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART3-3599 failed"


    def test_rule_kv_part3_3600(self, all_results):
        """
        Test KV-PART3-3600: name: "Kanada PIPEDA + Provinzrecht-Notizen"
        Priority: MEDIUM
        """
        assert "KV-PART3-3600" in all_results['results'], "Rule KV-PART3-3600 missing"
        result = all_results['results']["KV-PART3-3600"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART3-3600 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART3-3600 failed"


    def test_rule_kv_part3_3601(self, all_results):
        """
        Test KV-PART3-3601: path: "23_compliance/privacy/pipeda_ca/"
        Priority: CRITICAL
        """
        assert "KV-PART3-3601" in all_results['results'], "Rule KV-PART3-3601 missing"
        result = all_results['results']["KV-PART3-3601"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART3-3601 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART3-3601 failed"


    def test_rule_kv_part3_3602(self, all_results):
        """
        Test KV-PART3-3602: deprecated: false
        Priority: MEDIUM
        """
        assert "KV-PART3-3602" in all_results['results'], "Rule KV-PART3-3602 missing"
        result = all_results['results']["KV-PART3-3602"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART3-3602 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART3-3602 failed"


    def test_rule_kv_part3_3603(self, all_results):
        """
        Test KV-PART3-3603: business_priority: "MEDIUM"
        Priority: MEDIUM
        """
        assert "KV-PART3-3603" in all_results['results'], "Rule KV-PART3-3603 missing"
        result = all_results['results']["KV-PART3-3603"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART3-3603 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART3-3603 failed"


    def test_rule_kv_part3_3604(self, all_results):
        """
        Test KV-PART3-3604: name: "Indien DPDP Act 2023"
        Priority: MEDIUM
        """
        assert "KV-PART3-3604" in all_results['results'], "Rule KV-PART3-3604 missing"
        result = all_results['results']["KV-PART3-3604"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART3-3604 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART3-3604 failed"


    def test_rule_kv_part3_3605(self, all_results):
        """
        Test KV-PART3-3605: path: "23_compliance/privacy/dpdp_in/"
        Priority: CRITICAL
        """
        assert "KV-PART3-3605" in all_results['results'], "Rule KV-PART3-3605 missing"
        result = all_results['results']["KV-PART3-3605"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART3-3605 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART3-3605 failed"


    def test_rule_kv_part3_3606(self, all_results):
        """
        Test KV-PART3-3606: deprecated: false
        Priority: MEDIUM
        """
        assert "KV-PART3-3606" in all_results['results'], "Rule KV-PART3-3606 missing"
        result = all_results['results']["KV-PART3-3606"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART3-3606 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART3-3606 failed"


    def test_rule_kv_part3_3607(self, all_results):
        """
        Test KV-PART3-3607: business_priority: "MEDIUM"
        Priority: MEDIUM
        """
        assert "KV-PART3-3607" in all_results['results'], "Rule KV-PART3-3607 missing"
        result = all_results['results']["KV-PART3-3607"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART3-3607 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART3-3607 failed"


    def test_rule_list_part3_3608(self, all_results):
        """
        Test LIST-PART3-3608: List item: id: "ccpa_original"
        Priority: MEDIUM
        """
        assert "LIST-PART3-3608" in all_results['results'], "Rule LIST-PART3-3608 missing"
        result = all_results['results']["LIST-PART3-3608"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART3-3608 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART3-3608 failed"


    def test_rule_kv_part3_3609(self, all_results):
        """
        Test KV-PART3-3609: status: "deprecated"
        Priority: MEDIUM
        """
        assert "KV-PART3-3609" in all_results['results'], "Rule KV-PART3-3609 missing"
        result = all_results['results']["KV-PART3-3609"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART3-3609 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART3-3609 failed"


    def test_rule_kv_part3_3610(self, all_results):
        """
        Test KV-PART3-3610: deprecated: true
        Priority: MEDIUM
        """
        assert "KV-PART3-3610" in all_results['results'], "Rule KV-PART3-3610 missing"
        result = all_results['results']["KV-PART3-3610"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART3-3610 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART3-3610 failed"


    def test_rule_kv_part3_3611(self, all_results):
        """
        Test KV-PART3-3611: replaced_by: "ccpa_cpra"
        Priority: MEDIUM
        """
        assert "KV-PART3-3611" in all_results['results'], "Rule KV-PART3-3611 missing"
        result = all_results['results']["KV-PART3-3611"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART3-3611 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART3-3611 failed"


    def test_rule_kv_part3_3612(self, all_results):
        """
        Test KV-PART3-3612: deprecation_date: "2023-01-01"
        Priority: MEDIUM
        """
        assert "KV-PART3-3612" in all_results['results'], "Rule KV-PART3-3612 missing"
        result = all_results['results']["KV-PART3-3612"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART3-3612 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART3-3612 failed"


    def test_rule_kv_part3_3613(self, all_results):
        """
        Test KV-PART3-3613: version: "1.1"
        Priority: MEDIUM
        """
        assert "KV-PART3-3613" in all_results['results'], "Rule KV-PART3-3613 missing"
        result = all_results['results']["KV-PART3-3613"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART3-3613 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART3-3613 failed"


    def test_rule_kv_part3_3614(self, all_results):
        """
        Test KV-PART3-3614: date: "2025-09-15"
        Priority: MEDIUM
        """
        assert "KV-PART3-3614" in all_results['results'], "Rule KV-PART3-3614 missing"
        result = all_results['results']["KV-PART3-3614"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART3-3614 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART3-3614 failed"


    def test_rule_kv_part3_3615(self, all_results):
        """
        Test KV-PART3-3615: deprecated: false
        Priority: MEDIUM
        """
        assert "KV-PART3-3615" in all_results['results'], "Rule KV-PART3-3615 missing"
        result = all_results['results']["KV-PART3-3615"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART3-3615 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART3-3615 failed"


    def test_rule_kv_part3_3616(self, all_results):
        """
        Test KV-PART3-3616: classification: "CONFIDENTIAL"
        Priority: MEDIUM
        """
        assert "KV-PART3-3616" in all_results['results'], "Rule KV-PART3-3616 missing"
        result = all_results['results']["KV-PART3-3616"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART3-3616 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART3-3616 failed"


    def test_rule_kv_part3_3617(self, all_results):
        """
        Test KV-PART3-3617: name: "NIST CSF 2.0 (Govern/Identify/Protect/Detect/Respond/Recover) - Mapping a
        Priority: MEDIUM
        """
        assert "KV-PART3-3617" in all_results['results'], "Rule KV-PART3-3617 missing"
        result = all_results['results']["KV-PART3-3617"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART3-3617 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART3-3617 failed"


    def test_rule_kv_part3_3618(self, all_results):
        """
        Test KV-PART3-3618: path: "23_compliance/security/nist_csf_20/"
        Priority: CRITICAL
        """
        assert "KV-PART3-3618" in all_results['results'], "Rule KV-PART3-3618 missing"
        result = all_results['results']["KV-PART3-3618"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART3-3618 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART3-3618 failed"


    def test_rule_kv_part3_3619(self, all_results):
        """
        Test KV-PART3-3619: deprecated: false
        Priority: MEDIUM
        """
        assert "KV-PART3-3619" in all_results['results'], "Rule KV-PART3-3619 missing"
        result = all_results['results']["KV-PART3-3619"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART3-3619 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART3-3619 failed"


    def test_rule_kv_part3_3620(self, all_results):
        """
        Test KV-PART3-3620: business_priority: "HIGH"
        Priority: MEDIUM
        """
        assert "KV-PART3-3620" in all_results['results'], "Rule KV-PART3-3620 missing"
        result = all_results['results']["KV-PART3-3620"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART3-3620 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART3-3620 failed"


    def test_rule_kv_part3_3621(self, all_results):
        """
        Test KV-PART3-3621: name: "FIPS 203/204/205: ML-KEM, ML-DSA, SLH-DSA - Krypto-Agilität & Migrationsp
        Priority: MEDIUM
        """
        assert "KV-PART3-3621" in all_results['results'], "Rule KV-PART3-3621 missing"
        result = all_results['results']["KV-PART3-3621"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART3-3621 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART3-3621 failed"


    def test_rule_kv_part3_3622(self, all_results):
        """
        Test KV-PART3-3622: path: "23_compliance/security/pqc/"
        Priority: CRITICAL
        """
        assert "KV-PART3-3622" in all_results['results'], "Rule KV-PART3-3622 missing"
        result = all_results['results']["KV-PART3-3622"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART3-3622 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART3-3622 failed"


    def test_rule_kv_part3_3623(self, all_results):
        """
        Test KV-PART3-3623: deprecated: false
        Priority: MEDIUM
        """
        assert "KV-PART3-3623" in all_results['results'], "Rule KV-PART3-3623 missing"
        result = all_results['results']["KV-PART3-3623"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART3-3623 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART3-3623 failed"


    def test_rule_kv_part3_3624(self, all_results):
        """
        Test KV-PART3-3624: business_priority: "HIGH"
        Priority: MEDIUM
        """
        assert "KV-PART3-3624" in all_results['results'], "Rule KV-PART3-3624 missing"
        result = all_results['results']["KV-PART3-3624"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART3-3624 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART3-3624 failed"


    def test_rule_kv_part3_3625(self, all_results):
        """
        Test KV-PART3-3625: name: "eIDAS/Signaturen: EN 319 401/411/421 (Policy/CA/TSL)"
        Priority: MEDIUM
        """
        assert "KV-PART3-3625" in all_results['results'], "Rule KV-PART3-3625 missing"
        result = all_results['results']["KV-PART3-3625"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART3-3625 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART3-3625 failed"


    def test_rule_kv_part3_3626(self, all_results):
        """
        Test KV-PART3-3626: path: "23_compliance/security/etsi_trust/"
        Priority: CRITICAL
        """
        assert "KV-PART3-3626" in all_results['results'], "Rule KV-PART3-3626 missing"
        result = all_results['results']["KV-PART3-3626"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART3-3626 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART3-3626 failed"


    def test_rule_kv_part3_3627(self, all_results):
        """
        Test KV-PART3-3627: deprecated: false
        Priority: MEDIUM
        """
        assert "KV-PART3-3627" in all_results['results'], "Rule KV-PART3-3627 missing"
        result = all_results['results']["KV-PART3-3627"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART3-3627 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART3-3627 failed"


    def test_rule_kv_part3_3628(self, all_results):
        """
        Test KV-PART3-3628: business_priority: "MEDIUM"
        Priority: MEDIUM
        """
        assert "KV-PART3-3628" in all_results['results'], "Rule KV-PART3-3628 missing"
        result = all_results['results']["KV-PART3-3628"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART3-3628 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART3-3628 failed"


    def test_rule_list_part3_3629(self, all_results):
        """
        Test LIST-PART3-3629: List item: *Globale Grundsteine:** FATF Travel Rule (IVMS101-2023), OECD CARF (X
        Priority: MEDIUM
        """
        assert "LIST-PART3-3629" in all_results['results'], "Rule LIST-PART3-3629 missing"
        result = all_results['results']["LIST-PART3-3629"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART3-3629 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART3-3629 failed"


    def test_rule_list_part3_3630(self, all_results):
        """
        Test LIST-PART3-3630: List item: *EU/UK/CH/LI:** MiCA & DORA sauber referenziert; UK-Promotionsregime 
        Priority: MEDIUM
        """
        assert "LIST-PART3-3630" in all_results['results'], "Rule LIST-PART3-3630 missing"
        result = all_results['results']["LIST-PART3-3630"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART3-3630 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART3-3630 failed"


    def test_rule_list_part3_3631(self, all_results):
        """
        Test LIST-PART3-3631: List item: *MENA/AFRICA/APAC:** Bahrain & Mauritius vollständig; Singapur (PSN02
        Priority: MEDIUM
        """
        assert "LIST-PART3-3631" in all_results['results'], "Rule LIST-PART3-3631 missing"
        result = all_results['results']["LIST-PART3-3631"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART3-3631 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART3-3631 failed"


    def test_rule_list_part3_3632(self, all_results):
        """
        Test LIST-PART3-3632: List item: *Amerika:** IRS 1099-DA finalisiert; OFAC-Sanktionsleitfaden + FinCEN
        Priority: MEDIUM
        """
        assert "LIST-PART3-3632" in all_results['results'], "Rule LIST-PART3-3632 missing"
        result = all_results['results']["LIST-PART3-3632"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART3-3632 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART3-3632 failed"


    def test_rule_list_part3_3633(self, all_results):
        """
        Test LIST-PART3-3633: List item: *Datenschutz:** GDPR-Erweiterungen vollständig; Indien DPDP 2023 als 
        Priority: MEDIUM
        """
        assert "LIST-PART3-3633" in all_results['results'], "Rule LIST-PART3-3633 missing"
        result = all_results['results']["LIST-PART3-3633"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART3-3633 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART3-3633 failed"


    def test_rule_list_part3_3634(self, all_results):
        """
        Test LIST-PART3-3634: List item: *Resilienz & Signaturen:** NIST CSF 2.0; PQC-FIPS als Migrationspfad;
        Priority: MEDIUM
        """
        assert "LIST-PART3-3634" in all_results['results'], "Rule LIST-PART3-3634 missing"
        result = all_results['results']["LIST-PART3-3634"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART3-3634 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART3-3634 failed"


    def test_rule_list_part3_3635(self, all_results):
        """
        Test LIST-PART3-3635: List item: *Enhanced Controls:** Anti-Gaming Framework, versionierte Compliance-
        Priority: CRITICAL
        """
        assert "LIST-PART3-3635" in all_results['results'], "Rule LIST-PART3-3635 missing"
        result = all_results['results']["LIST-PART3-3635"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART3-3635 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART3-3635 failed"


    def test_rule_kv_part3_3636(self, all_results):
        """
        Test KV-PART3-3636: name: Regulatory Update Request (Internal)
        Priority: MEDIUM
        """
        assert "KV-PART3-3636" in all_results['results'], "Rule KV-PART3-3636 missing"
        result = all_results['results']["KV-PART3-3636"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART3-3636 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART3-3636 failed"


    def test_rule_kv_part3_3637(self, all_results):
        """
        Test KV-PART3-3637: description: Internal regulatory change tracking
        Priority: MEDIUM
        """
        assert "KV-PART3-3637" in all_results['results'], "Rule KV-PART3-3637 missing"
        result = all_results['results']["KV-PART3-3637"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART3-3637 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART3-3637 failed"


    def test_rule_kv_part3_3638(self, all_results):
        """
        Test KV-PART3-3638: title: "[INTERNAL-REGULATORY] "
        Priority: MEDIUM
        """
        assert "KV-PART3-3638" in all_results['results'], "Rule KV-PART3-3638 missing"
        result = all_results['results']["KV-PART3-3638"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART3-3638 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART3-3638 failed"


    def test_rule_kv_part3_3639(self, all_results):
        """
        Test KV-PART3-3639: labels: ["compliance", "regulatory", "internal", "confidential"]
        Priority: CRITICAL
        """
        assert "KV-PART3-3639" in all_results['results'], "Rule KV-PART3-3639 missing"
        result = all_results['results']["KV-PART3-3639"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART3-3639 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART3-3639 failed"


    def test_rule_list_part3_3640(self, all_results):
        """
        Test LIST-PART3-3640: List item: type: dropdown
        Priority: MEDIUM
        """
        assert "LIST-PART3-3640" in all_results['results'], "Rule LIST-PART3-3640 missing"
        result = all_results['results']["LIST-PART3-3640"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART3-3640 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART3-3640 failed"


    def test_rule_kv_part3_3641(self, all_results):
        """
        Test KV-PART3-3641: id: regulation_type
        Priority: MEDIUM
        """
        assert "KV-PART3-3641" in all_results['results'], "Rule KV-PART3-3641 missing"
        result = all_results['results']["KV-PART3-3641"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART3-3641 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART3-3641 failed"


    def test_rule_kv_part3_3642(self, all_results):
        """
        Test KV-PART3-3642: label: Regulation Type
        Priority: MEDIUM
        """
        assert "KV-PART3-3642" in all_results['results'], "Rule KV-PART3-3642 missing"
        result = all_results['results']["KV-PART3-3642"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART3-3642 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART3-3642 failed"


    def test_rule_list_part3_3643(self, all_results):
        """
        Test LIST-PART3-3643: List item: New Regulation
        Priority: MEDIUM
        """
        assert "LIST-PART3-3643" in all_results['results'], "Rule LIST-PART3-3643 missing"
        result = all_results['results']["LIST-PART3-3643"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART3-3643 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART3-3643 failed"


    def test_rule_list_part3_3644(self, all_results):
        """
        Test LIST-PART3-3644: List item: Regulation Update
        Priority: MEDIUM
        """
        assert "LIST-PART3-3644" in all_results['results'], "Rule LIST-PART3-3644 missing"
        result = all_results['results']["LIST-PART3-3644"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART3-3644 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART3-3644 failed"


    def test_rule_list_part3_3645(self, all_results):
        """
        Test LIST-PART3-3645: List item: Internal Policy Change
        Priority: MEDIUM
        """
        assert "LIST-PART3-3645" in all_results['results'], "Rule LIST-PART3-3645 missing"
        result = all_results['results']["LIST-PART3-3645"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART3-3645 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART3-3645 failed"


    def test_rule_list_part3_3646(self, all_results):
        """
        Test LIST-PART3-3646: List item: Deprecation Notice
        Priority: MEDIUM
        """
        assert "LIST-PART3-3646" in all_results['results'], "Rule LIST-PART3-3646 missing"
        result = all_results['results']["LIST-PART3-3646"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART3-3646 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART3-3646 failed"


    def test_rule_list_part3_3647(self, all_results):
        """
        Test LIST-PART3-3647: List item: Business Impact Assessment
        Priority: MEDIUM
        """
        assert "LIST-PART3-3647" in all_results['results'], "Rule LIST-PART3-3647 missing"
        result = all_results['results']["LIST-PART3-3647"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART3-3647 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART3-3647 failed"


    def test_rule_text_part3_3648(self, all_results):
        """
        Test TEXT-PART3-3648: required: true
        Priority: MEDIUM
        """
        assert "TEXT-PART3-3648" in all_results['results'], "Rule TEXT-PART3-3648 missing"
        result = all_results['results']["TEXT-PART3-3648"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule TEXT-PART3-3648 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule TEXT-PART3-3648 failed"


    def test_rule_list_part3_3649(self, all_results):
        """
        Test LIST-PART3-3649: List item: type: dropdown
        Priority: MEDIUM
        """
        assert "LIST-PART3-3649" in all_results['results'], "Rule LIST-PART3-3649 missing"
        result = all_results['results']["LIST-PART3-3649"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART3-3649 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART3-3649 failed"


    def test_rule_kv_part3_3650(self, all_results):
        """
        Test KV-PART3-3650: id: business_priority
        Priority: MEDIUM
        """
        assert "KV-PART3-3650" in all_results['results'], "Rule KV-PART3-3650 missing"
        result = all_results['results']["KV-PART3-3650"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART3-3650 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART3-3650 failed"


    def test_rule_kv_part3_3651(self, all_results):
        """
        Test KV-PART3-3651: label: Business Priority
        Priority: MEDIUM
        """
        assert "KV-PART3-3651" in all_results['results'], "Rule KV-PART3-3651 missing"
        result = all_results['results']["KV-PART3-3651"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART3-3651 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART3-3651 failed"


    def test_rule_list_part3_3652(self, all_results):
        """
        Test LIST-PART3-3652: List item: HIGH (Compliance risk)
        Priority: CRITICAL
        """
        assert "LIST-PART3-3652" in all_results['results'], "Rule LIST-PART3-3652 missing"
        result = all_results['results']["LIST-PART3-3652"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART3-3652 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART3-3652 failed"


    def test_rule_list_part3_3653(self, all_results):
        """
        Test LIST-PART3-3653: List item: MEDIUM (Process optimization)
        Priority: MEDIUM
        """
        assert "LIST-PART3-3653" in all_results['results'], "Rule LIST-PART3-3653 missing"
        result = all_results['results']["LIST-PART3-3653"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART3-3653 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART3-3653 failed"


    def test_rule_list_part3_3654(self, all_results):
        """
        Test LIST-PART3-3654: List item: LOW (Future consideration)
        Priority: MEDIUM
        """
        assert "LIST-PART3-3654" in all_results['results'], "Rule LIST-PART3-3654 missing"
        result = all_results['results']["LIST-PART3-3654"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART3-3654 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART3-3654 failed"


    def test_rule_text_part3_3655(self, all_results):
        """
        Test TEXT-PART3-3655: required: true
        Priority: MEDIUM
        """
        assert "TEXT-PART3-3655" in all_results['results'], "Rule TEXT-PART3-3655 missing"
        result = all_results['results']["TEXT-PART3-3655"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule TEXT-PART3-3655 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule TEXT-PART3-3655 failed"


    def test_rule_list_part3_3656(self, all_results):
        """
        Test LIST-PART3-3656: List item: type: input
        Priority: MEDIUM
        """
        assert "LIST-PART3-3656" in all_results['results'], "Rule LIST-PART3-3656 missing"
        result = all_results['results']["LIST-PART3-3656"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART3-3656 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART3-3656 failed"


    def test_rule_kv_part3_3657(self, all_results):
        """
        Test KV-PART3-3657: id: regulation_name
        Priority: MEDIUM
        """
        assert "KV-PART3-3657" in all_results['results'], "Rule KV-PART3-3657 missing"
        result = all_results['results']["KV-PART3-3657"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART3-3657 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART3-3657 failed"


    def test_rule_kv_part3_3658(self, all_results):
        """
        Test KV-PART3-3658: label: Regulation/Standard Name
        Priority: HIGH
        """
        assert "KV-PART3-3658" in all_results['results'], "Rule KV-PART3-3658 missing"
        result = all_results['results']["KV-PART3-3658"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "HIGH" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART3-3658 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART3-3658 failed"


    def test_rule_kv_part3_3659(self, all_results):
        """
        Test KV-PART3-3659: description: Full name and reference (internal classification)
        Priority: MEDIUM
        """
        assert "KV-PART3-3659" in all_results['results'], "Rule KV-PART3-3659 missing"
        result = all_results['results']["KV-PART3-3659"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART3-3659 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART3-3659 failed"


    def test_rule_text_part3_3660(self, all_results):
        """
        Test TEXT-PART3-3660: required: true
        Priority: MEDIUM
        """
        assert "TEXT-PART3-3660" in all_results['results'], "Rule TEXT-PART3-3660 missing"
        result = all_results['results']["TEXT-PART3-3660"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule TEXT-PART3-3660 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule TEXT-PART3-3660 failed"


    def test_rule_list_part3_3661(self, all_results):
        """
        Test LIST-PART3-3661: List item: type: textarea
        Priority: MEDIUM
        """
        assert "LIST-PART3-3661" in all_results['results'], "Rule LIST-PART3-3661 missing"
        result = all_results['results']["LIST-PART3-3661"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART3-3661 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART3-3661 failed"


    def test_rule_kv_part3_3662(self, all_results):
        """
        Test KV-PART3-3662: id: business_impact
        Priority: MEDIUM
        """
        assert "KV-PART3-3662" in all_results['results'], "Rule KV-PART3-3662 missing"
        result = all_results['results']["KV-PART3-3662"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART3-3662 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART3-3662 failed"


    def test_rule_kv_part3_3663(self, all_results):
        """
        Test KV-PART3-3663: label: Business Impact Assessment
        Priority: MEDIUM
        """
        assert "KV-PART3-3663" in all_results['results'], "Rule KV-PART3-3663 missing"
        result = all_results['results']["KV-PART3-3663"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART3-3663 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART3-3663 failed"


    def test_rule_kv_part3_3664(self, all_results):
        """
        Test KV-PART3-3664: description: Detailed assessment of competitive and operational impact
        Priority: MEDIUM
        """
        assert "KV-PART3-3664" in all_results['results'], "Rule KV-PART3-3664 missing"
        result = all_results['results']["KV-PART3-3664"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART3-3664 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART3-3664 failed"


    def test_rule_text_part3_3665(self, all_results):
        """
        Test TEXT-PART3-3665: required: true
        Priority: MEDIUM
        """
        assert "TEXT-PART3-3665" in all_results['results'], "Rule TEXT-PART3-3665 missing"
        result = all_results['results']["TEXT-PART3-3665"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule TEXT-PART3-3665 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule TEXT-PART3-3665 failed"


    def test_rule_list_part3_3666(self, all_results):
        """
        Test LIST-PART3-3666: List item: type: checkboxes
        Priority: MEDIUM
        """
        assert "LIST-PART3-3666" in all_results['results'], "Rule LIST-PART3-3666 missing"
        result = all_results['results']["LIST-PART3-3666"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART3-3666 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART3-3666 failed"


    def test_rule_kv_part3_3667(self, all_results):
        """
        Test KV-PART3-3667: id: internal_clearance
        Priority: MEDIUM
        """
        assert "KV-PART3-3667" in all_results['results'], "Rule KV-PART3-3667 missing"
        result = all_results['results']["KV-PART3-3667"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART3-3667 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART3-3667 failed"


    def test_rule_kv_part3_3668(self, all_results):
        """
        Test KV-PART3-3668: label: Internal Clearance
        Priority: MEDIUM
        """
        assert "KV-PART3-3668" in all_results['results'], "Rule KV-PART3-3668 missing"
        result = all_results['results']["KV-PART3-3668"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART3-3668 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART3-3668 failed"


    def test_rule_list_part3_3669(self, all_results):
        """
        Test LIST-PART3-3669: List item: label: Legal team reviewed
        Priority: CRITICAL
        """
        assert "LIST-PART3-3669" in all_results['results'], "Rule LIST-PART3-3669 missing"
        result = all_results['results']["LIST-PART3-3669"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART3-3669 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART3-3669 failed"


    def test_rule_list_part3_3670(self, all_results):
        """
        Test LIST-PART3-3670: List item: label: Compliance team assessed
        Priority: CRITICAL
        """
        assert "LIST-PART3-3670" in all_results['results'], "Rule LIST-PART3-3670 missing"
        result = all_results['results']["LIST-PART3-3670"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART3-3670 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART3-3670 failed"


    def test_rule_list_part3_3671(self, all_results):
        """
        Test LIST-PART3-3671: List item: label: Business impact evaluated
        Priority: MEDIUM
        """
        assert "LIST-PART3-3671" in all_results['results'], "Rule LIST-PART3-3671 missing"
        result = all_results['results']["LIST-PART3-3671"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART3-3671 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART3-3671 failed"


    def test_rule_list_part3_3672(self, all_results):
        """
        Test LIST-PART3-3672: List item: label: Competitive analysis completed
        Priority: MEDIUM
        """
        assert "LIST-PART3-3672" in all_results['results'], "Rule LIST-PART3-3672 missing"
        result = all_results['results']["LIST-PART3-3672"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART3-3672 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART3-3672 failed"


    def test_rule_list_part3_3673(self, all_results):
        """
        Test LIST-PART3-3673: List item: *Classification:** CONFIDENTIAL - Internal Use Only
        Priority: MEDIUM
        """
        assert "LIST-PART3-3673" in all_results['results'], "Rule LIST-PART3-3673 missing"
        result = all_results['results']["LIST-PART3-3673"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART3-3673 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART3-3673 failed"


    def test_rule_policy_part3_3674(self, all_results):
        """
        Test POLICY-PART3-3674: Policy #1: Use the Internal Regulatory Update Request template
        Priority: MEDIUM
        """
        assert "POLICY-PART3-3674" in all_results['results'], "Rule POLICY-PART3-3674 missing"
        result = all_results['results']["POLICY-PART3-3674"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule POLICY-PART3-3674 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule POLICY-PART3-3674 failed"


    def test_rule_policy_part3_3675(self, all_results):
        """
        Test POLICY-PART3-3675: Policy #2: Include business priority assessment
        Priority: MEDIUM
        """
        assert "POLICY-PART3-3675" in all_results['results'], "Rule POLICY-PART3-3675 missing"
        result = all_results['results']["POLICY-PART3-3675"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule POLICY-PART3-3675 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule POLICY-PART3-3675 failed"


    def test_rule_policy_part3_3676(self, all_results):
        """
        Test POLICY-PART3-3676: Policy #3: Provide competitive impact analysis
        Priority: MEDIUM
        """
        assert "POLICY-PART3-3676" in all_results['results'], "Rule POLICY-PART3-3676 missing"
        result = all_results['results']["POLICY-PART3-3676"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule POLICY-PART3-3676 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule POLICY-PART3-3676 failed"


    def test_rule_policy_part3_3677(self, all_results):
        """
        Test POLICY-PART3-3677: Policy #4: Reference internal legal counsel review
        Priority: CRITICAL
        """
        assert "POLICY-PART3-3677" in all_results['results'], "Rule POLICY-PART3-3677 missing"
        result = all_results['results']["POLICY-PART3-3677"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule POLICY-PART3-3677 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule POLICY-PART3-3677 failed"


    def test_rule_policy_part3_3678(self, all_results):
        """
        Test POLICY-PART3-3678: Policy #1: All external contributions require internal review
        Priority: MEDIUM
        """
        assert "POLICY-PART3-3678" in all_results['results'], "Rule POLICY-PART3-3678 missing"
        result = all_results['results']["POLICY-PART3-3678"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule POLICY-PART3-3678 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule POLICY-PART3-3678 failed"


    def test_rule_policy_part3_3679(self, all_results):
        """
        Test POLICY-PART3-3679: Policy #2: No confidential compliance mappings in public contributions
        Priority: CRITICAL
        """
        assert "POLICY-PART3-3679" in all_results['results'], "Rule POLICY-PART3-3679 missing"
        result = all_results['results']["POLICY-PART3-3679"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule POLICY-PART3-3679 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule POLICY-PART3-3679 failed"


    def test_rule_policy_part3_3680(self, all_results):
        """
        Test POLICY-PART3-3680: Policy #3: Generic regulatory updates acceptable for public version
        Priority: MEDIUM
        """
        assert "POLICY-PART3-3680" in all_results['results'], "Rule POLICY-PART3-3680 missing"
        result = all_results['results']["POLICY-PART3-3680"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule POLICY-PART3-3680 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule POLICY-PART3-3680 failed"


    def test_rule_policy_part3_3681(self, all_results):
        """
        Test POLICY-PART3-3681: Policy #4: Maintain separation between public and private repositories
        Priority: MEDIUM
        """
        assert "POLICY-PART3-3681" in all_results['results'], "Rule POLICY-PART3-3681 missing"
        result = all_results['results']["POLICY-PART3-3681"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule POLICY-PART3-3681 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule POLICY-PART3-3681 failed"


    def test_rule_list_part3_3682(self, all_results):
        """
        Test LIST-PART3-3682: List item: Internal contributions reviewed within 3 business days
        Priority: MEDIUM
        """
        assert "LIST-PART3-3682" in all_results['results'], "Rule LIST-PART3-3682 missing"
        result = all_results['results']["LIST-PART3-3682"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART3-3682 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART3-3682 failed"


    def test_rule_list_part3_3683(self, all_results):
        """
        Test LIST-PART3-3683: List item: All changes require dual approval (primary + backup maintainer)
        Priority: MEDIUM
        """
        assert "LIST-PART3-3683" in all_results['results'], "Rule LIST-PART3-3683 missing"
        result = all_results['results']["LIST-PART3-3683"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART3-3683 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART3-3683 failed"


    def test_rule_list_part3_3684(self, all_results):
        """
        Test LIST-PART3-3684: List item: External changes affecting internal mappings require legal review
        Priority: CRITICAL
        """
        assert "LIST-PART3-3684" in all_results['results'], "Rule LIST-PART3-3684 missing"
        result = all_results['results']["LIST-PART3-3684"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART3-3684 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART3-3684 failed"


    def test_rule_list_part3_3685(self, all_results):
        """
        Test LIST-PART3-3685: List item: Proprietary compliance strategies remain internal
        Priority: CRITICAL
        """
        assert "LIST-PART3-3685" in all_results['results'], "Rule LIST-PART3-3685 missing"
        result = all_results['results']["LIST-PART3-3685"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART3-3685 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART3-3685 failed"


    def test_rule_list_part3_3686(self, all_results):
        """
        Test LIST-PART3-3686: List item: Competitive advantage assessments confidential
        Priority: MEDIUM
        """
        assert "LIST-PART3-3686" in all_results['results'], "Rule LIST-PART3-3686 missing"
        result = all_results['results']["LIST-PART3-3686"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART3-3686 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART3-3686 failed"


    def test_rule_list_part3_3687(self, all_results):
        """
        Test LIST-PART3-3687: List item: Client-specific implementations not shared publicly
        Priority: MEDIUM
        """
        assert "LIST-PART3-3687" in all_results['results'], "Rule LIST-PART3-3687 missing"
        result = all_results['results']["LIST-PART3-3687"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART3-3687 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART3-3687 failed"


    def test_rule_list_part3_3688(self, all_results):
        """
        Test LIST-PART3-3688: List item: Market entry strategies classified as confidential
        Priority: MEDIUM
        """
        assert "LIST-PART3-3688" in all_results['results'], "Rule LIST-PART3-3688 missing"
        result = all_results['results']["LIST-PART3-3688"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART3-3688 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART3-3688 failed"


    def test_rule_kv_part3_3689(self, all_results):
        """
        Test KV-PART3-3689: version: "1.0"
        Priority: MEDIUM
        """
        assert "KV-PART3-3689" in all_results['results'], "Rule KV-PART3-3689 missing"
        result = all_results['results']["KV-PART3-3689"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART3-3689 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART3-3689 failed"


    def test_rule_kv_part3_3690(self, all_results):
        """
        Test KV-PART3-3690: deprecated: false
        Priority: MEDIUM
        """
        assert "KV-PART3-3690" in all_results['results'], "Rule KV-PART3-3690 missing"
        result = all_results['results']["KV-PART3-3690"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART3-3690 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART3-3690 failed"


    def test_rule_kv_part3_3691(self, all_results):
        """
        Test KV-PART3-3691: classification: "CONFIDENTIAL - Enterprise Evidence Management"
        Priority: MEDIUM
        """
        assert "KV-PART3-3691" in all_results['results'], "Rule KV-PART3-3691 missing"
        result = all_results['results']["KV-PART3-3691"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART3-3691 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART3-3691 failed"


    def test_rule_kv_part3_3692(self, all_results):
        """
        Test KV-PART3-3692: path: "02_audit_logging/storage/worm/immutable_store/"
        Priority: MEDIUM
        """
        assert "KV-PART3-3692" in all_results['results'], "Rule KV-PART3-3692 missing"
        result = all_results['results']["KV-PART3-3692"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART3-3692 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART3-3692 failed"


    def test_rule_kv_part3_3693(self, all_results):
        """
        Test KV-PART3-3693: retention: "permanent"
        Priority: MEDIUM
        """
        assert "KV-PART3-3693" in all_results['results'], "Rule KV-PART3-3693 missing"
        result = all_results['results']["KV-PART3-3693"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART3-3693 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART3-3693 failed"


    def test_rule_kv_part3_3694(self, all_results):
        """
        Test KV-PART3-3694: integrity: "sha256_hash"
        Priority: MEDIUM
        """
        assert "KV-PART3-3694" in all_results['results'], "Rule KV-PART3-3694 missing"
        result = all_results['results']["KV-PART3-3694"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART3-3694 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART3-3694 failed"


    def test_rule_kv_part3_3695(self, all_results):
        """
        Test KV-PART3-3695: encryption: "aes256_enterprise"
        Priority: MEDIUM
        """
        assert "KV-PART3-3695" in all_results['results'], "Rule KV-PART3-3695 missing"
        result = all_results['results']["KV-PART3-3695"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART3-3695 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART3-3695 failed"


    def test_rule_kv_part3_3696(self, all_results):
        """
        Test KV-PART3-3696: enabled: true  # Enabled for enterprise
        Priority: MEDIUM
        """
        assert "KV-PART3-3696" in all_results['results'], "Rule KV-PART3-3696 missing"
        result = all_results['results']["KV-PART3-3696"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART3-3696 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART3-3696 failed"


    def test_rule_kv_part3_3697(self, all_results):
        """
        Test KV-PART3-3697: path: "02_audit_logging/storage/blockchain_anchors/"
        Priority: MEDIUM
        """
        assert "KV-PART3-3697" in all_results['results'], "Rule KV-PART3-3697 missing"
        result = all_results['results']["KV-PART3-3697"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART3-3697 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART3-3697 failed"


    def test_rule_kv_part3_3698(self, all_results):
        """
        Test KV-PART3-3698: service: "opentimestamp"
        Priority: MEDIUM
        """
        assert "KV-PART3-3698" in all_results['results'], "Rule KV-PART3-3698 missing"
        result = all_results['results']["KV-PART3-3698"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART3-3698 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART3-3698 failed"


    def test_rule_kv_part3_3699(self, all_results):
        """
        Test KV-PART3-3699: frequency: "weekly"
        Priority: MEDIUM
        """
        assert "KV-PART3-3699" in all_results['results'], "Rule KV-PART3-3699 missing"
        result = all_results['results']["KV-PART3-3699"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART3-3699 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART3-3699 failed"


    def test_rule_kv_part3_3700(self, all_results):
        """
        Test KV-PART3-3700: classification: "CONFIDENTIAL"
        Priority: MEDIUM
        """
        assert "KV-PART3-3700" in all_results['results'], "Rule KV-PART3-3700 missing"
        result = all_results['results']["KV-PART3-3700"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART3-3700 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART3-3700 failed"


    def test_rule_kv_part3_3701(self, all_results):
        """
        Test KV-PART3-3701: path: "23_compliance/evidence/ci_runs/"
        Priority: CRITICAL
        """
        assert "KV-PART3-3701" in all_results['results'], "Rule KV-PART3-3701 missing"
        result = all_results['results']["KV-PART3-3701"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART3-3701 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART3-3701 failed"


    def test_rule_kv_part3_3702(self, all_results):
        """
        Test KV-PART3-3702: retention: "10_years" # Longer than public
        Priority: MEDIUM
        """
        assert "KV-PART3-3702" in all_results['results'], "Rule KV-PART3-3702 missing"
        result = all_results['results']["KV-PART3-3702"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART3-3702 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART3-3702 failed"


    def test_rule_kv_part3_3703(self, all_results):
        """
        Test KV-PART3-3703: encryption: "aes256"
        Priority: MEDIUM
        """
        assert "KV-PART3-3703" in all_results['results'], "Rule KV-PART3-3703 missing"
        result = all_results['results']["KV-PART3-3703"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART3-3703 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART3-3703 failed"


    def test_rule_kv_part3_3704(self, all_results):
        """
        Test KV-PART3-3704: backup: "encrypted_offsite"
        Priority: MEDIUM
        """
        assert "KV-PART3-3704" in all_results['results'], "Rule KV-PART3-3704 missing"
        result = all_results['results']["KV-PART3-3704"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART3-3704 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART3-3704 failed"


    def test_rule_kv_part3_3705(self, all_results):
        """
        Test KV-PART3-3705: path: "23_compliance/reviews/internal/"
        Priority: CRITICAL
        """
        assert "KV-PART3-3705" in all_results['results'], "Rule KV-PART3-3705 missing"
        result = all_results['results']["KV-PART3-3705"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART3-3705 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART3-3705 failed"


    def test_rule_kv_part3_3706(self, all_results):
        """
        Test KV-PART3-3706: retention: "15_years" # Business records retention
        Priority: MEDIUM
        """
        assert "KV-PART3-3706" in all_results['results'], "Rule KV-PART3-3706 missing"
        result = all_results['results']["KV-PART3-3706"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART3-3706 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART3-3706 failed"


    def test_rule_kv_part3_3707(self, all_results):
        """
        Test KV-PART3-3707: encryption: "aes256"
        Priority: MEDIUM
        """
        assert "KV-PART3-3707" in all_results['results'], "Rule KV-PART3-3707 missing"
        result = all_results['results']["KV-PART3-3707"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART3-3707 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART3-3707 failed"


    def test_rule_kv_part3_3708(self, all_results):
        """
        Test KV-PART3-3708: classification: "CONFIDENTIAL"
        Priority: MEDIUM
        """
        assert "KV-PART3-3708" in all_results['results'], "Rule KV-PART3-3708 missing"
        result = all_results['results']["KV-PART3-3708"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART3-3708 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART3-3708 failed"


    def test_rule_kv_part3_3709(self, all_results):
        """
        Test KV-PART3-3709: path: "23_compliance/evidence/business_assessments/"
        Priority: CRITICAL
        """
        assert "KV-PART3-3709" in all_results['results'], "Rule KV-PART3-3709 missing"
        result = all_results['results']["KV-PART3-3709"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART3-3709 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART3-3709 failed"


    def test_rule_kv_part3_3710(self, all_results):
        """
        Test KV-PART3-3710: retention: "permanent"
        Priority: MEDIUM
        """
        assert "KV-PART3-3710" in all_results['results'], "Rule KV-PART3-3710 missing"
        result = all_results['results']["KV-PART3-3710"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART3-3710 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART3-3710 failed"


    def test_rule_kv_part3_3711(self, all_results):
        """
        Test KV-PART3-3711: encryption: "aes256"
        Priority: MEDIUM
        """
        assert "KV-PART3-3711" in all_results['results'], "Rule KV-PART3-3711 missing"
        result = all_results['results']["KV-PART3-3711"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART3-3711 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART3-3711 failed"


    def test_rule_kv_part3_3712(self, all_results):
        """
        Test KV-PART3-3712: classification: "CONFIDENTIAL"
        Priority: MEDIUM
        """
        assert "KV-PART3-3712" in all_results['results'], "Rule KV-PART3-3712 missing"
        result = all_results['results']["KV-PART3-3712"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART3-3712 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART3-3712 failed"


    def test_rule_kv_part3_3713(self, all_results):
        """
        Test KV-PART3-3713: blockchain_anchoring: "enabled"
        Priority: MEDIUM
        """
        assert "KV-PART3-3713" in all_results['results'], "Rule KV-PART3-3713 missing"
        result = all_results['results']["KV-PART3-3713"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART3-3713 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART3-3713 failed"


    def test_rule_kv_part3_3714(self, all_results):
        """
        Test KV-PART3-3714: opentimestamp_enabled: true
        Priority: MEDIUM
        """
        assert "KV-PART3-3714" in all_results['results'], "Rule KV-PART3-3714 missing"
        result = all_results['results']["KV-PART3-3714"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART3-3714 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART3-3714 failed"


    def test_rule_kv_part3_3715(self, all_results):
        """
        Test KV-PART3-3715: evidence_timestamping: "full_blockchain"
        Priority: MEDIUM
        """
        assert "KV-PART3-3715" in all_results['results'], "Rule KV-PART3-3715 missing"
        result = all_results['results']["KV-PART3-3715"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART3-3715 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART3-3715 failed"


    def test_rule_kv_part3_3716(self, all_results):
        """
        Test KV-PART3-3716: proof_of_existence: "sha256+blockchain+timestamp"
        Priority: MEDIUM
        """
        assert "KV-PART3-3716" in all_results['results'], "Rule KV-PART3-3716 missing"
        result = all_results['results']["KV-PART3-3716"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART3-3716 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART3-3716 failed"


    def test_rule_kv_part3_3717(self, all_results):
        """
        Test KV-PART3-3717: verification_method: "hash_chain+blockchain"
        Priority: MEDIUM
        """
        assert "KV-PART3-3717" in all_results['results'], "Rule KV-PART3-3717 missing"
        result = all_results['results']["KV-PART3-3717"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART3-3717 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART3-3717 failed"


    def test_rule_kv_part3_3718(self, all_results):
        """
        Test KV-PART3-3718: enterprise_controls: "full_audit_trail"
        Priority: MEDIUM
        """
        assert "KV-PART3-3718" in all_results['results'], "Rule KV-PART3-3718 missing"
        result = all_results['results']["KV-PART3-3718"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART3-3718 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART3-3718 failed"


    def test_rule_kv_part3_3719(self, all_results):
        """
        Test KV-PART3-3719: version: "1.0"
        Priority: MEDIUM
        """
        assert "KV-PART3-3719" in all_results['results'], "Rule KV-PART3-3719 missing"
        result = all_results['results']["KV-PART3-3719"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART3-3719 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART3-3719 failed"


    def test_rule_kv_part3_3720(self, all_results):
        """
        Test KV-PART3-3720: date: "2025-09-15"
        Priority: MEDIUM
        """
        assert "KV-PART3-3720" in all_results['results'], "Rule KV-PART3-3720 missing"
        result = all_results['results']["KV-PART3-3720"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART3-3720 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART3-3720 failed"


    def test_rule_kv_part3_3721(self, all_results):
        """
        Test KV-PART3-3721: deprecated: false
        Priority: MEDIUM
        """
        assert "KV-PART3-3721" in all_results['results'], "Rule KV-PART3-3721 missing"
        result = all_results['results']["KV-PART3-3721"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART3-3721 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART3-3721 failed"


    def test_rule_kv_part3_3722(self, all_results):
        """
        Test KV-PART3-3722: classification: "CONFIDENTIAL - Enterprise Quarantine Management"
        Priority: MEDIUM
        """
        assert "KV-PART3-3722" in all_results['results'], "Rule KV-PART3-3722 missing"
        result = all_results['results']["KV-PART3-3722"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART3-3722 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART3-3722 failed"


    def test_rule_kv_part3_3723(self, all_results):
        """
        Test KV-PART3-3723: canonical_path: "02_audit_logging/quarantine/singleton/quarantine_store/"
        Priority: MEDIUM
        """
        assert "KV-PART3-3723" in all_results['results'], "Rule KV-PART3-3723 missing"
        result = all_results['results']["KV-PART3-3723"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART3-3723 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART3-3723 failed"


    def test_rule_kv_part3_3724(self, all_results):
        """
        Test KV-PART3-3724: principle: "Single source of truth for all quarantined items"
        Priority: MEDIUM
        """
        assert "KV-PART3-3724" in all_results['results'], "Rule KV-PART3-3724 missing"
        result = all_results['results']["KV-PART3-3724"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART3-3724 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART3-3724 failed"


    def test_rule_kv_part3_3725(self, all_results):
        """
        Test KV-PART3-3725: access_control: "Restricted to compliance officers and senior management"
        Priority: CRITICAL
        """
        assert "KV-PART3-3725" in all_results['results'], "Rule KV-PART3-3725 missing"
        result = all_results['results']["KV-PART3-3725"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART3-3725 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART3-3725 failed"


    def test_rule_kv_part3_3726(self, all_results):
        """
        Test KV-PART3-3726: encryption: "AES-256 with enterprise key management"
        Priority: MEDIUM
        """
        assert "KV-PART3-3726" in all_results['results'], "Rule KV-PART3-3726 missing"
        result = all_results['results']["KV-PART3-3726"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART3-3726 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART3-3726 failed"


    def test_rule_list_part3_3727(self, all_results):
        """
        Test LIST-PART3-3727: List item: "Failed structure validation (score < 70)"
        Priority: MEDIUM
        """
        assert "LIST-PART3-3727" in all_results['results'], "Rule LIST-PART3-3727 missing"
        result = all_results['results']["LIST-PART3-3727"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART3-3727 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART3-3727 failed"


    def test_rule_list_part3_3728(self, all_results):
        """
        Test LIST-PART3-3728: List item: "Circular dependency detection"
        Priority: MEDIUM
        """
        assert "LIST-PART3-3728" in all_results['results'], "Rule LIST-PART3-3728 missing"
        result = all_results['results']["LIST-PART3-3728"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART3-3728 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART3-3728 failed"


    def test_rule_list_part3_3729(self, all_results):
        """
        Test LIST-PART3-3729: List item: "Badge integrity violations"
        Priority: MEDIUM
        """
        assert "LIST-PART3-3729" in all_results['results'], "Rule LIST-PART3-3729 missing"
        result = all_results['results']["LIST-PART3-3729"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART3-3729 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART3-3729 failed"


    def test_rule_list_part3_3730(self, all_results):
        """
        Test LIST-PART3-3730: List item: "Review deadline overdue (>30 days)"
        Priority: MEDIUM
        """
        assert "LIST-PART3-3730" in all_results['results'], "Rule LIST-PART3-3730 missing"
        result = all_results['results']["LIST-PART3-3730"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART3-3730 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART3-3730 failed"


    def test_rule_list_part3_3731(self, all_results):
        """
        Test LIST-PART3-3731: List item: "Business logic gaming detection"
        Priority: MEDIUM
        """
        assert "LIST-PART3-3731" in all_results['results'], "Rule LIST-PART3-3731 missing"
        result = all_results['results']["LIST-PART3-3731"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART3-3731 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART3-3731 failed"


    def test_rule_list_part3_3732(self, all_results):
        """
        Test LIST-PART3-3732: List item: "Confidentiality breach attempts"
        Priority: MEDIUM
        """
        assert "LIST-PART3-3732" in all_results['results'], "Rule LIST-PART3-3732 missing"
        result = all_results['results']["LIST-PART3-3732"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART3-3732 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART3-3732 failed"


    def test_rule_list_part3_3733(self, all_results):
        """
        Test LIST-PART3-3733: List item: "Sanctioned entity interaction"
        Priority: MEDIUM
        """
        assert "LIST-PART3-3733" in all_results['results'], "Rule LIST-PART3-3733 missing"
        result = all_results['results']["LIST-PART3-3733"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART3-3733 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART3-3733 failed"


    def test_rule_list_part3_3734(self, all_results):
        """
        Test LIST-PART3-3734: List item: "Jurisdiction exclusion violations"
        Priority: MEDIUM
        """
        assert "LIST-PART3-3734" in all_results['results'], "Rule LIST-PART3-3734 missing"
        result = all_results['results']["LIST-PART3-3734"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART3-3734 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART3-3734 failed"


    def test_rule_list_part3_3735(self, all_results):
        """
        Test LIST-PART3-3735: List item: "AML/KYC failure patterns"
        Priority: MEDIUM
        """
        assert "LIST-PART3-3735" in all_results['results'], "Rule LIST-PART3-3735 missing"
        result = all_results['results']["LIST-PART3-3735"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART3-3735 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART3-3735 failed"


    def test_rule_list_part3_3736(self, all_results):
        """
        Test LIST-PART3-3736: List item: "Regulatory mapping inconsistencies"
        Priority: MEDIUM
        """
        assert "LIST-PART3-3736" in all_results['results'], "Rule LIST-PART3-3736 missing"
        result = all_results['results']["LIST-PART3-3736"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART3-3736 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART3-3736 failed"


    def test_rule_list_part3_3737(self, all_results):
        """
        Test LIST-PART3-3737: List item: "Audit trail tampering attempts"
        Priority: MEDIUM
        """
        assert "LIST-PART3-3737" in all_results['results'], "Rule LIST-PART3-3737 missing"
        result = all_results['results']["LIST-PART3-3737"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART3-3737 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART3-3737 failed"


    def test_rule_list_part3_3738(self, all_results):
        """
        Test LIST-PART3-3738: List item: "Version compatibility failures"
        Priority: MEDIUM
        """
        assert "LIST-PART3-3738" in all_results['results'], "Rule LIST-PART3-3738 missing"
        result = all_results['results']["LIST-PART3-3738"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART3-3738 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART3-3738 failed"


    def test_rule_list_part3_3739(self, all_results):
        """
        Test LIST-PART3-3739: List item: "Anti-gaming control bypasses"
        Priority: MEDIUM
        """
        assert "LIST-PART3-3739" in all_results['results'], "Rule LIST-PART3-3739 missing"
        result = all_results['results']["LIST-PART3-3739"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART3-3739 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART3-3739 failed"


    def test_rule_list_part3_3740(self, all_results):
        """
        Test LIST-PART3-3740: List item: "Unauthorized access patterns"
        Priority: MEDIUM
        """
        assert "LIST-PART3-3740" in all_results['results'], "Rule LIST-PART3-3740 missing"
        result = all_results['results']["LIST-PART3-3740"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART3-3740 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART3-3740 failed"


    def test_rule_list_part3_3741(self, all_results):
        """
        Test LIST-PART3-3741: List item: "Data integrity hash mismatches"
        Priority: MEDIUM
        """
        assert "LIST-PART3-3741" in all_results['results'], "Rule LIST-PART3-3741 missing"
        result = all_results['results']["LIST-PART3-3741"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART3-3741 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART3-3741 failed"


    def test_rule_list_part3_3742(self, all_results):
        """
        Test LIST-PART3-3742: List item: "Enterprise boundary violations"
        Priority: MEDIUM
        """
        assert "LIST-PART3-3742" in all_results['results'], "Rule LIST-PART3-3742 missing"
        result = all_results['results']["LIST-PART3-3742"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART3-3742 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART3-3742 failed"


    def test_rule_kv_part3_3743(self, all_results):
        """
        Test KV-PART3-3743: intake_processor: "02_audit_logging/quarantine/processing/quarantine_processor.p
        Priority: MEDIUM
        """
        assert "KV-PART3-3743" in all_results['results'], "Rule KV-PART3-3743 missing"
        result = all_results['results']["KV-PART3-3743"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART3-3743 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART3-3743 failed"


    def test_rule_kv_part3_3744(self, all_results):
        """
        Test KV-PART3-3744: auto_quarantine: true
        Priority: MEDIUM
        """
        assert "KV-PART3-3744" in all_results['results'], "Rule KV-PART3-3744 missing"
        result = all_results['results']["KV-PART3-3744"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART3-3744 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART3-3744 failed"


    def test_rule_kv_part3_3745(self, all_results):
        """
        Test KV-PART3-3745: manual_override_required: "Compliance Officer + Legal approval"
        Priority: CRITICAL
        """
        assert "KV-PART3-3745" in all_results['results'], "Rule KV-PART3-3745 missing"
        result = all_results['results']["KV-PART3-3745"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART3-3745 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART3-3745 failed"


    def test_rule_text_part3_3746(self, all_results):
        """
        Test TEXT-PART3-3746: escalation_timeline: "24 hours for critical, 72 hours for high priority"
        Priority: CRITICAL
        """
        assert "TEXT-PART3-3746" in all_results['results'], "Rule TEXT-PART3-3746 missing"
        result = all_results['results']["TEXT-PART3-3746"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule TEXT-PART3-3746 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule TEXT-PART3-3746 failed"


    def test_rule_kv_part3_3747(self, all_results):
        """
        Test KV-PART3-3747: policies_file: "02_audit_logging/quarantine/retention/quarantine_policies.yaml"
        Priority: MEDIUM
        """
        assert "KV-PART3-3747" in all_results['results'], "Rule KV-PART3-3747 missing"
        result = all_results['results']["KV-PART3-3747"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART3-3747 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART3-3747 failed"


    def test_rule_kv_part3_3748(self, all_results):
        """
        Test KV-PART3-3748: compliance_violations: "7 years minimum"
        Priority: CRITICAL
        """
        assert "KV-PART3-3748" in all_results['results'], "Rule KV-PART3-3748 missing"
        result = all_results['results']["KV-PART3-3748"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART3-3748 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART3-3748 failed"


    def test_rule_kv_part3_3749(self, all_results):
        """
        Test KV-PART3-3749: regulatory_flags: "10 years minimum"
        Priority: MEDIUM
        """
        assert "KV-PART3-3749" in all_results['results'], "Rule KV-PART3-3749 missing"
        result = all_results['results']["KV-PART3-3749"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART3-3749 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART3-3749 failed"


    def test_rule_kv_part3_3750(self, all_results):
        """
        Test KV-PART3-3750: technical_violations: "5 years minimum"
        Priority: MEDIUM
        """
        assert "KV-PART3-3750" in all_results['results'], "Rule KV-PART3-3750 missing"
        result = all_results['results']["KV-PART3-3750"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART3-3750 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART3-3750 failed"


    def test_rule_kv_part3_3751(self, all_results):
        """
        Test KV-PART3-3751: business_critical: "Permanent retention"
        Priority: CRITICAL
        """
        assert "KV-PART3-3751" in all_results['results'], "Rule KV-PART3-3751 missing"
        result = all_results['results']["KV-PART3-3751"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART3-3751 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART3-3751 failed"


    def test_rule_kv_part3_3752(self, all_results):
        """
        Test KV-PART3-3752: legal_hold: "Until litigation resolution"
        Priority: CRITICAL
        """
        assert "KV-PART3-3752" in all_results['results'], "Rule KV-PART3-3752 missing"
        result = all_results['results']["KV-PART3-3752"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART3-3752 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART3-3752 failed"


    def test_rule_text_part3_3753(self, all_results):
        """
        Test TEXT-PART3-3753: purge_automation: false # Manual approval required
        Priority: MEDIUM
        """
        assert "TEXT-PART3-3753" in all_results['results'], "Rule TEXT-PART3-3753 missing"
        result = all_results['results']["TEXT-PART3-3753"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule TEXT-PART3-3753 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule TEXT-PART3-3753 failed"


    def test_rule_kv_part3_3754(self, all_results):
        """
        Test KV-PART3-3754: archive_to_cold_storage: "After 2 years active retention"
        Priority: MEDIUM
        """
        assert "KV-PART3-3754" in all_results['results'], "Rule KV-PART3-3754 missing"
        result = all_results['results']["KV-PART3-3754"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART3-3754 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART3-3754 failed"


    def test_rule_kv_part3_3755(self, all_results):
        """
        Test KV-PART3-3755: enterprise_backup: "Encrypted offsite + blockchain anchoring"
        Priority: MEDIUM
        """
        assert "KV-PART3-3755" in all_results['results'], "Rule KV-PART3-3755 missing"
        result = all_results['results']["KV-PART3-3755"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART3-3755 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART3-3755 failed"


    def test_rule_kv_part3_3756(self, all_results):
        """
        Test KV-PART3-3756: ledger_file: "02_audit_logging/quarantine/hash_ledger/quarantine_chain.json"
        Priority: MEDIUM
        """
        assert "KV-PART3-3756" in all_results['results'], "Rule KV-PART3-3756 missing"
        result = all_results['results']["KV-PART3-3756"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART3-3756 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART3-3756 failed"


    def test_rule_kv_part3_3757(self, all_results):
        """
        Test KV-PART3-3757: hash_algorithm: "SHA-256"
        Priority: MEDIUM
        """
        assert "KV-PART3-3757" in all_results['results'], "Rule KV-PART3-3757 missing"
        result = all_results['results']["KV-PART3-3757"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART3-3757 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART3-3757 failed"


    def test_rule_kv_part3_3758(self, all_results):
        """
        Test KV-PART3-3758: chain_integrity: "Each entry includes previous hash"
        Priority: MEDIUM
        """
        assert "KV-PART3-3758" in all_results['results'], "Rule KV-PART3-3758 missing"
        result = all_results['results']["KV-PART3-3758"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART3-3758 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART3-3758 failed"


    def test_rule_kv_part3_3759(self, all_results):
        """
        Test KV-PART3-3759: immutable_properties: true
        Priority: MEDIUM
        """
        assert "KV-PART3-3759" in all_results['results'], "Rule KV-PART3-3759 missing"
        result = all_results['results']["KV-PART3-3759"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART3-3759 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART3-3759 failed"


    def test_rule_kv_part3_3760(self, all_results):
        """
        Test KV-PART3-3760: blockchain_anchoring: "Daily commitment to private enterprise blockchain"
        Priority: MEDIUM
        """
        assert "KV-PART3-3760" in all_results['results'], "Rule KV-PART3-3760 missing"
        result = all_results['results']["KV-PART3-3760"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART3-3760 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART3-3760 failed"


    def test_rule_kv_part3_3761(self, all_results):
        """
        Test KV-PART3-3761: entry_id: "UUID v4"
        Priority: MEDIUM
        """
        assert "KV-PART3-3761" in all_results['results'], "Rule KV-PART3-3761 missing"
        result = all_results['results']["KV-PART3-3761"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART3-3761 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART3-3761 failed"


    def test_rule_kv_part3_3762(self, all_results):
        """
        Test KV-PART3-3762: timestamp: "ISO 8601 UTC"
        Priority: MEDIUM
        """
        assert "KV-PART3-3762" in all_results['results'], "Rule KV-PART3-3762 missing"
        result = all_results['results']["KV-PART3-3762"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART3-3762 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART3-3762 failed"


    def test_rule_kv_part3_3763(self, all_results):
        """
        Test KV-PART3-3763: item_hash: "SHA-256 of quarantined item"
        Priority: MEDIUM
        """
        assert "KV-PART3-3763" in all_results['results'], "Rule KV-PART3-3763 missing"
        result = all_results['results']["KV-PART3-3763"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART3-3763 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART3-3763 failed"


    def test_rule_kv_part3_3764(self, all_results):
        """
        Test KV-PART3-3764: trigger_reason: "Classification and details"
        Priority: MEDIUM
        """
        assert "KV-PART3-3764" in all_results['results'], "Rule KV-PART3-3764 missing"
        result = all_results['results']["KV-PART3-3764"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART3-3764 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART3-3764 failed"


    def test_rule_kv_part3_3765(self, all_results):
        """
        Test KV-PART3-3765: quarantine_officer: "Person responsible for quarantine action"
        Priority: MEDIUM
        """
        assert "KV-PART3-3765" in all_results['results'], "Rule KV-PART3-3765 missing"
        result = all_results['results']["KV-PART3-3765"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART3-3765 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART3-3765 failed"


    def test_rule_kv_part3_3766(self, all_results):
        """
        Test KV-PART3-3766: business_impact: "Revenue/compliance risk assessment"
        Priority: CRITICAL
        """
        assert "KV-PART3-3766" in all_results['results'], "Rule KV-PART3-3766 missing"
        result = all_results['results']["KV-PART3-3766"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART3-3766 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART3-3766 failed"


    def test_rule_kv_part3_3767(self, all_results):
        """
        Test KV-PART3-3767: previous_hash: "Chain integrity verification"
        Priority: MEDIUM
        """
        assert "KV-PART3-3767" in all_results['results'], "Rule KV-PART3-3767 missing"
        result = all_results['results']["KV-PART3-3767"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART3-3767 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART3-3767 failed"


    def test_rule_kv_part3_3768(self, all_results):
        """
        Test KV-PART3-3768: blockchain_anchor: "Enterprise blockchain transaction ID"
        Priority: MEDIUM
        """
        assert "KV-PART3-3768" in all_results['results'], "Rule KV-PART3-3768 missing"
        result = all_results['results']["KV-PART3-3768"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART3-3768 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART3-3768 failed"


    def test_rule_list_part3_3769(self, all_results):
        """
        Test LIST-PART3-3769: List item: "Senior Compliance Officer (Chair)"
        Priority: CRITICAL
        """
        assert "LIST-PART3-3769" in all_results['results'], "Rule LIST-PART3-3769 missing"
        result = all_results['results']["LIST-PART3-3769"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART3-3769 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART3-3769 failed"


    def test_rule_list_part3_3770(self, all_results):
        """
        Test LIST-PART3-3770: List item: "Legal Counsel"
        Priority: CRITICAL
        """
        assert "LIST-PART3-3770" in all_results['results'], "Rule LIST-PART3-3770 missing"
        result = all_results['results']["LIST-PART3-3770"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART3-3770 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART3-3770 failed"


    def test_rule_list_part3_3771(self, all_results):
        """
        Test LIST-PART3-3771: List item: "Technical Security Lead"
        Priority: CRITICAL
        """
        assert "LIST-PART3-3771" in all_results['results'], "Rule LIST-PART3-3771 missing"
        result = all_results['results']["LIST-PART3-3771"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART3-3771 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART3-3771 failed"


    def test_rule_list_part3_3772(self, all_results):
        """
        Test LIST-PART3-3772: List item: "Business Risk Manager"
        Priority: MEDIUM
        """
        assert "LIST-PART3-3772" in all_results['results'], "Rule LIST-PART3-3772 missing"
        result = all_results['results']["LIST-PART3-3772"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART3-3772 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART3-3772 failed"


    def test_rule_list_part3_3773(self, all_results):
        """
        Test LIST-PART3-3773: List item: "External Auditor (quarterly reviews)"
        Priority: MEDIUM
        """
        assert "LIST-PART3-3773" in all_results['results'], "Rule LIST-PART3-3773 missing"
        result = all_results['results']["LIST-PART3-3773"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART3-3773 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART3-3773 failed"


    def test_rule_kv_part3_3774(self, all_results):
        """
        Test KV-PART3-3774: daily: "New quarantine items assessment"
        Priority: MEDIUM
        """
        assert "KV-PART3-3774" in all_results['results'], "Rule KV-PART3-3774 missing"
        result = all_results['results']["KV-PART3-3774"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART3-3774 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART3-3774 failed"


    def test_rule_kv_part3_3775(self, all_results):
        """
        Test KV-PART3-3775: weekly: "Pending release evaluations"
        Priority: MEDIUM
        """
        assert "KV-PART3-3775" in all_results['results'], "Rule KV-PART3-3775 missing"
        result = all_results['results']["KV-PART3-3775"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART3-3775 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART3-3775 failed"


    def test_rule_kv_part3_3776(self, all_results):
        """
        Test KV-PART3-3776: monthly: "Quarantine policy effectiveness review"
        Priority: MEDIUM
        """
        assert "KV-PART3-3776" in all_results['results'], "Rule KV-PART3-3776 missing"
        result = all_results['results']["KV-PART3-3776"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART3-3776 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART3-3776 failed"


    def test_rule_kv_part3_3777(self, all_results):
        """
        Test KV-PART3-3777: quarterly: "Full quarantine audit with external validation"
        Priority: MEDIUM
        """
        assert "KV-PART3-3777" in all_results['results'], "Rule KV-PART3-3777 missing"
        result = all_results['results']["KV-PART3-3777"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART3-3777 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART3-3777 failed"


    def test_rule_kv_part3_3778(self, all_results):
        """
        Test KV-PART3-3778: compliance_remediation: "All compliance violations addressed"
        Priority: CRITICAL
        """
        assert "KV-PART3-3778" in all_results['results'], "Rule KV-PART3-3778 missing"
        result = all_results['results']["KV-PART3-3778"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART3-3778 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART3-3778 failed"


    def test_rule_text_part3_3779(self, all_results):
        """
        Test TEXT-PART3-3779: legal_clearance: "Legal team sign-off required"
        Priority: MEDIUM
        """
        assert "TEXT-PART3-3779" in all_results['results'], "Rule TEXT-PART3-3779 missing"
        result = all_results['results']["TEXT-PART3-3779"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule TEXT-PART3-3779 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule TEXT-PART3-3779 failed"


    def test_rule_kv_part3_3780(self, all_results):
        """
        Test KV-PART3-3780: business_approval: "Business impact assessment completed"
        Priority: MEDIUM
        """
        assert "KV-PART3-3780" in all_results['results'], "Rule KV-PART3-3780 missing"
        result = all_results['results']["KV-PART3-3780"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART3-3780 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART3-3780 failed"


    def test_rule_kv_part3_3781(self, all_results):
        """
        Test KV-PART3-3781: technical_validation: "Technical security clearance"
        Priority: CRITICAL
        """
        assert "KV-PART3-3781" in all_results['results'], "Rule KV-PART3-3781 missing"
        result = all_results['results']["KV-PART3-3781"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART3-3781 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART3-3781 failed"


    def test_rule_kv_part3_3782(self, all_results):
        """
        Test KV-PART3-3782: documentation_complete: "Full audit trail and lessons learned"
        Priority: MEDIUM
        """
        assert "KV-PART3-3782" in all_results['results'], "Rule KV-PART3-3782 missing"
        result = all_results['results']["KV-PART3-3782"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART3-3782 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART3-3782 failed"


    def test_rule_kv_part3_3783(self, all_results):
        """
        Test KV-PART3-3783: dashboard_integration: "Real-time quarantine status monitoring"
        Priority: MEDIUM
        """
        assert "KV-PART3-3783" in all_results['results'], "Rule KV-PART3-3783 missing"
        result = all_results['results']["KV-PART3-3783"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART3-3783 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART3-3783 failed"


    def test_rule_kv_part3_3784(self, all_results):
        """
        Test KV-PART3-3784: alert_system: "Immediate notification for high-risk quarantines"
        Priority: MEDIUM
        """
        assert "KV-PART3-3784" in all_results['results'], "Rule KV-PART3-3784 missing"
        result = all_results['results']["KV-PART3-3784"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART3-3784 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART3-3784 failed"


    def test_rule_kv_part3_3785(self, all_results):
        """
        Test KV-PART3-3785: reporting_integration: "Quarterly board reporting inclusion"
        Priority: MEDIUM
        """
        assert "KV-PART3-3785" in all_results['results'], "Rule KV-PART3-3785 missing"
        result = all_results['results']["KV-PART3-3785"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART3-3785 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART3-3785 failed"


    def test_rule_kv_part3_3786(self, all_results):
        """
        Test KV-PART3-3786: competitive_intelligence: "Market impact assessment for quarantined items"
        Priority: MEDIUM
        """
        assert "KV-PART3-3786" in all_results['results'], "Rule KV-PART3-3786 missing"
        result = all_results['results']["KV-PART3-3786"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART3-3786 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART3-3786 failed"


    def test_rule_list_part3_3787(self, all_results):
        """
        Test LIST-PART3-3787: List item: "Average quarantine duration by category"
        Priority: MEDIUM
        """
        assert "LIST-PART3-3787" in all_results['results'], "Rule LIST-PART3-3787 missing"
        result = all_results['results']["LIST-PART3-3787"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART3-3787 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART3-3787 failed"


    def test_rule_list_part3_3788(self, all_results):
        """
        Test LIST-PART3-3788: List item: "Release success rate"
        Priority: MEDIUM
        """
        assert "LIST-PART3-3788" in all_results['results'], "Rule LIST-PART3-3788 missing"
        result = all_results['results']["LIST-PART3-3788"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART3-3788 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART3-3788 failed"


    def test_rule_list_part3_3789(self, all_results):
        """
        Test LIST-PART3-3789: List item: "Repeat quarantine patterns"
        Priority: MEDIUM
        """
        assert "LIST-PART3-3789" in all_results['results'], "Rule LIST-PART3-3789 missing"
        result = all_results['results']["LIST-PART3-3789"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART3-3789 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART3-3789 failed"


    def test_rule_list_part3_3790(self, all_results):
        """
        Test LIST-PART3-3790: List item: "Business impact of quarantined items"
        Priority: MEDIUM
        """
        assert "LIST-PART3-3790" in all_results['results'], "Rule LIST-PART3-3790 missing"
        result = all_results['results']["LIST-PART3-3790"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART3-3790 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART3-3790 failed"


    def test_rule_list_part3_3791(self, all_results):
        """
        Test LIST-PART3-3791: List item: "Compliance effectiveness scores"
        Priority: CRITICAL
        """
        assert "LIST-PART3-3791" in all_results['results'], "Rule LIST-PART3-3791 missing"
        result = all_results['results']["LIST-PART3-3791"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART3-3791 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART3-3791 failed"


    def test_rule_list_part3_3792(self, all_results):
        """
        Test LIST-PART3-3792: List item: "Cost of quarantine operations"
        Priority: MEDIUM
        """
        assert "LIST-PART3-3792" in all_results['results'], "Rule LIST-PART3-3792 missing"
        result = all_results['results']["LIST-PART3-3792"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART3-3792 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART3-3792 failed"


    def test_rule_kv_part3_3793(self, all_results):
        """
        Test KV-PART3-3793: quarantine_gaming_detection: "Monitor attempts to game quarantine system"
        Priority: MEDIUM
        """
        assert "KV-PART3-3793" in all_results['results'], "Rule KV-PART3-3793 missing"
        result = all_results['results']["KV-PART3-3793"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART3-3793 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART3-3793 failed"


    def test_rule_kv_part3_3794(self, all_results):
        """
        Test KV-PART3-3794: bypass_attempt_logging: "Log all quarantine bypass attempts"
        Priority: MEDIUM
        """
        assert "KV-PART3-3794" in all_results['results'], "Rule KV-PART3-3794 missing"
        result = all_results['results']["KV-PART3-3794"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART3-3794 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART3-3794 failed"


    def test_rule_kv_part3_3795(self, all_results):
        """
        Test KV-PART3-3795: false_quarantine_prevention: "Prevent malicious quarantine triggers"
        Priority: MEDIUM
        """
        assert "KV-PART3-3795" in all_results['results'], "Rule KV-PART3-3795 missing"
        result = all_results['results']["KV-PART3-3795"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART3-3795 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART3-3795 failed"


    def test_rule_kv_part3_3796(self, all_results):
        """
        Test KV-PART3-3796: quarantine_integrity_verification: "Regular integrity checks"
        Priority: MEDIUM
        """
        assert "KV-PART3-3796" in all_results['results'], "Rule KV-PART3-3796 missing"
        result = all_results['results']["KV-PART3-3796"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART3-3796 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART3-3796 failed"


    def test_rule_kv_part3_3797(self, all_results):
        """
        Test KV-PART3-3797: insider_threat_monitoring: "Monitor internal quarantine manipulations"
        Priority: MEDIUM
        """
        assert "KV-PART3-3797" in all_results['results'], "Rule KV-PART3-3797 missing"
        result = all_results['results']["KV-PART3-3797"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART3-3797 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART3-3797 failed"


    def test_rule_kv_part3_3798(self, all_results):
        """
        Test KV-PART3-3798: compliance_system: "23_compliance/policies/ → quarantine triggers"
        Priority: CRITICAL
        """
        assert "KV-PART3-3798" in all_results['results'], "Rule KV-PART3-3798 missing"
        result = all_results['results']["KV-PART3-3798"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART3-3798 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART3-3798 failed"


    def test_rule_kv_part3_3799(self, all_results):
        """
        Test KV-PART3-3799: audit_logging: "02_audit_logging/storage/ → quarantine evidence"
        Priority: MEDIUM
        """
        assert "KV-PART3-3799" in all_results['results'], "Rule KV-PART3-3799 missing"
        result = all_results['results']["KV-PART3-3799"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART3-3799 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART3-3799 failed"


    def test_rule_kv_part3_3800(self, all_results):
        """
        Test KV-PART3-3800: governance_legal: "07_governance_legal/risk/ → quarantine risk assessment"
        Priority: CRITICAL
        """
        assert "KV-PART3-3800" in all_results['results'], "Rule KV-PART3-3800 missing"
        result = all_results['results']["KV-PART3-3800"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART3-3800 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART3-3800 failed"


    def test_rule_kv_part3_3801(self, all_results):
        """
        Test KV-PART3-3801: business_intelligence: "Competitive impact analysis for quarantined items"
        Priority: MEDIUM
        """
        assert "KV-PART3-3801" in all_results['results'], "Rule KV-PART3-3801 missing"
        result = all_results['results']["KV-PART3-3801"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART3-3801 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART3-3801 failed"


    def test_rule_kv_part3_3802(self, all_results):
        """
        Test KV-PART3-3802: enterprise_dashboard: "Real-time quarantine visibility for executives"
        Priority: MEDIUM
        """
        assert "KV-PART3-3802" in all_results['results'], "Rule KV-PART3-3802 missing"
        result = all_results['results']["KV-PART3-3802"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART3-3802 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART3-3802 failed"


    def test_rule_list_part3_3803(self, all_results):
        """
        Test LIST-PART3-3803: List item: *Storage Locations:**
        Priority: MEDIUM
        """
        assert "LIST-PART3-3803" in all_results['results'], "Rule LIST-PART3-3803 missing"
        result = all_results['results']["LIST-PART3-3803"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART3-3803 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART3-3803 failed"


    def test_rule_list_part3_3804(self, all_results):
        """
        Test LIST-PART3-3804: List item: **Immutable Storage:** `02_audit_logging/storage/worm/immutable_store
        Priority: MEDIUM
        """
        assert "LIST-PART3-3804" in all_results['results'], "Rule LIST-PART3-3804 missing"
        result = all_results['results']["LIST-PART3-3804"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART3-3804 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART3-3804 failed"


    def test_rule_list_part3_3805(self, all_results):
        """
        Test LIST-PART3-3805: List item: **Quarantine Singleton:** `02_audit_logging/quarantine/singleton/quar
        Priority: MEDIUM
        """
        assert "LIST-PART3-3805" in all_results['results'], "Rule LIST-PART3-3805 missing"
        result = all_results['results']["LIST-PART3-3805"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART3-3805 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART3-3805 failed"


    def test_rule_list_part3_3806(self, all_results):
        """
        Test LIST-PART3-3806: List item: **Quarantine Processing:** `02_audit_logging/quarantine/processing/`
        Priority: MEDIUM
        """
        assert "LIST-PART3-3806" in all_results['results'], "Rule LIST-PART3-3806 missing"
        result = all_results['results']["LIST-PART3-3806"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART3-3806 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART3-3806 failed"


    def test_rule_list_part3_3807(self, all_results):
        """
        Test LIST-PART3-3807: List item: **Quarantine Hash-Ledger:** `02_audit_logging/quarantine/hash_ledger/
        Priority: MEDIUM
        """
        assert "LIST-PART3-3807" in all_results['results'], "Rule LIST-PART3-3807 missing"
        result = all_results['results']["LIST-PART3-3807"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART3-3807 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART3-3807 failed"


    def test_rule_list_part3_3808(self, all_results):
        """
        Test LIST-PART3-3808: List item: **Evidence Chain:** `23_compliance/evidence/ci_runs/`
        Priority: CRITICAL
        """
        assert "LIST-PART3-3808" in all_results['results'], "Rule LIST-PART3-3808 missing"
        result = all_results['results']["LIST-PART3-3808"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART3-3808 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART3-3808 failed"


    def test_rule_list_part3_3809(self, all_results):
        """
        Test LIST-PART3-3809: List item: **Retention Policies:** `02_audit_logging/retention/lifecycle_policie
        Priority: MEDIUM
        """
        assert "LIST-PART3-3809" in all_results['results'], "Rule LIST-PART3-3809 missing"
        result = all_results['results']["LIST-PART3-3809"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART3-3809 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART3-3809 failed"


    def test_rule_list_part3_3810(self, all_results):
        """
        Test LIST-PART3-3810: List item: **Review Documentation:** `23_compliance/reviews/` (internal + extern
        Priority: CRITICAL
        """
        assert "LIST-PART3-3810" in all_results['results'], "Rule LIST-PART3-3810 missing"
        result = all_results['results']["LIST-PART3-3810"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART3-3810 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART3-3810 failed"


    def test_rule_list_part3_3811(self, all_results):
        """
        Test LIST-PART3-3811: List item: **Blockchain Anchors:** `02_audit_logging/storage/blockchain_anchors/
        Priority: MEDIUM
        """
        assert "LIST-PART3-3811" in all_results['results'], "Rule LIST-PART3-3811 missing"
        result = all_results['results']["LIST-PART3-3811"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART3-3811 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART3-3811 failed"


    def test_rule_list_part3_3812(self, all_results):
        """
        Test LIST-PART3-3812: List item: **Anti-Gaming Logs:** `23_compliance/anti_gaming/audit_logs/`
        Priority: CRITICAL
        """
        assert "LIST-PART3-3812" in all_results['results'], "Rule LIST-PART3-3812 missing"
        result = all_results['results']["LIST-PART3-3812"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART3-3812 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART3-3812 failed"


    def test_rule_list_part3_3813(self, all_results):
        """
        Test LIST-PART3-3813: List item: **Business Evidence:** `23_compliance/evidence/business_assessments/`
        Priority: CRITICAL
        """
        assert "LIST-PART3-3813" in all_results['results'], "Rule LIST-PART3-3813 missing"
        result = all_results['results']["LIST-PART3-3813"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART3-3813 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART3-3813 failed"


    def test_rule_list_part3_3814(self, all_results):
        """
        Test LIST-PART3-3814: List item: **Malware Quarantine Hashes:** `23_compliance/evidence/malware_quaran
        Priority: CRITICAL
        """
        assert "LIST-PART3-3814" in all_results['results'], "Rule LIST-PART3-3814 missing"
        result = all_results['results']["LIST-PART3-3814"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART3-3814 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART3-3814 failed"


    def test_rule_list_part3_3815(self, all_results):
        """
        Test LIST-PART3-3815: List item: *Quarantäne (Singleton):** Der einzige erlaubte Quarantäne-Pfad ist `
        Priority: CRITICAL
        """
        assert "LIST-PART3-3815" in all_results['results'], "Rule LIST-PART3-3815 missing"
        result = all_results['results']["LIST-PART3-3815"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART3-3815 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART3-3815 failed"


    def test_rule_kv_part3_3816(self, all_results):
        """
        Test KV-PART3-3816: version: "1.5"
        Priority: MEDIUM
        """
        assert "KV-PART3-3816" in all_results['results'], "Rule KV-PART3-3816 missing"
        result = all_results['results']["KV-PART3-3816"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART3-3816 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART3-3816 failed"


    def test_rule_kv_part3_3817(self, all_results):
        """
        Test KV-PART3-3817: date: "2025-09-15"
        Priority: MEDIUM
        """
        assert "KV-PART3-3817" in all_results['results'], "Rule KV-PART3-3817 missing"
        result = all_results['results']["KV-PART3-3817"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART3-3817 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART3-3817 failed"


    def test_rule_kv_part3_3818(self, all_results):
        """
        Test KV-PART3-3818: deprecated: false
        Priority: MEDIUM
        """
        assert "KV-PART3-3818" in all_results['results'], "Rule KV-PART3-3818 missing"
        result = all_results['results']["KV-PART3-3818"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART3-3818 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART3-3818 failed"


    def test_rule_kv_part3_3819(self, all_results):
        """
        Test KV-PART3-3819: classification: "CONFIDENTIAL"
        Priority: MEDIUM
        """
        assert "KV-PART3-3819" in all_results['results'], "Rule KV-PART3-3819 missing"
        result = all_results['results']["KV-PART3-3819"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART3-3819 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART3-3819 failed"


    def test_rule_kv_part3_3820(self, all_results):
        """
        Test KV-PART3-3820: name: "W3C Verifiable Credentials 2.0"
        Priority: MEDIUM
        """
        assert "KV-PART3-3820" in all_results['results'], "Rule KV-PART3-3820 missing"
        result = all_results['results']["KV-PART3-3820"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART3-3820 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART3-3820 failed"


    def test_rule_kv_part3_3821(self, all_results):
        """
        Test KV-PART3-3821: path: "10_interoperability/standards/w3c_vc2/"
        Priority: HIGH
        """
        assert "KV-PART3-3821" in all_results['results'], "Rule KV-PART3-3821 missing"
        result = all_results['results']["KV-PART3-3821"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "HIGH" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART3-3821 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART3-3821 failed"


    def test_rule_kv_part3_3822(self, all_results):
        """
        Test KV-PART3-3822: deprecated: false
        Priority: MEDIUM
        """
        assert "KV-PART3-3822" in all_results['results'], "Rule KV-PART3-3822 missing"
        result = all_results['results']["KV-PART3-3822"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART3-3822 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART3-3822 failed"


    def test_rule_kv_part3_3823(self, all_results):
        """
        Test KV-PART3-3823: business_priority: "HIGH"
        Priority: MEDIUM
        """
        assert "KV-PART3-3823" in all_results['results'], "Rule KV-PART3-3823 missing"
        result = all_results['results']["KV-PART3-3823"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART3-3823 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART3-3823 failed"


    def test_rule_kv_part3_3824(self, all_results):
        """
        Test KV-PART3-3824: name: "OpenID Connect 4 Verifiable Credentials"
        Priority: MEDIUM
        """
        assert "KV-PART3-3824" in all_results['results'], "Rule KV-PART3-3824 missing"
        result = all_results['results']["KV-PART3-3824"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART3-3824 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART3-3824 failed"


    def test_rule_kv_part3_3825(self, all_results):
        """
        Test KV-PART3-3825: path: "14_zero_time_auth/sso/protocols/oidc4vc/"
        Priority: MEDIUM
        """
        assert "KV-PART3-3825" in all_results['results'], "Rule KV-PART3-3825 missing"
        result = all_results['results']["KV-PART3-3825"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART3-3825 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART3-3825 failed"


    def test_rule_kv_part3_3826(self, all_results):
        """
        Test KV-PART3-3826: deprecated: false
        Priority: MEDIUM
        """
        assert "KV-PART3-3826" in all_results['results'], "Rule KV-PART3-3826 missing"
        result = all_results['results']["KV-PART3-3826"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART3-3826 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART3-3826 failed"


    def test_rule_kv_part3_3827(self, all_results):
        """
        Test KV-PART3-3827: business_priority: "HIGH"
        Priority: MEDIUM
        """
        assert "KV-PART3-3827" in all_results['results'], "Rule KV-PART3-3827 missing"
        result = all_results['results']["KV-PART3-3827"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART3-3827 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART3-3827 failed"


    def test_rule_kv_part3_3828(self, all_results):
        """
        Test KV-PART3-3828: name: "ISO/IEC 27001:2022"
        Priority: MEDIUM
        """
        assert "KV-PART3-3828" in all_results['results'], "Rule KV-PART3-3828 missing"
        result = all_results['results']["KV-PART3-3828"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART3-3828 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART3-3828 failed"


    def test_rule_kv_part3_3829(self, all_results):
        """
        Test KV-PART3-3829: path: "23_compliance/mappings/iso27001/"
        Priority: CRITICAL
        """
        assert "KV-PART3-3829" in all_results['results'], "Rule KV-PART3-3829 missing"
        result = all_results['results']["KV-PART3-3829"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART3-3829 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART3-3829 failed"


    def test_rule_kv_part3_3830(self, all_results):
        """
        Test KV-PART3-3830: deprecated: false
        Priority: MEDIUM
        """
        assert "KV-PART3-3830" in all_results['results'], "Rule KV-PART3-3830 missing"
        result = all_results['results']["KV-PART3-3830"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART3-3830 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART3-3830 failed"


    def test_rule_text_part3_3831(self, all_results):
        """
        Test TEXT-PART3-3831: business_priority: "CRITICAL"
        Priority: CRITICAL
        """
        assert "TEXT-PART3-3831" in all_results['results'], "Rule TEXT-PART3-3831 missing"
        result = all_results['results']["TEXT-PART3-3831"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule TEXT-PART3-3831 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule TEXT-PART3-3831 failed"


    def test_rule_kv_part3_3832(self, all_results):
        """
        Test KV-PART3-3832: name: "NIST Secure Software Development Framework"
        Priority: MEDIUM
        """
        assert "KV-PART3-3832" in all_results['results'], "Rule KV-PART3-3832 missing"
        result = all_results['results']["KV-PART3-3832"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART3-3832 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART3-3832 failed"


    def test_rule_kv_part3_3833(self, all_results):
        """
        Test KV-PART3-3833: path: "23_compliance/mappings/nist_ssdf/"
        Priority: CRITICAL
        """
        assert "KV-PART3-3833" in all_results['results'], "Rule KV-PART3-3833 missing"
        result = all_results['results']["KV-PART3-3833"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART3-3833 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART3-3833 failed"


    def test_rule_kv_part3_3834(self, all_results):
        """
        Test KV-PART3-3834: deprecated: false
        Priority: MEDIUM
        """
        assert "KV-PART3-3834" in all_results['results'], "Rule KV-PART3-3834 missing"
        result = all_results['results']["KV-PART3-3834"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART3-3834 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART3-3834 failed"


    def test_rule_kv_part3_3835(self, all_results):
        """
        Test KV-PART3-3835: business_priority: "HIGH"
        Priority: MEDIUM
        """
        assert "KV-PART3-3835" in all_results['results'], "Rule KV-PART3-3835 missing"
        result = all_results['results']["KV-PART3-3835"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART3-3835 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART3-3835 failed"


    def test_rule_kv_part3_3836(self, all_results):
        """
        Test KV-PART3-3836: name: "Supply Chain Levels for Software Artifacts"
        Priority: MEDIUM
        """
        assert "KV-PART3-3836" in all_results['results'], "Rule KV-PART3-3836 missing"
        result = all_results['results']["KV-PART3-3836"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART3-3836 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART3-3836 failed"


    def test_rule_kv_part3_3837(self, all_results):
        """
        Test KV-PART3-3837: path: "23_compliance/mappings/slsa/"
        Priority: CRITICAL
        """
        assert "KV-PART3-3837" in all_results['results'], "Rule KV-PART3-3837 missing"
        result = all_results['results']["KV-PART3-3837"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART3-3837 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART3-3837 failed"


    def test_rule_kv_part3_3838(self, all_results):
        """
        Test KV-PART3-3838: deprecated: false
        Priority: MEDIUM
        """
        assert "KV-PART3-3838" in all_results['results'], "Rule KV-PART3-3838 missing"
        result = all_results['results']["KV-PART3-3838"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART3-3838 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART3-3838 failed"


    def test_rule_kv_part3_3839(self, all_results):
        """
        Test KV-PART3-3839: business_priority: "MEDIUM"
        Priority: MEDIUM
        """
        assert "KV-PART3-3839" in all_results['results'], "Rule KV-PART3-3839 missing"
        result = all_results['results']["KV-PART3-3839"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART3-3839 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART3-3839 failed"


    def test_rule_list_part3_3840(self, all_results):
        """
        Test LIST-PART3-3840: List item: id: "ISO27001_2013"
        Priority: MEDIUM
        """
        assert "LIST-PART3-3840" in all_results['results'], "Rule LIST-PART3-3840 missing"
        result = all_results['results']["LIST-PART3-3840"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART3-3840 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART3-3840 failed"


    def test_rule_kv_part3_3841(self, all_results):
        """
        Test KV-PART3-3841: status: "deprecated"
        Priority: MEDIUM
        """
        assert "KV-PART3-3841" in all_results['results'], "Rule KV-PART3-3841 missing"
        result = all_results['results']["KV-PART3-3841"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART3-3841 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART3-3841 failed"


    def test_rule_kv_part3_3842(self, all_results):
        """
        Test KV-PART3-3842: deprecated: true
        Priority: MEDIUM
        """
        assert "KV-PART3-3842" in all_results['results'], "Rule KV-PART3-3842 missing"
        result = all_results['results']["KV-PART3-3842"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART3-3842 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART3-3842 failed"


    def test_rule_kv_part3_3843(self, all_results):
        """
        Test KV-PART3-3843: replaced_by: "ISO_IEC_27001_2022"
        Priority: MEDIUM
        """
        assert "KV-PART3-3843" in all_results['results'], "Rule KV-PART3-3843 missing"
        result = all_results['results']["KV-PART3-3843"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART3-3843 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART3-3843 failed"


    def test_rule_kv_part3_3844(self, all_results):
        """
        Test KV-PART3-3844: migration_deadline: "2025-12-31"
        Priority: MEDIUM
        """
        assert "KV-PART3-3844" in all_results['results'], "Rule KV-PART3-3844 missing"
        result = all_results['results']["KV-PART3-3844"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART3-3844 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART3-3844 failed"


    def test_rule_text_part3_3845(self, all_results):
        """
        Test TEXT-PART3-3845: business_impact: "Migration required for enterprise compliance"
        Priority: MEDIUM
        """
        assert "TEXT-PART3-3845" in all_results['results'], "Rule TEXT-PART3-3845 missing"
        result = all_results['results']["TEXT-PART3-3845"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule TEXT-PART3-3845 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule TEXT-PART3-3845 failed"


    def test_rule_kv_part3_3846(self, all_results):
        """
        Test KV-PART3-3846: version: "1.0"
        Priority: MEDIUM
        """
        assert "KV-PART3-3846" in all_results['results'], "Rule KV-PART3-3846 missing"
        result = all_results['results']["KV-PART3-3846"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART3-3846 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART3-3846 failed"


    def test_rule_kv_part3_3847(self, all_results):
        """
        Test KV-PART3-3847: deprecated: false
        Priority: MEDIUM
        """
        assert "KV-PART3-3847" in all_results['results'], "Rule KV-PART3-3847 missing"
        result = all_results['results']["KV-PART3-3847"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART3-3847 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART3-3847 failed"


    def test_rule_kv_part3_3848(self, all_results):
        """
        Test KV-PART3-3848: classification: "CONFIDENTIAL"
        Priority: MEDIUM
        """
        assert "KV-PART3-3848" in all_results['results'], "Rule KV-PART3-3848 missing"
        result = all_results['results']["KV-PART3-3848"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART3-3848 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART3-3848 failed"


    def test_rule_kv_part3_3849(self, all_results):
        """
        Test KV-PART3-3849: scope: "Badge metrics validation, compliance updates, business impact"
        Priority: CRITICAL
        """
        assert "KV-PART3-3849" in all_results['results'], "Rule KV-PART3-3849 missing"
        result = all_results['results']["KV-PART3-3849"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART3-3849 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART3-3849 failed"


    def test_rule_kv_part3_3850(self, all_results):
        """
        Test KV-PART3-3850: owner: "Compliance Team Lead"
        Priority: CRITICAL
        """
        assert "KV-PART3-3850" in all_results['results'], "Rule KV-PART3-3850 missing"
        result = all_results['results']["KV-PART3-3850"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART3-3850 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART3-3850 failed"


    def test_rule_kv_part3_3851(self, all_results):
        """
        Test KV-PART3-3851: deliverable: "internal_monthly_YYYY-MM.md"
        Priority: MEDIUM
        """
        assert "KV-PART3-3851" in all_results['results'], "Rule KV-PART3-3851 missing"
        result = all_results['results']["KV-PART3-3851"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART3-3851 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART3-3851 failed"


    def test_rule_kv_part3_3852(self, all_results):
        """
        Test KV-PART3-3852: classification: "CONFIDENTIAL"
        Priority: MEDIUM
        """
        assert "KV-PART3-3852" in all_results['results'], "Rule KV-PART3-3852 missing"
        result = all_results['results']["KV-PART3-3852"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART3-3852 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART3-3852 failed"


    def test_rule_kv_part3_3853(self, all_results):
        """
        Test KV-PART3-3853: business_review: true
        Priority: MEDIUM
        """
        assert "KV-PART3-3853" in all_results['results'], "Rule KV-PART3-3853 missing"
        result = all_results['results']["KV-PART3-3853"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART3-3853 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART3-3853 failed"


    def test_rule_kv_part3_3854(self, all_results):
        """
        Test KV-PART3-3854: scope: "Full compliance matrix review, threshold validation, competitive analysi
        Priority: CRITICAL
        """
        assert "KV-PART3-3854" in all_results['results'], "Rule KV-PART3-3854 missing"
        result = all_results['results']["KV-PART3-3854"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART3-3854 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART3-3854 failed"


    def test_rule_kv_part3_3855(self, all_results):
        """
        Test KV-PART3-3855: owner: "Senior Compliance Officer + Legal"
        Priority: CRITICAL
        """
        assert "KV-PART3-3855" in all_results['results'], "Rule KV-PART3-3855 missing"
        result = all_results['results']["KV-PART3-3855"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART3-3855 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART3-3855 failed"


    def test_rule_kv_part3_3856(self, all_results):
        """
        Test KV-PART3-3856: deliverable: "internal_quarterly_YYYY-QX.md"
        Priority: MEDIUM
        """
        assert "KV-PART3-3856" in all_results['results'], "Rule KV-PART3-3856 missing"
        result = all_results['results']["KV-PART3-3856"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART3-3856 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART3-3856 failed"


    def test_rule_kv_part3_3857(self, all_results):
        """
        Test KV-PART3-3857: classification: "CONFIDENTIAL"
        Priority: MEDIUM
        """
        assert "KV-PART3-3857" in all_results['results'], "Rule KV-PART3-3857 missing"
        result = all_results['results']["KV-PART3-3857"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART3-3857 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART3-3857 failed"


    def test_rule_kv_part3_3858(self, all_results):
        """
        Test KV-PART3-3858: external_validation: "Optional external consultant"
        Priority: MEDIUM
        """
        assert "KV-PART3-3858" in all_results['results'], "Rule KV-PART3-3858 missing"
        result = all_results['results']["KV-PART3-3858"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART3-3858 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART3-3858 failed"


    def test_rule_kv_part3_3859(self, all_results):
        """
        Test KV-PART3-3859: board_reporting: true
        Priority: MEDIUM
        """
        assert "KV-PART3-3859" in all_results['results'], "Rule KV-PART3-3859 missing"
        result = all_results['results']["KV-PART3-3859"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART3-3859 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART3-3859 failed"


    def test_rule_kv_part3_3860(self, all_results):
        """
        Test KV-PART3-3860: scope: "Strategic compliance roadmap, regulatory horizon scan, market expansion"
        Priority: CRITICAL
        """
        assert "KV-PART3-3860" in all_results['results'], "Rule KV-PART3-3860 missing"
        result = all_results['results']["KV-PART3-3860"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART3-3860 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART3-3860 failed"


    def test_rule_kv_part3_3861(self, all_results):
        """
        Test KV-PART3-3861: owner: "Executive Compliance Committee"
        Priority: CRITICAL
        """
        assert "KV-PART3-3861" in all_results['results'], "Rule KV-PART3-3861 missing"
        result = all_results['results']["KV-PART3-3861"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART3-3861 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART3-3861 failed"


    def test_rule_kv_part3_3862(self, all_results):
        """
        Test KV-PART3-3862: deliverable: "strategic_compliance_YYYY-H1H2.md"
        Priority: CRITICAL
        """
        assert "KV-PART3-3862" in all_results['results'], "Rule KV-PART3-3862 missing"
        result = all_results['results']["KV-PART3-3862"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART3-3862 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART3-3862 failed"


    def test_rule_kv_part3_3863(self, all_results):
        """
        Test KV-PART3-3863: classification: "CONFIDENTIAL"
        Priority: MEDIUM
        """
        assert "KV-PART3-3863" in all_results['results'], "Rule KV-PART3-3863 missing"
        result = all_results['results']["KV-PART3-3863"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART3-3863 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART3-3863 failed"


    def test_rule_kv_part3_3864(self, all_results):
        """
        Test KV-PART3-3864: c_suite_presentation: true
        Priority: MEDIUM
        """
        assert "KV-PART3-3864" in all_results['results'], "Rule KV-PART3-3864 missing"
        result = all_results['results']["KV-PART3-3864"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART3-3864 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART3-3864 failed"


    def test_rule_kv_part3_3865(self, all_results):
        """
        Test KV-PART3-3865: frequency: "Every 6 months"
        Priority: MEDIUM
        """
        assert "KV-PART3-3865" in all_results['results'], "Rule KV-PART3-3865 missing"
        result = all_results['results']["KV-PART3-3865"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART3-3865 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART3-3865 failed"


    def test_rule_text_part3_3866(self, all_results):
        """
        Test TEXT-PART3-3866: mandatory: true
        Priority: MEDIUM
        """
        assert "TEXT-PART3-3866" in all_results['results'], "Rule TEXT-PART3-3866 missing"
        result = all_results['results']["TEXT-PART3-3866"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule TEXT-PART3-3866 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule TEXT-PART3-3866 failed"


    def test_rule_kv_part3_3867(self, all_results):
        """
        Test KV-PART3-3867: scope: "Badge logic, anti-gaming controls, regulatory accuracy"
        Priority: MEDIUM
        """
        assert "KV-PART3-3867" in all_results['results'], "Rule KV-PART3-3867 missing"
        result = all_results['results']["KV-PART3-3867"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART3-3867 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART3-3867 failed"


    def test_rule_kv_part3_3868(self, all_results):
        """
        Test KV-PART3-3868: deliverable: "external_review_YYYY-MM.md"
        Priority: MEDIUM
        """
        assert "KV-PART3-3868" in all_results['results'], "Rule KV-PART3-3868 missing"
        result = all_results['results']["KV-PART3-3868"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART3-3868 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART3-3868 failed"


    def test_rule_text_part3_3869(self, all_results):
        """
        Test TEXT-PART3-3869: confidentiality_agreement: "required"
        Priority: MEDIUM
        """
        assert "TEXT-PART3-3869" in all_results['results'], "Rule TEXT-PART3-3869 missing"
        result = all_results['results']["TEXT-PART3-3869"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule TEXT-PART3-3869 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule TEXT-PART3-3869 failed"


    def test_rule_kv_part3_3870(self, all_results):
        """
        Test KV-PART3-3870: clearance_verification: true
        Priority: MEDIUM
        """
        assert "KV-PART3-3870" in all_results['results'], "Rule KV-PART3-3870 missing"
        result = all_results['results']["KV-PART3-3870"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART3-3870 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART3-3870 failed"


    def test_rule_list_part3_3871(self, all_results):
        """
        Test LIST-PART3-3871: List item: *Review Quarter:** YYYY-QX
        Priority: MEDIUM
        """
        assert "LIST-PART3-3871" in all_results['results'], "Rule LIST-PART3-3871 missing"
        result = all_results['results']["LIST-PART3-3871"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART3-3871 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART3-3871 failed"


    def test_rule_list_part3_3872(self, all_results):
        """
        Test LIST-PART3-3872: List item: *Review Team:** [Compliance Lead, Legal Counsel, Technical Lead, Busi
        Priority: CRITICAL
        """
        assert "LIST-PART3-3872" in all_results['results'], "Rule LIST-PART3-3872 missing"
        result = all_results['results']["LIST-PART3-3872"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART3-3872 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART3-3872 failed"


    def test_rule_list_part3_3873(self, all_results):
        """
        Test LIST-PART3-3873: List item: *Review Date:** YYYY-MM-DD
        Priority: MEDIUM
        """
        assert "LIST-PART3-3873" in all_results['results'], "Rule LIST-PART3-3873 missing"
        result = all_results['results']["LIST-PART3-3873"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART3-3873 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART3-3873 failed"


    def test_rule_list_part3_3874(self, all_results):
        """
        Test LIST-PART3-3874: List item: *Classification:** CONFIDENTIAL - Internal Use Only
        Priority: MEDIUM
        """
        assert "LIST-PART3-3874" in all_results['results'], "Rule LIST-PART3-3874 missing"
        result = all_results['results']["LIST-PART3-3874"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART3-3874 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART3-3874 failed"


    def test_rule_list_part3_3875(self, all_results):
        """
        Test LIST-PART3-3875: List item: *Distribution:** Executive Committee, Board Compliance Committee
        Priority: CRITICAL
        """
        assert "LIST-PART3-3875" in all_results['results'], "Rule LIST-PART3-3875 missing"
        result = all_results['results']["LIST-PART3-3875"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART3-3875 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART3-3875 failed"


    def test_rule_list_part3_3876(self, all_results):
        """
        Test LIST-PART3-3876: List item: Compliance Status: [COMPLIANT/CONDITIONAL/NON-COMPLIANT]
        Priority: CRITICAL
        """
        assert "LIST-PART3-3876" in all_results['results'], "Rule LIST-PART3-3876 missing"
        result = all_results['results']["LIST-PART3-3876"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART3-3876 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART3-3876 failed"


    def test_rule_list_part3_3877(self, all_results):
        """
        Test LIST-PART3-3877: List item: Business Risks: [High/Medium/Low]
        Priority: MEDIUM
        """
        assert "LIST-PART3-3877" in all_results['results'], "Rule LIST-PART3-3877 missing"
        result = all_results['results']["LIST-PART3-3877"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART3-3877 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART3-3877 failed"


    def test_rule_list_part3_3878(self, all_results):
        """
        Test LIST-PART3-3878: List item: Regulatory Changes: [Number of new requirements]
        Priority: MEDIUM
        """
        assert "LIST-PART3-3878" in all_results['results'], "Rule LIST-PART3-3878 missing"
        result = all_results['results']["LIST-PART3-3878"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART3-3878 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART3-3878 failed"


    def test_rule_list_part3_3879(self, all_results):
        """
        Test LIST-PART3-3879: List item: Competitive Position: [Advantage/Parity/Disadvantage]
        Priority: MEDIUM
        """
        assert "LIST-PART3-3879" in all_results['results'], "Rule LIST-PART3-3879 missing"
        result = all_results['results']["LIST-PART3-3879"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART3-3879 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART3-3879 failed"


    def test_rule_list_part3_3880(self, all_results):
        """
        Test LIST-PART3-3880: List item: Market Access Status: [List affected jurisdictions]
        Priority: MEDIUM
        """
        assert "LIST-PART3-3880" in all_results['results'], "Rule LIST-PART3-3880 missing"
        result = all_results['results']["LIST-PART3-3880"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART3-3880 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART3-3880 failed"


    def test_rule_list_part3_3881(self, all_results):
        """
        Test LIST-PART3-3881: List item: Total Jurisdictions: [Number]
        Priority: MEDIUM
        """
        assert "LIST-PART3-3881" in all_results['results'], "Rule LIST-PART3-3881 missing"
        result = all_results['results']["LIST-PART3-3881"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART3-3881 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART3-3881 failed"


    def test_rule_list_part3_3882(self, all_results):
        """
        Test LIST-PART3-3882: List item: EU/EEA: [Status] - Revenue Impact: [€X million]
        Priority: MEDIUM
        """
        assert "LIST-PART3-3882" in all_results['results'], "Rule LIST-PART3-3882 missing"
        result = all_results['results']["LIST-PART3-3882"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART3-3882 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART3-3882 failed"


    def test_rule_list_part3_3883(self, all_results):
        """
        Test LIST-PART3-3883: List item: APAC: [Status] - Revenue Impact: [$X million]
        Priority: MEDIUM
        """
        assert "LIST-PART3-3883" in all_results['results'], "Rule LIST-PART3-3883 missing"
        result = all_results['results']["LIST-PART3-3883"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART3-3883 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART3-3883 failed"


    def test_rule_list_part3_3884(self, all_results):
        """
        Test LIST-PART3-3884: List item: Americas: [Status] - Revenue Impact: [$X million]
        Priority: MEDIUM
        """
        assert "LIST-PART3-3884" in all_results['results'], "Rule LIST-PART3-3884 missing"
        result = all_results['results']["LIST-PART3-3884"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART3-3884 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART3-3884 failed"


    def test_rule_list_part3_3885(self, all_results):
        """
        Test LIST-PART3-3885: List item: Fully Compliant: [Number (%)]
        Priority: MEDIUM
        """
        assert "LIST-PART3-3885" in all_results['results'], "Rule LIST-PART3-3885 missing"
        result = all_results['results']["LIST-PART3-3885"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART3-3885 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART3-3885 failed"


    def test_rule_list_part3_3886(self, all_results):
        """
        Test LIST-PART3-3886: List item: In Progress: [Number (%)]
        Priority: MEDIUM
        """
        assert "LIST-PART3-3886" in all_results['results'], "Rule LIST-PART3-3886 missing"
        result = all_results['results']["LIST-PART3-3886"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART3-3886 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART3-3886 failed"


    def test_rule_list_part3_3887(self, all_results):
        """
        Test LIST-PART3-3887: List item: Gaps Identified: [Number]
        Priority: MEDIUM
        """
        assert "LIST-PART3-3887" in all_results['results'], "Rule LIST-PART3-3887 missing"
        result = all_results['results']["LIST-PART3-3887"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART3-3887 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART3-3887 failed"


    def test_rule_list_part3_3888(self, all_results):
        """
        Test LIST-PART3-3888: List item: Priority Remediations: [List with business impact]
        Priority: MEDIUM
        """
        assert "LIST-PART3-3888" in all_results['results'], "Rule LIST-PART3-3888 missing"
        result = all_results['results']["LIST-PART3-3888"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART3-3888 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART3-3888 failed"


    def test_rule_list_part3_3889(self, all_results):
        """
        Test LIST-PART3-3889: List item: Market Access Risks:
        Priority: MEDIUM
        """
        assert "LIST-PART3-3889" in all_results['results'], "Rule LIST-PART3-3889 missing"
        result = all_results['results']["LIST-PART3-3889"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART3-3889 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART3-3889 failed"


    def test_rule_list_part3_3890(self, all_results):
        """
        Test LIST-PART3-3890: List item: Immediate: [List with revenue impact]
        Priority: MEDIUM
        """
        assert "LIST-PART3-3890" in all_results['results'], "Rule LIST-PART3-3890 missing"
        result = all_results['results']["LIST-PART3-3890"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART3-3890 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART3-3890 failed"


    def test_rule_list_part3_3891(self, all_results):
        """
        Test LIST-PART3-3891: List item: 6-month horizon: [List with strategic impact]
        Priority: MEDIUM
        """
        assert "LIST-PART3-3891" in all_results['results'], "Rule LIST-PART3-3891 missing"
        result = all_results['results']["LIST-PART3-3891"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART3-3891 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART3-3891 failed"


    def test_rule_list_part3_3892(self, all_results):
        """
        Test LIST-PART3-3892: List item: 12-month horizon: [List with competitive impact]
        Priority: MEDIUM
        """
        assert "LIST-PART3-3892" in all_results['results'], "Rule LIST-PART3-3892 missing"
        result = all_results['results']["LIST-PART3-3892"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART3-3892 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART3-3892 failed"


    def test_rule_list_part3_3893(self, all_results):
        """
        Test LIST-PART3-3893: List item: Regulatory Penalties Exposure: [Amount/Risk Level per jurisdiction]
        Priority: MEDIUM
        """
        assert "LIST-PART3-3893" in all_results['results'], "Rule LIST-PART3-3893 missing"
        result = all_results['results']["LIST-PART3-3893"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART3-3893 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART3-3893 failed"


    def test_rule_list_part3_3894(self, all_results):
        """
        Test LIST-PART3-3894: List item: Competitive Advantages:
        Priority: MEDIUM
        """
        assert "LIST-PART3-3894" in all_results['results'], "Rule LIST-PART3-3894 missing"
        result = all_results['results']["LIST-PART3-3894"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART3-3894 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART3-3894 failed"


    def test_rule_list_part3_3895(self, all_results):
        """
        Test LIST-PART3-3895: List item: Compliance-based advantages: [List]
        Priority: CRITICAL
        """
        assert "LIST-PART3-3895" in all_results['results'], "Rule LIST-PART3-3895 missing"
        result = all_results['results']["LIST-PART3-3895"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART3-3895 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART3-3895 failed"


    def test_rule_list_part3_3896(self, all_results):
        """
        Test LIST-PART3-3896: List item: Time-to-market advantages: [List]
        Priority: MEDIUM
        """
        assert "LIST-PART3-3896" in all_results['results'], "Rule LIST-PART3-3896 missing"
        result = all_results['results']["LIST-PART3-3896"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART3-3896 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART3-3896 failed"


    def test_rule_list_part3_3897(self, all_results):
        """
        Test LIST-PART3-3897: List item: Regulatory arbitrage opportunities: [List]
        Priority: MEDIUM
        """
        assert "LIST-PART3-3897" in all_results['results'], "Rule LIST-PART3-3897 missing"
        result = all_results['results']["LIST-PART3-3897"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART3-3897 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART3-3897 failed"


    def test_rule_list_part3_3898(self, all_results):
        """
        Test LIST-PART3-3898: List item: Investment Requirements:
        Priority: MEDIUM
        """
        assert "LIST-PART3-3898" in all_results['results'], "Rule LIST-PART3-3898 missing"
        result = all_results['results']["LIST-PART3-3898"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART3-3898 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART3-3898 failed"


    def test_rule_list_part3_3899(self, all_results):
        """
        Test LIST-PART3-3899: List item: Immediate: [€X]
        Priority: MEDIUM
        """
        assert "LIST-PART3-3899" in all_results['results'], "Rule LIST-PART3-3899 missing"
        result = all_results['results']["LIST-PART3-3899"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART3-3899 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART3-3899 failed"


    def test_rule_list_part3_3900(self, all_results):
        """
        Test LIST-PART3-3900: List item: 6-months: [€X]
        Priority: MEDIUM
        """
        assert "LIST-PART3-3900" in all_results['results'], "Rule LIST-PART3-3900 missing"
        result = all_results['results']["LIST-PART3-3900"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART3-3900 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART3-3900 failed"


    def test_rule_list_part3_3901(self, all_results):
        """
        Test LIST-PART3-3901: List item: Annual budget impact: [€X]
        Priority: MEDIUM
        """
        assert "LIST-PART3-3901" in all_results['results'], "Rule LIST-PART3-3901 missing"
        result = all_results['results']["LIST-PART3-3901"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART3-3901 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART3-3901 failed"


    def test_rule_list_part3_3902(self, all_results):
        """
        Test LIST-PART3-3902: List item: Badge Integrity: [Status]
        Priority: MEDIUM
        """
        assert "LIST-PART3-3902" in all_results['results'], "Rule LIST-PART3-3902 missing"
        result = all_results['results']["LIST-PART3-3902"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART3-3902 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART3-3902 failed"


    def test_rule_list_part3_3903(self, all_results):
        """
        Test LIST-PART3-3903: List item: Circular Dependencies: [Found: Number]
        Priority: MEDIUM
        """
        assert "LIST-PART3-3903" in all_results['results'], "Rule LIST-PART3-3903 missing"
        result = all_results['results']["LIST-PART3-3903"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART3-3903 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART3-3903 failed"


    def test_rule_list_part3_3904(self, all_results):
        """
        Test LIST-PART3-3904: List item: Business Logic Gaming: [Risks identified: Number]
        Priority: MEDIUM
        """
        assert "LIST-PART3-3904" in all_results['results'], "Rule LIST-PART3-3904 missing"
        result = all_results['results']["LIST-PART3-3904"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART3-3904 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART3-3904 failed"


    def test_rule_list_part3_3905(self, all_results):
        """
        Test LIST-PART3-3905: List item: Internal Audit Trail: [Status]
        Priority: MEDIUM
        """
        assert "LIST-PART3-3905" in all_results['results'], "Rule LIST-PART3-3905 missing"
        result = all_results['results']["LIST-PART3-3905"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART3-3905 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART3-3905 failed"


    def test_rule_list_part3_3906(self, all_results):
        """
        Test LIST-PART3-3906: List item: Enterprise Dashboard Status: [Operational/Issues]
        Priority: MEDIUM
        """
        assert "LIST-PART3-3906" in all_results['results'], "Rule LIST-PART3-3906 missing"
        result = all_results['results']["LIST-PART3-3906"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART3-3906 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART3-3906 failed"


    def test_rule_list_part3_3907(self, all_results):
        """
        Test LIST-PART3-3907: List item: Confidential Mapping Integrity: [Verified/Issues]
        Priority: MEDIUM
        """
        assert "LIST-PART3-3907" in all_results['results'], "Rule LIST-PART3-3907 missing"
        result = all_results['results']["LIST-PART3-3907"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART3-3907 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART3-3907 failed"


    def test_rule_list_part3_3908(self, all_results):
        """
        Test LIST-PART3-3908: List item: Regulatory Positioning vs Competitors:
        Priority: MEDIUM
        """
        assert "LIST-PART3-3908" in all_results['results'], "Rule LIST-PART3-3908 missing"
        result = all_results['results']["LIST-PART3-3908"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART3-3908 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART3-3908 failed"


    def test_rule_list_part3_3909(self, all_results):
        """
        Test LIST-PART3-3909: List item: Market Entry Barriers Created: [List]
        Priority: MEDIUM
        """
        assert "LIST-PART3-3909" in all_results['results'], "Rule LIST-PART3-3909 missing"
        result = all_results['results']["LIST-PART3-3909"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART3-3909 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART3-3909 failed"


    def test_rule_list_part3_3910(self, all_results):
        """
        Test LIST-PART3-3910: List item: Regulatory Moats: [Strength assessment]
        Priority: MEDIUM
        """
        assert "LIST-PART3-3910" in all_results['results'], "Rule LIST-PART3-3910 missing"
        result = all_results['results']["LIST-PART3-3910"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART3-3910 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART3-3910 failed"


    def test_rule_list_part3_3911(self, all_results):
        """
        Test LIST-PART3-3911: List item: New Regulations (Next 6 months): [List with business impact]
        Priority: MEDIUM
        """
        assert "LIST-PART3-3911" in all_results['results'], "Rule LIST-PART3-3911 missing"
        result = all_results['results']["LIST-PART3-3911"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART3-3911 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART3-3911 failed"


    def test_rule_list_part3_3912(self, all_results):
        """
        Test LIST-PART3-3912: List item: Policy Changes: [List with strategic implications]
        Priority: MEDIUM
        """
        assert "LIST-PART3-3912" in all_results['results'], "Rule LIST-PART3-3912 missing"
        result = all_results['results']["LIST-PART3-3912"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART3-3912 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART3-3912 failed"


    def test_rule_list_part3_3913(self, all_results):
        """
        Test LIST-PART3-3913: List item: Industry Standards Updates: [List with competitive impact]
        Priority: HIGH
        """
        assert "LIST-PART3-3913" in all_results['results'], "Rule LIST-PART3-3913 missing"
        result = all_results['results']["LIST-PART3-3913"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "HIGH" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART3-3913 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART3-3913 failed"


    def test_rule_list_part3_3914(self, all_results):
        """
        Test LIST-PART3-3914: List item: Market Entry Opportunities: [Jurisdictions with regulatory clarity]
        Priority: MEDIUM
        """
        assert "LIST-PART3-3914" in all_results['results'], "Rule LIST-PART3-3914 missing"
        result = all_results['results']["LIST-PART3-3914"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART3-3914 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART3-3914 failed"


    def test_rule_policy_part3_3915(self, all_results):
        """
        Test POLICY-PART3-3915: Policy #1: [Action] - Owner: [Person] - Deadline: [Date] - Business Impact: [Rev
        Priority: MEDIUM
        """
        assert "POLICY-PART3-3915" in all_results['results'], "Rule POLICY-PART3-3915 missing"
        result = all_results['results']["POLICY-PART3-3915"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule POLICY-PART3-3915 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule POLICY-PART3-3915 failed"


    def test_rule_policy_part3_3916(self, all_results):
        """
        Test POLICY-PART3-3916: Policy #2: [Action] - Owner: [Person] - Deadline: [Date] - Business Impact: [Rev
        Priority: MEDIUM
        """
        assert "POLICY-PART3-3916" in all_results['results'], "Rule POLICY-PART3-3916 missing"
        result = all_results['results']["POLICY-PART3-3916"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule POLICY-PART3-3916 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule POLICY-PART3-3916 failed"


    def test_rule_list_part3_3917(self, all_results):
        """
        Test LIST-PART3-3917: List item: Key Messages: [3 bullet points for board]
        Priority: MEDIUM
        """
        assert "LIST-PART3-3917" in all_results['results'], "Rule LIST-PART3-3917 missing"
        result = all_results['results']["LIST-PART3-3917"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART3-3917 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART3-3917 failed"


    def test_rule_list_part3_3918(self, all_results):
        """
        Test LIST-PART3-3918: List item: Strategic Recommendations: [List]
        Priority: MEDIUM
        """
        assert "LIST-PART3-3918" in all_results['results'], "Rule LIST-PART3-3918 missing"
        result = all_results['results']["LIST-PART3-3918"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART3-3918 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART3-3918 failed"


    def test_rule_list_part3_3919(self, all_results):
        """
        Test LIST-PART3-3919: List item: Risk Tolerance Decisions: [List requiring board guidance]
        Priority: MEDIUM
        """
        assert "LIST-PART3-3919" in all_results['results'], "Rule LIST-PART3-3919 missing"
        result = all_results['results']["LIST-PART3-3919"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART3-3919 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART3-3919 failed"


    def test_rule_list_part3_3920(self, all_results):
        """
        Test LIST-PART3-3920: List item: Date: [YYYY-MM-DD]
        Priority: MEDIUM
        """
        assert "LIST-PART3-3920" in all_results['results'], "Rule LIST-PART3-3920 missing"
        result = all_results['results']["LIST-PART3-3920"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART3-3920 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART3-3920 failed"


    def test_rule_list_part3_3921(self, all_results):
        """
        Test LIST-PART3-3921: List item: Focus Areas: [List business-prioritized]
        Priority: MEDIUM
        """
        assert "LIST-PART3-3921" in all_results['results'], "Rule LIST-PART3-3921 missing"
        result = all_results['results']["LIST-PART3-3921"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART3-3921 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART3-3921 failed"


    def test_rule_list_part3_3922(self, all_results):
        """
        Test LIST-PART3-3922: List item: C-Suite Presentation: [Date]
        Priority: MEDIUM
        """
        assert "LIST-PART3-3922" in all_results['results'], "Rule LIST-PART3-3922 missing"
        result = all_results['results']["LIST-PART3-3922"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART3-3922 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART3-3922 failed"


    def test_rule_list_part3_3923(self, all_results):
        """
        Test LIST-PART3-3923: List item: *Document Classification:** CONFIDENTIAL - Tier 1
        Priority: MEDIUM
        """
        assert "LIST-PART3-3923" in all_results['results'], "Rule LIST-PART3-3923 missing"
        result = all_results['results']["LIST-PART3-3923"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART3-3923 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART3-3923 failed"


    def test_rule_list_part3_3924(self, all_results):
        """
        Test LIST-PART3-3924: List item: *Retention Period:** 15 years (business records)
        Priority: MEDIUM
        """
        assert "LIST-PART3-3924" in all_results['results'], "Rule LIST-PART3-3924 missing"
        result = all_results['results']["LIST-PART3-3924"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART3-3924 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART3-3924 failed"


    def test_rule_list_part3_3925(self, all_results):
        """
        Test LIST-PART3-3925: List item: *Distribution List:** [Specific named individuals only]
        Priority: MEDIUM
        """
        assert "LIST-PART3-3925" in all_results['results'], "Rule LIST-PART3-3925 missing"
        result = all_results['results']["LIST-PART3-3925"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART3-3925 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART3-3925 failed"


    def test_rule_list_part3_3926(self, all_results):
        """
        Test LIST-PART3-3926: List item: *Level 1:** Root-Ordner (exakt 24, erlaubte Ausnahmen)
        Priority: MEDIUM
        """
        assert "LIST-PART3-3926" in all_results['results'], "Rule LIST-PART3-3926 missing"
        result = all_results['results']["LIST-PART3-3926"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART3-3926 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART3-3926 failed"


    def test_rule_list_part3_3927(self, all_results):
        """
        Test LIST-PART3-3927: List item: *Level 3:** Tiefenstruktur, Kritische Dateien, Naming-Conventions
        Priority: MEDIUM
        """
        assert "LIST-PART3-3927" in all_results['results'], "Rule LIST-PART3-3927 missing"
        result = all_results['results']["LIST-PART3-3927"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART3-3927 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART3-3927 failed"


    def test_rule_list_part3_3928(self, all_results):
        """
        Test LIST-PART3-3928: List item: *Level 4 (Enhanced):** Anti-Gaming Controls, Badge Integrity, Review 
        Priority: CRITICAL
        """
        assert "LIST-PART3-3928" in all_results['results'], "Rule LIST-PART3-3928 missing"
        result = all_results['results']["LIST-PART3-3928"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART3-3928 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART3-3928 failed"


    def test_rule_list_part3_3929(self, all_results):
        """
        Test LIST-PART3-3929: List item: *`structure_lock_l3.py`** - Handles **Levels 1-3 only:**
        Priority: MEDIUM
        """
        assert "LIST-PART3-3929" in all_results['results'], "Rule LIST-PART3-3929 missing"
        result = all_results['results']["LIST-PART3-3929"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART3-3929 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART3-3929 failed"


    def test_rule_list_part3_3930(self, all_results):
        """
        Test LIST-PART3-3930: List item: Root-Ordner Validation (Level 1)
        Priority: MEDIUM
        """
        assert "LIST-PART3-3930" in all_results['results'], "Rule LIST-PART3-3930 missing"
        result = all_results['results']["LIST-PART3-3930"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART3-3930 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART3-3930 failed"


    def test_rule_list_part3_3931(self, all_results):
        """
        Test LIST-PART3-3931: List item: Tiefenstruktur & Naming (Level 3)
        Priority: MEDIUM
        """
        assert "LIST-PART3-3931" in all_results['results'], "Rule LIST-PART3-3931 missing"
        result = all_results['results']["LIST-PART3-3931"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART3-3931 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART3-3931 failed"


    def test_rule_list_part3_3932(self, all_results):
        """
        Test LIST-PART3-3932: List item: Exit Code 24 bei Violation
        Priority: MEDIUM
        """
        assert "LIST-PART3-3932" in all_results['results'], "Rule LIST-PART3-3932 missing"
        result = all_results['results']["LIST-PART3-3932"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART3-3932 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART3-3932 failed"


    def test_rule_list_part3_3933(self, all_results):
        """
        Test LIST-PART3-3933: List item: *Level 4 Enforcement** - Zusätzliche Gates/Scanner erforderlich:
        Priority: MEDIUM
        """
        assert "LIST-PART3-3933" in all_results['results'], "Rule LIST-PART3-3933 missing"
        result = all_results['results']["LIST-PART3-3933"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART3-3933 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART3-3933 failed"


    def test_rule_list_part3_3934(self, all_results):
        """
        Test LIST-PART3-3934: List item: *Gesamtvalidierung:** `structure_lock_l3.py` + Level-4-Gates = Vollst
        Priority: MEDIUM
        """
        assert "LIST-PART3-3934" in all_results['results'], "Rule LIST-PART3-3934 missing"
        result = all_results['results']["LIST-PART3-3934"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART3-3934 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART3-3934 failed"


    def test_rule_list_part3_3935(self, all_results):
        """
        Test LIST-PART3-3935: List item: *Enterprise-Definitionen:**
        Priority: MEDIUM
        """
        assert "LIST-PART3-3935" in all_results['results'], "Rule LIST-PART3-3935 missing"
        result = all_results['results']["LIST-PART3-3935"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART3-3935 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART3-3935 failed"


    def test_rule_list_part3_3936(self, all_results):
        """
        Test LIST-PART3-3936: List item: **"Supported"**: Enterprise Framework-Strukturen nach Best Practices 
        Priority: MEDIUM
        """
        assert "LIST-PART3-3936" in all_results['results'], "Rule LIST-PART3-3936 missing"
        result = all_results['results']["LIST-PART3-3936"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART3-3936 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART3-3936 failed"


    def test_rule_list_part3_3937(self, all_results):
        """
        Test LIST-PART3-3937: List item: **"Ready"**: System für potentielle Audits basierend auf Enterprise-S
        Priority: HIGH
        """
        assert "LIST-PART3-3937" in all_results['results'], "Rule LIST-PART3-3937 missing"
        result = all_results['results']["LIST-PART3-3937"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "HIGH" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART3-3937 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART3-3937 failed"


    def test_rule_list_part3_3938(self, all_results):
        """
        Test LIST-PART3-3938: List item: **"In Progress"**: Implementation ongoing mit definierten Business-Mi
        Priority: MEDIUM
        """
        assert "LIST-PART3-3938" in all_results['results'], "Rule LIST-PART3-3938 missing"
        result = all_results['results']["LIST-PART3-3938"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART3-3938 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART3-3938 failed"


    def test_rule_list_part3_3939(self, all_results):
        """
        Test LIST-PART3-3939: List item: **"Certified"**: Externe Audits bestanden mit gültigem Zertifikat (Na
        Priority: MEDIUM
        """
        assert "LIST-PART3-3939" in all_results['results'], "Rule LIST-PART3-3939 missing"
        result = all_results['results']["LIST-PART3-3939"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART3-3939 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART3-3939 failed"


    def test_rule_list_part3_3940(self, all_results):
        """
        Test LIST-PART3-3940: List item: **"Deprecated"**: Standard geplant für Ersetzung mit Business-Migrati
        Priority: HIGH
        """
        assert "LIST-PART3-3940" in all_results['results'], "Rule LIST-PART3-3940 missing"
        result = all_results['results']["LIST-PART3-3940"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "HIGH" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART3-3940 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART3-3940 failed"


    def test_rule_list_part3_3941(self, all_results):
        """
        Test LIST-PART3-3941: List item: *KRITISCH:** Alle Badge-Claims, Scores und Compliance-Status sind nur
        Priority: CRITICAL
        """
        assert "LIST-PART3-3941" in all_results['results'], "Rule LIST-PART3-3941 missing"
        result = all_results['results']["LIST-PART3-3941"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART3-3941 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART3-3941 failed"


    def test_rule_kv_part3_3942(self, all_results):
        """
        Test KV-PART3-3942: version: "1.0"
        Priority: MEDIUM
        """
        assert "KV-PART3-3942" in all_results['results'], "Rule KV-PART3-3942 missing"
        result = all_results['results']["KV-PART3-3942"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART3-3942 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART3-3942 failed"


    def test_rule_kv_part3_3943(self, all_results):
        """
        Test KV-PART3-3943: date: "2025-09-21"
        Priority: MEDIUM
        """
        assert "KV-PART3-3943" in all_results['results'], "Rule KV-PART3-3943 missing"
        result = all_results['results']["KV-PART3-3943"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART3-3943 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART3-3943 failed"


    def test_rule_kv_part3_3944(self, all_results):
        """
        Test KV-PART3-3944: deprecated: false
        Priority: MEDIUM
        """
        assert "KV-PART3-3944" in all_results['results'], "Rule KV-PART3-3944 missing"
        result = all_results['results']["KV-PART3-3944"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART3-3944 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART3-3944 failed"


    def test_rule_kv_part3_3945(self, all_results):
        """
        Test KV-PART3-3945: classification: "CONFIDENTIAL - Security Operations"
        Priority: CRITICAL
        """
        assert "KV-PART3-3945" in all_results['results'], "Rule KV-PART3-3945 missing"
        result = all_results['results']["KV-PART3-3945"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART3-3945 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART3-3945 failed"


    def test_rule_kv_part3_3946(self, all_results):
        """
        Test KV-PART3-3946: canonical_path: "02_audit_logging/quarantine/singleton/quarantine_store/"
        Priority: MEDIUM
        """
        assert "KV-PART3-3946" in all_results['results'], "Rule KV-PART3-3946 missing"
        result = all_results['results']["KV-PART3-3946"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART3-3946 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART3-3946 failed"


    def test_rule_kv_part3_3947(self, all_results):
        """
        Test KV-PART3-3947: staging: "02_audit_logging/quarantine/singleton/quarantine_store/staging/"
        Priority: MEDIUM
        """
        assert "KV-PART3-3947" in all_results['results'], "Rule KV-PART3-3947 missing"
        result = all_results['results']["KV-PART3-3947"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART3-3947 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART3-3947 failed"


    def test_rule_kv_part3_3948(self, all_results):
        """
        Test KV-PART3-3948: triage: "02_audit_logging/quarantine/singleton/quarantine_store/triage/"
        Priority: MEDIUM
        """
        assert "KV-PART3-3948" in all_results['results'], "Rule KV-PART3-3948 missing"
        result = all_results['results']["KV-PART3-3948"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART3-3948 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART3-3948 failed"


    def test_rule_kv_part3_3949(self, all_results):
        """
        Test KV-PART3-3949: hash_buckets: "02_audit_logging/quarantine/singleton/quarantine_store/hash_bucke
        Priority: MEDIUM
        """
        assert "KV-PART3-3949" in all_results['results'], "Rule KV-PART3-3949 missing"
        result = all_results['results']["KV-PART3-3949"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART3-3949 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART3-3949 failed"


    def test_rule_kv_part3_3950(self, all_results):
        """
        Test KV-PART3-3950: quarantined: "02_audit_logging/quarantine/singleton/quarantine_store/quarantined
        Priority: MEDIUM
        """
        assert "KV-PART3-3950" in all_results['results'], "Rule KV-PART3-3950 missing"
        result = all_results['results']["KV-PART3-3950"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART3-3950 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART3-3950 failed"


    def test_rule_kv_part3_3951(self, all_results):
        """
        Test KV-PART3-3951: processing: "02_audit_logging/quarantine/processing/"
        Priority: MEDIUM
        """
        assert "KV-PART3-3951" in all_results['results'], "Rule KV-PART3-3951 missing"
        result = all_results['results']["KV-PART3-3951"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART3-3951 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART3-3951 failed"


    def test_rule_kv_part3_3952(self, all_results):
        """
        Test KV-PART3-3952: retention: "02_audit_logging/quarantine/retention/"
        Priority: MEDIUM
        """
        assert "KV-PART3-3952" in all_results['results'], "Rule KV-PART3-3952 missing"
        result = all_results['results']["KV-PART3-3952"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART3-3952 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART3-3952 failed"


    def test_rule_kv_part3_3953(self, all_results):
        """
        Test KV-PART3-3953: hash_ledger: "02_audit_logging/quarantine/hash_ledger/"
        Priority: MEDIUM
        """
        assert "KV-PART3-3953" in all_results['results'], "Rule KV-PART3-3953 missing"
        result = all_results['results']["KV-PART3-3953"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART3-3953 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART3-3953 failed"


    def test_rule_kv_part3_3954(self, all_results):
        """
        Test KV-PART3-3954: evidence_path: "23_compliance/evidence/malware_quarantine_hashes/"
        Priority: CRITICAL
        """
        assert "KV-PART3-3954" in all_results['results'], "Rule KV-PART3-3954 missing"
        result = all_results['results']["KV-PART3-3954"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART3-3954 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART3-3954 failed"


    def test_rule_kv_part3_3955(self, all_results):
        """
        Test KV-PART3-3955: hash_ledger_export: "23_compliance/evidence/malware_quarantine_hashes/quarantine
        Priority: CRITICAL
        """
        assert "KV-PART3-3955" in all_results['results'], "Rule KV-PART3-3955 missing"
        result = all_results['results']["KV-PART3-3955"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART3-3955 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART3-3955 failed"


    def test_rule_list_part3_3956(self, all_results):
        """
        Test LIST-PART3-3956: List item: "Verboten: jeder andere */quarantine/**-Pfad (inkl. 12_tooling/**, 15
        Priority: CRITICAL
        """
        assert "LIST-PART3-3956" in all_results['results'], "Rule LIST-PART3-3956 missing"
        result = all_results['results']["LIST-PART3-3956"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART3-3956 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART3-3956 failed"


    def test_rule_list_part3_3957(self, all_results):
        """
        Test LIST-PART3-3957: List item: "Nur der kanonische Pfad unter 02_audit_logging/quarantine/ ist zuläs
        Priority: MEDIUM
        """
        assert "LIST-PART3-3957" in all_results['results'], "Rule LIST-PART3-3957 missing"
        result = all_results['results']["LIST-PART3-3957"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART3-3957 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART3-3957 failed"


    def test_rule_list_part3_3958(self, all_results):
        """
        Test LIST-PART3-3958: List item: "Evidence nur als Hash-Checksums unter 23_compliance/evidence/"
        Priority: CRITICAL
        """
        assert "LIST-PART3-3958" in all_results['results'], "Rule LIST-PART3-3958 missing"
        result = all_results['results']["LIST-PART3-3958"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART3-3958 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART3-3958 failed"


    def test_rule_list_part3_3959(self, all_results):
        """
        Test LIST-PART3-3959: List item: "Tooling nur Client-Skripte unter 12_tooling/scripts/security/ (kein 
        Priority: CRITICAL
        """
        assert "LIST-PART3-3959" in all_results['results'], "Rule LIST-PART3-3959 missing"
        result = all_results['results']["LIST-PART3-3959"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART3-3959 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART3-3959 failed"


    def test_rule_kv_part3_3960(self, all_results):
        """
        Test KV-PART3-3960: staging_retention: "24 hours"
        Priority: MEDIUM
        """
        assert "KV-PART3-3960" in all_results['results'], "Rule KV-PART3-3960 missing"
        result = all_results['results']["KV-PART3-3960"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART3-3960 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART3-3960 failed"


    def test_rule_kv_part3_3961(self, all_results):
        """
        Test KV-PART3-3961: triage_retention: "7 days"
        Priority: MEDIUM
        """
        assert "KV-PART3-3961" in all_results['results'], "Rule KV-PART3-3961 missing"
        result = all_results['results']["KV-PART3-3961"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART3-3961 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART3-3961 failed"


    def test_rule_kv_part3_3962(self, all_results):
        """
        Test KV-PART3-3962: quarantined_retention: "30 days"
        Priority: MEDIUM
        """
        assert "KV-PART3-3962" in all_results['results'], "Rule KV-PART3-3962 missing"
        result = all_results['results']["KV-PART3-3962"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART3-3962 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART3-3962 failed"


    def test_rule_kv_part3_3963(self, all_results):
        """
        Test KV-PART3-3963: hash_evidence_retention: "permanent"
        Priority: MEDIUM
        """
        assert "KV-PART3-3963" in all_results['results'], "Rule KV-PART3-3963 missing"
        result = all_results['results']["KV-PART3-3963"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART3-3963 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART3-3963 failed"


    def test_rule_kv_part3_3964(self, all_results):
        """
        Test KV-PART3-3964: read_only_quarantine: true
        Priority: MEDIUM
        """
        assert "KV-PART3-3964" in all_results['results'], "Rule KV-PART3-3964 missing"
        result = all_results['results']["KV-PART3-3964"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART3-3964 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART3-3964 failed"


    def test_rule_kv_part3_3965(self, all_results):
        """
        Test KV-PART3-3965: hash_verification: "SHA256 + Blake3"
        Priority: MEDIUM
        """
        assert "KV-PART3-3965" in all_results['results'], "Rule KV-PART3-3965 missing"
        result = all_results['results']["KV-PART3-3965"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART3-3965 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART3-3965 failed"


    def test_rule_kv_part3_3966(self, all_results):
        """
        Test KV-PART3-3966: evidence_immutable: true
        Priority: MEDIUM
        """
        assert "KV-PART3-3966" in all_results['results'], "Rule KV-PART3-3966 missing"
        result = all_results['results']["KV-PART3-3966"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART3-3966 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART3-3966 failed"


    def test_rule_kv_part3_3967(self, all_results):
        """
        Test KV-PART3-3967: worm_compliance: true
        Priority: CRITICAL
        """
        assert "KV-PART3-3967" in all_results['results'], "Rule KV-PART3-3967 missing"
        result = all_results['results']["KV-PART3-3967"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule KV-PART3-3967 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule KV-PART3-3967 failed"


    def test_rule_list_part3_3968(self, all_results):
        """
        Test LIST-PART3-3968: List item: *Public Evidence:** Badge status, test logs, structure validation res
        Priority: MEDIUM
        """
        assert "LIST-PART3-3968" in all_results['results'], "Rule LIST-PART3-3968 missing"
        result = all_results['results']["LIST-PART3-3968"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART3-3968 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART3-3968 failed"


    def test_rule_list_part3_3969(self, all_results):
        """
        Test LIST-PART3-3969: List item: *Private Evidence:** Internal audit reports, business assessments, re
        Priority: MEDIUM
        """
        assert "LIST-PART3-3969" in all_results['results'], "Rule LIST-PART3-3969 missing"
        result = all_results['results']["LIST-PART3-3969"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART3-3969 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART3-3969 failed"


    def test_rule_list_part3_3970(self, all_results):
        """
        Test LIST-PART3-3970: List item: *Public Mappings:** General regulatory awareness (OpenCore export für
        Priority: MEDIUM
        """
        assert "LIST-PART3-3970" in all_results['results'], "Rule LIST-PART3-3970 missing"
        result = all_results['results']["LIST-PART3-3970"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART3-3970 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART3-3970 failed"


    def test_rule_list_part3_3971(self, all_results):
        """
        Test LIST-PART3-3971: List item: *Private Mappings:** Full gap analyses, business roadmaps, customer r
        Priority: MEDIUM
        """
        assert "LIST-PART3-3971" in all_results['results'], "Rule LIST-PART3-3971 missing"
        result = all_results['results']["LIST-PART3-3971"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART3-3971 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART3-3971 failed"


    def test_rule_list_part3_3972(self, all_results):
        """
        Test LIST-PART3-3972: List item: *Internal Reviews:** Monthly, quarterly, semi-annual compliance asses
        Priority: CRITICAL
        """
        assert "LIST-PART3-3972" in all_results['results'], "Rule LIST-PART3-3972 missing"
        result = all_results['results']["LIST-PART3-3972"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART3-3972 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART3-3972 failed"


    def test_rule_list_part3_3973(self, all_results):
        """
        Test LIST-PART3-3973: List item: *External Reviews:** 6-monthly independent validations mit Confidenti
        Priority: MEDIUM
        """
        assert "LIST-PART3-3973" in all_results['results'], "Rule LIST-PART3-3973 missing"
        result = all_results['results']["LIST-PART3-3973"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART3-3973 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART3-3973 failed"


    def test_rule_list_part3_3974(self, all_results):
        """
        Test LIST-PART3-3974: List item: *Anti-Gaming Evidence:** Circular dependency logs, integrity validati
        Priority: MEDIUM
        """
        assert "LIST-PART3-3974" in all_results['results'], "Rule LIST-PART3-3974 missing"
        result = all_results['results']["LIST-PART3-3974"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART3-3974 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART3-3974 failed"


    def test_rule_list_part3_3975(self, all_results):
        """
        Test LIST-PART3-3975: List item: *Business Intelligence:** Competitive analysis, market access assessm
        Priority: MEDIUM
        """
        assert "LIST-PART3-3975" in all_results['results'], "Rule LIST-PART3-3975 missing"
        result = all_results['results']["LIST-PART3-3975"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART3-3975 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART3-3975 failed"


    def test_rule_list_part3_3976(self, all_results):
        """
        Test LIST-PART3-3976: List item: *Governance Framework:** Maintainer definitions, backup procedures, s
        Priority: MEDIUM
        """
        assert "LIST-PART3-3976" in all_results['results'], "Rule LIST-PART3-3976 missing"
        result = all_results['results']["LIST-PART3-3976"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART3-3976 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART3-3976 failed"


    def test_rule_list_part3_3977(self, all_results):
        """
        Test LIST-PART3-3977: List item: *Community Integration:** Issue templates, contribution guidelines (p
        Priority: MEDIUM
        """
        assert "LIST-PART3-3977" in all_results['results'], "Rule LIST-PART3-3977 missing"
        result = all_results['results']["LIST-PART3-3977"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART3-3977 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART3-3977 failed"


    def test_rule_list_part3_3978(self, all_results):
        """
        Test LIST-PART3-3978: List item: *Version Management:** Deprecation tracking, migration paths, compati
        Priority: MEDIUM
        """
        assert "LIST-PART3-3978" in all_results['results'], "Rule LIST-PART3-3978 missing"
        result = all_results['results']["LIST-PART3-3978"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART3-3978 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART3-3978 failed"


    def test_rule_list_part3_3979(self, all_results):
        """
        Test LIST-PART3-3979: List item: *Enterprise Controls:** Business confidentiality, competitive advanta
        Priority: CRITICAL
        """
        assert "LIST-PART3-3979" in all_results['results'], "Rule LIST-PART3-3979 missing"
        result = all_results['results']["LIST-PART3-3979"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART3-3979 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART3-3979 failed"


    def test_rule_list_part3_3980(self, all_results):
        """
        Test LIST-PART3-3980: List item: *Token Framework:** Complete utility token framework with legal safe 
        Priority: CRITICAL
        """
        assert "LIST-PART3-3980" in all_results['results'], "Rule LIST-PART3-3980 missing"
        result = all_results['results']["LIST-PART3-3980"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART3-3980 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART3-3980 failed"


    def test_rule_list_part3_3981(self, all_results):
        """
        Test LIST-PART3-3981: List item: *Internationalization:** Multi-language support with business localiz
        Priority: MEDIUM
        """
        assert "LIST-PART3-3981" in all_results['results'], "Rule LIST-PART3-3981 missing"
        result = all_results['results']["LIST-PART3-3981"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART3-3981 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART3-3981 failed"


    def test_rule_list_part3_3982(self, all_results):
        """
        Test LIST-PART3-3982: List item: *Global Market Strategy:** Comprehensive jurisdictional coverage and 
        Priority: MEDIUM
        """
        assert "LIST-PART3-3982" in all_results['results'], "Rule LIST-PART3-3982 missing"
        result = all_results['results']["LIST-PART3-3982"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART3-3982 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART3-3982 failed"


    def test_rule_list_part3_3983(self, all_results):
        """
        Test LIST-PART3-3983: List item: *✅ SSID Enhanced Enterprise Structure v4.1:** Private + Business-Read
        Priority: CRITICAL
        """
        assert "LIST-PART3-3983" in all_results['results'], "Rule LIST-PART3-3983 missing"
        result = all_results['results']["LIST-PART3-3983"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART3-3983 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART3-3983 failed"


    def test_rule_list_part3_3984(self, all_results):
        """
        Test LIST-PART3-3984: List item: *Score-Ziel: 100/100** – Alle Kriterien grün ✅ + Enterprise Gaming-Re
        Priority: MEDIUM
        """
        assert "LIST-PART3-3984" in all_results['results'], "Rule LIST-PART3-3984 missing"
        result = all_results['results']["LIST-PART3-3984"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART3-3984 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART3-3984 failed"


    def test_rule_list_part3_3985(self, all_results):
        """
        Test LIST-PART3-3985: List item: *Internal Purpose:** Maximize compliance coverage, business advantage
        Priority: CRITICAL
        """
        assert "LIST-PART3-3985" in all_results['results'], "Rule LIST-PART3-3985 missing"
        result = all_results['results']["LIST-PART3-3985"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART3-3985 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART3-3985 failed"


    def test_rule_list_part3_3986(self, all_results):
        """
        Test LIST-PART3-3986: List item: *Enhancement Status:** All OpenCore improvements integrated while pre
        Priority: CRITICAL
        """
        assert "LIST-PART3-3986" in all_results['results'], "Rule LIST-PART3-3986 missing"
        result = all_results['results']["LIST-PART3-3986"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART3-3986 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART3-3986 failed"


    def test_rule_list_part3_3987(self, all_results):
        """
        Test LIST-PART3-3987: List item: *Innovation & Future-Proofing:**
        Priority: MEDIUM
        """
        assert "LIST-PART3-3987" in all_results['results'], "Rule LIST-PART3-3987 missing"
        result = all_results['results']["LIST-PART3-3987"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART3-3987 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART3-3987 failed"


    def test_rule_list_part3_3988(self, all_results):
        """
        Test LIST-PART3-3988: List item: ✅ AI/ML-Ready Compliance Architecture with Enterprise LLM Integration
        Priority: CRITICAL
        """
        assert "LIST-PART3-3988" in all_results['results'], "Rule LIST-PART3-3988 missing"
        result = all_results['results']["LIST-PART3-3988"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART3-3988 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART3-3988 failed"


    def test_rule_list_part3_3989(self, all_results):
        """
        Test LIST-PART3-3989: List item: ✅ API & Data Portability Framework with Enterprise Extensions
        Priority: MEDIUM
        """
        assert "LIST-PART3-3989" in all_results['results'], "Rule LIST-PART3-3989 missing"
        result = all_results['results']["LIST-PART3-3989"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART3-3989 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART3-3989 failed"


    def test_rule_list_part3_3990(self, all_results):
        """
        Test LIST-PART3-3990: List item: ✅ Next-Generation Audit Chain with Private Blockchain Support
        Priority: MEDIUM
        """
        assert "LIST-PART3-3990" in all_results['results'], "Rule LIST-PART3-3990 missing"
        result = all_results['results']["LIST-PART3-3990"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART3-3990 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART3-3990 failed"


    def test_rule_list_part3_3991(self, all_results):
        """
        Test LIST-PART3-3991: List item: ✅ Quantum-Resistant Cryptography with Business Continuity
        Priority: MEDIUM
        """
        assert "LIST-PART3-3991" in all_results['results'], "Rule LIST-PART3-3991 missing"
        result = all_results['results']["LIST-PART3-3991"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART3-3991 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART3-3991 failed"


    def test_rule_list_part3_3992(self, all_results):
        """
        Test LIST-PART3-3992: List item: *Social & Ecosystem Compatibility:**
        Priority: MEDIUM
        """
        assert "LIST-PART3-3992" in all_results['results'], "Rule LIST-PART3-3992 missing"
        result = all_results['results']["LIST-PART3-3992"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART3-3992 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART3-3992 failed"


    def test_rule_list_part3_3993(self, all_results):
        """
        Test LIST-PART3-3993: List item: ✅ Diversity & Inclusion Standards with Market Expansion Strategy
        Priority: HIGH
        """
        assert "LIST-PART3-3993" in all_results['results'], "Rule LIST-PART3-3993 missing"
        result = all_results['results']["LIST-PART3-3993"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "HIGH" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART3-3993 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART3-3993 failed"


    def test_rule_list_part3_3994(self, all_results):
        """
        Test LIST-PART3-3994: List item: ✅ ESG & Sustainability Integration with Business ROI Tracking
        Priority: MEDIUM
        """
        assert "LIST-PART3-3994" in all_results['results'], "Rule LIST-PART3-3994 missing"
        result = all_results['results']["LIST-PART3-3994"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART3-3994 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART3-3994 failed"


    def test_rule_list_part3_3995(self, all_results):
        """
        Test LIST-PART3-3995: List item: ✅ Multi-Sector Compatibility with Revenue Potential Analysis
        Priority: MEDIUM
        """
        assert "LIST-PART3-3995" in all_results['results'], "Rule LIST-PART3-3995 missing"
        result = all_results['results']["LIST-PART3-3995"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART3-3995 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART3-3995 failed"


    def test_rule_list_part3_3996(self, all_results):
        """
        Test LIST-PART3-3996: List item: ✅ DAO Governance Compatibility with Enterprise Stakeholder Rights
        Priority: MEDIUM
        """
        assert "LIST-PART3-3996" in all_results['results'], "Rule LIST-PART3-3996 missing"
        result = all_results['results']["LIST-PART3-3996"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART3-3996 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART3-3996 failed"


    def test_rule_list_part3_3997(self, all_results):
        """
        Test LIST-PART3-3997: List item: *Legal Excellence:**
        Priority: CRITICAL
        """
        assert "LIST-PART3-3997" in all_results['results'], "Rule LIST-PART3-3997 missing"
        result = all_results['results']["LIST-PART3-3997"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART3-3997 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART3-3997 failed"


    def test_rule_list_part3_3998(self, all_results):
        """
        Test LIST-PART3-3998: List item: ✅ Comprehensive Legal & Licensing Framework with Enterprise SLAs
        Priority: CRITICAL
        """
        assert "LIST-PART3-3998" in all_results['results'], "Rule LIST-PART3-3998 missing"
        result = all_results['results']["LIST-PART3-3998"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART3-3998 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART3-3998 failed"


    def test_rule_list_part3_3999(self, all_results):
        """
        Test LIST-PART3-3999: List item: ✅ Jurisdiction & Export Compliance with Multi-Market Support
        Priority: CRITICAL
        """
        assert "LIST-PART3-3999" in all_results['results'], "Rule LIST-PART3-3999 missing"
        result = all_results['results']["LIST-PART3-3999"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART3-3999 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART3-3999 failed"


    def test_rule_list_part3_4000(self, all_results):
        """
        Test LIST-PART3-4000: List item: ✅ Liability & Safe Harbor Framework with Enterprise Protections
        Priority: MEDIUM
        """
        assert "LIST-PART3-4000" in all_results['results'], "Rule LIST-PART3-4000 missing"
        result = all_results['results']["LIST-PART3-4000"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART3-4000 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART3-4000 failed"


    def test_rule_list_part3_4001(self, all_results):
        """
        Test LIST-PART3-4001: List item: ✅ SSID Token Enterprise Framework with Institutional Features
        Priority: MEDIUM
        """
        assert "LIST-PART3-4001" in all_results['results'], "Rule LIST-PART3-4001 missing"
        result = all_results['results']["LIST-PART3-4001"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART3-4001 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART3-4001 failed"


    def test_rule_list_part3_4002(self, all_results):
        """
        Test LIST-PART3-4002: List item: *Technical Innovation:**
        Priority: MEDIUM
        """
        assert "LIST-PART3-4002" in all_results['results'], "Rule LIST-PART3-4002 missing"
        result = all_results['results']["LIST-PART3-4002"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART3-4002 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART3-4002 failed"


    def test_rule_list_part3_4003(self, all_results):
        """
        Test LIST-PART3-4003: List item: ✅ Multi-Repository & Ecosystem Integration with Enterprise Architectu
        Priority: MEDIUM
        """
        assert "LIST-PART3-4003" in all_results['results'], "Rule LIST-PART3-4003 missing"
        result = all_results['results']["LIST-PART3-4003"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART3-4003 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART3-4003 failed"


    def test_rule_list_part3_4004(self, all_results):
        """
        Test LIST-PART3-4004: List item: ✅ Compliance-as-Code Integration with Custom Policy Engines
        Priority: CRITICAL
        """
        assert "LIST-PART3-4004" in all_results['results'], "Rule LIST-PART3-4004 missing"
        result = all_results['results']["LIST-PART3-4004"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART3-4004 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART3-4004 failed"


    def test_rule_list_part3_4005(self, all_results):
        """
        Test LIST-PART3-4005: List item: ✅ External Tool Integration with Enterprise GRC Platforms
        Priority: MEDIUM
        """
        assert "LIST-PART3-4005" in all_results['results'], "Rule LIST-PART3-4005 missing"
        result = all_results['results']["LIST-PART3-4005"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART3-4005 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART3-4005 failed"


    def test_rule_list_part3_4006(self, all_results):
        """
        Test LIST-PART3-4006: List item: ✅ Zero-Knowledge Proofs for Business Data Protection
        Priority: MEDIUM
        """
        assert "LIST-PART3-4006" in all_results['results'], "Rule LIST-PART3-4006 missing"
        result = all_results['results']["LIST-PART3-4006"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART3-4006 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART3-4006 failed"


    def test_rule_list_part3_4007(self, all_results):
        """
        Test LIST-PART3-4007: List item: *Documentation & UX Excellence:**
        Priority: MEDIUM
        """
        assert "LIST-PART3-4007" in all_results['results'], "Rule LIST-PART3-4007 missing"
        result = all_results['results']["LIST-PART3-4007"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART3-4007 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART3-4007 failed"


    def test_rule_list_part3_4008(self, all_results):
        """
        Test LIST-PART3-4008: List item: ✅ Visual Compliance Dashboard with Business Intelligence
        Priority: CRITICAL
        """
        assert "LIST-PART3-4008" in all_results['results'], "Rule LIST-PART3-4008 missing"
        result = all_results['results']["LIST-PART3-4008"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART3-4008 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART3-4008 failed"


    def test_rule_list_part3_4009(self, all_results):
        """
        Test LIST-PART3-4009: List item: ✅ Multi-Level Documentation Strategy with Executive Reporting
        Priority: MEDIUM
        """
        assert "LIST-PART3-4009" in all_results['results'], "Rule LIST-PART3-4009 missing"
        result = all_results['results']["LIST-PART3-4009"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART3-4009 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART3-4009 failed"


    def test_rule_list_part3_4010(self, all_results):
        """
        Test LIST-PART3-4010: List item: ✅ Progressive Disclosure with Business Context
        Priority: MEDIUM
        """
        assert "LIST-PART3-4010" in all_results['results'], "Rule LIST-PART3-4010 missing"
        result = all_results['results']["LIST-PART3-4010"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART3-4010 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART3-4010 failed"


    def test_rule_list_part3_4011(self, all_results):
        """
        Test LIST-PART3-4011: List item: ✅ Enterprise Accessibility (WCAG AAA) and Internationalization
        Priority: MEDIUM
        """
        assert "LIST-PART3-4011" in all_results['results'], "Rule LIST-PART3-4011 missing"
        result = all_results['results']["LIST-PART3-4011"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART3-4011 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART3-4011 failed"


    def test_rule_list_part3_4012(self, all_results):
        """
        Test LIST-PART3-4012: List item: *Risk Management & Security:**
        Priority: CRITICAL
        """
        assert "LIST-PART3-4012" in all_results['results'], "Rule LIST-PART3-4012 missing"
        result = all_results['results']["LIST-PART3-4012"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART3-4012 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART3-4012 failed"


    def test_rule_list_part3_4013(self, all_results):
        """
        Test LIST-PART3-4013: List item: ✅ Anti-Pattern Protection with Business Risk Assessment
        Priority: MEDIUM
        """
        assert "LIST-PART3-4013" in all_results['results'], "Rule LIST-PART3-4013 missing"
        result = all_results['results']["LIST-PART3-4013"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART3-4013 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART3-4013 failed"


    def test_rule_list_part3_4014(self, all_results):
        """
        Test LIST-PART3-4014: List item: ✅ Hidden Risk Monitoring with Competitive Intelligence
        Priority: MEDIUM
        """
        assert "LIST-PART3-4014" in all_results['results'], "Rule LIST-PART3-4014 missing"
        result = all_results['results']["LIST-PART3-4014"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART3-4014 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART3-4014 failed"


    def test_rule_list_part3_4015(self, all_results):
        """
        Test LIST-PART3-4015: List item: ✅ Escalation Procedures with Business Continuity
        Priority: MEDIUM
        """
        assert "LIST-PART3-4015" in all_results['results'], "Rule LIST-PART3-4015 missing"
        result = all_results['results']["LIST-PART3-4015"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART3-4015 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART3-4015 failed"


    def test_rule_list_part3_4016(self, all_results):
        """
        Test LIST-PART3-4016: List item: ✅ Regulatory Capture Prevention with Market Intelligence
        Priority: MEDIUM
        """
        assert "LIST-PART3-4016" in all_results['results'], "Rule LIST-PART3-4016 missing"
        result = all_results['results']["LIST-PART3-4016"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART3-4016 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART3-4016 failed"


    def test_rule_list_part3_4017(self, all_results):
        """
        Test LIST-PART3-4017: List item: *Community & Governance:**
        Priority: MEDIUM
        """
        assert "LIST-PART3-4017" in all_results['results'], "Rule LIST-PART3-4017 missing"
        result = all_results['results']["LIST-PART3-4017"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART3-4017 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART3-4017 failed"


    def test_rule_list_part3_4018(self, all_results):
        """
        Test LIST-PART3-4018: List item: ✅ Community Integration with Enterprise Separation
        Priority: MEDIUM
        """
        assert "LIST-PART3-4018" in all_results['results'], "Rule LIST-PART3-4018 missing"
        result = all_results['results']["LIST-PART3-4018"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART3-4018 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART3-4018 failed"


    def test_rule_list_part3_4019(self, all_results):
        """
        Test LIST-PART3-4019: List item: ✅ Issue Templates for Internal/External Contributions
        Priority: MEDIUM
        """
        assert "LIST-PART3-4019" in all_results['results'], "Rule LIST-PART3-4019 missing"
        result = all_results['results']["LIST-PART3-4019"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART3-4019 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART3-4019 failed"


    def test_rule_list_part3_4020(self, all_results):
        """
        Test LIST-PART3-4020: List item: ✅ Contribution Lifecycle with Business Impact Assessment
        Priority: MEDIUM
        """
        assert "LIST-PART3-4020" in all_results['results'], "Rule LIST-PART3-4020 missing"
        result = all_results['results']["LIST-PART3-4020"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART3-4020 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART3-4020 failed"


    def test_rule_list_part3_4021(self, all_results):
        """
        Test LIST-PART3-4021: List item: ✅ Governance Participation with Strategic Direction
        Priority: MEDIUM
        """
        assert "LIST-PART3-4021" in all_results['results'], "Rule LIST-PART3-4021 missing"
        result = all_results['results']["LIST-PART3-4021"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART3-4021 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART3-4021 failed"


    def test_rule_list_part3_4022(self, all_results):
        """
        Test LIST-PART3-4022: List item: *Token Framework & Economics:**
        Priority: MEDIUM
        """
        assert "LIST-PART3-4022" in all_results['results'], "Rule LIST-PART3-4022 missing"
        result = all_results['results']["LIST-PART3-4022"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART3-4022 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART3-4022 failed"


    def test_rule_list_part3_4023(self, all_results):
        """
        Test LIST-PART3-4023: List item: ✅ Complete Utility Token Framework with Legal Safe Harbor
        Priority: CRITICAL
        """
        assert "LIST-PART3-4023" in all_results['results'], "Rule LIST-PART3-4023 missing"
        result = all_results['results']["LIST-PART3-4023"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART3-4023 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART3-4023 failed"


    def test_rule_list_part3_4024(self, all_results):
        """
        Test LIST-PART3-4024: List item: ✅ Multi-Jurisdictional Compliance Strategy
        Priority: CRITICAL
        """
        assert "LIST-PART3-4024" in all_results['results'], "Rule LIST-PART3-4024 missing"
        result = all_results['results']["LIST-PART3-4024"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART3-4024 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART3-4024 failed"


    def test_rule_list_part3_4025(self, all_results):
        """
        Test LIST-PART3-4025: List item: ✅ Deflationary Economics with Business Utility
        Priority: MEDIUM
        """
        assert "LIST-PART3-4025" in all_results['results'], "Rule LIST-PART3-4025 missing"
        result = all_results['results']["LIST-PART3-4025"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART3-4025 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART3-4025 failed"


    def test_rule_list_part3_4026(self, all_results):
        """
        Test LIST-PART3-4026: List item: ✅ DAO Governance Integration with Enterprise Controls
        Priority: MEDIUM
        """
        assert "LIST-PART3-4026" in all_results['results'], "Rule LIST-PART3-4026 missing"
        result = all_results['results']["LIST-PART3-4026"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART3-4026 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART3-4026 failed"


    def test_rule_list_part3_4027(self, all_results):
        """
        Test LIST-PART3-4027: List item: *Global Market Strategy:**
        Priority: MEDIUM
        """
        assert "LIST-PART3-4027" in all_results['results'], "Rule LIST-PART3-4027 missing"
        result = all_results['results']["LIST-PART3-4027"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART3-4027 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART3-4027 failed"


    def test_rule_list_part3_4028(self, all_results):
        """
        Test LIST-PART3-4028: List item: ✅ Comprehensive Jurisdictional Coverage Matrix
        Priority: MEDIUM
        """
        assert "LIST-PART3-4028" in all_results['results'], "Rule LIST-PART3-4028 missing"
        result = all_results['results']["LIST-PART3-4028"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART3-4028 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART3-4028 failed"


    def test_rule_list_part3_4029(self, all_results):
        """
        Test LIST-PART3-4029: List item: ✅ Market Entry Strategy with Business Prioritization
        Priority: MEDIUM
        """
        assert "LIST-PART3-4029" in all_results['results'], "Rule LIST-PART3-4029 missing"
        result = all_results['results']["LIST-PART3-4029"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART3-4029 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART3-4029 failed"


    def test_rule_list_part3_4030(self, all_results):
        """
        Test LIST-PART3-4030: List item: ✅ Regulatory Intelligence and Monitoring Framework
        Priority: MEDIUM
        """
        assert "LIST-PART3-4030" in all_results['results'], "Rule LIST-PART3-4030 missing"
        result = all_results['results']["LIST-PART3-4030"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART3-4030 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART3-4030 failed"


    def test_rule_list_part3_4031(self, all_results):
        """
        Test LIST-PART3-4031: List item: ✅ Multi-Language Support with Cultural Localization
        Priority: MEDIUM
        """
        assert "LIST-PART3-4031" in all_results['results'], "Rule LIST-PART3-4031 missing"
        result = all_results['results']["LIST-PART3-4031"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART3-4031 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART3-4031 failed"


    def test_rule_list_part3_4032(self, all_results):
        """
        Test LIST-PART3-4032: List item: *World-Class Status Achievement:**
        Priority: MEDIUM
        """
        assert "LIST-PART3-4032" in all_results['results'], "Rule LIST-PART3-4032 missing"
        result = all_results['results']["LIST-PART3-4032"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART3-4032 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART3-4032 failed"


    def test_rule_list_part3_4033(self, all_results):
        """
        Test LIST-PART3-4033: List item: Best practices from Fortune 500 governance
        Priority: MEDIUM
        """
        assert "LIST-PART3-4033" in all_results['results'], "Rule LIST-PART3-4033 missing"
        result = all_results['results']["LIST-PART3-4033"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART3-4033 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART3-4033 failed"


    def test_rule_list_part3_4034(self, all_results):
        """
        Test LIST-PART3-4034: List item: Regulatory compliance across all major jurisdictions
        Priority: CRITICAL
        """
        assert "LIST-PART3-4034" in all_results['results'], "Rule LIST-PART3-4034 missing"
        result = all_results['results']["LIST-PART3-4034"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART3-4034 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART3-4034 failed"


    def test_rule_list_part3_4035(self, all_results):
        """
        Test LIST-PART3-4035: List item: Community management excellence
        Priority: MEDIUM
        """
        assert "LIST-PART3-4035" in all_results['results'], "Rule LIST-PART3-4035 missing"
        result = all_results['results']["LIST-PART3-4035"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART3-4035 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART3-4035 failed"


    def test_rule_list_part3_4036(self, all_results):
        """
        Test LIST-PART3-4036: List item: Legal protection frameworks
        Priority: CRITICAL
        """
        assert "LIST-PART3-4036" in all_results['results'], "Rule LIST-PART3-4036 missing"
        result = all_results['results']["LIST-PART3-4036"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART3-4036 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART3-4036 failed"


    def test_rule_list_part3_4037(self, all_results):
        """
        Test LIST-PART3-4037: List item: Innovative technology integration (AI/ML, Blockchain, Quantum-Ready)
        Priority: MEDIUM
        """
        assert "LIST-PART3-4037" in all_results['results'], "Rule LIST-PART3-4037 missing"
        result = all_results['results']["LIST-PART3-4037"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART3-4037 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART3-4037 failed"


    def test_rule_list_part3_4038(self, all_results):
        """
        Test LIST-PART3-4038: List item: Business intelligence and competitive advantage protection
        Priority: MEDIUM
        """
        assert "LIST-PART3-4038" in all_results['results'], "Rule LIST-PART3-4038 missing"
        result = all_results['results']["LIST-PART3-4038"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART3-4038 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART3-4038 failed"


    def test_rule_list_part3_4039(self, all_results):
        """
        Test LIST-PART3-4039: List item: Enterprise-grade security and risk management
        Priority: CRITICAL
        """
        assert "LIST-PART3-4039" in all_results['results'], "Rule LIST-PART3-4039 missing"
        result = all_results['results']["LIST-PART3-4039"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART3-4039 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART3-4039 failed"


    def test_rule_list_part3_4040(self, all_results):
        """
        Test LIST-PART3-4040: List item: World-class documentation and user experience
        Priority: MEDIUM
        """
        assert "LIST-PART3-4040" in all_results['results'], "Rule LIST-PART3-4040 missing"
        result = all_results['results']["LIST-PART3-4040"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART3-4040 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART3-4040 failed"


    def test_rule_list_part3_4041(self, all_results):
        """
        Test LIST-PART3-4041: List item: Social responsibility and sustainability integration
        Priority: MEDIUM
        """
        assert "LIST-PART3-4041" in all_results['results'], "Rule LIST-PART3-4041 missing"
        result = all_results['results']["LIST-PART3-4041"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART3-4041 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART3-4041 failed"


    def test_rule_list_part3_4042(self, all_results):
        """
        Test LIST-PART3-4042: List item: Complete token framework with legal protections
        Priority: CRITICAL
        """
        assert "LIST-PART3-4042" in all_results['results'], "Rule LIST-PART3-4042 missing"
        result = all_results['results']["LIST-PART3-4042"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART3-4042 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART3-4042 failed"


    def test_rule_list_part3_4043(self, all_results):
        """
        Test LIST-PART3-4043: List item: Global market expansion capabilities
        Priority: MEDIUM
        """
        assert "LIST-PART3-4043" in all_results['results'], "Rule LIST-PART3-4043 missing"
        result = all_results['results']["LIST-PART3-4043"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART3-4043 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART3-4043 failed"


    def test_rule_list_part3_4044(self, all_results):
        """
        Test LIST-PART3-4044: List item: Multi-language support and cultural localization
        Priority: MEDIUM
        """
        assert "LIST-PART3-4044" in all_results['results'], "Rule LIST-PART3-4044 missing"
        result = all_results['results']["LIST-PART3-4044"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART3-4044 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART3-4044 failed"


    def test_rule_list_part3_4045(self, all_results):
        """
        Test LIST-PART3-4045: List item: *Suitable for Adoption by:**
        Priority: MEDIUM
        """
        assert "LIST-PART3-4045" in all_results['results'], "Rule LIST-PART3-4045 missing"
        result = all_results['results']["LIST-PART3-4045"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART3-4045 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART3-4045 failed"


    def test_rule_list_part3_4046(self, all_results):
        """
        Test LIST-PART3-4046: List item: Fortune 500 companies and multinational corporations
        Priority: MEDIUM
        """
        assert "LIST-PART3-4046" in all_results['results'], "Rule LIST-PART3-4046 missing"
        result = all_results['results']["LIST-PART3-4046"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART3-4046 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART3-4046 failed"


    def test_rule_list_part3_4047(self, all_results):
        """
        Test LIST-PART3-4047: List item: Government agencies and public sector organizations
        Priority: MEDIUM
        """
        assert "LIST-PART3-4047" in all_results['results'], "Rule LIST-PART3-4047 missing"
        result = all_results['results']["LIST-PART3-4047"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART3-4047 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART3-4047 failed"


    def test_rule_list_part3_4048(self, all_results):
        """
        Test LIST-PART3-4048: List item: Academic institutions and research organizations
        Priority: MEDIUM
        """
        assert "LIST-PART3-4048" in all_results['results'], "Rule LIST-PART3-4048 missing"
        result = all_results['results']["LIST-PART3-4048"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART3-4048 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART3-4048 failed"


    def test_rule_list_part3_4049(self, all_results):
        """
        Test LIST-PART3-4049: List item: NGOs and non-profit organizations
        Priority: MEDIUM
        """
        assert "LIST-PART3-4049" in all_results['results'], "Rule LIST-PART3-4049 missing"
        result = all_results['results']["LIST-PART3-4049"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART3-4049 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART3-4049 failed"


    def test_rule_list_part3_4050(self, all_results):
        """
        Test LIST-PART3-4050: List item: DAOs and decentralized organizations
        Priority: MEDIUM
        """
        assert "LIST-PART3-4050" in all_results['results'], "Rule LIST-PART3-4050 missing"
        result = all_results['results']["LIST-PART3-4050"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART3-4050 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART3-4050 failed"


    def test_rule_list_part3_4051(self, all_results):
        """
        Test LIST-PART3-4051: List item: Financial institutions and regulated entities
        Priority: MEDIUM
        """
        assert "LIST-PART3-4051" in all_results['results'], "Rule LIST-PART3-4051 missing"
        result = all_results['results']["LIST-PART3-4051"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART3-4051 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART3-4051 failed"


    def test_rule_list_part3_4052(self, all_results):
        """
        Test LIST-PART3-4052: List item: Technology companies with global operations
        Priority: MEDIUM
        """
        assert "LIST-PART3-4052" in all_results['results'], "Rule LIST-PART3-4052 missing"
        result = all_results['results']["LIST-PART3-4052"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART3-4052 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART3-4052 failed"


    def test_rule_list_part3_4053(self, all_results):
        """
        Test LIST-PART3-4053: List item: Blockchain and cryptocurrency projects
        Priority: MEDIUM
        """
        assert "LIST-PART3-4053" in all_results['results'], "Rule LIST-PART3-4053 missing"
        result = all_results['results']["LIST-PART3-4053"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART3-4053 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART3-4053 failed"


    def test_rule_list_part3_4054(self, all_results):
        """
        Test LIST-PART3-4054: List item: Identity verification and authentication services
        Priority: MEDIUM
        """
        assert "LIST-PART3-4054" in all_results['results'], "Rule LIST-PART3-4054 missing"
        result = all_results['results']["LIST-PART3-4054"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART3-4054 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART3-4054 failed"


    def test_rule_list_part3_4055(self, all_results):
        """
        Test LIST-PART3-4055: List item: Any organization requiring world-class compliance and governance
        Priority: CRITICAL
        """
        assert "LIST-PART3-4055" in all_results['results'], "Rule LIST-PART3-4055 missing"
        result = all_results['results']["LIST-PART3-4055"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART3-4055 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART3-4055 failed"


    def test_rule_list_part3_4056(self, all_results):
        """
        Test LIST-PART3-4056: List item: *Enterprise Competitive Advantages:**
        Priority: MEDIUM
        """
        assert "LIST-PART3-4056" in all_results['results'], "Rule LIST-PART3-4056 missing"
        result = all_results['results']["LIST-PART3-4056"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART3-4056 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART3-4056 failed"


    def test_rule_list_part3_4057(self, all_results):
        """
        Test LIST-PART3-4057: List item: Regulatory moat through comprehensive compliance coverage
        Priority: CRITICAL
        """
        assert "LIST-PART3-4057" in all_results['results'], "Rule LIST-PART3-4057 missing"
        result = all_results['results']["LIST-PART3-4057"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART3-4057 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART3-4057 failed"


    def test_rule_list_part3_4058(self, all_results):
        """
        Test LIST-PART3-4058: List item: Time-to-market advantages in new jurisdictions
        Priority: MEDIUM
        """
        assert "LIST-PART3-4058" in all_results['results'], "Rule LIST-PART3-4058 missing"
        result = all_results['results']["LIST-PART3-4058"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART3-4058 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART3-4058 failed"


    def test_rule_list_part3_4059(self, all_results):
        """
        Test LIST-PART3-4059: List item: Cost reduction through automation and standardization
        Priority: HIGH
        """
        assert "LIST-PART3-4059" in all_results['results'], "Rule LIST-PART3-4059 missing"
        result = all_results['results']["LIST-PART3-4059"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "HIGH" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART3-4059 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART3-4059 failed"


    def test_rule_list_part3_4060(self, all_results):
        """
        Test LIST-PART3-4060: List item: Risk mitigation through proactive compliance management
        Priority: CRITICAL
        """
        assert "LIST-PART3-4060" in all_results['results'], "Rule LIST-PART3-4060 missing"
        result = all_results['results']["LIST-PART3-4060"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART3-4060 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART3-4060 failed"


    def test_rule_list_part3_4061(self, all_results):
        """
        Test LIST-PART3-4061: List item: Revenue protection through market access maintenance
        Priority: MEDIUM
        """
        assert "LIST-PART3-4061" in all_results['results'], "Rule LIST-PART3-4061 missing"
        result = all_results['results']["LIST-PART3-4061"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART3-4061 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART3-4061 failed"


    def test_rule_list_part3_4062(self, all_results):
        """
        Test LIST-PART3-4062: List item: Innovation enablement through future-ready architecture
        Priority: MEDIUM
        """
        assert "LIST-PART3-4062" in all_results['results'], "Rule LIST-PART3-4062 missing"
        result = all_results['results']["LIST-PART3-4062"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART3-4062 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART3-4062 failed"


    def test_rule_list_part3_4063(self, all_results):
        """
        Test LIST-PART3-4063: List item: Stakeholder confidence through transparency and accountability
        Priority: MEDIUM
        """
        assert "LIST-PART3-4063" in all_results['results'], "Rule LIST-PART3-4063 missing"
        result = all_results['results']["LIST-PART3-4063"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART3-4063 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART3-4063 failed"


    def test_rule_list_part3_4064(self, all_results):
        """
        Test LIST-PART3-4064: List item: Strategic positioning through regulatory leadership
        Priority: MEDIUM
        """
        assert "LIST-PART3-4064" in all_results['results'], "Rule LIST-PART3-4064 missing"
        result = all_results['results']["LIST-PART3-4064"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART3-4064 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART3-4064 failed"


    def test_rule_list_part3_4065(self, all_results):
        """
        Test LIST-PART3-4065: List item: Token framework providing sustainable business model
        Priority: MEDIUM
        """
        assert "LIST-PART3-4065" in all_results['results'], "Rule LIST-PART3-4065 missing"
        result = all_results['results']["LIST-PART3-4065"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART3-4065 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART3-4065 failed"


    def test_rule_list_part3_4066(self, all_results):
        """
        Test LIST-PART3-4066: List item: Global market access through comprehensive regulatory coverage
        Priority: MEDIUM
        """
        assert "LIST-PART3-4066" in all_results['results'], "Rule LIST-PART3-4066 missing"
        result = all_results['results']["LIST-PART3-4066"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART3-4066 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART3-4066 failed"


    def test_rule_list_part3_4067(self, all_results):
        """
        Test LIST-PART3-4067: List item: Multi-language support enabling worldwide expansion
        Priority: MEDIUM
        """
        assert "LIST-PART3-4067" in all_results['results'], "Rule LIST-PART3-4067 missing"
        result = all_results['results']["LIST-PART3-4067"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART3-4067 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART3-4067 failed"


    def test_rule_list_part3_4068(self, all_results):
        """
        Test LIST-PART3-4068: List item: Competitive intelligence protection through confidential frameworks
        Priority: MEDIUM
        """
        assert "LIST-PART3-4068" in all_results['results'], "Rule LIST-PART3-4068 missing"
        result = all_results['results']["LIST-PART3-4068"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART3-4068 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART3-4068 failed"


    def test_rule_list_part3_4069(self, all_results):
        """
        Test LIST-PART3-4069: List item: generated:* 2025-09-30T12:02:08Z
        Priority: MEDIUM
        """
        assert "LIST-PART3-4069" in all_results['results'], "Rule LIST-PART3-4069 missing"
        result = all_results['results']["LIST-PART3-4069"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART3-4069 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART3-4069 failed"


    def test_rule_list_part3_4070(self, all_results):
        """
        Test LIST-PART3-4070: List item: *Verarbeitung:**
        Priority: MEDIUM
        """
        assert "LIST-PART3-4070" in all_results['results'], "Rule LIST-PART3-4070 missing"
        result = all_results['results']["LIST-PART3-4070"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART3-4070 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART3-4070 failed"


    def test_rule_list_part3_4071(self, all_results):
        """
        Test LIST-PART3-4071: List item: *Evidenz & WORM:**
        Priority: MEDIUM
        """
        assert "LIST-PART3-4071" in all_results['results'], "Rule LIST-PART3-4071 missing"
        result = all_results['results']["LIST-PART3-4071"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART3-4071 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART3-4071 failed"


    def test_rule_list_part3_4072(self, all_results):
        """
        Test LIST-PART3-4072: List item: Jede Verarbeitung erzeugt einen Eintrag in `24_meta_orchestration/reg
        Priority: MEDIUM
        """
        assert "LIST-PART3-4072" in all_results['results'], "Rule LIST-PART3-4072 missing"
        result = all_results['results']["LIST-PART3-4072"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART3-4072 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART3-4072 failed"


    def test_rule_list_part3_4073(self, all_results):
        """
        Test LIST-PART3-4073: List item: SHA256 aller neuen Artefakte → `24_meta_orchestration/registry/logs/i
        Priority: MEDIUM
        """
        assert "LIST-PART3-4073" in all_results['results'], "Rule LIST-PART3-4073 missing"
        result = all_results['results']["LIST-PART3-4073"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART3-4073 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART3-4073 failed"


    def test_rule_list_part3_4074(self, all_results):
        """
        Test LIST-PART3-4074: List item: Hash-Kette → `24_meta_orchestration/registry/locks/hash_chain.json`
        Priority: MEDIUM
        """
        assert "LIST-PART3-4074" in all_results['results'], "Rule LIST-PART3-4074 missing"
        result = all_results['results']["LIST-PART3-4074"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART3-4074 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART3-4074 failed"


    def test_rule_list_part3_4075(self, all_results):
        """
        Test LIST-PART3-4075: List item: generated:* 2025-09-30T12:02:08Z
        Priority: MEDIUM
        """
        assert "LIST-PART3-4075" in all_results['results'], "Rule LIST-PART3-4075 missing"
        result = all_results['results']["LIST-PART3-4075"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART3-4075 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART3-4075 failed"


    def test_rule_list_part3_4076(self, all_results):
        """
        Test LIST-PART3-4076: List item: *Pflichtdateien (je Bereich):**
        Priority: CRITICAL
        """
        assert "LIST-PART3-4076" in all_results['results'], "Rule LIST-PART3-4076 missing"
        result = all_results['results']["LIST-PART3-4076"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART3-4076 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART3-4076 failed"


    def test_rule_list_part3_4077(self, all_results):
        """
        Test LIST-PART3-4077: List item: `module.yaml`, `README.md`, `docs/`, `src/`, `tests/` (Ebene 2 – für 
        Priority: MEDIUM
        """
        assert "LIST-PART3-4077" in all_results['results'], "Rule LIST-PART3-4077 missing"
        result = all_results['results']["LIST-PART3-4077"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART3-4077 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART3-4077 failed"


    def test_rule_list_part3_4078(self, all_results):
        """
        Test LIST-PART3-4078: List item: UI-Bereiche benötigen zusätzlich: `README.en-US.md`, `README.de-DE.md
        Priority: MEDIUM
        """
        assert "LIST-PART3-4078" in all_results['results'], "Rule LIST-PART3-4078 missing"
        result = all_results['results']["LIST-PART3-4078"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART3-4078 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART3-4078 failed"


    def test_rule_list_part3_4079(self, all_results):
        """
        Test LIST-PART3-4079: List item: generated:* 2025-09-30T12:02:08Z
        Priority: MEDIUM
        """
        assert "LIST-PART3-4079" in all_results['results'], "Rule LIST-PART3-4079 missing"
        result = all_results['results']["LIST-PART3-4079"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART3-4079 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART3-4079 failed"


    def test_rule_list_part3_4080(self, all_results):
        """
        Test LIST-PART3-4080: List item: `24_meta_orchestration/triggers/ci/gates/structure_lock_l3.py` → FAIL
        Priority: MEDIUM
        """
        assert "LIST-PART3-4080" in all_results['results'], "Rule LIST-PART3-4080 missing"
        result = all_results['results']["LIST-PART3-4080"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART3-4080 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART3-4080 failed"


    def test_rule_list_part3_4081(self, all_results):
        """
        Test LIST-PART3-4081: List item: Registry `{logs,locks,manifests}` nicht existiert
        Priority: MEDIUM
        """
        assert "LIST-PART3-4081" in all_results['results'], "Rule LIST-PART3-4081 missing"
        result = all_results['results']["LIST-PART3-4081"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART3-4081 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART3-4081 failed"


    def test_rule_list_part3_4082(self, all_results):
        """
        Test LIST-PART3-4082: List item: `module.yaml/README.md/docs/src/tests` in einem Modul fehlen
        Priority: MEDIUM
        """
        assert "LIST-PART3-4082" in all_results['results'], "Rule LIST-PART3-4082 missing"
        result = all_results['results']["LIST-PART3-4082"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART3-4082 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART3-4082 failed"


    def test_rule_list_part3_4083(self, all_results):
        """
        Test LIST-PART3-4083: List item: ein `disabled:` Pfad erstellt wurde (z. B. `zh/…`)
        Priority: MEDIUM
        """
        assert "LIST-PART3-4083" in all_results['results'], "Rule LIST-PART3-4083 missing"
        result = all_results['results']["LIST-PART3-4083"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART3-4083 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART3-4083 failed"


    def test_rule_list_part3_4084(self, all_results):
        """
        Test LIST-PART3-4084: List item: eine deklarierte `max_depth` überschritten wird oder Pfade fehlen
        Priority: MEDIUM
        """
        assert "LIST-PART3-4084" in all_results['results'], "Rule LIST-PART3-4084 missing"
        result = all_results['results']["LIST-PART3-4084"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART3-4084 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART3-4084 failed"


    def test_rule_list_part3_4085(self, all_results):
        """
        Test LIST-PART3-4085: List item: `23_compliance/tests/unit/test_structure_build.py` → vergleicht reale
        Priority: CRITICAL
        """
        assert "LIST-PART3-4085" in all_results['results'], "Rule LIST-PART3-4085 missing"
        result = all_results['results']["LIST-PART3-4085"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART3-4085 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART3-4085 failed"


    def test_rule_list_part3_4086(self, all_results):
        """
        Test LIST-PART3-4086: List item: generated:* 2025-09-30T12:05:53Z
        Priority: MEDIUM
        """
        assert "LIST-PART3-4086" in all_results['results'], "Rule LIST-PART3-4086 missing"
        result = all_results['results']["LIST-PART3-4086"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART3-4086 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART3-4086 failed"


    def test_rule_list_part3_4087(self, all_results):
        """
        Test LIST-PART3-4087: List item: **chat_ingest/**: von `registry/logs/` → **`registry/intake/chat_inge
        Priority: MEDIUM
        """
        assert "LIST-PART3-4087" in all_results['results'], "Rule LIST-PART3-4087 missing"
        result = all_results['results']["LIST-PART3-4087"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART3-4087 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART3-4087 failed"


    def test_rule_list_part3_4088(self, all_results):
        """
        Test LIST-PART3-4088: List item: **registry_audit.yaml**: von `registry/logs/` → **`23_compliance/evid
        Priority: CRITICAL
        """
        assert "LIST-PART3-4088" in all_results['results'], "Rule LIST-PART3-4088 missing"
        result = all_results['results']["LIST-PART3-4088"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART3-4088 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART3-4088 failed"


    def test_rule_list_part3_4089(self, all_results):
        """
        Test LIST-PART3-4089: List item: **integrity_checksums.json**: von `registry/logs/` → **`registry/mani
        Priority: MEDIUM
        """
        assert "LIST-PART3-4089" in all_results['results'], "Rule LIST-PART3-4089 missing"
        result = all_results['results']["LIST-PART3-4089"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART3-4089 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART3-4089 failed"


    def test_rule_list_part3_4090(self, all_results):
        """
        Test LIST-PART3-4090: List item: `registry/logs/`: **nur** `*.log` oder `*.log.jsonl` (append-only). K
        Priority: MEDIUM
        """
        assert "LIST-PART3-4090" in all_results['results'], "Rule LIST-PART3-4090 missing"
        result = all_results['results']["LIST-PART3-4090"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART3-4090 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART3-4090 failed"


    def test_rule_list_part3_4091(self, all_results):
        """
        Test LIST-PART3-4091: List item: `registry/locks/`: write-once / append-only (Owner/Lock/Hash-Kette). 
        Priority: MEDIUM
        """
        assert "LIST-PART3-4091" in all_results['results'], "Rule LIST-PART3-4091 missing"
        result = all_results['results']["LIST-PART3-4091"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART3-4091 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART3-4091 failed"


    def test_rule_list_part3_4092(self, all_results):
        """
        Test LIST-PART3-4092: List item: `registry/manifests/`: berechnete Zustände/Indexe/Checksums (mutable,
        Priority: MEDIUM
        """
        assert "LIST-PART3-4092" in all_results['results'], "Rule LIST-PART3-4092 missing"
        result = all_results['results']["LIST-PART3-4092"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART3-4092 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART3-4092 failed"


    def test_rule_list_part3_4093(self, all_results):
        """
        Test LIST-PART3-4093: List item: `registry/intake/`: Eingangsdaten (z. B. Chat-Dateien), werden nach V
        Priority: MEDIUM
        """
        assert "LIST-PART3-4093" in all_results['results'], "Rule LIST-PART3-4093 missing"
        result = all_results['results']["LIST-PART3-4093"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART3-4093 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART3-4093 failed"


    def test_rule_list_part3_4094(self, all_results):
        """
        Test LIST-PART3-4094: List item: **FAIL (Exit 24)**, wenn
        Priority: MEDIUM
        """
        assert "LIST-PART3-4094" in all_results['results'], "Rule LIST-PART3-4094 missing"
        result = all_results['results']["LIST-PART3-4094"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART3-4094 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART3-4094 failed"


    def test_rule_list_part3_4095(self, all_results):
        """
        Test LIST-PART3-4095: List item: unter `registry/logs/` Dateien ≠ `*.log` / `*.log.jsonl` liegen
        Priority: MEDIUM
        """
        assert "LIST-PART3-4095" in all_results['results'], "Rule LIST-PART3-4095 missing"
        result = all_results['results']["LIST-PART3-4095"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART3-4095 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART3-4095 failed"


    def test_rule_list_part3_4096(self, all_results):
        """
        Test LIST-PART3-4096: List item: `registry/locks/` fehlt oder unsignierte Änderungen erkannt werden
        Priority: MEDIUM
        """
        assert "LIST-PART3-4096" in all_results['results'], "Rule LIST-PART3-4096 missing"
        result = all_results['results']["LIST-PART3-4096"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART3-4096 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART3-4096 failed"


    def test_rule_list_part3_4097(self, all_results):
        """
        Test LIST-PART3-4097: List item: `integrity_checksums.json` nicht unter `registry/manifests/` liegt
        Priority: MEDIUM
        """
        assert "LIST-PART3-4097" in all_results['results'], "Rule LIST-PART3-4097 missing"
        result = all_results['results']["LIST-PART3-4097"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART3-4097 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART3-4097 failed"


    def test_rule_list_part3_4098(self, all_results):
        """
        Test LIST-PART3-4098: List item: `chat_ingest/` nicht unter `registry/intake/` liegt
        Priority: MEDIUM
        """
        assert "LIST-PART3-4098" in all_results['results'], "Rule LIST-PART3-4098 missing"
        result = all_results['results']["LIST-PART3-4098"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART3-4098 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART3-4098 failed"


    def test_rule_list_part3_4099(self, all_results):
        """
        Test LIST-PART3-4099: List item: Gate-Datei (Beispiel): `24_meta_orchestration/triggers/ci/gates/struc
        Priority: MEDIUM
        """
        assert "LIST-PART3-4099" in all_results['results'], "Rule LIST-PART3-4099 missing"
        result = all_results['results']["LIST-PART3-4099"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART3-4099 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART3-4099 failed"


    def test_rule_list_part3_4100(self, all_results):
        """
        Test LIST-PART3-4100: List item: Die 6 Chat-Dateien aus `registry/intake/chat_ingest/` werden durch de
        Priority: CRITICAL
        """
        assert "LIST-PART3-4100" in all_results['results'], "Rule LIST-PART3-4100 missing"
        result = all_results['results']["LIST-PART3-4100"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-PART3-4100 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-PART3-4100 failed"


    def test_rule_4101(self, all_results):
        """
        Test RULE-4101: YAML field 'metadata.shard_id' must equal '01_identitaet_personen'
        Priority: MEDIUM
        """
        assert "RULE-4101" in all_results['results'], "Rule RULE-4101 missing"
        result = all_results['results']["RULE-4101"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-4101 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-4101 failed"


    def test_rule_4102(self, all_results):
        """
        Test RULE-4102: YAML field 'metadata.version' must equal '2.1.0'
        Priority: HIGH
        """
        assert "RULE-4102" in all_results['results'], "Rule RULE-4102 missing"
        result = all_results['results']["RULE-4102"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "HIGH" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-4102 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-4102 failed"


    def test_rule_4103(self, all_results):
        """
        Test RULE-4103: YAML field 'metadata.status' must equal 'production'
        Priority: MEDIUM
        """
        assert "RULE-4103" in all_results['results'], "Rule RULE-4103 missing"
        result = all_results['results']["RULE-4103"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-4103 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-4103 failed"


    def test_rule_4104(self, all_results):
        """
        Test RULE-4104: YAML list 'capabilities.MUST' must contain 1 elements
        Priority: CRITICAL
        """
        assert "RULE-4104" in all_results['results'], "Rule RULE-4104 missing"
        result = all_results['results']["RULE-4104"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-4104 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-4104 failed"


    def test_rule_4105(self, all_results):
        """
        Test RULE-4105: YAML list 'capabilities.SHOULD' must contain 1 elements
        Priority: MEDIUM
        """
        assert "RULE-4105" in all_results['results'], "Rule RULE-4105 missing"
        result = all_results['results']["RULE-4105"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-4105 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-4105 failed"


    def test_rule_4106(self, all_results):
        """
        Test RULE-4106: YAML list 'capabilities.HAVE' must contain 1 elements
        Priority: MEDIUM
        """
        assert "RULE-4106" in all_results['results'], "Rule RULE-4106 missing"
        result = all_results['results']["RULE-4106"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-4106 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-4106 failed"


    def test_rule_4107(self, all_results):
        """
        Test RULE-4107: YAML field 'constraints.pii_storage' must equal 'forbidden'
        Priority: MEDIUM
        """
        assert "RULE-4107" in all_results['results'], "Rule RULE-4107 missing"
        result = all_results['results']["RULE-4107"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-4107 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-4107 failed"


    def test_rule_4108(self, all_results):
        """
        Test RULE-4108: YAML field 'constraints.data_policy' must equal 'hash_only'
        Priority: MEDIUM
        """
        assert "RULE-4108" in all_results['results'], "Rule RULE-4108 missing"
        result = all_results['results']["RULE-4108"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-4108 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-4108 failed"


    def test_rule_4109(self, all_results):
        """
        Test RULE-4109: YAML field 'constraints.custody' must equal 'non_custodial_code_only'
        Priority: MEDIUM
        """
        assert "RULE-4109" in all_results['results'], "Rule RULE-4109 missing"
        result = all_results['results']["RULE-4109"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-4109 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-4109 failed"


    def test_rule_4110(self, all_results):
        """
        Test RULE-4110: YAML list 'enforcement.static_analysis' must contain 2 elements
        Priority: MEDIUM
        """
        assert "RULE-4110" in all_results['results'], "Rule RULE-4110 missing"
        result = all_results['results']["RULE-4110"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-4110 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-4110 failed"


    def test_rule_4111(self, all_results):
        """
        Test RULE-4111: YAML list 'enforcement.runtime_checks' must contain 1 elements
        Priority: MEDIUM
        """
        assert "RULE-4111" in all_results['results'], "Rule RULE-4111 missing"
        result = all_results['results']["RULE-4111"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-4111 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-4111 failed"


    def test_rule_4112(self, all_results):
        """
        Test RULE-4112: YAML field 'enforcement.audit.log_to' must equal '02_audit_logging'
        Priority: MEDIUM
        """
        assert "RULE-4112" in all_results['results'], "Rule RULE-4112 missing"
        result = all_results['results']["RULE-4112"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-4112 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-4112 failed"


    def test_rule_4113(self, all_results):
        """
        Test RULE-4113: YAML list 'interfaces.contracts' must contain 1 elements
        Priority: MEDIUM
        """
        assert "RULE-4113" in all_results['results'], "Rule RULE-4113 missing"
        result = all_results['results']["RULE-4113"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-4113 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-4113 failed"


    def test_rule_4114(self, all_results):
        """
        Test RULE-4114: YAML list 'interfaces.data_schemas' must contain 1 elements
        Priority: MEDIUM
        """
        assert "RULE-4114" in all_results['results'], "Rule RULE-4114 missing"
        result = all_results['results']["RULE-4114"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-4114 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-4114 failed"


    def test_rule_4115(self, all_results):
        """
        Test RULE-4115: YAML field 'interfaces.authentication' must equal 'mTLS'
        Priority: MEDIUM
        """
        assert "RULE-4115" in all_results['results'], "Rule RULE-4115 missing"
        result = all_results['results']["RULE-4115"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-4115 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-4115 failed"


    def test_rule_4116(self, all_results):
        """
        Test RULE-4116: YAML list 'dependencies.required' must contain 1 elements
        Priority: MEDIUM
        """
        assert "RULE-4116" in all_results['results'], "Rule RULE-4116 missing"
        result = all_results['results']["RULE-4116"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-4116 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-4116 failed"


    def test_rule_4117(self, all_results):
        """
        Test RULE-4117: YAML list 'dependencies.optional' must contain 1 elements
        Priority: MEDIUM
        """
        assert "RULE-4117" in all_results['results'], "Rule RULE-4117 missing"
        result = all_results['results']["RULE-4117"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-4117 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-4117 failed"


    def test_rule_4118(self, all_results):
        """
        Test RULE-4118: YAML field 'compatibility.semver' must equal '2.1.0'
        Priority: MEDIUM
        """
        assert "RULE-4118" in all_results['results'], "Rule RULE-4118 missing"
        result = all_results['results']["RULE-4118"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-4118 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-4118 failed"


    def test_rule_4119(self, all_results):
        """
        Test RULE-4119: YAML field 'compatibility.core_min_version' must equal '>=3.0.0'
        Priority: HIGH
        """
        assert "RULE-4119" in all_results['results'], "Rule RULE-4119 missing"
        result = all_results['results']["RULE-4119"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "HIGH" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-4119 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-4119 failed"


    def test_rule_4120(self, all_results):
        """
        Test RULE-4120: YAML field 'implementations.default' must equal 'python-tensorflow'
        Priority: MEDIUM
        """
        assert "RULE-4120" in all_results['results'], "Rule RULE-4120 missing"
        result = all_results['results']["RULE-4120"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-4120 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-4120 failed"


    def test_rule_4121(self, all_results):
        """
        Test RULE-4121: YAML list 'implementations.available' must contain 3 elements
        Priority: MEDIUM
        """
        assert "RULE-4121" in all_results['results'], "Rule RULE-4121 missing"
        result = all_results['results']["RULE-4121"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-4121 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-4121 failed"


    def test_rule_4122(self, all_results):
        """
        Test RULE-4122: YAML field 'conformance.test_framework' must equal 'schemathesis'
        Priority: MEDIUM
        """
        assert "RULE-4122" in all_results['results'], "Rule RULE-4122 missing"
        result = all_results['results']["RULE-4122"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-4122 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-4122 failed"


    def test_rule_4123(self, all_results):
        """
        Test RULE-4123: YAML list 'conformance.contract_tests' must contain 1 elements
        Priority: MEDIUM
        """
        assert "RULE-4123" in all_results['results'], "Rule RULE-4123 missing"
        result = all_results['results']["RULE-4123"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-4123 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-4123 failed"


    def test_rule_4124(self, all_results):
        """
        Test RULE-4124: YAML list 'orchestration.workflows' must contain 1 elements
        Priority: MEDIUM
        """
        assert "RULE-4124" in all_results['results'], "Rule RULE-4124 missing"
        result = all_results['results']["RULE-4124"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-4124 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-4124 failed"


    def test_rule_4125(self, all_results):
        """
        Test RULE-4125: YAML list 'documentation.auto_generate' must contain 2 elements
        Priority: MEDIUM
        """
        assert "RULE-4125" in all_results['results'], "Rule RULE-4125 missing"
        result = all_results['results']["RULE-4125"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-4125 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-4125 failed"


    def test_rule_4126(self, all_results):
        """
        Test RULE-4126: YAML list 'documentation.manual' must contain 1 elements
        Priority: MEDIUM
        """
        assert "RULE-4126" in all_results['results'], "Rule RULE-4126 missing"
        result = all_results['results']["RULE-4126"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-4126 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-4126 failed"


    def test_rule_4127(self, all_results):
        """
        Test RULE-4127: YAML field 'observability.logging.pii_redaction' must equal 'True'
        Priority: CRITICAL
        """
        assert "RULE-4127" in all_results['results'], "Rule RULE-4127 missing"
        result = all_results['results']["RULE-4127"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-4127 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-4127 failed"


    def test_rule_4128(self, all_results):
        """
        Test RULE-4128: YAML field 'evidence.strategy' must equal 'hash_ledger_with_anchoring'
        Priority: MEDIUM
        """
        assert "RULE-4128" in all_results['results'], "Rule RULE-4128 missing"
        result = all_results['results']["RULE-4128"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-4128 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-4128 failed"


    def test_rule_4129(self, all_results):
        """
        Test RULE-4129: YAML list 'evidence.anchoring.chains' must contain 2 elements
        Priority: MEDIUM
        """
        assert "RULE-4129" in all_results['results'], "Rule RULE-4129 missing"
        result = all_results['results']["RULE-4129"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-4129 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-4129 failed"


    def test_rule_4130(self, all_results):
        """
        Test RULE-4130: YAML field 'security.threat_model' must equal 'docs/security/threat_model.md'
        Priority: CRITICAL
        """
        assert "RULE-4130" in all_results['results'], "Rule RULE-4130 missing"
        result = all_results['results']["RULE-4130"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-4130 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-4130 failed"


    def test_rule_4131(self, all_results):
        """
        Test RULE-4131: YAML field 'security.secrets_management' must equal '15_infra/vault'
        Priority: MEDIUM
        """
        assert "RULE-4131" in all_results['results'], "Rule RULE-4131 missing"
        result = all_results['results']["RULE-4131"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-4131 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-4131 failed"


    def test_rule_4132(self, all_results):
        """
        Test RULE-4132: YAML field 'deployment.strategy' must equal 'blue-green'
        Priority: MEDIUM
        """
        assert "RULE-4132" in all_results['results'], "Rule RULE-4132 missing"
        result = all_results['results']["RULE-4132"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-4132 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-4132 failed"


    def test_rule_4133(self, all_results):
        """
        Test RULE-4133: YAML list 'deployment.environments' must contain 3 elements
        Priority: MEDIUM
        """
        assert "RULE-4133" in all_results['results'], "Rule RULE-4133 missing"
        result = all_results['results']["RULE-4133"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-4133 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-4133 failed"


    def test_rule_4134(self, all_results):
        """
        Test RULE-4134: YAML list 'roadmap.upcoming' must contain 2 elements
        Priority: HIGH
        """
        assert "RULE-4134" in all_results['results'], "Rule RULE-4134 missing"
        result = all_results['results']["RULE-4134"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "HIGH" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-4134 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-4134 failed"


    def test_rule_4135(self, all_results):
        """
        Test RULE-4135: YAML line: metadata:
        Priority: MEDIUM
        """
        assert "RULE-4135" in all_results['results'], "Rule RULE-4135 missing"
        result = all_results['results']["RULE-4135"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-4135 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-4135 failed"


    def test_rule_4136(self, all_results):
        """
        Test RULE-4136: YAML line: shard_id: "01_identitaet_personen"
        Priority: MEDIUM
        """
        assert "RULE-4136" in all_results['results'], "Rule RULE-4136 missing"
        result = all_results['results']["RULE-4136"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-4136 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-4136 failed"


    def test_rule_4137(self, all_results):
        """
        Test RULE-4137: YAML line: version: "2.1.0"
        Priority: MEDIUM
        """
        assert "RULE-4137" in all_results['results'], "Rule RULE-4137 missing"
        result = all_results['results']["RULE-4137"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-4137 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-4137 failed"


    def test_rule_4138(self, all_results):
        """
        Test RULE-4138: YAML line: status: "production"
        Priority: MEDIUM
        """
        assert "RULE-4138" in all_results['results'], "Rule RULE-4138 missing"
        result = all_results['results']["RULE-4138"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-4138 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-4138 failed"


    def test_rule_4139(self, all_results):
        """
        Test RULE-4139: YAML line: governance:
        Priority: MEDIUM
        """
        assert "RULE-4139" in all_results['results'], "Rule RULE-4139 missing"
        result = all_results['results']["RULE-4139"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-4139 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-4139 failed"


    def test_rule_4140(self, all_results):
        """
        Test RULE-4140: YAML line: owner: { team, lead, contact }
        Priority: MEDIUM
        """
        assert "RULE-4140" in all_results['results'], "Rule RULE-4140 missing"
        result = all_results['results']["RULE-4140"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-4140 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-4140 failed"


    def test_rule_4141(self, all_results):
        """
        Test RULE-4141: YAML line: reviewers: { architecture, compliance, security }
        Priority: CRITICAL
        """
        assert "RULE-4141" in all_results['results'], "Rule RULE-4141 missing"
        result = all_results['results']["RULE-4141"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-4141 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-4141 failed"


    def test_rule_4142(self, all_results):
        """
        Test RULE-4142: YAML line: change_process: { rfc_required, approval_quorum }
        Priority: CRITICAL
        """
        assert "RULE-4142" in all_results['results'], "Rule RULE-4142 missing"
        result = all_results['results']["RULE-4142"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-4142 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-4142 failed"


    def test_rule_4143(self, all_results):
        """
        Test RULE-4143: YAML line: capabilities:
        Priority: MEDIUM
        """
        assert "RULE-4143" in all_results['results'], "Rule RULE-4143 missing"
        result = all_results['results']["RULE-4143"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-4143 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-4143 failed"


    def test_rule_4144(self, all_results):
        """
        Test RULE-4144: YAML line: MUST: [ ... ]   # Produktiv, SLA-gebunden
        Priority: CRITICAL
        """
        assert "RULE-4144" in all_results['results'], "Rule RULE-4144 missing"
        result = all_results['results']["RULE-4144"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-4144 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-4144 failed"


    def test_rule_4145(self, all_results):
        """
        Test RULE-4145: YAML line: SHOULD: [ ... ] # Feature-complete, in Erprobung
        Priority: HIGH
        """
        assert "RULE-4145" in all_results['results'], "Rule RULE-4145 missing"
        result = all_results['results']["RULE-4145"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "HIGH" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-4145 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-4145 failed"


    def test_rule_4146(self, all_results):
        """
        Test RULE-4146: YAML line: HAVE: [ ... ]   # Experimentell, optional
        Priority: MEDIUM
        """
        assert "RULE-4146" in all_results['results'], "Rule RULE-4146 missing"
        result = all_results['results']["RULE-4146"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-4146 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-4146 failed"


    def test_rule_4147(self, all_results):
        """
        Test RULE-4147: YAML line: constraints:
        Priority: MEDIUM
        """
        assert "RULE-4147" in all_results['results'], "Rule RULE-4147 missing"
        result = all_results['results']["RULE-4147"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-4147 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-4147 failed"


    def test_rule_4148(self, all_results):
        """
        Test RULE-4148: YAML line: pii_storage: "forbidden"
        Priority: CRITICAL
        """
        assert "RULE-4148" in all_results['results'], "Rule RULE-4148 missing"
        result = all_results['results']["RULE-4148"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-4148 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-4148 failed"


    def test_rule_4149(self, all_results):
        """
        Test RULE-4149: YAML line: data_policy: "hash_only"
        Priority: MEDIUM
        """
        assert "RULE-4149" in all_results['results'], "Rule RULE-4149 missing"
        result = all_results['results']["RULE-4149"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-4149 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-4149 failed"


    def test_rule_4150(self, all_results):
        """
        Test RULE-4150: YAML line: custody: "non_custodial_code_only"
        Priority: MEDIUM
        """
        assert "RULE-4150" in all_results['results'], "Rule RULE-4150 missing"
        result = all_results['results']["RULE-4150"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-4150 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-4150 failed"


    def test_rule_4151(self, all_results):
        """
        Test RULE-4151: YAML line: enforcement:
        Priority: MEDIUM
        """
        assert "RULE-4151" in all_results['results'], "Rule RULE-4151 missing"
        result = all_results['results']["RULE-4151"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-4151 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-4151 failed"


    def test_rule_4152(self, all_results):
        """
        Test RULE-4152: YAML line: static_analysis: [ semgrep, bandit ]
        Priority: MEDIUM
        """
        assert "RULE-4152" in all_results['results'], "Rule RULE-4152 missing"
        result = all_results['results']["RULE-4152"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-4152 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-4152 failed"


    def test_rule_4153(self, all_results):
        """
        Test RULE-4153: YAML line: runtime_checks: [ pii_detector ]
        Priority: MEDIUM
        """
        assert "RULE-4153" in all_results['results'], "Rule RULE-4153 missing"
        result = all_results['results']["RULE-4153"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-4153 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-4153 failed"


    def test_rule_4154(self, all_results):
        """
        Test RULE-4154: YAML line: audit: { log_to: "02_audit_logging" }
        Priority: MEDIUM
        """
        assert "RULE-4154" in all_results['results'], "Rule RULE-4154 missing"
        result = all_results['results']["RULE-4154"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-4154 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-4154 failed"


    def test_rule_4155(self, all_results):
        """
        Test RULE-4155: YAML line: interfaces:
        Priority: MEDIUM
        """
        assert "RULE-4155" in all_results['results'], "Rule RULE-4155 missing"
        result = all_results['results']["RULE-4155"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-4155 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-4155 failed"


    def test_rule_4156(self, all_results):
        """
        Test RULE-4156: YAML line: contracts: [ OpenAPI specs ]
        Priority: MEDIUM
        """
        assert "RULE-4156" in all_results['results'], "Rule RULE-4156 missing"
        result = all_results['results']["RULE-4156"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-4156 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-4156 failed"


    def test_rule_4157(self, all_results):
        """
        Test RULE-4157: YAML line: data_schemas: [ JSON schemas ]
        Priority: MEDIUM
        """
        assert "RULE-4157" in all_results['results'], "Rule RULE-4157 missing"
        result = all_results['results']["RULE-4157"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-4157 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-4157 failed"


    def test_rule_4158(self, all_results):
        """
        Test RULE-4158: YAML line: authentication: "mTLS"
        Priority: MEDIUM
        """
        assert "RULE-4158" in all_results['results'], "Rule RULE-4158 missing"
        result = all_results['results']["RULE-4158"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-4158 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-4158 failed"


    def test_rule_4159(self, all_results):
        """
        Test RULE-4159: YAML line: dependencies:
        Priority: MEDIUM
        """
        assert "RULE-4159" in all_results['results'], "Rule RULE-4159 missing"
        result = all_results['results']["RULE-4159"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-4159 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-4159 failed"


    def test_rule_4160(self, all_results):
        """
        Test RULE-4160: YAML line: required: [ andere Roots/Shards ]
        Priority: CRITICAL
        """
        assert "RULE-4160" in all_results['results'], "Rule RULE-4160 missing"
        result = all_results['results']["RULE-4160"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-4160 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-4160 failed"


    def test_rule_4161(self, all_results):
        """
        Test RULE-4161: YAML line: optional: [ ... ]
        Priority: MEDIUM
        """
        assert "RULE-4161" in all_results['results'], "Rule RULE-4161 missing"
        result = all_results['results']["RULE-4161"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-4161 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-4161 failed"


    def test_rule_4162(self, all_results):
        """
        Test RULE-4162: YAML line: compatibility:
        Priority: MEDIUM
        """
        assert "RULE-4162" in all_results['results'], "Rule RULE-4162 missing"
        result = all_results['results']["RULE-4162"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-4162 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-4162 failed"


    def test_rule_4163(self, all_results):
        """
        Test RULE-4163: YAML line: semver: "2.1.0"
        Priority: MEDIUM
        """
        assert "RULE-4163" in all_results['results'], "Rule RULE-4163 missing"
        result = all_results['results']["RULE-4163"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-4163 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-4163 failed"


    def test_rule_4164(self, all_results):
        """
        Test RULE-4164: YAML line: core_min_version: ">=3.0.0"
        Priority: MEDIUM
        """
        assert "RULE-4164" in all_results['results'], "Rule RULE-4164 missing"
        result = all_results['results']["RULE-4164"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-4164 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-4164 failed"


    def test_rule_4165(self, all_results):
        """
        Test RULE-4165: YAML line: implementations:
        Priority: MEDIUM
        """
        assert "RULE-4165" in all_results['results'], "Rule RULE-4165 missing"
        result = all_results['results']["RULE-4165"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-4165 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-4165 failed"


    def test_rule_4166(self, all_results):
        """
        Test RULE-4166: YAML line: default: "python-tensorflow"
        Priority: MEDIUM
        """
        assert "RULE-4166" in all_results['results'], "Rule RULE-4166 missing"
        result = all_results['results']["RULE-4166"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-4166 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-4166 failed"


    def test_rule_4167(self, all_results):
        """
        Test RULE-4167: YAML line: available: [ python-tensorflow, rust-burn, service-external ]
        Priority: MEDIUM
        """
        assert "RULE-4167" in all_results['results'], "Rule RULE-4167 missing"
        result = all_results['results']["RULE-4167"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-4167 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-4167 failed"


    def test_rule_4168(self, all_results):
        """
        Test RULE-4168: YAML line: conformance:
        Priority: MEDIUM
        """
        assert "RULE-4168" in all_results['results'], "Rule RULE-4168 missing"
        result = all_results['results']["RULE-4168"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-4168 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-4168 failed"


    def test_rule_4169(self, all_results):
        """
        Test RULE-4169: YAML line: test_framework: "schemathesis"
        Priority: MEDIUM
        """
        assert "RULE-4169" in all_results['results'], "Rule RULE-4169 missing"
        result = all_results['results']["RULE-4169"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-4169 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-4169 failed"


    def test_rule_4170(self, all_results):
        """
        Test RULE-4170: YAML line: contract_tests: [ ... ]
        Priority: MEDIUM
        """
        assert "RULE-4170" in all_results['results'], "Rule RULE-4170 missing"
        result = all_results['results']["RULE-4170"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-4170 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-4170 failed"


    def test_rule_4171(self, all_results):
        """
        Test RULE-4171: YAML line: orchestration:
        Priority: MEDIUM
        """
        assert "RULE-4171" in all_results['results'], "Rule RULE-4171 missing"
        result = all_results['results']["RULE-4171"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-4171 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-4171 failed"


    def test_rule_4172(self, all_results):
        """
        Test RULE-4172: YAML line: workflows: [ multi-shard workflows ]
        Priority: MEDIUM
        """
        assert "RULE-4172" in all_results['results'], "Rule RULE-4172 missing"
        result = all_results['results']["RULE-4172"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-4172 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-4172 failed"


    def test_rule_4173(self, all_results):
        """
        Test RULE-4173: YAML line: testing:
        Priority: MEDIUM
        """
        assert "RULE-4173" in all_results['results'], "Rule RULE-4173 missing"
        result = all_results['results']["RULE-4173"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-4173 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-4173 failed"


    def test_rule_4174(self, all_results):
        """
        Test RULE-4174: YAML line: unit: { location, min_coverage }
        Priority: MEDIUM
        """
        assert "RULE-4174" in all_results['results'], "Rule RULE-4174 missing"
        result = all_results['results']["RULE-4174"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-4174 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-4174 failed"


    def test_rule_4175(self, all_results):
        """
        Test RULE-4175: YAML line: integration: { ... }
        Priority: MEDIUM
        """
        assert "RULE-4175" in all_results['results'], "Rule RULE-4175 missing"
        result = all_results['results']["RULE-4175"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-4175 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-4175 failed"


    def test_rule_4176(self, all_results):
        """
        Test RULE-4176: YAML line: contract: { ... }
        Priority: MEDIUM
        """
        assert "RULE-4176" in all_results['results'], "Rule RULE-4176 missing"
        result = all_results['results']["RULE-4176"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-4176 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-4176 failed"


    def test_rule_4177(self, all_results):
        """
        Test RULE-4177: YAML line: e2e: { ... }
        Priority: MEDIUM
        """
        assert "RULE-4177" in all_results['results'], "Rule RULE-4177 missing"
        result = all_results['results']["RULE-4177"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-4177 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-4177 failed"


    def test_rule_4178(self, all_results):
        """
        Test RULE-4178: YAML line: documentation:
        Priority: MEDIUM
        """
        assert "RULE-4178" in all_results['results'], "Rule RULE-4178 missing"
        result = all_results['results']["RULE-4178"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-4178 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-4178 failed"


    def test_rule_4179(self, all_results):
        """
        Test RULE-4179: YAML line: auto_generate: [ from contracts, schemas ]
        Priority: MEDIUM
        """
        assert "RULE-4179" in all_results['results'], "Rule RULE-4179 missing"
        result = all_results['results']["RULE-4179"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-4179 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-4179 failed"


    def test_rule_4180(self, all_results):
        """
        Test RULE-4180: YAML line: manual: [ ... ]
        Priority: MEDIUM
        """
        assert "RULE-4180" in all_results['results'], "Rule RULE-4180 missing"
        result = all_results['results']["RULE-4180"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-4180 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-4180 failed"


    def test_rule_4181(self, all_results):
        """
        Test RULE-4181: YAML line: observability:
        Priority: MEDIUM
        """
        assert "RULE-4181" in all_results['results'], "Rule RULE-4181 missing"
        result = all_results['results']["RULE-4181"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-4181 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-4181 failed"


    def test_rule_4182(self, all_results):
        """
        Test RULE-4182: YAML line: metrics: { prometheus }
        Priority: MEDIUM
        """
        assert "RULE-4182" in all_results['results'], "Rule RULE-4182 missing"
        result = all_results['results']["RULE-4182"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-4182 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-4182 failed"


    def test_rule_4183(self, all_results):
        """
        Test RULE-4183: YAML line: tracing: { jaeger }
        Priority: MEDIUM
        """
        assert "RULE-4183" in all_results['results'], "Rule RULE-4183 missing"
        result = all_results['results']["RULE-4183"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-4183 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-4183 failed"


    def test_rule_4184(self, all_results):
        """
        Test RULE-4184: YAML line: logging: { loki, pii_redaction: true }
        Priority: MEDIUM
        """
        assert "RULE-4184" in all_results['results'], "Rule RULE-4184 missing"
        result = all_results['results']["RULE-4184"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-4184 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-4184 failed"


    def test_rule_4185(self, all_results):
        """
        Test RULE-4185: YAML line: alerting: { ... }
        Priority: MEDIUM
        """
        assert "RULE-4185" in all_results['results'], "Rule RULE-4185 missing"
        result = all_results['results']["RULE-4185"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-4185 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-4185 failed"


    def test_rule_4186(self, all_results):
        """
        Test RULE-4186: YAML line: evidence:
        Priority: MEDIUM
        """
        assert "RULE-4186" in all_results['results'], "Rule RULE-4186 missing"
        result = all_results['results']["RULE-4186"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-4186 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-4186 failed"


    def test_rule_4187(self, all_results):
        """
        Test RULE-4187: YAML line: strategy: "hash_ledger_with_anchoring"
        Priority: MEDIUM
        """
        assert "RULE-4187" in all_results['results'], "Rule RULE-4187 missing"
        result = all_results['results']["RULE-4187"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-4187 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-4187 failed"


    def test_rule_4188(self, all_results):
        """
        Test RULE-4188: YAML line: anchoring: { chains: [ethereum, polygon] }
        Priority: MEDIUM
        """
        assert "RULE-4188" in all_results['results'], "Rule RULE-4188 missing"
        result = all_results['results']["RULE-4188"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-4188 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-4188 failed"


    def test_rule_4189(self, all_results):
        """
        Test RULE-4189: YAML line: security:
        Priority: CRITICAL
        """
        assert "RULE-4189" in all_results['results'], "Rule RULE-4189 missing"
        result = all_results['results']["RULE-4189"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-4189 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-4189 failed"


    def test_rule_4190(self, all_results):
        """
        Test RULE-4190: YAML line: threat_model: "docs/security/threat_model.md"
        Priority: CRITICAL
        """
        assert "RULE-4190" in all_results['results'], "Rule RULE-4190 missing"
        result = all_results['results']["RULE-4190"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-4190 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-4190 failed"


    def test_rule_4191(self, all_results):
        """
        Test RULE-4191: YAML line: secrets_management: "15_infra/vault"
        Priority: MEDIUM
        """
        assert "RULE-4191" in all_results['results'], "Rule RULE-4191 missing"
        result = all_results['results']["RULE-4191"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-4191 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-4191 failed"


    def test_rule_4192(self, all_results):
        """
        Test RULE-4192: YAML line: encryption: { at_rest, in_transit }
        Priority: MEDIUM
        """
        assert "RULE-4192" in all_results['results'], "Rule RULE-4192 missing"
        result = all_results['results']["RULE-4192"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-4192 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-4192 failed"


    def test_rule_4193(self, all_results):
        """
        Test RULE-4193: YAML line: deployment:
        Priority: MEDIUM
        """
        assert "RULE-4193" in all_results['results'], "Rule RULE-4193 missing"
        result = all_results['results']["RULE-4193"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-4193 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-4193 failed"


    def test_rule_4194(self, all_results):
        """
        Test RULE-4194: YAML line: strategy: "blue-green"
        Priority: MEDIUM
        """
        assert "RULE-4194" in all_results['results'], "Rule RULE-4194 missing"
        result = all_results['results']["RULE-4194"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-4194 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-4194 failed"


    def test_rule_4195(self, all_results):
        """
        Test RULE-4195: YAML line: environments: [ dev, staging, production ]
        Priority: MEDIUM
        """
        assert "RULE-4195" in all_results['results'], "Rule RULE-4195 missing"
        result = all_results['results']["RULE-4195"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-4195 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-4195 failed"


    def test_rule_4196(self, all_results):
        """
        Test RULE-4196: YAML line: resources:
        Priority: MEDIUM
        """
        assert "RULE-4196" in all_results['results'], "Rule RULE-4196 missing"
        result = all_results['results']["RULE-4196"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-4196 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-4196 failed"


    def test_rule_4197(self, all_results):
        """
        Test RULE-4197: YAML line: compute: { cpu, memory, autoscaling }
        Priority: MEDIUM
        """
        assert "RULE-4197" in all_results['results'], "Rule RULE-4197 missing"
        result = all_results['results']["RULE-4197"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-4197 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-4197 failed"


    def test_rule_4198(self, all_results):
        """
        Test RULE-4198: YAML line: roadmap:
        Priority: MEDIUM
        """
        assert "RULE-4198" in all_results['results'], "Rule RULE-4198 missing"
        result = all_results['results']["RULE-4198"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-4198 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-4198 failed"


    def test_rule_4199(self, all_results):
        """
        Test RULE-4199: YAML line: upcoming: [ planned features, versions ]
        Priority: MEDIUM
        """
        assert "RULE-4199" in all_results['results'], "Rule RULE-4199 missing"
        result = all_results['results']["RULE-4199"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-4199 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-4199 failed"


    def test_rule_4200(self, all_results):
        """
        Test RULE-4200: YAML field 'metadata.implementation_id' must equal 'python-tensorflow'
        Priority: MEDIUM
        """
        assert "RULE-4200" in all_results['results'], "Rule RULE-4200 missing"
        result = all_results['results']["RULE-4200"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-4200 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-4200 failed"


    def test_rule_4201(self, all_results):
        """
        Test RULE-4201: YAML field 'metadata.implementation_version' must equal '2.1.3'
        Priority: HIGH
        """
        assert "RULE-4201" in all_results['results'], "Rule RULE-4201 missing"
        result = all_results['results']["RULE-4201"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "HIGH" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-4201 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-4201 failed"


    def test_rule_4202(self, all_results):
        """
        Test RULE-4202: YAML field 'metadata.chart_version' must equal '2.1.0'
        Priority: HIGH
        """
        assert "RULE-4202" in all_results['results'], "Rule RULE-4202 missing"
        result = all_results['results']["RULE-4202"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "HIGH" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-4202 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-4202 failed"


    def test_rule_4203(self, all_results):
        """
        Test RULE-4203: YAML field 'metadata.maturity' must equal 'production'
        Priority: MEDIUM
        """
        assert "RULE-4203" in all_results['results'], "Rule RULE-4203 missing"
        result = all_results['results']["RULE-4203"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-4203 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-4203 failed"


    def test_rule_4204(self, all_results):
        """
        Test RULE-4204: YAML field 'technology_stack.language.name' must equal 'python'
        Priority: MEDIUM
        """
        assert "RULE-4204" in all_results['results'], "Rule RULE-4204 missing"
        result = all_results['results']["RULE-4204"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-4204 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-4204 failed"


    def test_rule_4205(self, all_results):
        """
        Test RULE-4205: YAML field 'technology_stack.language.version' must equal '3.11.5'
        Priority: HIGH
        """
        assert "RULE-4205" in all_results['results'], "Rule RULE-4205 missing"
        result = all_results['results']["RULE-4205"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "HIGH" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-4205 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-4205 failed"


    def test_rule_4206(self, all_results):
        """
        Test RULE-4206: YAML list 'technology_stack.testing' must contain 2 elements
        Priority: MEDIUM
        """
        assert "RULE-4206" in all_results['results'], "Rule RULE-4206 missing"
        result = all_results['results']["RULE-4206"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-4206 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-4206 failed"


    def test_rule_4207(self, all_results):
        """
        Test RULE-4207: YAML list 'technology_stack.linting_formatting' must contain 4 elements
        Priority: MEDIUM
        """
        assert "RULE-4207" in all_results['results'], "Rule RULE-4207 missing"
        result = all_results['results']["RULE-4207"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-4207 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-4207 failed"


    def test_rule_4208(self, all_results):
        """
        Test RULE-4208: YAML field 'artifacts.source_code.location' must equal 'src/'
        Priority: MEDIUM
        """
        assert "RULE-4208" in all_results['results'], "Rule RULE-4208 missing"
        result = all_results['results']["RULE-4208"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-4208 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-4208 failed"


    def test_rule_4209(self, all_results):
        """
        Test RULE-4209: YAML list 'artifacts.source_code.structure' must contain 5 elements
        Priority: MEDIUM
        """
        assert "RULE-4209" in all_results['results'], "Rule RULE-4209 missing"
        result = all_results['results']["RULE-4209"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-4209 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-4209 failed"


    def test_rule_4210(self, all_results):
        """
        Test RULE-4210: YAML field 'artifacts.configuration.location' must equal 'config/'
        Priority: MEDIUM
        """
        assert "RULE-4210" in all_results['results'], "Rule RULE-4210 missing"
        result = all_results['results']["RULE-4210"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-4210 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-4210 failed"


    def test_rule_4211(self, all_results):
        """
        Test RULE-4211: YAML list 'artifacts.configuration.files' must contain 3 elements
        Priority: MEDIUM
        """
        assert "RULE-4211" in all_results['results'], "Rule RULE-4211 missing"
        result = all_results['results']["RULE-4211"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-4211 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-4211 failed"


    def test_rule_4212(self, all_results):
        """
        Test RULE-4212: YAML field 'artifacts.models.location' must equal 'models/'
        Priority: MEDIUM
        """
        assert "RULE-4212" in all_results['results'], "Rule RULE-4212 missing"
        result = all_results['results']["RULE-4212"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-4212 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-4212 failed"


    def test_rule_4213(self, all_results):
        """
        Test RULE-4213: YAML list 'artifacts.models.files' must contain 2 elements
        Priority: MEDIUM
        """
        assert "RULE-4213" in all_results['results'], "Rule RULE-4213 missing"
        result = all_results['results']["RULE-4213"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-4213 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-4213 failed"


    def test_rule_4214(self, all_results):
        """
        Test RULE-4214: YAML field 'artifacts.protocols.location' must equal 'proto/'
        Priority: MEDIUM
        """
        assert "RULE-4214" in all_results['results'], "Rule RULE-4214 missing"
        result = all_results['results']["RULE-4214"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-4214 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-4214 failed"


    def test_rule_4215(self, all_results):
        """
        Test RULE-4215: YAML field 'artifacts.tests.location' must equal 'tests/'
        Priority: MEDIUM
        """
        assert "RULE-4215" in all_results['results'], "Rule RULE-4215 missing"
        result = all_results['results']["RULE-4215"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-4215 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-4215 failed"


    def test_rule_4216(self, all_results):
        """
        Test RULE-4216: YAML field 'artifacts.documentation.location' must equal 'docs/'
        Priority: MEDIUM
        """
        assert "RULE-4216" in all_results['results'], "Rule RULE-4216 missing"
        result = all_results['results']["RULE-4216"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-4216 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-4216 failed"


    def test_rule_4217(self, all_results):
        """
        Test RULE-4217: YAML field 'artifacts.scripts.location' must equal 'scripts/'
        Priority: MEDIUM
        """
        assert "RULE-4217" in all_results['results'], "Rule RULE-4217 missing"
        result = all_results['results']["RULE-4217"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-4217 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-4217 failed"


    def test_rule_4218(self, all_results):
        """
        Test RULE-4218: YAML list 'artifacts.docker.files' must contain 2 elements
        Priority: MEDIUM
        """
        assert "RULE-4218" in all_results['results'], "Rule RULE-4218 missing"
        result = all_results['results']["RULE-4218"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-4218 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-4218 failed"


    def test_rule_4219(self, all_results):
        """
        Test RULE-4219: YAML field 'dependencies.python_packages' must equal 'requirements.txt'
        Priority: MEDIUM
        """
        assert "RULE-4219" in all_results['results'], "Rule RULE-4219 missing"
        result = all_results['results']["RULE-4219"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-4219 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-4219 failed"


    def test_rule_4220(self, all_results):
        """
        Test RULE-4220: YAML field 'dependencies.development_packages' must equal 'requirements-dev.txt'
        Priority: MEDIUM
        """
        assert "RULE-4220" in all_results['results'], "Rule RULE-4220 missing"
        result = all_results['results']["RULE-4220"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-4220 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-4220 failed"


    def test_rule_4221(self, all_results):
        """
        Test RULE-4221: YAML list 'dependencies.system_dependencies' must contain 2 elements
        Priority: MEDIUM
        """
        assert "RULE-4221" in all_results['results'], "Rule RULE-4221 missing"
        result = all_results['results']["RULE-4221"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-4221 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-4221 failed"


    def test_rule_4222(self, all_results):
        """
        Test RULE-4222: YAML list 'dependencies.external_services' must contain 3 elements
        Priority: MEDIUM
        """
        assert "RULE-4222" in all_results['results'], "Rule RULE-4222 missing"
        result = all_results['results']["RULE-4222"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-4222 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-4222 failed"


    def test_rule_4223(self, all_results):
        """
        Test RULE-4223: YAML field 'deployment.kubernetes.manifests_location' must equal 'k8s/'
        Priority: MEDIUM
        """
        assert "RULE-4223" in all_results['results'], "Rule RULE-4223 missing"
        result = all_results['results']["RULE-4223"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-4223 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-4223 failed"


    def test_rule_4224(self, all_results):
        """
        Test RULE-4224: YAML field 'deployment.helm.chart_location' must equal 'helm/'
        Priority: MEDIUM
        """
        assert "RULE-4224" in all_results['results'], "Rule RULE-4224 missing"
        result = all_results['results']["RULE-4224"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-4224 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-4224 failed"


    def test_rule_4225(self, all_results):
        """
        Test RULE-4225: YAML field 'testing.unit_tests.coverage_target' must equal '80'
        Priority: MEDIUM
        """
        assert "RULE-4225" in all_results['results'], "Rule RULE-4225 missing"
        result = all_results['results']["RULE-4225"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-4225 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-4225 failed"


    def test_rule_4226(self, all_results):
        """
        Test RULE-4226: YAML field 'observability.metrics.exporter' must equal 'prometheus'
        Priority: MEDIUM
        """
        assert "RULE-4226" in all_results['results'], "Rule RULE-4226 missing"
        result = all_results['results']["RULE-4226"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-4226 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-4226 failed"


    def test_rule_4227(self, all_results):
        """
        Test RULE-4227: YAML field 'observability.tracing.exporter' must equal 'jaeger'
        Priority: MEDIUM
        """
        assert "RULE-4227" in all_results['results'], "Rule RULE-4227 missing"
        result = all_results['results']["RULE-4227"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-4227 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-4227 failed"


    def test_rule_4228(self, all_results):
        """
        Test RULE-4228: YAML field 'observability.logging.format' must equal 'json'
        Priority: MEDIUM
        """
        assert "RULE-4228" in all_results['results'], "Rule RULE-4228 missing"
        result = all_results['results']["RULE-4228"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-4228 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-4228 failed"


    def test_rule_4229(self, all_results):
        """
        Test RULE-4229: YAML field 'observability.logging.pii_redaction' must equal 'True'
        Priority: CRITICAL
        """
        assert "RULE-4229" in all_results['results'], "Rule RULE-4229 missing"
        result = all_results['results']["RULE-4229"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-4229 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-4229 failed"


    def test_rule_4230(self, all_results):
        """
        Test RULE-4230: YAML list 'performance.baseline_benchmarks' must contain 1 elements
        Priority: MEDIUM
        """
        assert "RULE-4230" in all_results['results'], "Rule RULE-4230 missing"
        result = all_results['results']["RULE-4230"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-4230 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-4230 failed"


    def test_rule_4231(self, all_results):
        """
        Test RULE-4231: YAML list 'performance.optimization_targets' must contain 1 elements
        Priority: MEDIUM
        """
        assert "RULE-4231" in all_results['results'], "Rule RULE-4231 missing"
        result = all_results['results']["RULE-4231"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-4231 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-4231 failed"


    def test_rule_4232(self, all_results):
        """
        Test RULE-4232: YAML field 'changelog.location' must equal 'CHANGELOG.md'
        Priority: MEDIUM
        """
        assert "RULE-4232" in all_results['results'], "Rule RULE-4232 missing"
        result = all_results['results']["RULE-4232"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-4232 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-4232 failed"


    def test_rule_4233(self, all_results):
        """
        Test RULE-4233: YAML list 'changelog.latest_versions' must contain 1 elements
        Priority: HIGH
        """
        assert "RULE-4233" in all_results['results'], "Rule RULE-4233 missing"
        result = all_results['results']["RULE-4233"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "HIGH" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-4233 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-4233 failed"


    def test_rule_4234(self, all_results):
        """
        Test RULE-4234: YAML field 'support.documentation' must equal 'https://docs.ssid.org/...'
        Priority: MEDIUM
        """
        assert "RULE-4234" in all_results['results'], "Rule RULE-4234 missing"
        result = all_results['results']["RULE-4234"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-4234 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-4234 failed"


    def test_rule_4235(self, all_results):
        """
        Test RULE-4235: YAML line: metadata:
        Priority: MEDIUM
        """
        assert "RULE-4235" in all_results['results'], "Rule RULE-4235 missing"
        result = all_results['results']["RULE-4235"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-4235 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-4235 failed"


    def test_rule_4236(self, all_results):
        """
        Test RULE-4236: YAML line: implementation_id: "python-tensorflow"
        Priority: MEDIUM
        """
        assert "RULE-4236" in all_results['results'], "Rule RULE-4236 missing"
        result = all_results['results']["RULE-4236"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-4236 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-4236 failed"


    def test_rule_4237(self, all_results):
        """
        Test RULE-4237: YAML line: implementation_version: "2.1.3"
        Priority: MEDIUM
        """
        assert "RULE-4237" in all_results['results'], "Rule RULE-4237 missing"
        result = all_results['results']["RULE-4237"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-4237 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-4237 failed"


    def test_rule_4238(self, all_results):
        """
        Test RULE-4238: YAML line: chart_version: "2.1.0"
        Priority: MEDIUM
        """
        assert "RULE-4238" in all_results['results'], "Rule RULE-4238 missing"
        result = all_results['results']["RULE-4238"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-4238 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-4238 failed"


    def test_rule_4239(self, all_results):
        """
        Test RULE-4239: YAML line: maturity: "production"
        Priority: MEDIUM
        """
        assert "RULE-4239" in all_results['results'], "Rule RULE-4239 missing"
        result = all_results['results']["RULE-4239"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-4239 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-4239 failed"


    def test_rule_4240(self, all_results):
        """
        Test RULE-4240: YAML line: technology_stack:
        Priority: MEDIUM
        """
        assert "RULE-4240" in all_results['results'], "Rule RULE-4240 missing"
        result = all_results['results']["RULE-4240"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-4240 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-4240 failed"


    def test_rule_4241(self, all_results):
        """
        Test RULE-4241: YAML line: language: { name: "python", version: "3.11.5" }
        Priority: MEDIUM
        """
        assert "RULE-4241" in all_results['results'], "Rule RULE-4241 missing"
        result = all_results['results']["RULE-4241"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-4241 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-4241 failed"


    def test_rule_4242(self, all_results):
        """
        Test RULE-4242: YAML line: frameworks: { ml, api, utilities }
        Priority: MEDIUM
        """
        assert "RULE-4242" in all_results['results'], "Rule RULE-4242 missing"
        result = all_results['results']["RULE-4242"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-4242 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-4242 failed"


    def test_rule_4243(self, all_results):
        """
        Test RULE-4243: YAML line: testing: [ pytest, schemathesis ]
        Priority: MEDIUM
        """
        assert "RULE-4243" in all_results['results'], "Rule RULE-4243 missing"
        result = all_results['results']["RULE-4243"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-4243 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-4243 failed"


    def test_rule_4244(self, all_results):
        """
        Test RULE-4244: YAML line: linting_formatting: [ black, ruff, mypy, semgrep ]
        Priority: MEDIUM
        """
        assert "RULE-4244" in all_results['results'], "Rule RULE-4244 missing"
        result = all_results['results']["RULE-4244"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-4244 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-4244 failed"


    def test_rule_4245(self, all_results):
        """
        Test RULE-4245: YAML line: artifacts:
        Priority: MEDIUM
        """
        assert "RULE-4245" in all_results['results'], "Rule RULE-4245 missing"
        result = all_results['results']["RULE-4245"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-4245 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-4245 failed"


    def test_rule_4246(self, all_results):
        """
        Test RULE-4246: YAML line: source_code:
        Priority: MEDIUM
        """
        assert "RULE-4246" in all_results['results'], "Rule RULE-4246 missing"
        result = all_results['results']["RULE-4246"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-4246 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-4246 failed"


    def test_rule_4247(self, all_results):
        """
        Test RULE-4247: YAML line: location: "src/"
        Priority: MEDIUM
        """
        assert "RULE-4247" in all_results['results'], "Rule RULE-4247 missing"
        result = all_results['results']["RULE-4247"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-4247 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-4247 failed"


    def test_rule_4248(self, all_results):
        """
        Test RULE-4248: YAML line: structure: [ main.py, services/, models/, utils/, ... ]
        Priority: MEDIUM
        """
        assert "RULE-4248" in all_results['results'], "Rule RULE-4248 missing"
        result = all_results['results']["RULE-4248"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-4248 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-4248 failed"


    def test_rule_4249(self, all_results):
        """
        Test RULE-4249: YAML line: configuration:
        Priority: MEDIUM
        """
        assert "RULE-4249" in all_results['results'], "Rule RULE-4249 missing"
        result = all_results['results']["RULE-4249"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-4249 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-4249 failed"


    def test_rule_4250(self, all_results):
        """
        Test RULE-4250: YAML line: location: "config/"
        Priority: MEDIUM
        """
        assert "RULE-4250" in all_results['results'], "Rule RULE-4250 missing"
        result = all_results['results']["RULE-4250"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-4250 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-4250 failed"


    def test_rule_4251(self, all_results):
        """
        Test RULE-4251: YAML line: files: [ settings.yaml, model_config.yaml, ... ]
        Priority: MEDIUM
        """
        assert "RULE-4251" in all_results['results'], "Rule RULE-4251 missing"
        result = all_results['results']["RULE-4251"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-4251 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-4251 failed"


    def test_rule_4252(self, all_results):
        """
        Test RULE-4252: YAML line: models:
        Priority: MEDIUM
        """
        assert "RULE-4252" in all_results['results'], "Rule RULE-4252 missing"
        result = all_results['results']["RULE-4252"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-4252 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-4252 failed"


    def test_rule_4253(self, all_results):
        """
        Test RULE-4253: YAML line: location: "models/"
        Priority: MEDIUM
        """
        assert "RULE-4253" in all_results['results'], "Rule RULE-4253 missing"
        result = all_results['results']["RULE-4253"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-4253 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-4253 failed"


    def test_rule_4254(self, all_results):
        """
        Test RULE-4254: YAML line: files: [ risk_scorer_v2.1.h5, ... ]
        Priority: MEDIUM
        """
        assert "RULE-4254" in all_results['results'], "Rule RULE-4254 missing"
        result = all_results['results']["RULE-4254"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-4254 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-4254 failed"


    def test_rule_4255(self, all_results):
        """
        Test RULE-4255: YAML line: protocols:
        Priority: MEDIUM
        """
        assert "RULE-4255" in all_results['results'], "Rule RULE-4255 missing"
        result = all_results['results']["RULE-4255"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-4255 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-4255 failed"


    def test_rule_4256(self, all_results):
        """
        Test RULE-4256: YAML line: location: "proto/"
        Priority: MEDIUM
        """
        assert "RULE-4256" in all_results['results'], "Rule RULE-4256 missing"
        result = all_results['results']["RULE-4256"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-4256 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-4256 failed"


    def test_rule_4257(self, all_results):
        """
        Test RULE-4257: YAML line: tests:
        Priority: MEDIUM
        """
        assert "RULE-4257" in all_results['results'], "Rule RULE-4257 missing"
        result = all_results['results']["RULE-4257"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-4257 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-4257 failed"


    def test_rule_4258(self, all_results):
        """
        Test RULE-4258: YAML line: location: "tests/"
        Priority: MEDIUM
        """
        assert "RULE-4258" in all_results['results'], "Rule RULE-4258 missing"
        result = all_results['results']["RULE-4258"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-4258 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-4258 failed"


    def test_rule_4259(self, all_results):
        """
        Test RULE-4259: YAML line: documentation:
        Priority: MEDIUM
        """
        assert "RULE-4259" in all_results['results'], "Rule RULE-4259 missing"
        result = all_results['results']["RULE-4259"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-4259 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-4259 failed"


    def test_rule_4260(self, all_results):
        """
        Test RULE-4260: YAML line: location: "docs/"
        Priority: MEDIUM
        """
        assert "RULE-4260" in all_results['results'], "Rule RULE-4260 missing"
        result = all_results['results']["RULE-4260"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-4260 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-4260 failed"


    def test_rule_4261(self, all_results):
        """
        Test RULE-4261: YAML line: scripts:
        Priority: MEDIUM
        """
        assert "RULE-4261" in all_results['results'], "Rule RULE-4261 missing"
        result = all_results['results']["RULE-4261"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-4261 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-4261 failed"


    def test_rule_4262(self, all_results):
        """
        Test RULE-4262: YAML line: location: "scripts/"
        Priority: MEDIUM
        """
        assert "RULE-4262" in all_results['results'], "Rule RULE-4262 missing"
        result = all_results['results']["RULE-4262"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-4262 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-4262 failed"


    def test_rule_4263(self, all_results):
        """
        Test RULE-4263: YAML line: docker:
        Priority: MEDIUM
        """
        assert "RULE-4263" in all_results['results'], "Rule RULE-4263 missing"
        result = all_results['results']["RULE-4263"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-4263 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-4263 failed"


    def test_rule_4264(self, all_results):
        """
        Test RULE-4264: YAML line: files: [ Dockerfile, docker-compose.yml ]
        Priority: MEDIUM
        """
        assert "RULE-4264" in all_results['results'], "Rule RULE-4264 missing"
        result = all_results['results']["RULE-4264"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-4264 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-4264 failed"


    def test_rule_4265(self, all_results):
        """
        Test RULE-4265: YAML line: dependencies:
        Priority: MEDIUM
        """
        assert "RULE-4265" in all_results['results'], "Rule RULE-4265 missing"
        result = all_results['results']["RULE-4265"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-4265 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-4265 failed"


    def test_rule_4266(self, all_results):
        """
        Test RULE-4266: YAML line: python_packages: "requirements.txt"
        Priority: MEDIUM
        """
        assert "RULE-4266" in all_results['results'], "Rule RULE-4266 missing"
        result = all_results['results']["RULE-4266"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-4266 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-4266 failed"


    def test_rule_4267(self, all_results):
        """
        Test RULE-4267: YAML line: development_packages: "requirements-dev.txt"
        Priority: MEDIUM
        """
        assert "RULE-4267" in all_results['results'], "Rule RULE-4267 missing"
        result = all_results['results']["RULE-4267"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-4267 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-4267 failed"


    def test_rule_4268(self, all_results):
        """
        Test RULE-4268: YAML line: system_dependencies: [ libssl-dev, ... ]
        Priority: MEDIUM
        """
        assert "RULE-4268" in all_results['results'], "Rule RULE-4268 missing"
        result = all_results['results']["RULE-4268"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-4268 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-4268 failed"


    def test_rule_4269(self, all_results):
        """
        Test RULE-4269: YAML line: external_services: [ 09_meta_identity, 02_audit_logging, ... ]
        Priority: MEDIUM
        """
        assert "RULE-4269" in all_results['results'], "Rule RULE-4269 missing"
        result = all_results['results']["RULE-4269"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-4269 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-4269 failed"


    def test_rule_4270(self, all_results):
        """
        Test RULE-4270: YAML line: build:
        Priority: MEDIUM
        """
        assert "RULE-4270" in all_results['results'], "Rule RULE-4270 missing"
        result = all_results['results']["RULE-4270"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-4270 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-4270 failed"


    def test_rule_4271(self, all_results):
        """
        Test RULE-4271: YAML line: commands: { install_dependencies, compile_protos, ... }
        Priority: MEDIUM
        """
        assert "RULE-4271" in all_results['results'], "Rule RULE-4271 missing"
        result = all_results['results']["RULE-4271"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-4271 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-4271 failed"


    def test_rule_4272(self, all_results):
        """
        Test RULE-4272: YAML line: docker: { build_command, image_registry }
        Priority: MEDIUM
        """
        assert "RULE-4272" in all_results['results'], "Rule RULE-4272 missing"
        result = all_results['results']["RULE-4272"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-4272 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-4272 failed"


    def test_rule_4273(self, all_results):
        """
        Test RULE-4273: YAML line: deployment:
        Priority: MEDIUM
        """
        assert "RULE-4273" in all_results['results'], "Rule RULE-4273 missing"
        result = all_results['results']["RULE-4273"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-4273 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-4273 failed"


    def test_rule_4274(self, all_results):
        """
        Test RULE-4274: YAML line: kubernetes: { manifests_location: "k8s/" }
        Priority: MEDIUM
        """
        assert "RULE-4274" in all_results['results'], "Rule RULE-4274 missing"
        result = all_results['results']["RULE-4274"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-4274 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-4274 failed"


    def test_rule_4275(self, all_results):
        """
        Test RULE-4275: YAML line: helm: { chart_location: "helm/" }
        Priority: MEDIUM
        """
        assert "RULE-4275" in all_results['results'], "Rule RULE-4275 missing"
        result = all_results['results']["RULE-4275"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-4275 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-4275 failed"


    def test_rule_4276(self, all_results):
        """
        Test RULE-4276: YAML line: environment_variables: { required, optional }
        Priority: CRITICAL
        """
        assert "RULE-4276" in all_results['results'], "Rule RULE-4276 missing"
        result = all_results['results']["RULE-4276"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-4276 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-4276 failed"


    def test_rule_4277(self, all_results):
        """
        Test RULE-4277: YAML line: testing:
        Priority: MEDIUM
        """
        assert "RULE-4277" in all_results['results'], "Rule RULE-4277 missing"
        result = all_results['results']["RULE-4277"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-4277 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-4277 failed"


    def test_rule_4278(self, all_results):
        """
        Test RULE-4278: YAML line: unit_tests: { command, coverage_target: 80 }
        Priority: MEDIUM
        """
        assert "RULE-4278" in all_results['results'], "Rule RULE-4278 missing"
        result = all_results['results']["RULE-4278"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-4278 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-4278 failed"


    def test_rule_4279(self, all_results):
        """
        Test RULE-4279: YAML line: integration_tests: { ... }
        Priority: MEDIUM
        """
        assert "RULE-4279" in all_results['results'], "Rule RULE-4279 missing"
        result = all_results['results']["RULE-4279"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-4279 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-4279 failed"


    def test_rule_4280(self, all_results):
        """
        Test RULE-4280: YAML line: contract_tests: { ... }
        Priority: MEDIUM
        """
        assert "RULE-4280" in all_results['results'], "Rule RULE-4280 missing"
        result = all_results['results']["RULE-4280"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-4280 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-4280 failed"


    def test_rule_4281(self, all_results):
        """
        Test RULE-4281: YAML line: security_tests: { static_analysis, dynamic_analysis }
        Priority: CRITICAL
        """
        assert "RULE-4281" in all_results['results'], "Rule RULE-4281 missing"
        result = all_results['results']["RULE-4281"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-4281 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-4281 failed"


    def test_rule_4282(self, all_results):
        """
        Test RULE-4282: YAML line: performance_tests: { ... }
        Priority: MEDIUM
        """
        assert "RULE-4282" in all_results['results'], "Rule RULE-4282 missing"
        result = all_results['results']["RULE-4282"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-4282 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-4282 failed"


    def test_rule_4283(self, all_results):
        """
        Test RULE-4283: YAML line: observability:
        Priority: MEDIUM
        """
        assert "RULE-4283" in all_results['results'], "Rule RULE-4283 missing"
        result = all_results['results']["RULE-4283"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-4283 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-4283 failed"


    def test_rule_4284(self, all_results):
        """
        Test RULE-4284: YAML line: metrics: { exporter: "prometheus", custom_metrics }
        Priority: MEDIUM
        """
        assert "RULE-4284" in all_results['results'], "Rule RULE-4284 missing"
        result = all_results['results']["RULE-4284"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-4284 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-4284 failed"


    def test_rule_4285(self, all_results):
        """
        Test RULE-4285: YAML line: tracing: { exporter: "jaeger" }
        Priority: MEDIUM
        """
        assert "RULE-4285" in all_results['results'], "Rule RULE-4285 missing"
        result = all_results['results']["RULE-4285"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-4285 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-4285 failed"


    def test_rule_4286(self, all_results):
        """
        Test RULE-4286: YAML line: logging: { format: "json", pii_redaction: true }
        Priority: MEDIUM
        """
        assert "RULE-4286" in all_results['results'], "Rule RULE-4286 missing"
        result = all_results['results']["RULE-4286"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-4286 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-4286 failed"


    def test_rule_4287(self, all_results):
        """
        Test RULE-4287: YAML line: health_checks: { liveness, readiness }
        Priority: MEDIUM
        """
        assert "RULE-4287" in all_results['results'], "Rule RULE-4287 missing"
        result = all_results['results']["RULE-4287"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-4287 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-4287 failed"


    def test_rule_4288(self, all_results):
        """
        Test RULE-4288: YAML line: development:
        Priority: MEDIUM
        """
        assert "RULE-4288" in all_results['results'], "Rule RULE-4288 missing"
        result = all_results['results']["RULE-4288"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-4288 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-4288 failed"


    def test_rule_4289(self, all_results):
        """
        Test RULE-4289: YAML line: setup: { steps }
        Priority: MEDIUM
        """
        assert "RULE-4289" in all_results['results'], "Rule RULE-4289 missing"
        result = all_results['results']["RULE-4289"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-4289 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-4289 failed"


    def test_rule_4290(self, all_results):
        """
        Test RULE-4290: YAML line: local_development: { docker_compose }
        Priority: MEDIUM
        """
        assert "RULE-4290" in all_results['results'], "Rule RULE-4290 missing"
        result = all_results['results']["RULE-4290"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-4290 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-4290 failed"


    def test_rule_4291(self, all_results):
        """
        Test RULE-4291: YAML line: pre_commit_hooks: { ... }
        Priority: MEDIUM
        """
        assert "RULE-4291" in all_results['results'], "Rule RULE-4291 missing"
        result = all_results['results']["RULE-4291"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-4291 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-4291 failed"


    def test_rule_4292(self, all_results):
        """
        Test RULE-4292: YAML line: compliance:
        Priority: CRITICAL
        """
        assert "RULE-4292" in all_results['results'], "Rule RULE-4292 missing"
        result = all_results['results']["RULE-4292"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-4292 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-4292 failed"


    def test_rule_4293(self, all_results):
        """
        Test RULE-4293: YAML line: non_custodial_enforcement: { ... }
        Priority: MEDIUM
        """
        assert "RULE-4293" in all_results['results'], "Rule RULE-4293 missing"
        result = all_results['results']["RULE-4293"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-4293 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-4293 failed"


    def test_rule_4294(self, all_results):
        """
        Test RULE-4294: YAML line: gdpr_compliance: { ... }
        Priority: CRITICAL
        """
        assert "RULE-4294" in all_results['results'], "Rule RULE-4294 missing"
        result = all_results['results']["RULE-4294"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-4294 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-4294 failed"


    def test_rule_4295(self, all_results):
        """
        Test RULE-4295: YAML line: bias_fairness: { ... }
        Priority: MEDIUM
        """
        assert "RULE-4295" in all_results['results'], "Rule RULE-4295 missing"
        result = all_results['results']["RULE-4295"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-4295 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-4295 failed"


    def test_rule_4296(self, all_results):
        """
        Test RULE-4296: YAML line: performance:
        Priority: MEDIUM
        """
        assert "RULE-4296" in all_results['results'], "Rule RULE-4296 missing"
        result = all_results['results']["RULE-4296"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-4296 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-4296 failed"


    def test_rule_4297(self, all_results):
        """
        Test RULE-4297: YAML line: baseline_benchmarks: [ ... ]
        Priority: MEDIUM
        """
        assert "RULE-4297" in all_results['results'], "Rule RULE-4297 missing"
        result = all_results['results']["RULE-4297"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-4297 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-4297 failed"


    def test_rule_4298(self, all_results):
        """
        Test RULE-4298: YAML line: optimization_targets: [ ... ]
        Priority: MEDIUM
        """
        assert "RULE-4298" in all_results['results'], "Rule RULE-4298 missing"
        result = all_results['results']["RULE-4298"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-4298 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-4298 failed"


    def test_rule_4299(self, all_results):
        """
        Test RULE-4299: YAML line: resource_requirements: { minimum, recommended }
        Priority: HIGH
        """
        assert "RULE-4299" in all_results['results'], "Rule RULE-4299 missing"
        result = all_results['results']["RULE-4299"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "HIGH" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-4299 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-4299 failed"


    def test_rule_4300(self, all_results):
        """
        Test RULE-4300: YAML line: changelog:
        Priority: MEDIUM
        """
        assert "RULE-4300" in all_results['results'], "Rule RULE-4300 missing"
        result = all_results['results']["RULE-4300"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-4300 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-4300 failed"


    def test_rule_4301(self, all_results):
        """
        Test RULE-4301: YAML line: location: "CHANGELOG.md"
        Priority: MEDIUM
        """
        assert "RULE-4301" in all_results['results'], "Rule RULE-4301 missing"
        result = all_results['results']["RULE-4301"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-4301 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-4301 failed"


    def test_rule_4302(self, all_results):
        """
        Test RULE-4302: YAML line: latest_versions: [ ... ]
        Priority: MEDIUM
        """
        assert "RULE-4302" in all_results['results'], "Rule RULE-4302 missing"
        result = all_results['results']["RULE-4302"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-4302 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-4302 failed"


    def test_rule_4303(self, all_results):
        """
        Test RULE-4303: YAML line: support:
        Priority: MEDIUM
        """
        assert "RULE-4303" in all_results['results'], "Rule RULE-4303 missing"
        result = all_results['results']["RULE-4303"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-4303 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-4303 failed"


    def test_rule_4304(self, all_results):
        """
        Test RULE-4304: YAML line: documentation: "https://docs.ssid.org/..."
        Priority: MEDIUM
        """
        assert "RULE-4304" in all_results['results'], "Rule RULE-4304 missing"
        result = all_results['results']["RULE-4304"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-4304 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-4304 failed"


    def test_rule_4305(self, all_results):
        """
        Test RULE-4305: YAML line: contacts: { general, security, on_call }
        Priority: CRITICAL
        """
        assert "RULE-4305" in all_results['results'], "Rule RULE-4305 missing"
        result = all_results['results']["RULE-4305"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-4305 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-4305 failed"


    def test_rule_4306(self, all_results):
        """
        Test RULE-4306: YAML field 'data_policy.storage_type' must equal 'hash_only'
        Priority: MEDIUM
        """
        assert "RULE-4306" in all_results['results'], "Rule RULE-4306 missing"
        result = all_results['results']["RULE-4306"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-4306 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-4306 failed"


    def test_rule_4307(self, all_results):
        """
        Test RULE-4307: YAML field 'data_policy.hash_algorithm' must equal 'SHA3-256'
        Priority: MEDIUM
        """
        assert "RULE-4307" in all_results['results'], "Rule RULE-4307 missing"
        result = all_results['results']["RULE-4307"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-4307 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-4307 failed"


    def test_rule_4308(self, all_results):
        """
        Test RULE-4308: YAML field 'data_policy.pepper_strategy' must equal 'per_tenant'
        Priority: MEDIUM
        """
        assert "RULE-4308" in all_results['results'], "Rule RULE-4308 missing"
        result = all_results['results']["RULE-4308"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-4308 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-4308 failed"


    def test_rule_4309(self, all_results):
        """
        Test RULE-4309: YAML field 'data_policy.deterministic' must equal 'True'
        Priority: CRITICAL
        """
        assert "RULE-4309" in all_results['results'], "Rule RULE-4309 missing"
        result = all_results['results']["RULE-4309"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-4309 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-4309 failed"


    def test_rule_4310(self, all_results):
        """
        Test RULE-4310: YAML field 'data_policy.raw_data_retention' must equal '0 seconds'
        Priority: MEDIUM
        """
        assert "RULE-4310" in all_results['results'], "Rule RULE-4310 missing"
        result = all_results['results']["RULE-4310"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-4310 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-4310 failed"


    def test_rule_4311(self, all_results):
        """
        Test RULE-4311: YAML line: data_policy:
        Priority: MEDIUM
        """
        assert "RULE-4311" in all_results['results'], "Rule RULE-4311 missing"
        result = all_results['results']["RULE-4311"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-4311 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-4311 failed"


    def test_rule_4312(self, all_results):
        """
        Test RULE-4312: YAML line: storage_type: "hash_only"
        Priority: MEDIUM
        """
        assert "RULE-4312" in all_results['results'], "Rule RULE-4312 missing"
        result = all_results['results']["RULE-4312"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-4312 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-4312 failed"


    def test_rule_4313(self, all_results):
        """
        Test RULE-4313: YAML line: hash_algorithm: "SHA3-256"
        Priority: MEDIUM
        """
        assert "RULE-4313" in all_results['results'], "Rule RULE-4313 missing"
        result = all_results['results']["RULE-4313"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-4313 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-4313 failed"


    def test_rule_4314(self, all_results):
        """
        Test RULE-4314: YAML line: pepper_strategy: "per_tenant"
        Priority: MEDIUM
        """
        assert "RULE-4314" in all_results['results'], "Rule RULE-4314 missing"
        result = all_results['results']["RULE-4314"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-4314 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-4314 failed"


    def test_rule_4315(self, all_results):
        """
        Test RULE-4315: YAML line: deterministic: true
        Priority: MEDIUM
        """
        assert "RULE-4315" in all_results['results'], "Rule RULE-4315 missing"
        result = all_results['results']["RULE-4315"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-4315 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-4315 failed"


    def test_rule_4316(self, all_results):
        """
        Test RULE-4316: YAML line: raw_data_retention: "0 seconds"
        Priority: MEDIUM
        """
        assert "RULE-4316" in all_results['results'], "Rule RULE-4316 missing"
        result = all_results['results']["RULE-4316"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-4316 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-4316 failed"


    def test_rule_4317(self, all_results):
        """
        Test RULE-4317: YAML field 'country_specific.uk.ico_uk_gdpr.mandatory' must equal 'True'
        Priority: CRITICAL
        """
        assert "RULE-4317" in all_results['results'], "Rule RULE-4317 missing"
        result = all_results['results']["RULE-4317"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-4317 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-4317 failed"


    def test_rule_4318(self, all_results):
        """
        Test RULE-4318: YAML list 'country_specific.uk.ico_uk_gdpr.requirements' must contain 2 elements
        Priority: CRITICAL
        """
        assert "RULE-4318" in all_results['results'], "Rule RULE-4318 missing"
        result = all_results['results']["RULE-4318"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-4318 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-4318 failed"


    def test_rule_4319(self, all_results):
        """
        Test RULE-4319: YAML field 'country_specific.singapore.mas_pdpa.mandatory' must equal 'True'
        Priority: CRITICAL
        """
        assert "RULE-4319" in all_results['results'], "Rule RULE-4319 missing"
        result = all_results['results']["RULE-4319"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-4319 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-4319 failed"


    def test_rule_4320(self, all_results):
        """
        Test RULE-4320: YAML list 'country_specific.singapore.mas_pdpa.requirements' must contain 2 elem
        Priority: CRITICAL
        """
        assert "RULE-4320" in all_results['results'], "Rule RULE-4320 missing"
        result = all_results['results']["RULE-4320"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-4320 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-4320 failed"


    def test_rule_4321(self, all_results):
        """
        Test RULE-4321: YAML field 'country_specific.japan.jfsa_appi.mandatory' must equal 'True'
        Priority: CRITICAL
        """
        assert "RULE-4321" in all_results['results'], "Rule RULE-4321 missing"
        result = all_results['results']["RULE-4321"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-4321 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-4321 failed"


    def test_rule_4322(self, all_results):
        """
        Test RULE-4322: YAML list 'country_specific.japan.jfsa_appi.requirements' must contain 1 element
        Priority: CRITICAL
        """
        assert "RULE-4322" in all_results['results'], "Rule RULE-4322 missing"
        result = all_results['results']["RULE-4322"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-4322 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-4322 failed"


    def test_rule_4323(self, all_results):
        """
        Test RULE-4323: YAML field 'country_specific.australia.au_privacy_act_1988.mandatory' must equal
        Priority: CRITICAL
        """
        assert "RULE-4323" in all_results['results'], "Rule RULE-4323 missing"
        result = all_results['results']["RULE-4323"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-4323 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-4323 failed"


    def test_rule_4324(self, all_results):
        """
        Test RULE-4324: YAML list 'country_specific.australia.au_privacy_act_1988.requirements' must con
        Priority: CRITICAL
        """
        assert "RULE-4324" in all_results['results'], "Rule RULE-4324 missing"
        result = all_results['results']["RULE-4324"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-4324 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-4324 failed"


    def test_rule_4325(self, all_results):
        """
        Test RULE-4325: YAML line: country_specific:
        Priority: MEDIUM
        """
        assert "RULE-4325" in all_results['results'], "Rule RULE-4325 missing"
        result = all_results['results']["RULE-4325"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-4325 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-4325 failed"


    def test_rule_4326(self, all_results):
        """
        Test RULE-4326: YAML line: uk:
        Priority: MEDIUM
        """
        assert "RULE-4326" in all_results['results'], "Rule RULE-4326 missing"
        result = all_results['results']["RULE-4326"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-4326 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-4326 failed"


    def test_rule_4327(self, all_results):
        """
        Test RULE-4327: YAML line: ico_uk_gdpr:
        Priority: MEDIUM
        """
        assert "RULE-4327" in all_results['results'], "Rule RULE-4327 missing"
        result = all_results['results']["RULE-4327"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-4327 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-4327 failed"


    def test_rule_4328(self, all_results):
        """
        Test RULE-4328: YAML line: mandatory: true
        Priority: CRITICAL
        """
        assert "RULE-4328" in all_results['results'], "Rule RULE-4328 missing"
        result = all_results['results']["RULE-4328"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-4328 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-4328 failed"


    def test_rule_4329(self, all_results):
        """
        Test RULE-4329: YAML line: requirements:
        Priority: MEDIUM
        """
        assert "RULE-4329" in all_results['results'], "Rule RULE-4329 missing"
        result = all_results['results']["RULE-4329"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-4329 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-4329 failed"


    def test_rule_4330(self, all_results):
        """
        Test RULE-4330: YAML line: - dpa_2018_alignment: true
        Priority: MEDIUM
        """
        assert "RULE-4330" in all_results['results'], "Rule RULE-4330 missing"
        result = all_results['results']["RULE-4330"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-4330 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-4330 failed"


    def test_rule_4331(self, all_results):
        """
        Test RULE-4331: YAML line: - dpo_contact_records: true
        Priority: MEDIUM
        """
        assert "RULE-4331" in all_results['results'], "Rule RULE-4331 missing"
        result = all_results['results']["RULE-4331"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-4331 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-4331 failed"


    def test_rule_4332(self, all_results):
        """
        Test RULE-4332: YAML line: singapore:
        Priority: MEDIUM
        """
        assert "RULE-4332" in all_results['results'], "Rule RULE-4332 missing"
        result = all_results['results']["RULE-4332"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-4332 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-4332 failed"


    def test_rule_4333(self, all_results):
        """
        Test RULE-4333: YAML line: mas_pdpa:
        Priority: MEDIUM
        """
        assert "RULE-4333" in all_results['results'], "Rule RULE-4333 missing"
        result = all_results['results']["RULE-4333"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-4333 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-4333 failed"


    def test_rule_4334(self, all_results):
        """
        Test RULE-4334: YAML line: mandatory: true
        Priority: CRITICAL
        """
        assert "RULE-4334" in all_results['results'], "Rule RULE-4334 missing"
        result = all_results['results']["RULE-4334"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-4334 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-4334 failed"


    def test_rule_4335(self, all_results):
        """
        Test RULE-4335: YAML line: requirements:
        Priority: MEDIUM
        """
        assert "RULE-4335" in all_results['results'], "Rule RULE-4335 missing"
        result = all_results['results']["RULE-4335"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-4335 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-4335 failed"


    def test_rule_4336(self, all_results):
        """
        Test RULE-4336: YAML line: - data_breach_notification: true
        Priority: MEDIUM
        """
        assert "RULE-4336" in all_results['results'], "Rule RULE-4336 missing"
        result = all_results['results']["RULE-4336"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-4336 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-4336 failed"


    def test_rule_4337(self, all_results):
        """
        Test RULE-4337: YAML line: - consent_purposes_documented: true
        Priority: MEDIUM
        """
        assert "RULE-4337" in all_results['results'], "Rule RULE-4337 missing"
        result = all_results['results']["RULE-4337"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-4337 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-4337 failed"


    def test_rule_4338(self, all_results):
        """
        Test RULE-4338: YAML line: japan:
        Priority: MEDIUM
        """
        assert "RULE-4338" in all_results['results'], "Rule RULE-4338 missing"
        result = all_results['results']["RULE-4338"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-4338 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-4338 failed"


    def test_rule_4339(self, all_results):
        """
        Test RULE-4339: YAML line: jfsa_appi:
        Priority: MEDIUM
        """
        assert "RULE-4339" in all_results['results'], "Rule RULE-4339 missing"
        result = all_results['results']["RULE-4339"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-4339 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-4339 failed"


    def test_rule_4340(self, all_results):
        """
        Test RULE-4340: YAML line: mandatory: true
        Priority: CRITICAL
        """
        assert "RULE-4340" in all_results['results'], "Rule RULE-4340 missing"
        result = all_results['results']["RULE-4340"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-4340 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-4340 failed"


    def test_rule_4341(self, all_results):
        """
        Test RULE-4341: YAML line: requirements:
        Priority: MEDIUM
        """
        assert "RULE-4341" in all_results['results'], "Rule RULE-4341 missing"
        result = all_results['results']["RULE-4341"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-4341 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-4341 failed"


    def test_rule_4342(self, all_results):
        """
        Test RULE-4342: YAML line: - cross_border_transfer_rules: true
        Priority: MEDIUM
        """
        assert "RULE-4342" in all_results['results'], "Rule RULE-4342 missing"
        result = all_results['results']["RULE-4342"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-4342 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-4342 failed"


    def test_rule_4343(self, all_results):
        """
        Test RULE-4343: YAML line: australia:
        Priority: MEDIUM
        """
        assert "RULE-4343" in all_results['results'], "Rule RULE-4343 missing"
        result = all_results['results']["RULE-4343"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-4343 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-4343 failed"


    def test_rule_4344(self, all_results):
        """
        Test RULE-4344: YAML line: au_privacy_act_1988:
        Priority: MEDIUM
        """
        assert "RULE-4344" in all_results['results'], "Rule RULE-4344 missing"
        result = all_results['results']["RULE-4344"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-4344 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-4344 failed"


    def test_rule_4345(self, all_results):
        """
        Test RULE-4345: YAML line: mandatory: true
        Priority: CRITICAL
        """
        assert "RULE-4345" in all_results['results'], "Rule RULE-4345 missing"
        result = all_results['results']["RULE-4345"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-4345 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-4345 failed"


    def test_rule_4346(self, all_results):
        """
        Test RULE-4346: YAML line: requirements:
        Priority: MEDIUM
        """
        assert "RULE-4346" in all_results['results'], "Rule RULE-4346 missing"
        result = all_results['results']["RULE-4346"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-4346 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-4346 failed"


    def test_rule_4347(self, all_results):
        """
        Test RULE-4347: YAML line: - app11_security_of_personal_information: true
        Priority: CRITICAL
        """
        assert "RULE-4347" in all_results['results'], "Rule RULE-4347 missing"
        result = all_results['results']["RULE-4347"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-4347 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-4347 failed"


    def test_rule_4348(self, all_results):
        """
        Test RULE-4348: YAML list 'True.push.branches' must contain 2 elements
        Priority: MEDIUM
        """
        assert "RULE-4348" in all_results['results'], "Rule RULE-4348 missing"
        result = all_results['results']["RULE-4348"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-4348 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-4348 failed"


    def test_rule_4349(self, all_results):
        """
        Test RULE-4349: YAML list 'True.pull_request.branches' must contain 2 elements
        Priority: MEDIUM
        """
        assert "RULE-4349" in all_results['results'], "Rule RULE-4349 missing"
        result = all_results['results']["RULE-4349"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-4349 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-4349 failed"


    def test_rule_4350(self, all_results):
        """
        Test RULE-4350: YAML list 'True.schedule' must contain 2 elements
        Priority: MEDIUM
        """
        assert "RULE-4350" in all_results['results'], "Rule RULE-4350 missing"
        result = all_results['results']["RULE-4350"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-4350 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-4350 failed"


    def test_rule_4351(self, all_results):
        """
        Test RULE-4351: YAML line: on:
        Priority: MEDIUM
        """
        assert "RULE-4351" in all_results['results'], "Rule RULE-4351 missing"
        result = all_results['results']["RULE-4351"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-4351 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-4351 failed"


    def test_rule_4352(self, all_results):
        """
        Test RULE-4352: YAML line: push:
        Priority: MEDIUM
        """
        assert "RULE-4352" in all_results['results'], "Rule RULE-4352 missing"
        result = all_results['results']["RULE-4352"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-4352 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-4352 failed"


    def test_rule_4353(self, all_results):
        """
        Test RULE-4353: YAML line: branches: [ main, develop ]
        Priority: MEDIUM
        """
        assert "RULE-4353" in all_results['results'], "Rule RULE-4353 missing"
        result = all_results['results']["RULE-4353"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-4353 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-4353 failed"


    def test_rule_4354(self, all_results):
        """
        Test RULE-4354: YAML line: pull_request:
        Priority: MEDIUM
        """
        assert "RULE-4354" in all_results['results'], "Rule RULE-4354 missing"
        result = all_results['results']["RULE-4354"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-4354 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-4354 failed"


    def test_rule_4355(self, all_results):
        """
        Test RULE-4355: YAML line: branches: [ main, develop ]
        Priority: MEDIUM
        """
        assert "RULE-4355" in all_results['results'], "Rule RULE-4355 missing"
        result = all_results['results']["RULE-4355"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-4355 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-4355 failed"


    def test_rule_4356(self, all_results):
        """
        Test RULE-4356: YAML line: schedule:
        Priority: MEDIUM
        """
        assert "RULE-4356" in all_results['results'], "Rule RULE-4356 missing"
        result = all_results['results']["RULE-4356"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-4356 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-4356 failed"


    def test_rule_4357(self, all_results):
        """
        Test RULE-4357: YAML line: - cron: '15 3 * * *'      # daily sanctions
        Priority: MEDIUM
        """
        assert "RULE-4357" in all_results['results'], "Rule RULE-4357 missing"
        result = all_results['results']["RULE-4357"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-4357 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-4357 failed"


    def test_rule_4358(self, all_results):
        """
        Test RULE-4358: YAML line: - cron: '0 0 1 */3 *'     # quarterly audit report
        Priority: MEDIUM
        """
        assert "RULE-4358" in all_results['results'], "Rule RULE-4358 missing"
        result = all_results['results']["RULE-4358"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-4358 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-4358 failed"


    def test_rule_4359(self, all_results):
        """
        Test RULE-4359: YAML line: - name: Build entities_to_check.json
        Priority: MEDIUM
        """
        assert "RULE-4359" in all_results['results'], "Rule RULE-4359 missing"
        result = all_results['results']["RULE-4359"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-4359 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-4359 failed"


    def test_rule_4360(self, all_results):
        """
        Test RULE-4360: YAML line: run: |
        Priority: MEDIUM
        """
        assert "RULE-4360" in all_results['results'], "Rule RULE-4360 missing"
        result = all_results['results']["RULE-4360"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-4360 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-4360 failed"


    def test_rule_4361(self, all_results):
        """
        Test RULE-4361: YAML line: python 23_compliance/scripts/build_entities_list.py       --registry 
        Priority: CRITICAL
        """
        assert "RULE-4361" in all_results['results'], "Rule RULE-4361 missing"
        result = all_results['results']["RULE-4361"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-4361 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-4361 failed"


    def test_rule_4362(self, all_results):
        """
        Test RULE-4362: YAML field 'version' must equal '1.0.0'
        Priority: HIGH
        """
        assert "RULE-4362" in all_results['results'], "Rule RULE-4362 missing"
        result = all_results['results']["RULE-4362"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "HIGH" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-4362 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-4362 failed"


    def test_rule_4363(self, all_results):
        """
        Test RULE-4363: YAML field 'last_updated' must equal '<ISO8601>'
        Priority: MEDIUM
        """
        assert "RULE-4363" in all_results['results'], "Rule RULE-4363 missing"
        result = all_results['results']["RULE-4363"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-4363 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-4363 failed"


    def test_rule_4364(self, all_results):
        """
        Test RULE-4364: YAML field 'sources.ofac_sdn.url' must equal 'https://www.treasury.gov/ofac'
        Priority: MEDIUM
        """
        assert "RULE-4364" in all_results['results'], "Rule RULE-4364 missing"
        result = all_results['results']["RULE-4364"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-4364 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-4364 failed"


    def test_rule_4365(self, all_results):
        """
        Test RULE-4365: YAML field 'sources.ofac_sdn.sha256' must equal '<hash>'
        Priority: MEDIUM
        """
        assert "RULE-4365" in all_results['results'], "Rule RULE-4365 missing"
        result = all_results['results']["RULE-4365"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-4365 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-4365 failed"


    def test_rule_4366(self, all_results):
        """
        Test RULE-4366: YAML field 'sources.eu_consolidated.url' must equal 'https://data.europa.eu/'
        Priority: MEDIUM
        """
        assert "RULE-4366" in all_results['results'], "Rule RULE-4366 missing"
        result = all_results['results']["RULE-4366"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-4366 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-4366 failed"


    def test_rule_4367(self, all_results):
        """
        Test RULE-4367: YAML field 'sources.eu_consolidated.sha256' must equal '<hash>'
        Priority: MEDIUM
        """
        assert "RULE-4367" in all_results['results'], "Rule RULE-4367 missing"
        result = all_results['results']["RULE-4367"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-4367 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-4367 failed"


    def test_rule_4368(self, all_results):
        """
        Test RULE-4368: YAML field 'freshness_policy.max_age_hours' must equal '24'
        Priority: MEDIUM
        """
        assert "RULE-4368" in all_results['results'], "Rule RULE-4368 missing"
        result = all_results['results']["RULE-4368"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-4368 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-4368 failed"


    def test_rule_4369(self, all_results):
        """
        Test RULE-4369: YAML line: version: 1.0.0
        Priority: MEDIUM
        """
        assert "RULE-4369" in all_results['results'], "Rule RULE-4369 missing"
        result = all_results['results']["RULE-4369"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-4369 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-4369 failed"


    def test_rule_4370(self, all_results):
        """
        Test RULE-4370: YAML line: last_updated: "<ISO8601>"
        Priority: MEDIUM
        """
        assert "RULE-4370" in all_results['results'], "Rule RULE-4370 missing"
        result = all_results['results']["RULE-4370"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-4370 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-4370 failed"


    def test_rule_4371(self, all_results):
        """
        Test RULE-4371: YAML line: sources:
        Priority: MEDIUM
        """
        assert "RULE-4371" in all_results['results'], "Rule RULE-4371 missing"
        result = all_results['results']["RULE-4371"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-4371 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-4371 failed"


    def test_rule_4372(self, all_results):
        """
        Test RULE-4372: YAML line: ofac_sdn:
        Priority: MEDIUM
        """
        assert "RULE-4372" in all_results['results'], "Rule RULE-4372 missing"
        result = all_results['results']["RULE-4372"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-4372 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-4372 failed"


    def test_rule_4373(self, all_results):
        """
        Test RULE-4373: YAML line: url: "https://www.treasury.gov/ofac"
        Priority: MEDIUM
        """
        assert "RULE-4373" in all_results['results'], "Rule RULE-4373 missing"
        result = all_results['results']["RULE-4373"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-4373 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-4373 failed"


    def test_rule_4374(self, all_results):
        """
        Test RULE-4374: YAML line: sha256: "<hash>"
        Priority: MEDIUM
        """
        assert "RULE-4374" in all_results['results'], "Rule RULE-4374 missing"
        result = all_results['results']["RULE-4374"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-4374 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-4374 failed"


    def test_rule_4375(self, all_results):
        """
        Test RULE-4375: YAML line: eu_consolidated:
        Priority: MEDIUM
        """
        assert "RULE-4375" in all_results['results'], "Rule RULE-4375 missing"
        result = all_results['results']["RULE-4375"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-4375 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-4375 failed"


    def test_rule_4376(self, all_results):
        """
        Test RULE-4376: YAML line: url: "https://data.europa.eu/"
        Priority: MEDIUM
        """
        assert "RULE-4376" in all_results['results'], "Rule RULE-4376 missing"
        result = all_results['results']["RULE-4376"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-4376 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-4376 failed"


    def test_rule_4377(self, all_results):
        """
        Test RULE-4377: YAML line: sha256: "<hash>"
        Priority: MEDIUM
        """
        assert "RULE-4377" in all_results['results'], "Rule RULE-4377 missing"
        result = all_results['results']["RULE-4377"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-4377 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-4377 failed"


    def test_rule_4378(self, all_results):
        """
        Test RULE-4378: YAML line: freshness_policy:
        Priority: MEDIUM
        """
        assert "RULE-4378" in all_results['results'], "Rule RULE-4378 missing"
        result = all_results['results']["RULE-4378"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-4378 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-4378 failed"


    def test_rule_4379(self, all_results):
        """
        Test RULE-4379: YAML line: max_age_hours: 24
        Priority: MEDIUM
        """
        assert "RULE-4379" in all_results['results'], "Rule RULE-4379 missing"
        result = all_results['results']["RULE-4379"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule RULE-4379 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule RULE-4379 failed"


    def test_rule_list_master_4380(self, all_results):
        """
        Test LIST-MASTER-4380: List item: *Version:** 1.0.0
        Priority: MEDIUM
        """
        assert "LIST-MASTER-4380" in all_results['results'], "Rule LIST-MASTER-4380 missing"
        result = all_results['results']["LIST-MASTER-4380"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-MASTER-4380 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-MASTER-4380 failed"


    def test_rule_list_master_4381(self, all_results):
        """
        Test LIST-MASTER-4381: List item: *Erstellt:** 2025-10-02
        Priority: MEDIUM
        """
        assert "LIST-MASTER-4381" in all_results['results'], "Rule LIST-MASTER-4381 missing"
        result = all_results['results']["LIST-MASTER-4381"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-MASTER-4381 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-MASTER-4381 failed"


    def test_rule_list_master_4382(self, all_results):
        """
        Test LIST-MASTER-4382: List item: *Status:** Production-Ready
        Priority: MEDIUM
        """
        assert "LIST-MASTER-4382" in all_results['results'], "Rule LIST-MASTER-4382 missing"
        result = all_results['results']["LIST-MASTER-4382"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-MASTER-4382 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-MASTER-4382 failed"


    def test_rule_list_master_4383(self, all_results):
        """
        Test LIST-MASTER-4383: List item: *Zweck:** Single Source of Truth für Architektur, Struktur & Policies
        Priority: MEDIUM
        """
        assert "LIST-MASTER-4383" in all_results['results'], "Rule LIST-MASTER-4383 missing"
        result = all_results['results']["LIST-MASTER-4383"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-MASTER-4383 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-MASTER-4383 failed"


    def test_rule_policy_master_4384(self, all_results):
        """
        Test POLICY-MASTER-4384: Policy #1: [Projektübersicht](#projektübersicht)
        Priority: MEDIUM
        """
        assert "POLICY-MASTER-4384" in all_results['results'], "Rule POLICY-MASTER-4384 missing"
        result = all_results['results']["POLICY-MASTER-4384"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule POLICY-MASTER-4384 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule POLICY-MASTER-4384 failed"


    def test_rule_policy_master_4385(self, all_results):
        """
        Test POLICY-MASTER-4385: Policy #2: [Die 24 Root-Ordner](#die-24-root-ordner)
        Priority: MEDIUM
        """
        assert "POLICY-MASTER-4385" in all_results['results'], "Rule POLICY-MASTER-4385 missing"
        result = all_results['results']["POLICY-MASTER-4385"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule POLICY-MASTER-4385 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule POLICY-MASTER-4385 failed"


    def test_rule_policy_master_4386(self, all_results):
        """
        Test POLICY-MASTER-4386: Policy #3: [Die 16 Shards (Oberkategorien)](#die-16-shards-oberkategorien)
        Priority: MEDIUM
        """
        assert "POLICY-MASTER-4386" in all_results['results'], "Rule POLICY-MASTER-4386 missing"
        result = all_results['results']["POLICY-MASTER-4386"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule POLICY-MASTER-4386 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule POLICY-MASTER-4386 failed"


    def test_rule_policy_master_4387(self, all_results):
        """
        Test POLICY-MASTER-4387: Policy #4: [Matrix-Architektur (24×16)](#matrix-architektur-24×16)
        Priority: MEDIUM
        """
        assert "POLICY-MASTER-4387" in all_results['results'], "Rule POLICY-MASTER-4387 missing"
        result = all_results['results']["POLICY-MASTER-4387"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule POLICY-MASTER-4387 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule POLICY-MASTER-4387 failed"


    def test_rule_policy_master_4388(self, all_results):
        """
        Test POLICY-MASTER-4388: Policy #5: [Hybrid-Struktur: SoT + Implementierung](#hybrid-struktur-sot--implem
        Priority: MEDIUM
        """
        assert "POLICY-MASTER-4388" in all_results['results'], "Rule POLICY-MASTER-4388 missing"
        result = all_results['results']["POLICY-MASTER-4388"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule POLICY-MASTER-4388 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule POLICY-MASTER-4388 failed"


    def test_rule_policy_master_4389(self, all_results):
        """
        Test POLICY-MASTER-4389: Policy #6: [Ordnerstruktur Beispiele](#ordnerstruktur-beispiele)
        Priority: MEDIUM
        """
        assert "POLICY-MASTER-4389" in all_results['results'], "Rule POLICY-MASTER-4389 missing"
        result = all_results['results']["POLICY-MASTER-4389"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule POLICY-MASTER-4389 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule POLICY-MASTER-4389 failed"


    def test_rule_policy_master_4390(self, all_results):
        """
        Test POLICY-MASTER-4390: Policy #7: [chart.yaml Struktur](#chartyaml-struktur)
        Priority: MEDIUM
        """
        assert "POLICY-MASTER-4390" in all_results['results'], "Rule POLICY-MASTER-4390 missing"
        result = all_results['results']["POLICY-MASTER-4390"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule POLICY-MASTER-4390 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule POLICY-MASTER-4390 failed"


    def test_rule_policy_master_4391(self, all_results):
        """
        Test POLICY-MASTER-4391: Policy #8: [manifest.yaml Struktur](#manifestyaml-struktur)
        Priority: MEDIUM
        """
        assert "POLICY-MASTER-4391" in all_results['results'], "Rule POLICY-MASTER-4391 missing"
        result = all_results['results']["POLICY-MASTER-4391"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule POLICY-MASTER-4391 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule POLICY-MASTER-4391 failed"


    def test_rule_policy_master_4392(self, all_results):
        """
        Test POLICY-MASTER-4392: Policy #9: [Naming Conventions](#naming-conventions)
        Priority: MEDIUM
        """
        assert "POLICY-MASTER-4392" in all_results['results'], "Rule POLICY-MASTER-4392 missing"
        result = all_results['results']["POLICY-MASTER-4392"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule POLICY-MASTER-4392 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule POLICY-MASTER-4392 failed"


    def test_rule_policy_master_4393(self, all_results):
        """
        Test POLICY-MASTER-4393: Policy #10: [Kritische Policies](#kritische-policies)
        Priority: MEDIUM
        """
        assert "POLICY-MASTER-4393" in all_results['results'], "Rule POLICY-MASTER-4393 missing"
        result = all_results['results']["POLICY-MASTER-4393"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule POLICY-MASTER-4393 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule POLICY-MASTER-4393 failed"


    def test_rule_policy_master_4394(self, all_results):
        """
        Test POLICY-MASTER-4394: Policy #11: [Governance-Modell](#governance-modell)
        Priority: MEDIUM
        """
        assert "POLICY-MASTER-4394" in all_results['results'], "Rule POLICY-MASTER-4394 missing"
        result = all_results['results']["POLICY-MASTER-4394"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule POLICY-MASTER-4394 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule POLICY-MASTER-4394 failed"


    def test_rule_policy_master_4395(self, all_results):
        """
        Test POLICY-MASTER-4395: Policy #12: [Kernprinzipien](#kernprinzipien)
        Priority: MEDIUM
        """
        assert "POLICY-MASTER-4395" in all_results['results'], "Rule POLICY-MASTER-4395 missing"
        result = all_results['results']["POLICY-MASTER-4395"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule POLICY-MASTER-4395 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule POLICY-MASTER-4395 failed"


    def test_rule_policy_master_4396(self, all_results):
        """
        Test POLICY-MASTER-4396: Policy #13: [Nächste Schritte](#nächste-schritte)
        Priority: MEDIUM
        """
        assert "POLICY-MASTER-4396" in all_results['results'], "Rule POLICY-MASTER-4396 missing"
        result = all_results['results']["POLICY-MASTER-4396"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule POLICY-MASTER-4396 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule POLICY-MASTER-4396 failed"


    def test_rule_list_master_4397(self, all_results):
        """
        Test LIST-MASTER-4397: List item: *SSID** ist ein **Self-Sovereign Identity (SSI) Projekt**, das weit ü
        Priority: MEDIUM
        """
        assert "LIST-MASTER-4397" in all_results['results'], "Rule LIST-MASTER-4397 missing"
        result = all_results['results']["LIST-MASTER-4397"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-MASTER-4397 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-MASTER-4397 failed"


    def test_rule_list_master_4398(self, all_results):
        """
        Test LIST-MASTER-4398: List item: *2-Dimensionale Matrix:**
        Priority: MEDIUM
        """
        assert "LIST-MASTER-4398" in all_results['results'], "Rule LIST-MASTER-4398 missing"
        result = all_results['results']["LIST-MASTER-4398"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-MASTER-4398 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-MASTER-4398 failed"


    def test_rule_list_master_4399(self, all_results):
        """
        Test LIST-MASTER-4399: List item: **Vertikal (24 Roots):** Technische Systemebenen
        Priority: MEDIUM
        """
        assert "LIST-MASTER-4399" in all_results['results'], "Rule LIST-MASTER-4399 missing"
        result = all_results['results']["LIST-MASTER-4399"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-MASTER-4399 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-MASTER-4399 failed"


    def test_rule_list_master_4400(self, all_results):
        """
        Test LIST-MASTER-4400: List item: **Horizontal (16 Shards):** Universelle Anwendungsdomänen
        Priority: MEDIUM
        """
        assert "LIST-MASTER-4400" in all_results['results'], "Rule LIST-MASTER-4400 missing"
        result = all_results['results']["LIST-MASTER-4400"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-MASTER-4400 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-MASTER-4400 failed"


    def test_rule_list_master_4401(self, all_results):
        """
        Test LIST-MASTER-4401: List item: **= 384 Chart-Dateien** (24 × 16)
        Priority: MEDIUM
        """
        assert "LIST-MASTER-4401" in all_results['results'], "Rule LIST-MASTER-4401 missing"
        result = all_results['results']["LIST-MASTER-4401"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-MASTER-4401 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-MASTER-4401 failed"


    def test_rule_list_master_4402(self, all_results):
        """
        Test LIST-MASTER-4402: List item: **Blockchain/DLT:** Ethereum, Polygon, eigene Layer
        Priority: MEDIUM
        """
        assert "LIST-MASTER-4402" in all_results['results'], "Rule LIST-MASTER-4402 missing"
        result = all_results['results']["LIST-MASTER-4402"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-MASTER-4402 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-MASTER-4402 failed"


    def test_rule_list_master_4403(self, all_results):
        """
        Test LIST-MASTER-4403: List item: **Smart Contracts:** Solidity, Rust
        Priority: MEDIUM
        """
        assert "LIST-MASTER-4403" in all_results['results'], "Rule LIST-MASTER-4403 missing"
        result = all_results['results']["LIST-MASTER-4403"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-MASTER-4403 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-MASTER-4403 failed"


    def test_rule_list_master_4404(self, all_results):
        """
        Test LIST-MASTER-4404: List item: **Identity:** W3C DID, Verifiable Credentials
        Priority: MEDIUM
        """
        assert "LIST-MASTER-4404" in all_results['results'], "Rule LIST-MASTER-4404 missing"
        result = all_results['results']["LIST-MASTER-4404"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-MASTER-4404 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-MASTER-4404 failed"


    def test_rule_list_master_4405(self, all_results):
        """
        Test LIST-MASTER-4405: List item: **Storage:** IPFS, Hash-Ledger, WORM
        Priority: MEDIUM
        """
        assert "LIST-MASTER-4405" in all_results['results'], "Rule LIST-MASTER-4405 missing"
        result = all_results['results']["LIST-MASTER-4405"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-MASTER-4405 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-MASTER-4405 failed"


    def test_rule_list_master_4406(self, all_results):
        """
        Test LIST-MASTER-4406: List item: **Compliance:** GDPR, eIDAS 2.0, EU AI Act, MiCA
        Priority: CRITICAL
        """
        assert "LIST-MASTER-4406" in all_results['results'], "Rule LIST-MASTER-4406 missing"
        result = all_results['results']["LIST-MASTER-4406"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-MASTER-4406 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-MASTER-4406 failed"


    def test_rule_list_master_4407(self, all_results):
        """
        Test LIST-MASTER-4407: List item: *AI/ML & Intelligenz**
        Priority: MEDIUM
        """
        assert "LIST-MASTER-4407" in all_results['results'], "Rule LIST-MASTER-4407 missing"
        result = all_results['results']["LIST-MASTER-4407"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-MASTER-4407 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-MASTER-4407 failed"


    def test_rule_list_master_4408(self, all_results):
        """
        Test LIST-MASTER-4408: List item: KI-Modelle (Training, Inferenz, Federated Learning)
        Priority: MEDIUM
        """
        assert "LIST-MASTER-4408" in all_results['results'], "Rule LIST-MASTER-4408 missing"
        result = all_results['results']["LIST-MASTER-4408"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-MASTER-4408 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-MASTER-4408 failed"


    def test_rule_list_master_4409(self, all_results):
        """
        Test LIST-MASTER-4409: List item: Risk/Trust-Scoring, Bias- & Fairness-Kontrollen
        Priority: MEDIUM
        """
        assert "LIST-MASTER-4409" in all_results['results'], "Rule LIST-MASTER-4409 missing"
        result = all_results['results']["LIST-MASTER-4409"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-MASTER-4409 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-MASTER-4409 failed"


    def test_rule_list_master_4410(self, all_results):
        """
        Test LIST-MASTER-4410: List item: AI Governance (EU AI Act, Drift Detection, Safety)
        Priority: MEDIUM
        """
        assert "LIST-MASTER-4410" in all_results['results'], "Rule LIST-MASTER-4410 missing"
        result = all_results['results']["LIST-MASTER-4410"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-MASTER-4410 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-MASTER-4410 failed"


    def test_rule_list_master_4411(self, all_results):
        """
        Test LIST-MASTER-4411: List item: Multi-Modal (Text, Bild, Audio, Video)
        Priority: MEDIUM
        """
        assert "LIST-MASTER-4411" in all_results['results'], "Rule LIST-MASTER-4411 missing"
        result = all_results['results']["LIST-MASTER-4411"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-MASTER-4411 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-MASTER-4411 failed"


    def test_rule_list_master_4412(self, all_results):
        """
        Test LIST-MASTER-4412: List item: *Nachweise & Beweisführung**
        Priority: MEDIUM
        """
        assert "LIST-MASTER-4412" in all_results['results'], "Rule LIST-MASTER-4412 missing"
        result = all_results['results']["LIST-MASTER-4412"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-MASTER-4412 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-MASTER-4412 failed"


    def test_rule_list_master_4413(self, all_results):
        """
        Test LIST-MASTER-4413: List item: Hash-Ledger, Evidence-Matrix, Blockchain Anchors
        Priority: MEDIUM
        """
        assert "LIST-MASTER-4413" in all_results['results'], "Rule LIST-MASTER-4413 missing"
        result = all_results['results']["LIST-MASTER-4413"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-MASTER-4413 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-MASTER-4413 failed"


    def test_rule_list_master_4414(self, all_results):
        """
        Test LIST-MASTER-4414: List item: Audit-Trails, Logging, Retention, Quarantine
        Priority: MEDIUM
        """
        assert "LIST-MASTER-4414" in all_results['results'], "Rule LIST-MASTER-4414 missing"
        result = all_results['results']["LIST-MASTER-4414"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-MASTER-4414 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-MASTER-4414 failed"


    def test_rule_list_master_4415(self, all_results):
        """
        Test LIST-MASTER-4415: List item: Compliance-Protokolle, DAO-Governance-Audits
        Priority: CRITICAL
        """
        assert "LIST-MASTER-4415" in all_results['results'], "Rule LIST-MASTER-4415 missing"
        result = all_results['results']["LIST-MASTER-4415"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-MASTER-4415 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-MASTER-4415 failed"


    def test_rule_list_master_4416(self, all_results):
        """
        Test LIST-MASTER-4416: List item: *Zentrale Logik**
        Priority: MEDIUM
        """
        assert "LIST-MASTER-4416" in all_results['results'], "Rule LIST-MASTER-4416 missing"
        result = all_results['results']["LIST-MASTER-4416"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-MASTER-4416 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-MASTER-4416 failed"


    def test_rule_list_master_4417(self, all_results):
        """
        Test LIST-MASTER-4417: List item: Smart Contract Kernsystem (On-Chain-Regeln)
        Priority: MEDIUM
        """
        assert "LIST-MASTER-4417" in all_results['results'], "Rule LIST-MASTER-4417 missing"
        result = all_results['results']["LIST-MASTER-4417"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-MASTER-4417 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-MASTER-4417 failed"


    def test_rule_list_master_4418(self, all_results):
        """
        Test LIST-MASTER-4418: List item: Dispatcher-Schnittstellen
        Priority: MEDIUM
        """
        assert "LIST-MASTER-4418" in all_results['results'], "Rule LIST-MASTER-4418 missing"
        result = all_results['results']["LIST-MASTER-4418"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-MASTER-4418 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-MASTER-4418 failed"


    def test_rule_list_master_4419(self, all_results):
        """
        Test LIST-MASTER-4419: List item: Identity-Resolver, Core-APIs
        Priority: MEDIUM
        """
        assert "LIST-MASTER-4419" in all_results['results'], "Rule LIST-MASTER-4419 missing"
        result = all_results['results']["LIST-MASTER-4419"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-MASTER-4419 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-MASTER-4419 failed"


    def test_rule_list_master_4420(self, all_results):
        """
        Test LIST-MASTER-4420: List item: Root-24-LOCK Enforcement
        Priority: MEDIUM
        """
        assert "LIST-MASTER-4420" in all_results['results'], "Rule LIST-MASTER-4420 missing"
        result = all_results['results']["LIST-MASTER-4420"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-MASTER-4420 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-MASTER-4420 failed"


    def test_rule_list_master_4421(self, all_results):
        """
        Test LIST-MASTER-4421: List item: *Auslieferung & Distribution**
        Priority: MEDIUM
        """
        assert "LIST-MASTER-4421" in all_results['results'], "Rule LIST-MASTER-4421 missing"
        result = all_results['results']["LIST-MASTER-4421"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-MASTER-4421 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-MASTER-4421 failed"


    def test_rule_list_master_4422(self, all_results):
        """
        Test LIST-MASTER-4422: List item: CI/CD-Pipelines, Rollouts, Cluster-Konfiguration
        Priority: MEDIUM
        """
        assert "LIST-MASTER-4422" in all_results['results'], "Rule LIST-MASTER-4422 missing"
        result = all_results['results']["LIST-MASTER-4422"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-MASTER-4422 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-MASTER-4422 failed"


    def test_rule_list_master_4423(self, all_results):
        """
        Test LIST-MASTER-4423: List item: Deployment-Strategien (Canary, Blue/Green)
        Priority: MEDIUM
        """
        assert "LIST-MASTER-4423" in all_results['results'], "Rule LIST-MASTER-4423 missing"
        result = all_results['results']["LIST-MASTER-4423"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-MASTER-4423 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-MASTER-4423 failed"


    def test_rule_list_master_4424(self, all_results):
        """
        Test LIST-MASTER-4424: List item: Container & Orchestrierung (K8s, Terraform)
        Priority: MEDIUM
        """
        assert "LIST-MASTER-4424" in all_results['results'], "Rule LIST-MASTER-4424 missing"
        result = all_results['results']["LIST-MASTER-4424"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-MASTER-4424 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-MASTER-4424 failed"


    def test_rule_list_master_4425(self, all_results):
        """
        Test LIST-MASTER-4425: List item: *Dokumentation & I18N**
        Priority: MEDIUM
        """
        assert "LIST-MASTER-4425" in all_results['results'], "Rule LIST-MASTER-4425 missing"
        result = all_results['results']["LIST-MASTER-4425"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-MASTER-4425 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-MASTER-4425 failed"


    def test_rule_list_master_4426(self, all_results):
        """
        Test LIST-MASTER-4426: List item: Developer Guides, User Manuals, API Docs
        Priority: MEDIUM
        """
        assert "LIST-MASTER-4426" in all_results['results'], "Rule LIST-MASTER-4426 missing"
        result = all_results['results']["LIST-MASTER-4426"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-MASTER-4426 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-MASTER-4426 failed"


    def test_rule_list_master_4427(self, all_results):
        """
        Test LIST-MASTER-4427: List item: Mehrsprachigkeit (I18N-Layer)
        Priority: MEDIUM
        """
        assert "LIST-MASTER-4427" in all_results['results'], "Rule LIST-MASTER-4427 missing"
        result = all_results['results']["LIST-MASTER-4427"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-MASTER-4427 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-MASTER-4427 failed"


    def test_rule_list_master_4428(self, all_results):
        """
        Test LIST-MASTER-4428: List item: Strukturdateien, Docusaurus Export
        Priority: MEDIUM
        """
        assert "LIST-MASTER-4428" in all_results['results'], "Rule LIST-MASTER-4428 missing"
        result = all_results['results']["LIST-MASTER-4428"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-MASTER-4428 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-MASTER-4428 failed"


    def test_rule_list_master_4429(self, all_results):
        """
        Test LIST-MASTER-4429: List item: *Datenfluss & Verarbeitung**
        Priority: MEDIUM
        """
        assert "LIST-MASTER-4429" in all_results['results'], "Rule LIST-MASTER-4429 missing"
        result = all_results['results']["LIST-MASTER-4429"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-MASTER-4429 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-MASTER-4429 failed"


    def test_rule_list_master_4430(self, all_results):
        """
        Test LIST-MASTER-4430: List item: ETL/ELT-Prozesse, Datenströme
        Priority: MEDIUM
        """
        assert "LIST-MASTER-4430" in all_results['results'], "Rule LIST-MASTER-4430 missing"
        result = all_results['results']["LIST-MASTER-4430"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-MASTER-4430 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-MASTER-4430 failed"


    def test_rule_list_master_4431(self, all_results):
        """
        Test LIST-MASTER-4431: List item: Orchestrierung (Batch, Stream, Realtime)
        Priority: MEDIUM
        """
        assert "LIST-MASTER-4431" in all_results['results'], "Rule LIST-MASTER-4431 missing"
        result = all_results['results']["LIST-MASTER-4431"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-MASTER-4431 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-MASTER-4431 failed"


    def test_rule_list_master_4432(self, all_results):
        """
        Test LIST-MASTER-4432: List item: ML/AI Data-Feeds
        Priority: MEDIUM
        """
        assert "LIST-MASTER-4432" in all_results['results'], "Rule LIST-MASTER-4432 missing"
        result = all_results['results']["LIST-MASTER-4432"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-MASTER-4432 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-MASTER-4432 failed"


    def test_rule_list_master_4433(self, all_results):
        """
        Test LIST-MASTER-4433: List item: *Recht & Steuerung**
        Priority: MEDIUM
        """
        assert "LIST-MASTER-4433" in all_results['results'], "Rule LIST-MASTER-4433 missing"
        result = all_results['results']["LIST-MASTER-4433"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-MASTER-4433 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-MASTER-4433 failed"


    def test_rule_list_master_4434(self, all_results):
        """
        Test LIST-MASTER-4434: List item: eIDAS, MiCA, DSGVO, DORA
        Priority: MEDIUM
        """
        assert "LIST-MASTER-4434" in all_results['results'], "Rule LIST-MASTER-4434 missing"
        result = all_results['results']["LIST-MASTER-4434"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-MASTER-4434 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-MASTER-4434 failed"


    def test_rule_list_master_4435(self, all_results):
        """
        Test LIST-MASTER-4435: List item: Juristische Policies, Verträge mit Providern
        Priority: MEDIUM
        """
        assert "LIST-MASTER-4435" in all_results['results'], "Rule LIST-MASTER-4435 missing"
        result = all_results['results']["LIST-MASTER-4435"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-MASTER-4435 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-MASTER-4435 failed"


    def test_rule_list_master_4436(self, all_results):
        """
        Test LIST-MASTER-4436: List item: DAO-Governance-Regeln
        Priority: MEDIUM
        """
        assert "LIST-MASTER-4436" in all_results['results'], "Rule LIST-MASTER-4436 missing"
        result = all_results['results']["LIST-MASTER-4436"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-MASTER-4436 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-MASTER-4436 failed"


    def test_rule_list_master_4437(self, all_results):
        """
        Test LIST-MASTER-4437: List item: *Reputation & Scoring**
        Priority: MEDIUM
        """
        assert "LIST-MASTER-4437" in all_results['results'], "Rule LIST-MASTER-4437 missing"
        result = all_results['results']["LIST-MASTER-4437"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-MASTER-4437 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-MASTER-4437 failed"


    def test_rule_list_master_4438(self, all_results):
        """
        Test LIST-MASTER-4438: List item: Identity Trust Levels, Reputationssysteme
        Priority: MEDIUM
        """
        assert "LIST-MASTER-4438" in all_results['results'], "Rule LIST-MASTER-4438 missing"
        result = all_results['results']["LIST-MASTER-4438"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-MASTER-4438 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-MASTER-4438 failed"


    def test_rule_list_master_4439(self, all_results):
        """
        Test LIST-MASTER-4439: List item: Scoring-Algorithmen für SSI/DIDs
        Priority: MEDIUM
        """
        assert "LIST-MASTER-4439" in all_results['results'], "Rule LIST-MASTER-4439 missing"
        result = all_results['results']["LIST-MASTER-4439"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-MASTER-4439 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-MASTER-4439 failed"


    def test_rule_list_master_4440(self, all_results):
        """
        Test LIST-MASTER-4440: List item: Verhaltensanalysen (nur Hash-Proofs, keine PII)
        Priority: MEDIUM
        """
        assert "LIST-MASTER-4440" in all_results['results'], "Rule LIST-MASTER-4440 missing"
        result = all_results['results']["LIST-MASTER-4440"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-MASTER-4440 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-MASTER-4440 failed"


    def test_rule_list_master_4441(self, all_results):
        """
        Test LIST-MASTER-4441: List item: *Digitale Identität**
        Priority: MEDIUM
        """
        assert "LIST-MASTER-4441" in all_results['results'], "Rule LIST-MASTER-4441 missing"
        result = all_results['results']["LIST-MASTER-4441"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-MASTER-4441 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-MASTER-4441 failed"


    def test_rule_list_master_4442(self, all_results):
        """
        Test LIST-MASTER-4442: List item: DID-Schemas, Identity Wallets
        Priority: MEDIUM
        """
        assert "LIST-MASTER-4442" in all_results['results'], "Rule LIST-MASTER-4442 missing"
        result = all_results['results']["LIST-MASTER-4442"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-MASTER-4442 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-MASTER-4442 failed"


    def test_rule_list_master_4443(self, all_results):
        """
        Test LIST-MASTER-4443: List item: Selective Disclosure, Profile, Avatare
        Priority: MEDIUM
        """
        assert "LIST-MASTER-4443" in all_results['results'], "Rule LIST-MASTER-4443 missing"
        result = all_results['results']["LIST-MASTER-4443"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-MASTER-4443 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-MASTER-4443 failed"


    def test_rule_list_master_4444(self, all_results):
        """
        Test LIST-MASTER-4444: List item: Identity Lifecycle Management
        Priority: MEDIUM
        """
        assert "LIST-MASTER-4444" in all_results['results'], "Rule LIST-MASTER-4444 missing"
        result = all_results['results']["LIST-MASTER-4444"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-MASTER-4444 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-MASTER-4444 failed"


    def test_rule_list_master_4445(self, all_results):
        """
        Test LIST-MASTER-4445: List item: *Kompatibilität**
        Priority: MEDIUM
        """
        assert "LIST-MASTER-4445" in all_results['results'], "Rule LIST-MASTER-4445 missing"
        result = all_results['results']["LIST-MASTER-4445"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-MASTER-4445 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-MASTER-4445 failed"


    def test_rule_list_master_4446(self, all_results):
        """
        Test LIST-MASTER-4446: List item: DID-Resolver, Standards (DIF, W3C)
        Priority: HIGH
        """
        assert "LIST-MASTER-4446" in all_results['results'], "Rule LIST-MASTER-4446 missing"
        result = all_results['results']["LIST-MASTER-4446"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "HIGH" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-MASTER-4446 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-MASTER-4446 failed"


    def test_rule_list_master_4447(self, all_results):
        """
        Test LIST-MASTER-4447: List item: Cross-Chain Bridges, Protokoll-Adapter
        Priority: MEDIUM
        """
        assert "LIST-MASTER-4447" in all_results['results'], "Rule LIST-MASTER-4447 missing"
        result = all_results['results']["LIST-MASTER-4447"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-MASTER-4447 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-MASTER-4447 failed"


    def test_rule_list_master_4448(self, all_results):
        """
        Test LIST-MASTER-4448: List item: API-Gateways
        Priority: MEDIUM
        """
        assert "LIST-MASTER-4448" in all_results['results'], "Rule LIST-MASTER-4448 missing"
        result = all_results['results']["LIST-MASTER-4448"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-MASTER-4448 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-MASTER-4448 failed"


    def test_rule_list_master_4449(self, all_results):
        """
        Test LIST-MASTER-4449: List item: *Simulation & QA**
        Priority: MEDIUM
        """
        assert "LIST-MASTER-4449" in all_results['results'], "Rule LIST-MASTER-4449 missing"
        result = all_results['results']["LIST-MASTER-4449"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-MASTER-4449 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-MASTER-4449 failed"


    def test_rule_list_master_4450(self, all_results):
        """
        Test LIST-MASTER-4450: List item: Testumgebungen, Simulationen, Mock-Chains
        Priority: MEDIUM
        """
        assert "LIST-MASTER-4450" in all_results['results'], "Rule LIST-MASTER-4450 missing"
        result = all_results['results']["LIST-MASTER-4450"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-MASTER-4450 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-MASTER-4450 failed"


    def test_rule_list_master_4451(self, all_results):
        """
        Test LIST-MASTER-4451: List item: Chaos Engineering, Attack Simulations
        Priority: MEDIUM
        """
        assert "LIST-MASTER-4451" in all_results['results'], "Rule LIST-MASTER-4451 missing"
        result = all_results['results']["LIST-MASTER-4451"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-MASTER-4451 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-MASTER-4451 failed"


    def test_rule_list_master_4452(self, all_results):
        """
        Test LIST-MASTER-4452: List item: Benchmarking & Performance-Tests
        Priority: MEDIUM
        """
        assert "LIST-MASTER-4452" in all_results['results'], "Rule LIST-MASTER-4452 missing"
        result = all_results['results']["LIST-MASTER-4452"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-MASTER-4452 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-MASTER-4452 failed"


    def test_rule_list_master_4453(self, all_results):
        """
        Test LIST-MASTER-4453: List item: *Werkzeuge**
        Priority: MEDIUM
        """
        assert "LIST-MASTER-4453" in all_results['results'], "Rule LIST-MASTER-4453 missing"
        result = all_results['results']["LIST-MASTER-4453"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-MASTER-4453 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-MASTER-4453 failed"


    def test_rule_list_master_4454(self, all_results):
        """
        Test LIST-MASTER-4454: List item: Developer Tools, CLI, SDKs
        Priority: MEDIUM
        """
        assert "LIST-MASTER-4454" in all_results['results'], "Rule LIST-MASTER-4454 missing"
        result = all_results['results']["LIST-MASTER-4454"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-MASTER-4454 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-MASTER-4454 failed"


    def test_rule_list_master_4455(self, all_results):
        """
        Test LIST-MASTER-4455: List item: CI-Helper, Linter, Formatter
        Priority: MEDIUM
        """
        assert "LIST-MASTER-4455" in all_results['results'], "Rule LIST-MASTER-4455 missing"
        result = all_results['results']["LIST-MASTER-4455"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-MASTER-4455 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-MASTER-4455 failed"


    def test_rule_list_master_4456(self, all_results):
        """
        Test LIST-MASTER-4456: List item: Automation Scripts
        Priority: MEDIUM
        """
        assert "LIST-MASTER-4456" in all_results['results'], "Rule LIST-MASTER-4456 missing"
        result = all_results['results']["LIST-MASTER-4456"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-MASTER-4456 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-MASTER-4456 failed"


    def test_rule_list_master_4457(self, all_results):
        """
        Test LIST-MASTER-4457: List item: *Benutzeroberfläche**
        Priority: MEDIUM
        """
        assert "LIST-MASTER-4457" in all_results['results'], "Rule LIST-MASTER-4457 missing"
        result = all_results['results']["LIST-MASTER-4457"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-MASTER-4457 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-MASTER-4457 failed"


    def test_rule_list_master_4458(self, all_results):
        """
        Test LIST-MASTER-4458: List item: Frontend, Dashboards, Apps
        Priority: MEDIUM
        """
        assert "LIST-MASTER-4458" in all_results['results'], "Rule LIST-MASTER-4458 missing"
        result = all_results['results']["LIST-MASTER-4458"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-MASTER-4458 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-MASTER-4458 failed"


    def test_rule_list_master_4459(self, all_results):
        """
        Test LIST-MASTER-4459: List item: Partner- & User-Portale
        Priority: MEDIUM
        """
        assert "LIST-MASTER-4459" in all_results['results'], "Rule LIST-MASTER-4459 missing"
        result = all_results['results']["LIST-MASTER-4459"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-MASTER-4459 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-MASTER-4459 failed"


    def test_rule_list_master_4460(self, all_results):
        """
        Test LIST-MASTER-4460: List item: *Sofort-Authentifizierung**
        Priority: MEDIUM
        """
        assert "LIST-MASTER-4460" in all_results['results'], "Rule LIST-MASTER-4460 missing"
        result = all_results['results']["LIST-MASTER-4460"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-MASTER-4460 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-MASTER-4460 failed"


    def test_rule_list_master_4461(self, all_results):
        """
        Test LIST-MASTER-4461: List item: Real-Time KYC/KYB über Anbieter
        Priority: MEDIUM
        """
        assert "LIST-MASTER-4461" in all_results['results'], "Rule LIST-MASTER-4461 missing"
        result = all_results['results']["LIST-MASTER-4461"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-MASTER-4461 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-MASTER-4461 failed"


    def test_rule_list_master_4462(self, all_results):
        """
        Test LIST-MASTER-4462: List item: Zero-Time Login, Biometrie, MFA
        Priority: MEDIUM
        """
        assert "LIST-MASTER-4462" in all_results['results'], "Rule LIST-MASTER-4462 missing"
        result = all_results['results']["LIST-MASTER-4462"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-MASTER-4462 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-MASTER-4462 failed"


    def test_rule_list_master_4463(self, all_results):
        """
        Test LIST-MASTER-4463: List item: DID-gebundene Session-Tokens
        Priority: MEDIUM
        """
        assert "LIST-MASTER-4463" in all_results['results'], "Rule LIST-MASTER-4463 missing"
        result = all_results['results']["LIST-MASTER-4463"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-MASTER-4463 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-MASTER-4463 failed"


    def test_rule_list_master_4464(self, all_results):
        """
        Test LIST-MASTER-4464: List item: *Infrastruktur**
        Priority: MEDIUM
        """
        assert "LIST-MASTER-4464" in all_results['results'], "Rule LIST-MASTER-4464 missing"
        result = all_results['results']["LIST-MASTER-4464"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-MASTER-4464 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-MASTER-4464 failed"


    def test_rule_list_master_4465(self, all_results):
        """
        Test LIST-MASTER-4465: List item: Cloud, Bare-Metal, Netzwerke
        Priority: MEDIUM
        """
        assert "LIST-MASTER-4465" in all_results['results'], "Rule LIST-MASTER-4465 missing"
        result = all_results['results']["LIST-MASTER-4465"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-MASTER-4465 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-MASTER-4465 failed"


    def test_rule_list_master_4466(self, all_results):
        """
        Test LIST-MASTER-4466: List item: Storage, Compute, Load Balancing
        Priority: MEDIUM
        """
        assert "LIST-MASTER-4466" in all_results['results'], "Rule LIST-MASTER-4466 missing"
        result = all_results['results']["LIST-MASTER-4466"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-MASTER-4466 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-MASTER-4466 failed"


    def test_rule_list_master_4467(self, all_results):
        """
        Test LIST-MASTER-4467: List item: Secrets & Key Management
        Priority: MEDIUM
        """
        assert "LIST-MASTER-4467" in all_results['results'], "Rule LIST-MASTER-4467 missing"
        result = all_results['results']["LIST-MASTER-4467"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-MASTER-4467 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-MASTER-4467 failed"


    def test_rule_list_master_4468(self, all_results):
        """
        Test LIST-MASTER-4468: List item: *Wissensbasis & Regeln**
        Priority: MEDIUM
        """
        assert "LIST-MASTER-4468" in all_results['results'], "Rule LIST-MASTER-4468 missing"
        result = all_results['results']["LIST-MASTER-4468"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-MASTER-4468 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-MASTER-4468 failed"


    def test_rule_list_master_4469(self, all_results):
        """
        Test LIST-MASTER-4469: List item: Codex, Policies, Blaupausen
        Priority: MEDIUM
        """
        assert "LIST-MASTER-4469" in all_results['results'], "Rule LIST-MASTER-4469 missing"
        result = all_results['results']["LIST-MASTER-4469"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-MASTER-4469 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-MASTER-4469 failed"


    def test_rule_list_master_4470(self, all_results):
        """
        Test LIST-MASTER-4470: List item: Regelwerke für Module
        Priority: MEDIUM
        """
        assert "LIST-MASTER-4470" in all_results['results'], "Rule LIST-MASTER-4470 missing"
        result = all_results['results']["LIST-MASTER-4470"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-MASTER-4470 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-MASTER-4470 failed"


    def test_rule_list_master_4471(self, all_results):
        """
        Test LIST-MASTER-4471: List item: SSID-Bibeln (Manifeste, Strukturlevel3)
        Priority: MEDIUM
        """
        assert "LIST-MASTER-4471" in all_results['results'], "Rule LIST-MASTER-4471 missing"
        result = all_results['results']["LIST-MASTER-4471"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-MASTER-4471 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-MASTER-4471 failed"


    def test_rule_list_master_4472(self, all_results):
        """
        Test LIST-MASTER-4472: List item: *Monitoring & Insights**
        Priority: MEDIUM
        """
        assert "LIST-MASTER-4472" in all_results['results'], "Rule LIST-MASTER-4472 missing"
        result = all_results['results']["LIST-MASTER-4472"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-MASTER-4472 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-MASTER-4472 failed"


    def test_rule_list_master_4473(self, all_results):
        """
        Test LIST-MASTER-4473: List item: Logging, Metrics, Tracing
        Priority: MEDIUM
        """
        assert "LIST-MASTER-4473" in all_results['results'], "Rule LIST-MASTER-4473 missing"
        result = all_results['results']["LIST-MASTER-4473"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-MASTER-4473 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-MASTER-4473 failed"


    def test_rule_list_master_4474(self, all_results):
        """
        Test LIST-MASTER-4474: List item: Alerts, Dashboards, SIEM
        Priority: MEDIUM
        """
        assert "LIST-MASTER-4474" in all_results['results'], "Rule LIST-MASTER-4474 missing"
        result = all_results['results']["LIST-MASTER-4474"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-MASTER-4474 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-MASTER-4474 failed"


    def test_rule_list_master_4475(self, all_results):
        """
        Test LIST-MASTER-4475: List item: AI-Ops Monitoring
        Priority: MEDIUM
        """
        assert "LIST-MASTER-4475" in all_results['results'], "Rule LIST-MASTER-4475 missing"
        result = all_results['results']["LIST-MASTER-4475"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-MASTER-4475 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-MASTER-4475 failed"


    def test_rule_list_master_4476(self, all_results):
        """
        Test LIST-MASTER-4476: List item: *Datenhaltung**
        Priority: MEDIUM
        """
        assert "LIST-MASTER-4476" in all_results['results'], "Rule LIST-MASTER-4476 missing"
        result = all_results['results']["LIST-MASTER-4476"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-MASTER-4476 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-MASTER-4476 failed"


    def test_rule_list_master_4477(self, all_results):
        """
        Test LIST-MASTER-4477: List item: Datenbanken, GraphDBs, Time-Series
        Priority: MEDIUM
        """
        assert "LIST-MASTER-4477" in all_results['results'], "Rule LIST-MASTER-4477 missing"
        result = all_results['results']["LIST-MASTER-4477"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-MASTER-4477 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-MASTER-4477 failed"


    def test_rule_list_master_4478(self, all_results):
        """
        Test LIST-MASTER-4478: List item: Encryption-at-Rest, Backups
        Priority: MEDIUM
        """
        assert "LIST-MASTER-4478" in all_results['results'], "Rule LIST-MASTER-4478 missing"
        result = all_results['results']["LIST-MASTER-4478"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-MASTER-4478 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-MASTER-4478 failed"


    def test_rule_list_master_4479(self, all_results):
        """
        Test LIST-MASTER-4479: List item: Hash-Speicher
        Priority: MEDIUM
        """
        assert "LIST-MASTER-4479" in all_results['results'], "Rule LIST-MASTER-4479 missing"
        result = all_results['results']["LIST-MASTER-4479"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-MASTER-4479 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-MASTER-4479 failed"


    def test_rule_list_master_4480(self, all_results):
        """
        Test LIST-MASTER-4480: List item: *Anschlüsse & Schnittstellen**
        Priority: MEDIUM
        """
        assert "LIST-MASTER-4480" in all_results['results'], "Rule LIST-MASTER-4480 missing"
        result = all_results['results']["LIST-MASTER-4480"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-MASTER-4480 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-MASTER-4480 failed"


    def test_rule_list_master_4481(self, all_results):
        """
        Test LIST-MASTER-4481: List item: Adapter zu externen APIs/Chains
        Priority: MEDIUM
        """
        assert "LIST-MASTER-4481" in all_results['results'], "Rule LIST-MASTER-4481 missing"
        result = all_results['results']["LIST-MASTER-4481"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-MASTER-4481 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-MASTER-4481 failed"


    def test_rule_list_master_4482(self, all_results):
        """
        Test LIST-MASTER-4482: List item: Payment-Provider-Connectoren
        Priority: MEDIUM
        """
        assert "LIST-MASTER-4482" in all_results['results'], "Rule LIST-MASTER-4482 missing"
        result = all_results['results']["LIST-MASTER-4482"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-MASTER-4482 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-MASTER-4482 failed"


    def test_rule_list_master_4483(self, all_results):
        """
        Test LIST-MASTER-4483: List item: Identity Provider SDKs
        Priority: MEDIUM
        """
        assert "LIST-MASTER-4483" in all_results['results'], "Rule LIST-MASTER-4483 missing"
        result = all_results['results']["LIST-MASTER-4483"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-MASTER-4483 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-MASTER-4483 failed"


    def test_rule_list_master_4484(self, all_results):
        """
        Test LIST-MASTER-4484: List item: *Grundlagen & Tokenomics**
        Priority: MEDIUM
        """
        assert "LIST-MASTER-4484" in all_results['results'], "Rule LIST-MASTER-4484 missing"
        result = all_results['results']["LIST-MASTER-4484"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-MASTER-4484 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-MASTER-4484 failed"


    def test_rule_list_master_4485(self, all_results):
        """
        Test LIST-MASTER-4485: List item: SSID-Token (Utility, Governance, Rewards)
        Priority: MEDIUM
        """
        assert "LIST-MASTER-4485" in all_results['results'], "Rule LIST-MASTER-4485 missing"
        result = all_results['results']["LIST-MASTER-4485"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-MASTER-4485 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-MASTER-4485 failed"


    def test_rule_list_master_4486(self, all_results):
        """
        Test LIST-MASTER-4486: List item: Tokenomics, Distribution, Rewards
        Priority: MEDIUM
        """
        assert "LIST-MASTER-4486" in all_results['results'], "Rule LIST-MASTER-4486 missing"
        result = all_results['results']["LIST-MASTER-4486"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-MASTER-4486 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-MASTER-4486 failed"


    def test_rule_list_master_4487(self, all_results):
        """
        Test LIST-MASTER-4487: List item: Lizenzmodelle (NFT-Licenses)
        Priority: MEDIUM
        """
        assert "LIST-MASTER-4487" in all_results['results'], "Rule LIST-MASTER-4487 missing"
        result = all_results['results']["LIST-MASTER-4487"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-MASTER-4487 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-MASTER-4487 failed"


    def test_rule_list_master_4488(self, all_results):
        """
        Test LIST-MASTER-4488: List item: *Zukunftskrypto**
        Priority: MEDIUM
        """
        assert "LIST-MASTER-4488" in all_results['results'], "Rule LIST-MASTER-4488 missing"
        result = all_results['results']["LIST-MASTER-4488"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-MASTER-4488 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-MASTER-4488 failed"


    def test_rule_list_master_4489(self, all_results):
        """
        Test LIST-MASTER-4489: List item: PQC-Algorithmen (Kyber, Dilithium)
        Priority: MEDIUM
        """
        assert "LIST-MASTER-4489" in all_results['results'], "Rule LIST-MASTER-4489 missing"
        result = all_results['results']["LIST-MASTER-4489"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-MASTER-4489 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-MASTER-4489 failed"


    def test_rule_list_master_4490(self, all_results):
        """
        Test LIST-MASTER-4490: List item: Quantum-Safe Migration
        Priority: MEDIUM
        """
        assert "LIST-MASTER-4490" in all_results['results'], "Rule LIST-MASTER-4490 missing"
        result = all_results['results']["LIST-MASTER-4490"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-MASTER-4490 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-MASTER-4490 failed"


    def test_rule_list_master_4491(self, all_results):
        """
        Test LIST-MASTER-4491: List item: Hybrid-Signaturen
        Priority: MEDIUM
        """
        assert "LIST-MASTER-4491" in all_results['results'], "Rule LIST-MASTER-4491 missing"
        result = all_results['results']["LIST-MASTER-4491"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-MASTER-4491 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-MASTER-4491 failed"


    def test_rule_list_master_4492(self, all_results):
        """
        Test LIST-MASTER-4492: List item: *Datenbestände**
        Priority: MEDIUM
        """
        assert "LIST-MASTER-4492" in all_results['results'], "Rule LIST-MASTER-4492 missing"
        result = all_results['results']["LIST-MASTER-4492"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-MASTER-4492 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-MASTER-4492 failed"


    def test_rule_list_master_4493(self, all_results):
        """
        Test LIST-MASTER-4493: List item: Public Datasets, Trainingsdaten
        Priority: MEDIUM
        """
        assert "LIST-MASTER-4493" in all_results['results'], "Rule LIST-MASTER-4493 missing"
        result = all_results['results']["LIST-MASTER-4493"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-MASTER-4493 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-MASTER-4493 failed"


    def test_rule_list_master_4494(self, all_results):
        """
        Test LIST-MASTER-4494: List item: Hash-Referenzen statt PII
        Priority: MEDIUM
        """
        assert "LIST-MASTER-4494" in all_results['results'], "Rule LIST-MASTER-4494 missing"
        result = all_results['results']["LIST-MASTER-4494"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-MASTER-4494 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-MASTER-4494 failed"


    def test_rule_list_master_4495(self, all_results):
        """
        Test LIST-MASTER-4495: List item: Zugriff via DID & Consent
        Priority: MEDIUM
        """
        assert "LIST-MASTER-4495" in all_results['results'], "Rule LIST-MASTER-4495 missing"
        result = all_results['results']["LIST-MASTER-4495"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-MASTER-4495 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-MASTER-4495 failed"


    def test_rule_list_master_4496(self, all_results):
        """
        Test LIST-MASTER-4496: List item: *Regeltreue**
        Priority: MEDIUM
        """
        assert "LIST-MASTER-4496" in all_results['results'], "Rule LIST-MASTER-4496 missing"
        result = all_results['results']["LIST-MASTER-4496"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-MASTER-4496 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-MASTER-4496 failed"


    def test_rule_list_master_4497(self, all_results):
        """
        Test LIST-MASTER-4497: List item: Blacklists, Whitelists, Jurisdiktionsregeln
        Priority: MEDIUM
        """
        assert "LIST-MASTER-4497" in all_results['results'], "Rule LIST-MASTER-4497 missing"
        result = all_results['results']["LIST-MASTER-4497"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-MASTER-4497 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-MASTER-4497 failed"


    def test_rule_list_master_4498(self, all_results):
        """
        Test LIST-MASTER-4498: List item: Policies (AML, KYC, GDPR)
        Priority: MEDIUM
        """
        assert "LIST-MASTER-4498" in all_results['results'], "Rule LIST-MASTER-4498 missing"
        result = all_results['results']["LIST-MASTER-4498"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-MASTER-4498 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-MASTER-4498 failed"


    def test_rule_list_master_4499(self, all_results):
        """
        Test LIST-MASTER-4499: List item: Audit-Logs, Evidence-Registrierung
        Priority: MEDIUM
        """
        assert "LIST-MASTER-4499" in all_results['results'], "Rule LIST-MASTER-4499 missing"
        result = all_results['results']["LIST-MASTER-4499"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-MASTER-4499 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-MASTER-4499 failed"


    def test_rule_list_master_4500(self, all_results):
        """
        Test LIST-MASTER-4500: List item: *Zentrale Steuerung**
        Priority: MEDIUM
        """
        assert "LIST-MASTER-4500" in all_results['results'], "Rule LIST-MASTER-4500 missing"
        result = all_results['results']["LIST-MASTER-4500"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-MASTER-4500 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-MASTER-4500 failed"


    def test_rule_list_master_4501(self, all_results):
        """
        Test LIST-MASTER-4501: List item: Dispatcher, Registry, Locks
        Priority: MEDIUM
        """
        assert "LIST-MASTER-4501" in all_results['results'], "Rule LIST-MASTER-4501 missing"
        result = all_results['results']["LIST-MASTER-4501"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-MASTER-4501 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-MASTER-4501 failed"


    def test_rule_list_master_4502(self, all_results):
        """
        Test LIST-MASTER-4502: List item: Trigger & Gates
        Priority: MEDIUM
        """
        assert "LIST-MASTER-4502" in all_results['results'], "Rule LIST-MASTER-4502 missing"
        result = all_results['results']["LIST-MASTER-4502"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-MASTER-4502 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-MASTER-4502 failed"


    def test_rule_list_master_4503(self, all_results):
        """
        Test LIST-MASTER-4503: List item: Versionierung, Global Hash-Ledger
        Priority: MEDIUM
        """
        assert "LIST-MASTER-4503" in all_results['results'], "Rule LIST-MASTER-4503 missing"
        result = all_results['results']["LIST-MASTER-4503"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-MASTER-4503 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-MASTER-4503 failed"


    def test_rule_list_master_4504(self, all_results):
        """
        Test LIST-MASTER-4504: List item: DIDs, Ausweise, Profile, Authentifizierung
        Priority: MEDIUM
        """
        assert "LIST-MASTER-4504" in all_results['results'], "Rule LIST-MASTER-4504 missing"
        result = all_results['results']["LIST-MASTER-4504"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-MASTER-4504 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-MASTER-4504 failed"


    def test_rule_list_master_4505(self, all_results):
        """
        Test LIST-MASTER-4505: List item: Personen, Firmen, Organisationen, Behörden
        Priority: MEDIUM
        """
        assert "LIST-MASTER-4505" in all_results['results'], "Rule LIST-MASTER-4505 missing"
        result = all_results['results']["LIST-MASTER-4505"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-MASTER-4505 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-MASTER-4505 failed"


    def test_rule_list_master_4506(self, all_results):
        """
        Test LIST-MASTER-4506: List item: Urkunden, Bescheinigungen, Zertifikate, Vollmachten
        Priority: MEDIUM
        """
        assert "LIST-MASTER-4506" in all_results['results'], "Rule LIST-MASTER-4506 missing"
        result = all_results['results']["LIST-MASTER-4506"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-MASTER-4506 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-MASTER-4506 failed"


    def test_rule_list_master_4507(self, all_results):
        """
        Test LIST-MASTER-4507: List item: Digitale Signaturen, Notarisierungen
        Priority: MEDIUM
        """
        assert "LIST-MASTER-4507" in all_results['results'], "Rule LIST-MASTER-4507 missing"
        result = all_results['results']["LIST-MASTER-4507"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-MASTER-4507 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-MASTER-4507 failed"


    def test_rule_list_master_4508(self, all_results):
        """
        Test LIST-MASTER-4508: List item: Rollen, Rechte, Mandanten, Delegationen
        Priority: MEDIUM
        """
        assert "LIST-MASTER-4508" in all_results['results'], "Rule LIST-MASTER-4508 missing"
        result = all_results['results']["LIST-MASTER-4508"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-MASTER-4508 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-MASTER-4508 failed"


    def test_rule_list_master_4509(self, all_results):
        """
        Test LIST-MASTER-4509: List item: MFA, Zero-Trust, Session-Management
        Priority: MEDIUM
        """
        assert "LIST-MASTER-4509" in all_results['results'], "Rule LIST-MASTER-4509 missing"
        result = all_results['results']["LIST-MASTER-4509"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-MASTER-4509 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-MASTER-4509 failed"


    def test_rule_list_master_4510(self, all_results):
        """
        Test LIST-MASTER-4510: List item: Nachrichten, E-Mail, Chat, Datenaustausch
        Priority: MEDIUM
        """
        assert "LIST-MASTER-4510" in all_results['results'], "Rule LIST-MASTER-4510 missing"
        result = all_results['results']["LIST-MASTER-4510"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-MASTER-4510 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-MASTER-4510 failed"


    def test_rule_list_master_4511(self, all_results):
        """
        Test LIST-MASTER-4511: List item: APIs, Schnittstellen, Benachrichtigungen
        Priority: MEDIUM
        """
        assert "LIST-MASTER-4511" in all_results['results'], "Rule LIST-MASTER-4511 missing"
        result = all_results['results']["LIST-MASTER-4511"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-MASTER-4511 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-MASTER-4511 failed"


    def test_rule_list_master_4512(self, all_results):
        """
        Test LIST-MASTER-4512: List item: Krankenakte, Rezepte, Impfpass, Behandlungen
        Priority: MEDIUM
        """
        assert "LIST-MASTER-4512" in all_results['results'], "Rule LIST-MASTER-4512 missing"
        result = all_results['results']["LIST-MASTER-4512"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-MASTER-4512 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-MASTER-4512 failed"


    def test_rule_list_master_4513(self, all_results):
        """
        Test LIST-MASTER-4513: List item: Ärzte, Kliniken, Apotheken, Pflegedienste
        Priority: MEDIUM
        """
        assert "LIST-MASTER-4513" in all_results['results'], "Rule LIST-MASTER-4513 missing"
        result = all_results['results']["LIST-MASTER-4513"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-MASTER-4513 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-MASTER-4513 failed"


    def test_rule_list_master_4514(self, all_results):
        """
        Test LIST-MASTER-4514: List item: Zeugnisse, Abschlüsse, Kurse, Weiterbildung
        Priority: MEDIUM
        """
        assert "LIST-MASTER-4514" in all_results['results'], "Rule LIST-MASTER-4514 missing"
        result = all_results['results']["LIST-MASTER-4514"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-MASTER-4514 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-MASTER-4514 failed"


    def test_rule_list_master_4515(self, all_results):
        """
        Test LIST-MASTER-4515: List item: Schulen, Unis, Zertifizierungen, Skills
        Priority: MEDIUM
        """
        assert "LIST-MASTER-4515" in all_results['results'], "Rule LIST-MASTER-4515 missing"
        result = all_results['results']["LIST-MASTER-4515"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-MASTER-4515 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-MASTER-4515 failed"


    def test_rule_list_master_4516(self, all_results):
        """
        Test LIST-MASTER-4516: List item: Geburt, Heirat, Scheidung, Adoption, Erbe
        Priority: MEDIUM
        """
        assert "LIST-MASTER-4516" in all_results['results'], "Rule LIST-MASTER-4516 missing"
        result = all_results['results']["LIST-MASTER-4516"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-MASTER-4516 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-MASTER-4516 failed"


    def test_rule_list_master_4517(self, all_results):
        """
        Test LIST-MASTER-4517: List item: Vormundschaft, Betreuung, Sozialleistungen
        Priority: MEDIUM
        """
        assert "LIST-MASTER-4517" in all_results['results'], "Rule LIST-MASTER-4517 missing"
        result = all_results['results']["LIST-MASTER-4517"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-MASTER-4517 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-MASTER-4517 failed"


    def test_rule_list_master_4518(self, all_results):
        """
        Test LIST-MASTER-4518: List item: Vereine, Mitgliedschaften, Ehrenamt
        Priority: MEDIUM
        """
        assert "LIST-MASTER-4518" in all_results['results'], "Rule LIST-MASTER-4518 missing"
        result = all_results['results']["LIST-MASTER-4518"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-MASTER-4518 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-MASTER-4518 failed"


    def test_rule_list_master_4519(self, all_results):
        """
        Test LIST-MASTER-4519: List item: Führerschein, KFZ-Zulassung, Fahrzeugpapiere
        Priority: MEDIUM
        """
        assert "LIST-MASTER-4519" in all_results['results'], "Rule LIST-MASTER-4519 missing"
        result = all_results['results']["LIST-MASTER-4519"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-MASTER-4519 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-MASTER-4519 failed"


    def test_rule_list_master_4520(self, all_results):
        """
        Test LIST-MASTER-4520: List item: TÜV/AU, Fahrzeugkauf/-verkauf, Parkausweise
        Priority: MEDIUM
        """
        assert "LIST-MASTER-4520" in all_results['results'], "Rule LIST-MASTER-4520 missing"
        result = all_results['results']["LIST-MASTER-4520"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-MASTER-4520 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-MASTER-4520 failed"


    def test_rule_list_master_4521(self, all_results):
        """
        Test LIST-MASTER-4521: List item: Maut-Accounts, Kfz-Versicherung, Fahrzeughistorie
        Priority: MEDIUM
        """
        assert "LIST-MASTER-4521" in all_results['results'], "Rule LIST-MASTER-4521 missing"
        result = all_results['results']["LIST-MASTER-4521"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-MASTER-4521 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-MASTER-4521 failed"


    def test_rule_list_master_4522(self, all_results):
        """
        Test LIST-MASTER-4522: List item: Arbeitsverträge, Gehalt, Bewerbungen, Referenzen
        Priority: MEDIUM
        """
        assert "LIST-MASTER-4522" in all_results['results'], "Rule LIST-MASTER-4522 missing"
        result = all_results['results']["LIST-MASTER-4522"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-MASTER-4522 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-MASTER-4522 failed"


    def test_rule_list_master_4523(self, all_results):
        """
        Test LIST-MASTER-4523: List item: Freelancing, Honorare, Arbeitszeugnisse
        Priority: MEDIUM
        """
        assert "LIST-MASTER-4523" in all_results['results'], "Rule LIST-MASTER-4523 missing"
        result = all_results['results']["LIST-MASTER-4523"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-MASTER-4523 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-MASTER-4523 failed"


    def test_rule_list_master_4524(self, all_results):
        """
        Test LIST-MASTER-4524: List item: Konten, Zahlungen, Überweisungen, Kredite
        Priority: MEDIUM
        """
        assert "LIST-MASTER-4524" in all_results['results'], "Rule LIST-MASTER-4524 missing"
        result = all_results['results']["LIST-MASTER-4524"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-MASTER-4524 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-MASTER-4524 failed"


    def test_rule_list_master_4525(self, all_results):
        """
        Test LIST-MASTER-4525: List item: Investments, Portfolios, DeFi, Krypto
        Priority: MEDIUM
        """
        assert "LIST-MASTER-4525" in all_results['results'], "Rule LIST-MASTER-4525 missing"
        result = all_results['results']["LIST-MASTER-4525"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-MASTER-4525 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-MASTER-4525 failed"


    def test_rule_list_master_4526(self, all_results):
        """
        Test LIST-MASTER-4526: List item: Abonnements, Loyalitäts-Programme
        Priority: MEDIUM
        """
        assert "LIST-MASTER-4526" in all_results['results'], "Rule LIST-MASTER-4526 missing"
        result = all_results['results']["LIST-MASTER-4526"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-MASTER-4526 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-MASTER-4526 failed"


    def test_rule_list_master_4527(self, all_results):
        """
        Test LIST-MASTER-4527: List item: Alle Versicherungsarten (Kranken, Leben, Haftpflicht, etc.)
        Priority: CRITICAL
        """
        assert "LIST-MASTER-4527" in all_results['results'], "Rule LIST-MASTER-4527 missing"
        result = all_results['results']["LIST-MASTER-4527"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-MASTER-4527 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-MASTER-4527 failed"


    def test_rule_list_master_4528(self, all_results):
        """
        Test LIST-MASTER-4528: List item: Schäden, Claims, Policen, Prämien
        Priority: MEDIUM
        """
        assert "LIST-MASTER-4528" in all_results['results'], "Rule LIST-MASTER-4528 missing"
        result = all_results['results']["LIST-MASTER-4528"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-MASTER-4528 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-MASTER-4528 failed"


    def test_rule_list_master_4529(self, all_results):
        """
        Test LIST-MASTER-4529: List item: Eigentum, Miete, Pacht, Grundbuch
        Priority: MEDIUM
        """
        assert "LIST-MASTER-4529" in all_results['results'], "Rule LIST-MASTER-4529 missing"
        result = all_results['results']["LIST-MASTER-4529"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-MASTER-4529 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-MASTER-4529 failed"


    def test_rule_list_master_4530(self, all_results):
        """
        Test LIST-MASTER-4530: List item: Hypotheken, Bewertungen, Nutzungsrechte
        Priority: MEDIUM
        """
        assert "LIST-MASTER-4530" in all_results['results'], "Rule LIST-MASTER-4530 missing"
        result = all_results['results']["LIST-MASTER-4530"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-MASTER-4530 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-MASTER-4530 failed"


    def test_rule_list_master_4531(self, all_results):
        """
        Test LIST-MASTER-4531: List item: Firmendaten, Handelsregister, Lizenzen, B2B
        Priority: MEDIUM
        """
        assert "LIST-MASTER-4531" in all_results['results'], "Rule LIST-MASTER-4531 missing"
        result = all_results['results']["LIST-MASTER-4531"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-MASTER-4531 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-MASTER-4531 failed"


    def test_rule_list_master_4532(self, all_results):
        """
        Test LIST-MASTER-4532: List item: Buchhaltung, Bilanzen, Jahresabschlüsse
        Priority: MEDIUM
        """
        assert "LIST-MASTER-4532" in all_results['results'], "Rule LIST-MASTER-4532 missing"
        result = all_results['results']["LIST-MASTER-4532"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-MASTER-4532 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-MASTER-4532 failed"


    def test_rule_list_master_4533(self, all_results):
        """
        Test LIST-MASTER-4533: List item: Smart Contracts, Geschäftsverträge, AGBs
        Priority: MEDIUM
        """
        assert "LIST-MASTER-4533" in all_results['results'], "Rule LIST-MASTER-4533 missing"
        result = all_results['results']["LIST-MASTER-4533"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-MASTER-4533 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-MASTER-4533 failed"


    def test_rule_list_master_4534(self, all_results):
        """
        Test LIST-MASTER-4534: List item: SLAs, Lieferantenverträge, Partnerschaften
        Priority: MEDIUM
        """
        assert "LIST-MASTER-4534" in all_results['results'], "Rule LIST-MASTER-4534 missing"
        result = all_results['results']["LIST-MASTER-4534"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-MASTER-4534 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-MASTER-4534 failed"


    def test_rule_list_master_4535(self, all_results):
        """
        Test LIST-MASTER-4535: List item: Käufe, Verkäufe, Rechnungen, Garantien
        Priority: MEDIUM
        """
        assert "LIST-MASTER-4535" in all_results['results'], "Rule LIST-MASTER-4535 missing"
        result = all_results['results']["LIST-MASTER-4535"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-MASTER-4535 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-MASTER-4535 failed"


    def test_rule_list_master_4536(self, all_results):
        """
        Test LIST-MASTER-4536: List item: Supply Chain, Logistik, Lieferscheine
        Priority: MEDIUM
        """
        assert "LIST-MASTER-4536" in all_results['results'], "Rule LIST-MASTER-4536 missing"
        result = all_results['results']["LIST-MASTER-4536"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-MASTER-4536 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-MASTER-4536 failed"


    def test_rule_list_master_4537(self, all_results):
        """
        Test LIST-MASTER-4537: List item: Reisen, Events, Tickets
        Priority: MEDIUM
        """
        assert "LIST-MASTER-4537" in all_results['results'], "Rule LIST-MASTER-4537 missing"
        result = all_results['results']["LIST-MASTER-4537"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-MASTER-4537 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-MASTER-4537 failed"


    def test_rule_list_master_4538(self, all_results):
        """
        Test LIST-MASTER-4538: List item: Ämter, Anträge, Genehmigungen, Steuern
        Priority: MEDIUM
        """
        assert "LIST-MASTER-4538" in all_results['results'], "Rule LIST-MASTER-4538 missing"
        result = all_results['results']["LIST-MASTER-4538"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-MASTER-4538 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-MASTER-4538 failed"


    def test_rule_list_master_4539(self, all_results):
        """
        Test LIST-MASTER-4539: List item: Meldewesen, Gerichtsurteile, Ordnungswidrigkeiten
        Priority: MEDIUM
        """
        assert "LIST-MASTER-4539" in all_results['results'], "Rule LIST-MASTER-4539 missing"
        result = all_results['results']["LIST-MASTER-4539"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-MASTER-4539 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-MASTER-4539 failed"


    def test_rule_table_master_4540(self, all_results):
        """
        Test TABLE-MASTER-4540: Table row: Root | Shard 01 | Shard 02
        Priority: MEDIUM
        """
        assert "TABLE-MASTER-4540" in all_results['results'], "Rule TABLE-MASTER-4540 missing"
        result = all_results['results']["TABLE-MASTER-4540"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule TABLE-MASTER-4540 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule TABLE-MASTER-4540 failed"


    def test_rule_table_master_4541(self, all_results):
        """
        Test TABLE-MASTER-4541: Table row: 01_ai_layer | AI für Identity | AI für Dokumente
        Priority: MEDIUM
        """
        assert "TABLE-MASTER-4541" in all_results['results'], "Rule TABLE-MASTER-4541 missing"
        result = all_results['results']["TABLE-MASTER-4541"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule TABLE-MASTER-4541 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule TABLE-MASTER-4541 failed"


    def test_rule_table_master_4542(self, all_results):
        """
        Test TABLE-MASTER-4542: Table row: 02_audit_logging | Audit Identity | Audit Dokumente
        Priority: MEDIUM
        """
        assert "TABLE-MASTER-4542" in all_results['results'], "Rule TABLE-MASTER-4542 missing"
        result = all_results['results']["TABLE-MASTER-4542"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule TABLE-MASTER-4542 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule TABLE-MASTER-4542 failed"


    def test_rule_table_master_4543(self, all_results):
        """
        Test TABLE-MASTER-4543: Table row: 03_core | Core Identity | Core Dokumente
        Priority: MEDIUM
        """
        assert "TABLE-MASTER-4543" in all_results['results'], "Rule TABLE-MASTER-4543 missing"
        result = all_results['results']["TABLE-MASTER-4543"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule TABLE-MASTER-4543 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule TABLE-MASTER-4543 failed"


    def test_rule_table_master_4544(self, all_results):
        """
        Test TABLE-MASTER-4544: Table row: ... | ... | ...
        Priority: MEDIUM
        """
        assert "TABLE-MASTER-4544" in all_results['results'], "Rule TABLE-MASTER-4544 missing"
        result = all_results['results']["TABLE-MASTER-4544"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule TABLE-MASTER-4544 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule TABLE-MASTER-4544 failed"


    def test_rule_table_master_4545(self, all_results):
        """
        Test TABLE-MASTER-4545: Table row: 24_meta_orchestration | Orch. Identity | Orch. Dokumente
        Priority: MEDIUM
        """
        assert "TABLE-MASTER-4545" in all_results['results'], "Rule TABLE-MASTER-4545 missing"
        result = all_results['results']["TABLE-MASTER-4545"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule TABLE-MASTER-4545 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule TABLE-MASTER-4545 failed"


    def test_rule_list_master_4546(self, all_results):
        """
        Test LIST-MASTER-4546: List item: *Zwei-Schichten-Architektur:**
        Priority: MEDIUM
        """
        assert "LIST-MASTER-4546" in all_results['results'], "Rule LIST-MASTER-4546 missing"
        result = all_results['results']["LIST-MASTER-4546"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-MASTER-4546 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-MASTER-4546 failed"


    def test_rule_policy_master_4547(self, all_results):
        """
        Test POLICY-MASTER-4547: Policy #1: **chart.yaml (SoT)** - Abstrakt: WAS (Capabilities, Policies, Interfa
        Priority: MEDIUM
        """
        assert "POLICY-MASTER-4547" in all_results['results'], "Rule POLICY-MASTER-4547 missing"
        result = all_results['results']["POLICY-MASTER-4547"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule POLICY-MASTER-4547 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule POLICY-MASTER-4547 failed"


    def test_rule_policy_master_4548(self, all_results):
        """
        Test POLICY-MASTER-4548: Policy #2: **manifest.yaml (Impl.)** - Konkret: WIE (Dateien, Tech-Stack, Artefa
        Priority: MEDIUM
        """
        assert "POLICY-MASTER-4548" in all_results['results'], "Rule POLICY-MASTER-4548 missing"
        result = all_results['results']["POLICY-MASTER-4548"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule POLICY-MASTER-4548 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule POLICY-MASTER-4548 failed"


    def test_rule_text_master_4549(self, all_results):
        """
        Test TEXT-MASTER-4549: ✅ **Governance-fähig** - Capabilities mit MoSCoW (MUST/SHOULD/HAVE)
        Priority: CRITICAL
        """
        assert "TEXT-MASTER-4549" in all_results['results'], "Rule TEXT-MASTER-4549 missing"
        result = all_results['results']["TEXT-MASTER-4549"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule TEXT-MASTER-4549 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule TEXT-MASTER-4549 failed"


    def test_rule_table_master_4550(self, all_results):
        """
        Test TABLE-MASTER-4550: Table row: Aspekt | chart.yaml (SoT) | manifest.yaml (Impl.)
        Priority: MEDIUM
        """
        assert "TABLE-MASTER-4550" in all_results['results'], "Rule TABLE-MASTER-4550 missing"
        result = all_results['results']["TABLE-MASTER-4550"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule TABLE-MASTER-4550 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule TABLE-MASTER-4550 failed"


    def test_rule_table_master_4551(self, all_results):
        """
        Test TABLE-MASTER-4551: Table row: Ebene | Abstrakt | Konkret
        Priority: MEDIUM
        """
        assert "TABLE-MASTER-4551" in all_results['results'], "Rule TABLE-MASTER-4551 missing"
        result = all_results['results']["TABLE-MASTER-4551"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule TABLE-MASTER-4551 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule TABLE-MASTER-4551 failed"


    def test_rule_table_master_4552(self, all_results):
        """
        Test TABLE-MASTER-4552: Table row: Inhalt | Capabilities, Policies, Interfaces | Dateien, Dependencies, 
        Priority: MEDIUM
        """
        assert "TABLE-MASTER-4552" in all_results['results'], "Rule TABLE-MASTER-4552 missing"
        result = all_results['results']["TABLE-MASTER-4552"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule TABLE-MASTER-4552 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule TABLE-MASTER-4552 failed"


    def test_rule_table_master_4553(self, all_results):
        """
        Test TABLE-MASTER-4553: Table row: Änderungsrate | Langsam | Häufiger
        Priority: MEDIUM
        """
        assert "TABLE-MASTER-4553" in all_results['results'], "Rule TABLE-MASTER-4553 missing"
        result = all_results['results']["TABLE-MASTER-4553"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule TABLE-MASTER-4553 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule TABLE-MASTER-4553 failed"


    def test_rule_table_master_4554(self, all_results):
        """
        Test TABLE-MASTER-4554: Table row: Versionierung | Semver, Breaking Changes | Patches, Bugfixes
        Priority: MEDIUM
        """
        assert "TABLE-MASTER-4554" in all_results['results'], "Rule TABLE-MASTER-4554 missing"
        result = all_results['results']["TABLE-MASTER-4554"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule TABLE-MASTER-4554 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule TABLE-MASTER-4554 failed"


    def test_rule_table_master_4555(self, all_results):
        """
        Test TABLE-MASTER-4555: Table row: Sprache | Sprachunabhängig | Python, Rust, Go, etc.
        Priority: MEDIUM
        """
        assert "TABLE-MASTER-4555" in all_results['results'], "Rule TABLE-MASTER-4555 missing"
        result = all_results['results']["TABLE-MASTER-4555"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule TABLE-MASTER-4555 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule TABLE-MASTER-4555 failed"


    def test_rule_table_master_4556(self, all_results):
        """
        Test TABLE-MASTER-4556: Table row: Governance | Architecture Board | Development Team
        Priority: MEDIUM
        """
        assert "TABLE-MASTER-4556" in all_results['results'], "Rule TABLE-MASTER-4556 missing"
        result = all_results['results']["TABLE-MASTER-4556"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule TABLE-MASTER-4556 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule TABLE-MASTER-4556 failed"


    def test_rule_text_master_4557(self, all_results):
        """
        Test TEXT-MASTER-4557: MUST: [ ... ]   # Produktiv, SLA-gebunden
        Priority: CRITICAL
        """
        assert "TEXT-MASTER-4557" in all_results['results'], "Rule TEXT-MASTER-4557 missing"
        result = all_results['results']["TEXT-MASTER-4557"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule TEXT-MASTER-4557 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule TEXT-MASTER-4557 failed"


    def test_rule_text_master_4558(self, all_results):
        """
        Test TEXT-MASTER-4558: SHOULD: [ ... ] # Feature-complete, in Erprobung
        Priority: HIGH
        """
        assert "TEXT-MASTER-4558" in all_results['results'], "Rule TEXT-MASTER-4558 missing"
        result = all_results['results']["TEXT-MASTER-4558"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "HIGH" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule TEXT-MASTER-4558 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule TEXT-MASTER-4558 failed"


    def test_rule_text_master_4559(self, all_results):
        """
        Test TEXT-MASTER-4559: required: [ andere Roots/Shards ]
        Priority: MEDIUM
        """
        assert "TEXT-MASTER-4559" in all_results['results'], "Rule TEXT-MASTER-4559 missing"
        result = all_results['results']["TEXT-MASTER-4559"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule TEXT-MASTER-4559 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule TEXT-MASTER-4559 failed"


    def test_rule_text_master_4560(self, all_results):
        """
        Test TEXT-MASTER-4560: environment_variables: { required, optional }
        Priority: MEDIUM
        """
        assert "TEXT-MASTER-4560" in all_results['results'], "Rule TEXT-MASTER-4560 missing"
        result = all_results['results']["TEXT-MASTER-4560"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule TEXT-MASTER-4560 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule TEXT-MASTER-4560 failed"


    def test_rule_list_master_4561(self, all_results):
        """
        Test LIST-MASTER-4561: List item: *Regel:** NIEMALS Rohdaten von PII oder biometrischen Daten speichern
        Priority: MEDIUM
        """
        assert "LIST-MASTER-4561" in all_results['results'], "Rule LIST-MASTER-4561 missing"
        result = all_results['results']["LIST-MASTER-4561"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-MASTER-4561 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-MASTER-4561 failed"


    def test_rule_list_master_4562(self, all_results):
        """
        Test LIST-MASTER-4562: List item: *Enforcement:**
        Priority: MEDIUM
        """
        assert "LIST-MASTER-4562" in all_results['results'], "Rule LIST-MASTER-4562 missing"
        result = all_results['results']["LIST-MASTER-4562"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-MASTER-4562 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-MASTER-4562 failed"


    def test_rule_list_master_4563(self, all_results):
        """
        Test LIST-MASTER-4563: List item: ✅ Nur Hash-basierte Speicherung (SHA3-256)
        Priority: MEDIUM
        """
        assert "LIST-MASTER-4563" in all_results['results'], "Rule LIST-MASTER-4563 missing"
        result = all_results['results']["LIST-MASTER-4563"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-MASTER-4563 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-MASTER-4563 failed"


    def test_rule_list_master_4564(self, all_results):
        """
        Test LIST-MASTER-4564: List item: ✅ Tenant-spezifische Peppers
        Priority: MEDIUM
        """
        assert "LIST-MASTER-4564" in all_results['results'], "Rule LIST-MASTER-4564 missing"
        result = all_results['results']["LIST-MASTER-4564"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-MASTER-4564 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-MASTER-4564 failed"


    def test_rule_list_master_4565(self, all_results):
        """
        Test LIST-MASTER-4565: List item: ✅ Immediate Discard nach Hashing
        Priority: MEDIUM
        """
        assert "LIST-MASTER-4565" in all_results['results'], "Rule LIST-MASTER-4565 missing"
        result = all_results['results']["LIST-MASTER-4565"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-MASTER-4565 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-MASTER-4565 failed"


    def test_rule_list_master_4566(self, all_results):
        """
        Test LIST-MASTER-4566: List item: ✅ Static Analysis (Semgrep) blockiert PII-Storage
        Priority: MEDIUM
        """
        assert "LIST-MASTER-4566" in all_results['results'], "Rule LIST-MASTER-4566 missing"
        result = all_results['results']["LIST-MASTER-4566"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-MASTER-4566 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-MASTER-4566 failed"


    def test_rule_list_master_4567(self, all_results):
        """
        Test LIST-MASTER-4567: List item: ✅ Runtime PII-Detector blockiert Verstöße
        Priority: MEDIUM
        """
        assert "LIST-MASTER-4567" in all_results['results'], "Rule LIST-MASTER-4567 missing"
        result = all_results['results']["LIST-MASTER-4567"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-MASTER-4567 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-MASTER-4567 failed"


    def test_rule_list_master_4568(self, all_results):
        """
        Test LIST-MASTER-4568: List item: *Violations = System-Block + Alert an Compliance-Team**
        Priority: CRITICAL
        """
        assert "LIST-MASTER-4568" in all_results['results'], "Rule LIST-MASTER-4568 missing"
        result = all_results['results']["LIST-MASTER-4568"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-MASTER-4568 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-MASTER-4568 failed"


    def test_rule_list_master_4569(self, all_results):
        """
        Test LIST-MASTER-4569: List item: **Right to Erasure:** Hash-Rotation (neuer Pepper macht alte Hashes u
        Priority: MEDIUM
        """
        assert "LIST-MASTER-4569" in all_results['results'], "Rule LIST-MASTER-4569 missing"
        result = all_results['results']["LIST-MASTER-4569"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-MASTER-4569 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-MASTER-4569 failed"


    def test_rule_list_master_4570(self, all_results):
        """
        Test LIST-MASTER-4570: List item: **Data Portability:** JSON-Export aller Hashes + Metadaten
        Priority: MEDIUM
        """
        assert "LIST-MASTER-4570" in all_results['results'], "Rule LIST-MASTER-4570 missing"
        result = all_results['results']["LIST-MASTER-4570"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-MASTER-4570 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-MASTER-4570 failed"


    def test_rule_list_master_4571(self, all_results):
        """
        Test LIST-MASTER-4571: List item: **Purpose Limitation:** Nur definierte Zwecke erlaubt
        Priority: MEDIUM
        """
        assert "LIST-MASTER-4571" in all_results['results'], "Rule LIST-MASTER-4571 missing"
        result = all_results['results']["LIST-MASTER-4571"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-MASTER-4571 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-MASTER-4571 failed"


    def test_rule_list_master_4572(self, all_results):
        """
        Test LIST-MASTER-4572: List item: **PII Redaction:** Automatisch in Logs & Traces
        Priority: MEDIUM
        """
        assert "LIST-MASTER-4572" in all_results['results'], "Rule LIST-MASTER-4572 missing"
        result = all_results['results']["LIST-MASTER-4572"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-MASTER-4572 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-MASTER-4572 failed"


    def test_rule_list_master_4573(self, all_results):
        """
        Test LIST-MASTER-4573: List item: **Bias Testing:** Pflicht für alle AI/ML-Modelle
        Priority: CRITICAL
        """
        assert "LIST-MASTER-4573" in all_results['results'], "Rule LIST-MASTER-4573 missing"
        result = all_results['results']["LIST-MASTER-4573"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-MASTER-4573 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-MASTER-4573 failed"


    def test_rule_list_master_4574(self, all_results):
        """
        Test LIST-MASTER-4574: List item: **Metrics:** Demographic Parity, Equal Opportunity
        Priority: MEDIUM
        """
        assert "LIST-MASTER-4574" in all_results['results'], "Rule LIST-MASTER-4574 missing"
        result = all_results['results']["LIST-MASTER-4574"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-MASTER-4574 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-MASTER-4574 failed"


    def test_rule_list_master_4575(self, all_results):
        """
        Test LIST-MASTER-4575: List item: **Audit:** Quarterly Reports an Ethics Board
        Priority: MEDIUM
        """
        assert "LIST-MASTER-4575" in all_results['results'], "Rule LIST-MASTER-4575 missing"
        result = all_results['results']["LIST-MASTER-4575"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-MASTER-4575 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-MASTER-4575 failed"


    def test_rule_list_master_4576(self, all_results):
        """
        Test LIST-MASTER-4576: List item: **Mitigation:** Fairness-aware Training, Adversarial Debiasing
        Priority: MEDIUM
        """
        assert "LIST-MASTER-4576" in all_results['results'], "Rule LIST-MASTER-4576 missing"
        result = all_results['results']["LIST-MASTER-4576"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-MASTER-4576 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-MASTER-4576 failed"


    def test_rule_list_master_4577(self, all_results):
        """
        Test LIST-MASTER-4577: List item: **Strategy:** Hash-Ledger mit Blockchain-Anchoring
        Priority: MEDIUM
        """
        assert "LIST-MASTER-4577" in all_results['results'], "Rule LIST-MASTER-4577 missing"
        result = all_results['results']["LIST-MASTER-4577"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-MASTER-4577 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-MASTER-4577 failed"


    def test_rule_list_master_4578(self, all_results):
        """
        Test LIST-MASTER-4578: List item: **Storage:** WORM (Write-Once-Read-Many)
        Priority: MEDIUM
        """
        assert "LIST-MASTER-4578" in all_results['results'], "Rule LIST-MASTER-4578 missing"
        result = all_results['results']["LIST-MASTER-4578"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-MASTER-4578 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-MASTER-4578 failed"


    def test_rule_list_master_4579(self, all_results):
        """
        Test LIST-MASTER-4579: List item: **Retention:** 10 Jahre
        Priority: MEDIUM
        """
        assert "LIST-MASTER-4579" in all_results['results'], "Rule LIST-MASTER-4579 missing"
        result = all_results['results']["LIST-MASTER-4579"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-MASTER-4579 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-MASTER-4579 failed"


    def test_rule_list_master_4580(self, all_results):
        """
        Test LIST-MASTER-4580: List item: **Chains:** Ethereum Mainnet, Polygon
        Priority: MEDIUM
        """
        assert "LIST-MASTER-4580" in all_results['results'], "Rule LIST-MASTER-4580 missing"
        result = all_results['results']["LIST-MASTER-4580"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-MASTER-4580 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-MASTER-4580 failed"


    def test_rule_list_master_4581(self, all_results):
        """
        Test LIST-MASTER-4581: List item: **Frequency:** Hourly Anchoring
        Priority: MEDIUM
        """
        assert "LIST-MASTER-4581" in all_results['results'], "Rule LIST-MASTER-4581 missing"
        result = all_results['results']["LIST-MASTER-4581"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-MASTER-4581 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-MASTER-4581 failed"


    def test_rule_list_master_4582(self, all_results):
        """
        Test LIST-MASTER-4582: List item: **Provider:** Vault (15_infra/vault)
        Priority: MEDIUM
        """
        assert "LIST-MASTER-4582" in all_results['results'], "Rule LIST-MASTER-4582 missing"
        result = all_results['results']["LIST-MASTER-4582"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-MASTER-4582 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-MASTER-4582 failed"


    def test_rule_list_master_4583(self, all_results):
        """
        Test LIST-MASTER-4583: List item: **Rotation:** 90 Tage
        Priority: MEDIUM
        """
        assert "LIST-MASTER-4583" in all_results['results'], "Rule LIST-MASTER-4583 missing"
        result = all_results['results']["LIST-MASTER-4583"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-MASTER-4583 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-MASTER-4583 failed"


    def test_rule_list_master_4584(self, all_results):
        """
        Test LIST-MASTER-4584: List item: **Niemals in Git:** Nur .template-Dateien committen
        Priority: MEDIUM
        """
        assert "LIST-MASTER-4584" in all_results['results'], "Rule LIST-MASTER-4584 missing"
        result = all_results['results']["LIST-MASTER-4584"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-MASTER-4584 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-MASTER-4584 failed"


    def test_rule_list_master_4585(self, all_results):
        """
        Test LIST-MASTER-4585: List item: **Encryption:** AES-256-GCM at-rest, TLS 1.3 in-transit
        Priority: MEDIUM
        """
        assert "LIST-MASTER-4585" in all_results['results'], "Rule LIST-MASTER-4585 missing"
        result = all_results['results']["LIST-MASTER-4585"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-MASTER-4585 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-MASTER-4585 failed"


    def test_rule_list_master_4586(self, all_results):
        """
        Test LIST-MASTER-4586: List item: **Semver:** MAJOR.MINOR.PATCH
        Priority: MEDIUM
        """
        assert "LIST-MASTER-4586" in all_results['results'], "Rule LIST-MASTER-4586 missing"
        result = all_results['results']["LIST-MASTER-4586"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-MASTER-4586 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-MASTER-4586 failed"


    def test_rule_list_master_4587(self, all_results):
        """
        Test LIST-MASTER-4587: List item: **Breaking Changes:** Migration Guide + Compatibility Layer
        Priority: MEDIUM
        """
        assert "LIST-MASTER-4587" in all_results['results'], "Rule LIST-MASTER-4587 missing"
        result = all_results['results']["LIST-MASTER-4587"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-MASTER-4587 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-MASTER-4587 failed"


    def test_rule_list_master_4588(self, all_results):
        """
        Test LIST-MASTER-4588: List item: **Deprecations:** 180 Tage Notice Period
        Priority: MEDIUM
        """
        assert "LIST-MASTER-4588" in all_results['results'], "Rule LIST-MASTER-4588 missing"
        result = all_results['results']["LIST-MASTER-4588"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-MASTER-4588 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-MASTER-4588 failed"


    def test_rule_list_master_4589(self, all_results):
        """
        Test LIST-MASTER-4589: List item: Verantwortlich für Shard-Entwicklung
        Priority: MEDIUM
        """
        assert "LIST-MASTER-4589" in all_results['results'], "Rule LIST-MASTER-4589 missing"
        result = all_results['results']["LIST-MASTER-4589"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-MASTER-4589 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-MASTER-4589 failed"


    def test_rule_list_master_4590(self, all_results):
        """
        Test LIST-MASTER-4590: List item: Koordiniert Implementierungen
        Priority: MEDIUM
        """
        assert "LIST-MASTER-4590" in all_results['results'], "Rule LIST-MASTER-4590 missing"
        result = all_results['results']["LIST-MASTER-4590"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-MASTER-4590 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-MASTER-4590 failed"


    def test_rule_list_master_4591(self, all_results):
        """
        Test LIST-MASTER-4591: List item: Reviewed alle chart.yaml-Änderungen
        Priority: MEDIUM
        """
        assert "LIST-MASTER-4591" in all_results['results'], "Rule LIST-MASTER-4591 missing"
        result = all_results['results']["LIST-MASTER-4591"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-MASTER-4591 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-MASTER-4591 failed"


    def test_rule_list_master_4592(self, all_results):
        """
        Test LIST-MASTER-4592: List item: Genehmigt Breaking Changes
        Priority: MEDIUM
        """
        assert "LIST-MASTER-4592" in all_results['results'], "Rule LIST-MASTER-4592 missing"
        result = all_results['results']["LIST-MASTER-4592"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-MASTER-4592 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-MASTER-4592 failed"


    def test_rule_list_master_4593(self, all_results):
        """
        Test LIST-MASTER-4593: List item: Definiert Schnittstellen-Standards
        Priority: HIGH
        """
        assert "LIST-MASTER-4593" in all_results['results'], "Rule LIST-MASTER-4593 missing"
        result = all_results['results']["LIST-MASTER-4593"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "HIGH" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-MASTER-4593 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-MASTER-4593 failed"


    def test_rule_list_master_4594(self, all_results):
        """
        Test LIST-MASTER-4594: List item: Prüft alle Policies
        Priority: MEDIUM
        """
        assert "LIST-MASTER-4594" in all_results['results'], "Rule LIST-MASTER-4594 missing"
        result = all_results['results']["LIST-MASTER-4594"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-MASTER-4594 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-MASTER-4594 failed"


    def test_rule_list_master_4595(self, all_results):
        """
        Test LIST-MASTER-4595: List item: Genehmigt Constraint-Änderungen
        Priority: MEDIUM
        """
        assert "LIST-MASTER-4595" in all_results['results'], "Rule LIST-MASTER-4595 missing"
        result = all_results['results']["LIST-MASTER-4595"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-MASTER-4595 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-MASTER-4595 failed"


    def test_rule_list_master_4596(self, all_results):
        """
        Test LIST-MASTER-4596: List item: Audit-Oversight
        Priority: MEDIUM
        """
        assert "LIST-MASTER-4596" in all_results['results'], "Rule LIST-MASTER-4596 missing"
        result = all_results['results']["LIST-MASTER-4596"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-MASTER-4596 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-MASTER-4596 failed"


    def test_rule_list_master_4597(self, all_results):
        """
        Test LIST-MASTER-4597: List item: Threat Modeling
        Priority: MEDIUM
        """
        assert "LIST-MASTER-4597" in all_results['results'], "Rule LIST-MASTER-4597 missing"
        result = all_results['results']["LIST-MASTER-4597"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-MASTER-4597 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-MASTER-4597 failed"


    def test_rule_list_master_4598(self, all_results):
        """
        Test LIST-MASTER-4598: List item: Penetration Testing
        Priority: MEDIUM
        """
        assert "LIST-MASTER-4598" in all_results['results'], "Rule LIST-MASTER-4598 missing"
        result = all_results['results']["LIST-MASTER-4598"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-MASTER-4598 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-MASTER-4598 failed"


    def test_rule_list_master_4599(self, all_results):
        """
        Test LIST-MASTER-4599: List item: Vulnerability Management
        Priority: MEDIUM
        """
        assert "LIST-MASTER-4599" in all_results['results'], "Rule LIST-MASTER-4599 missing"
        result = all_results['results']["LIST-MASTER-4599"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-MASTER-4599 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-MASTER-4599 failed"


    def test_rule_text_master_4600(self, all_results):
        """
        Test TEXT-MASTER-4600: 1. RFC erstellen (für MUST-Changes)
        Priority: CRITICAL
        """
        assert "TEXT-MASTER-4600" in all_results['results'], "Rule TEXT-MASTER-4600 missing"
        result = all_results['results']["TEXT-MASTER-4600"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule TEXT-MASTER-4600 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule TEXT-MASTER-4600 failed"


    def test_rule_policy_master_4601(self, all_results):
        """
        Test POLICY-MASTER-4601: Policy #2: Contract-Tests implementieren
        Priority: MEDIUM
        """
        assert "POLICY-MASTER-4601" in all_results['results'], "Rule POLICY-MASTER-4601 missing"
        result = all_results['results']["POLICY-MASTER-4601"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule POLICY-MASTER-4601 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule POLICY-MASTER-4601 failed"


    def test_rule_policy_master_4602(self, all_results):
        """
        Test POLICY-MASTER-4602: Policy #3: Dual Review (Architecture + Compliance)
        Priority: CRITICAL
        """
        assert "POLICY-MASTER-4602" in all_results['results'], "Rule POLICY-MASTER-4602 missing"
        result = all_results['results']["POLICY-MASTER-4602"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule POLICY-MASTER-4602 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule POLICY-MASTER-4602 failed"


    def test_rule_policy_master_4603(self, all_results):
        """
        Test POLICY-MASTER-4603: Policy #4: Semver-Bump + Changelog
        Priority: MEDIUM
        """
        assert "POLICY-MASTER-4603" in all_results['results'], "Rule POLICY-MASTER-4603 missing"
        result = all_results['results']["POLICY-MASTER-4603"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule POLICY-MASTER-4603 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule POLICY-MASTER-4603 failed"


    def test_rule_policy_master_4604(self, all_results):
        """
        Test POLICY-MASTER-4604: Policy #5: CI/CD Pipeline (alle Tests grün)
        Priority: MEDIUM
        """
        assert "POLICY-MASTER-4604" in all_results['results'], "Rule POLICY-MASTER-4604 missing"
        result = all_results['results']["POLICY-MASTER-4604"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule POLICY-MASTER-4604 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule POLICY-MASTER-4604 failed"


    def test_rule_policy_master_4605(self, all_results):
        """
        Test POLICY-MASTER-4605: Policy #6: Canary Deployment (5% → 25% → 50% → 100%)
        Priority: MEDIUM
        """
        assert "POLICY-MASTER-4605" in all_results['results'], "Rule POLICY-MASTER-4605 missing"
        result = all_results['results']["POLICY-MASTER-4605"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule POLICY-MASTER-4605 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule POLICY-MASTER-4605 failed"


    def test_rule_policy_master_4606(self, all_results):
        """
        Test POLICY-MASTER-4606: Policy #7: Monitoring & Alerting (Error Rate < 0.5%)
        Priority: MEDIUM
        """
        assert "POLICY-MASTER-4606" in all_results['results'], "Rule POLICY-MASTER-4606 missing"
        result = all_results['results']["POLICY-MASTER-4606"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule POLICY-MASTER-4606 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule POLICY-MASTER-4606 failed"


    def test_rule_list_master_4607(self, all_results):
        """
        Test LIST-MASTER-4607: List item: *Bedingungen:**
        Priority: MEDIUM
        """
        assert "LIST-MASTER-4607" in all_results['results'], "Rule LIST-MASTER-4607 missing"
        result = all_results['results']["LIST-MASTER-4607"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-MASTER-4607 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-MASTER-4607 failed"


    def test_rule_list_master_4608(self, all_results):
        """
        Test LIST-MASTER-4608: List item: ✅ In Production für >= 90 Tage
        Priority: MEDIUM
        """
        assert "LIST-MASTER-4608" in all_results['results'], "Rule LIST-MASTER-4608 missing"
        result = all_results['results']["LIST-MASTER-4608"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-MASTER-4608 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-MASTER-4608 failed"


    def test_rule_list_master_4609(self, all_results):
        """
        Test LIST-MASTER-4609: List item: ✅ SLA Compliance >= 99.5%
        Priority: CRITICAL
        """
        assert "LIST-MASTER-4609" in all_results['results'], "Rule LIST-MASTER-4609 missing"
        result = all_results['results']["LIST-MASTER-4609"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-MASTER-4609 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-MASTER-4609 failed"


    def test_rule_list_master_4610(self, all_results):
        """
        Test LIST-MASTER-4610: List item: ✅ Contract Test Coverage >= 95%
        Priority: MEDIUM
        """
        assert "LIST-MASTER-4610" in all_results['results'], "Rule LIST-MASTER-4610 missing"
        result = all_results['results']["LIST-MASTER-4610"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-MASTER-4610 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-MASTER-4610 failed"


    def test_rule_list_master_4611(self, all_results):
        """
        Test LIST-MASTER-4611: List item: *Approver:** Architecture Board + Product Owner
        Priority: MEDIUM
        """
        assert "LIST-MASTER-4611" in all_results['results'], "Rule LIST-MASTER-4611 missing"
        result = all_results['results']["LIST-MASTER-4611"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-MASTER-4611 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-MASTER-4611 failed"


    def test_rule_list_master_4612(self, all_results):
        """
        Test LIST-MASTER-4612: List item: *Bedingungen:**
        Priority: MEDIUM
        """
        assert "LIST-MASTER-4612" in all_results['results'], "Rule LIST-MASTER-4612 missing"
        result = all_results['results']["LIST-MASTER-4612"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-MASTER-4612 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-MASTER-4612 failed"


    def test_rule_list_master_4613(self, all_results):
        """
        Test LIST-MASTER-4613: List item: ✅ Feature complete
        Priority: MEDIUM
        """
        assert "LIST-MASTER-4613" in all_results['results'], "Rule LIST-MASTER-4613 missing"
        result = all_results['results']["LIST-MASTER-4613"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-MASTER-4613 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-MASTER-4613 failed"


    def test_rule_list_master_4614(self, all_results):
        """
        Test LIST-MASTER-4614: List item: ✅ Beta-Testing erfolgreich
        Priority: MEDIUM
        """
        assert "LIST-MASTER-4614" in all_results['results'], "Rule LIST-MASTER-4614 missing"
        result = all_results['results']["LIST-MASTER-4614"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-MASTER-4614 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-MASTER-4614 failed"


    def test_rule_list_master_4615(self, all_results):
        """
        Test LIST-MASTER-4615: List item: ✅ Dokumentation vollständig
        Priority: MEDIUM
        """
        assert "LIST-MASTER-4615" in all_results['results'], "Rule LIST-MASTER-4615 missing"
        result = all_results['results']["LIST-MASTER-4615"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-MASTER-4615 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-MASTER-4615 failed"


    def test_rule_list_master_4616(self, all_results):
        """
        Test LIST-MASTER-4616: List item: *Approver:** Owner + Architecture Board
        Priority: MEDIUM
        """
        assert "LIST-MASTER-4616" in all_results['results'], "Rule LIST-MASTER-4616 missing"
        result = all_results['results']["LIST-MASTER-4616"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-MASTER-4616 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-MASTER-4616 failed"


    def test_rule_list_master_4617(self, all_results):
        """
        Test LIST-MASTER-4617: List item: *Voraussetzungen:**
        Priority: MEDIUM
        """
        assert "LIST-MASTER-4617" in all_results['results'], "Rule LIST-MASTER-4617 missing"
        result = all_results['results']["LIST-MASTER-4617"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-MASTER-4617 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-MASTER-4617 failed"


    def test_rule_list_master_4618(self, all_results):
        """
        Test LIST-MASTER-4618: List item: ✅ Notice Period: 180 Tage
        Priority: MEDIUM
        """
        assert "LIST-MASTER-4618" in all_results['results'], "Rule LIST-MASTER-4618 missing"
        result = all_results['results']["LIST-MASTER-4618"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-MASTER-4618 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-MASTER-4618 failed"


    def test_rule_list_master_4619(self, all_results):
        """
        Test LIST-MASTER-4619: List item: ✅ Migration Guide vorhanden
        Priority: MEDIUM
        """
        assert "LIST-MASTER-4619" in all_results['results'], "Rule LIST-MASTER-4619 missing"
        result = all_results['results']["LIST-MASTER-4619"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-MASTER-4619 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-MASTER-4619 failed"


    def test_rule_list_master_4620(self, all_results):
        """
        Test LIST-MASTER-4620: List item: ✅ Compatibility Layer implementiert
        Priority: MEDIUM
        """
        assert "LIST-MASTER-4620" in all_results['results'], "Rule LIST-MASTER-4620 missing"
        result = all_results['results']["LIST-MASTER-4620"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-MASTER-4620 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-MASTER-4620 failed"


    def test_rule_list_master_4621(self, all_results):
        """
        Test LIST-MASTER-4621: List item: *Approver:** Architecture Board + alle betroffenen Teams
        Priority: MEDIUM
        """
        assert "LIST-MASTER-4621" in all_results['results'], "Rule LIST-MASTER-4621 missing"
        result = all_results['results']["LIST-MASTER-4621"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-MASTER-4621 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-MASTER-4621 failed"


    def test_rule_list_master_4622(self, all_results):
        """
        Test LIST-MASTER-4622: List item: *Regel:** API-Contract (OpenAPI/JSON-Schema) VOR Implementierung.
        Priority: MEDIUM
        """
        assert "LIST-MASTER-4622" in all_results['results'], "Rule LIST-MASTER-4622 missing"
        result = all_results['results']["LIST-MASTER-4622"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-MASTER-4622 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-MASTER-4622 failed"


    def test_rule_list_master_4623(self, all_results):
        """
        Test LIST-MASTER-4623: List item: *Vorteile:**
        Priority: MEDIUM
        """
        assert "LIST-MASTER-4623" in all_results['results'], "Rule LIST-MASTER-4623 missing"
        result = all_results['results']["LIST-MASTER-4623"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-MASTER-4623 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-MASTER-4623 failed"


    def test_rule_list_master_4624(self, all_results):
        """
        Test LIST-MASTER-4624: List item: ✅ Klare Schnittstellen
        Priority: MEDIUM
        """
        assert "LIST-MASTER-4624" in all_results['results'], "Rule LIST-MASTER-4624 missing"
        result = all_results['results']["LIST-MASTER-4624"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-MASTER-4624 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-MASTER-4624 failed"


    def test_rule_list_master_4625(self, all_results):
        """
        Test LIST-MASTER-4625: List item: ✅ Parallele Entwicklung möglich
        Priority: MEDIUM
        """
        assert "LIST-MASTER-4625" in all_results['results'], "Rule LIST-MASTER-4625 missing"
        result = all_results['results']["LIST-MASTER-4625"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-MASTER-4625 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-MASTER-4625 failed"


    def test_rule_list_master_4626(self, all_results):
        """
        Test LIST-MASTER-4626: List item: ✅ Automatische Tests (Contract-Tests)
        Priority: MEDIUM
        """
        assert "LIST-MASTER-4626" in all_results['results'], "Rule LIST-MASTER-4626 missing"
        result = all_results['results']["LIST-MASTER-4626"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-MASTER-4626 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-MASTER-4626 failed"


    def test_rule_list_master_4627(self, all_results):
        """
        Test LIST-MASTER-4627: List item: ✅ Auto-generierte Dokumentation
        Priority: MEDIUM
        """
        assert "LIST-MASTER-4627" in all_results['results'], "Rule LIST-MASTER-4627 missing"
        result = all_results['results']["LIST-MASTER-4627"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-MASTER-4627 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-MASTER-4627 failed"


    def test_rule_list_master_4628(self, all_results):
        """
        Test LIST-MASTER-4628: List item: *SoT (chart.yaml):**
        Priority: MEDIUM
        """
        assert "LIST-MASTER-4628" in all_results['results'], "Rule LIST-MASTER-4628 missing"
        result = all_results['results']["LIST-MASTER-4628"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-MASTER-4628 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-MASTER-4628 failed"


    def test_rule_list_master_4629(self, all_results):
        """
        Test LIST-MASTER-4629: List item: WAS soll getan werden
        Priority: MEDIUM
        """
        assert "LIST-MASTER-4629" in all_results['results'], "Rule LIST-MASTER-4629 missing"
        result = all_results['results']["LIST-MASTER-4629"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-MASTER-4629 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-MASTER-4629 failed"


    def test_rule_list_master_4630(self, all_results):
        """
        Test LIST-MASTER-4630: List item: Policies & Constraints
        Priority: MEDIUM
        """
        assert "LIST-MASTER-4630" in all_results['results'], "Rule LIST-MASTER-4630 missing"
        result = all_results['results']["LIST-MASTER-4630"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-MASTER-4630 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-MASTER-4630 failed"


    def test_rule_list_master_4631(self, all_results):
        """
        Test LIST-MASTER-4631: List item: Capabilities & Interfaces
        Priority: MEDIUM
        """
        assert "LIST-MASTER-4631" in all_results['results'], "Rule LIST-MASTER-4631 missing"
        result = all_results['results']["LIST-MASTER-4631"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-MASTER-4631 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-MASTER-4631 failed"


    def test_rule_list_master_4632(self, all_results):
        """
        Test LIST-MASTER-4632: List item: *Implementierung (manifest.yaml):**
        Priority: MEDIUM
        """
        assert "LIST-MASTER-4632" in all_results['results'], "Rule LIST-MASTER-4632 missing"
        result = all_results['results']["LIST-MASTER-4632"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-MASTER-4632 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-MASTER-4632 failed"


    def test_rule_list_master_4633(self, all_results):
        """
        Test LIST-MASTER-4633: List item: WIE wird es umgesetzt
        Priority: MEDIUM
        """
        assert "LIST-MASTER-4633" in all_results['results'], "Rule LIST-MASTER-4633 missing"
        result = all_results['results']["LIST-MASTER-4633"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-MASTER-4633 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-MASTER-4633 failed"


    def test_rule_list_master_4634(self, all_results):
        """
        Test LIST-MASTER-4634: List item: Tech-Stack, Dateien, Artefakte
        Priority: MEDIUM
        """
        assert "LIST-MASTER-4634" in all_results['results'], "Rule LIST-MASTER-4634 missing"
        result = all_results['results']["LIST-MASTER-4634"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-MASTER-4634 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-MASTER-4634 failed"


    def test_rule_list_master_4635(self, all_results):
        """
        Test LIST-MASTER-4635: List item: Konkrete Dependencies
        Priority: MEDIUM
        """
        assert "LIST-MASTER-4635" in all_results['results'], "Rule LIST-MASTER-4635 missing"
        result = all_results['results']["LIST-MASTER-4635"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-MASTER-4635 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-MASTER-4635 failed"


    def test_rule_list_master_4636(self, all_results):
        """
        Test LIST-MASTER-4636: List item: *Regel:** Ein Shard, mehrere Implementierungen möglich.
        Priority: MEDIUM
        """
        assert "LIST-MASTER-4636" in all_results['results'], "Rule LIST-MASTER-4636 missing"
        result = all_results['results']["LIST-MASTER-4636"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-MASTER-4636 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-MASTER-4636 failed"


    def test_rule_list_master_4637(self, all_results):
        """
        Test LIST-MASTER-4637: List item: *Beispiel:**
        Priority: MEDIUM
        """
        assert "LIST-MASTER-4637" in all_results['results'], "Rule LIST-MASTER-4637 missing"
        result = all_results['results']["LIST-MASTER-4637"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-MASTER-4637 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-MASTER-4637 failed"


    def test_rule_list_master_4638(self, all_results):
        """
        Test LIST-MASTER-4638: List item: Python-TensorFlow (Production)
        Priority: MEDIUM
        """
        assert "LIST-MASTER-4638" in all_results['results'], "Rule LIST-MASTER-4638 missing"
        result = all_results['results']["LIST-MASTER-4638"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-MASTER-4638 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-MASTER-4638 failed"


    def test_rule_list_master_4639(self, all_results):
        """
        Test LIST-MASTER-4639: List item: Rust-Burn (Performance-Optimiert)
        Priority: MEDIUM
        """
        assert "LIST-MASTER-4639" in all_results['results'], "Rule LIST-MASTER-4639 missing"
        result = all_results['results']["LIST-MASTER-4639"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-MASTER-4639 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-MASTER-4639 failed"


    def test_rule_list_master_4640(self, all_results):
        """
        Test LIST-MASTER-4640: List item: External Service (Commercial Vendor)
        Priority: MEDIUM
        """
        assert "LIST-MASTER-4640" in all_results['results'], "Rule LIST-MASTER-4640 missing"
        result = all_results['results']["LIST-MASTER-4640"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-MASTER-4640 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-MASTER-4640 failed"


    def test_rule_list_master_4641(self, all_results):
        """
        Test LIST-MASTER-4641: List item: *Vorteil:** Technologie-Unabhängigkeit, A/B-Testing, Vendor-Lock-in-V
        Priority: MEDIUM
        """
        assert "LIST-MASTER-4641" in all_results['results'], "Rule LIST-MASTER-4641 missing"
        result = all_results['results']["LIST-MASTER-4641"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-MASTER-4641 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-MASTER-4641 failed"


    def test_rule_list_master_4642(self, all_results):
        """
        Test LIST-MASTER-4642: List item: *Regel:** 24 × 16 = 384 Chart-Dateien, keine Ausnahmen.
        Priority: MEDIUM
        """
        assert "LIST-MASTER-4642" in all_results['results'], "Rule LIST-MASTER-4642 missing"
        result = all_results['results']["LIST-MASTER-4642"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-MASTER-4642 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-MASTER-4642 failed"


    def test_rule_list_master_4643(self, all_results):
        """
        Test LIST-MASTER-4643: List item: *Vorteile:**
        Priority: MEDIUM
        """
        assert "LIST-MASTER-4643" in all_results['results'], "Rule LIST-MASTER-4643 missing"
        result = all_results['results']["LIST-MASTER-4643"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-MASTER-4643 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-MASTER-4643 failed"


    def test_rule_list_master_4644(self, all_results):
        """
        Test LIST-MASTER-4644: List item: ✅ Eindeutige Adressierung
        Priority: MEDIUM
        """
        assert "LIST-MASTER-4644" in all_results['results'], "Rule LIST-MASTER-4644 missing"
        result = all_results['results']["LIST-MASTER-4644"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-MASTER-4644 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-MASTER-4644 failed"


    def test_rule_list_master_4645(self, all_results):
        """
        Test LIST-MASTER-4645: List item: ✅ Automatische Generierung möglich
        Priority: MEDIUM
        """
        assert "LIST-MASTER-4645" in all_results['results'], "Rule LIST-MASTER-4645 missing"
        result = all_results['results']["LIST-MASTER-4645"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-MASTER-4645 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-MASTER-4645 failed"


    def test_rule_list_master_4646(self, all_results):
        """
        Test LIST-MASTER-4646: List item: ✅ Konsistente Struktur
        Priority: MEDIUM
        """
        assert "LIST-MASTER-4646" in all_results['results'], "Rule LIST-MASTER-4646 missing"
        result = all_results['results']["LIST-MASTER-4646"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-MASTER-4646 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-MASTER-4646 failed"


    def test_rule_list_master_4647(self, all_results):
        """
        Test LIST-MASTER-4647: List item: ✅ Leichte Navigation
        Priority: MEDIUM
        """
        assert "LIST-MASTER-4647" in all_results['results'], "Rule LIST-MASTER-4647 missing"
        result = all_results['results']["LIST-MASTER-4647"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-MASTER-4647 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-MASTER-4647 failed"


    def test_rule_list_master_4648(self, all_results):
        """
        Test LIST-MASTER-4648: List item: *Regel:** Alles relevante wird gehasht, geloggt und geanchort.
        Priority: MEDIUM
        """
        assert "LIST-MASTER-4648" in all_results['results'], "Rule LIST-MASTER-4648 missing"
        result = all_results['results']["LIST-MASTER-4648"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-MASTER-4648 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-MASTER-4648 failed"


    def test_rule_list_master_4649(self, all_results):
        """
        Test LIST-MASTER-4649: List item: *Strategie:**
        Priority: MEDIUM
        """
        assert "LIST-MASTER-4649" in all_results['results'], "Rule LIST-MASTER-4649 missing"
        result = all_results['results']["LIST-MASTER-4649"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-MASTER-4649 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-MASTER-4649 failed"


    def test_rule_list_master_4650(self, all_results):
        """
        Test LIST-MASTER-4650: List item: Hash-Ledger für alle Operationen
        Priority: MEDIUM
        """
        assert "LIST-MASTER-4650" in all_results['results'], "Rule LIST-MASTER-4650 missing"
        result = all_results['results']["LIST-MASTER-4650"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-MASTER-4650 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-MASTER-4650 failed"


    def test_rule_list_master_4651(self, all_results):
        """
        Test LIST-MASTER-4651: List item: Blockchain-Anchoring (Ethereum, Polygon)
        Priority: MEDIUM
        """
        assert "LIST-MASTER-4651" in all_results['results'], "Rule LIST-MASTER-4651 missing"
        result = all_results['results']["LIST-MASTER-4651"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-MASTER-4651 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-MASTER-4651 failed"


    def test_rule_list_master_4652(self, all_results):
        """
        Test LIST-MASTER-4652: List item: WORM-Storage (10 Jahre Retention)
        Priority: MEDIUM
        """
        assert "LIST-MASTER-4652" in all_results['results'], "Rule LIST-MASTER-4652 missing"
        result = all_results['results']["LIST-MASTER-4652"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-MASTER-4652 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-MASTER-4652 failed"


    def test_rule_list_master_4653(self, all_results):
        """
        Test LIST-MASTER-4653: List item: Audit-Trails für Compliance-Nachweise
        Priority: CRITICAL
        """
        assert "LIST-MASTER-4653" in all_results['results'], "Rule LIST-MASTER-4653 missing"
        result = all_results['results']["LIST-MASTER-4653"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-MASTER-4653 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-MASTER-4653 failed"


    def test_rule_list_master_4654(self, all_results):
        """
        Test LIST-MASTER-4654: List item: *Regel:** Niemandem vertrauen, alles verifizieren.
        Priority: MEDIUM
        """
        assert "LIST-MASTER-4654" in all_results['results'], "Rule LIST-MASTER-4654 missing"
        result = all_results['results']["LIST-MASTER-4654"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-MASTER-4654 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-MASTER-4654 failed"


    def test_rule_list_master_4655(self, all_results):
        """
        Test LIST-MASTER-4655: List item: *Umsetzung:**
        Priority: MEDIUM
        """
        assert "LIST-MASTER-4655" in all_results['results'], "Rule LIST-MASTER-4655 missing"
        result = all_results['results']["LIST-MASTER-4655"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-MASTER-4655 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-MASTER-4655 failed"


    def test_rule_list_master_4656(self, all_results):
        """
        Test LIST-MASTER-4656: List item: mTLS für alle internen Verbindungen
        Priority: MEDIUM
        """
        assert "LIST-MASTER-4656" in all_results['results'], "Rule LIST-MASTER-4656 missing"
        result = all_results['results']["LIST-MASTER-4656"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-MASTER-4656 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-MASTER-4656 failed"


    def test_rule_list_master_4657(self, all_results):
        """
        Test LIST-MASTER-4657: List item: RBAC für alle Zugriffe
        Priority: MEDIUM
        """
        assert "LIST-MASTER-4657" in all_results['results'], "Rule LIST-MASTER-4657 missing"
        result = all_results['results']["LIST-MASTER-4657"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-MASTER-4657 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-MASTER-4657 failed"


    def test_rule_list_master_4658(self, all_results):
        """
        Test LIST-MASTER-4658: List item: PII-Detection zur Laufzeit
        Priority: MEDIUM
        """
        assert "LIST-MASTER-4658" in all_results['results'], "Rule LIST-MASTER-4658 missing"
        result = all_results['results']["LIST-MASTER-4658"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-MASTER-4658 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-MASTER-4658 failed"


    def test_rule_list_master_4659(self, all_results):
        """
        Test LIST-MASTER-4659: List item: Continuous Vulnerability Scanning
        Priority: MEDIUM
        """
        assert "LIST-MASTER-4659" in all_results['results'], "Rule LIST-MASTER-4659 missing"
        result = all_results['results']["LIST-MASTER-4659"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-MASTER-4659 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-MASTER-4659 failed"


    def test_rule_list_master_4660(self, all_results):
        """
        Test LIST-MASTER-4660: List item: *Regel:** Metrics, Tracing, Logging von Anfang an eingebaut.
        Priority: MEDIUM
        """
        assert "LIST-MASTER-4660" in all_results['results'], "Rule LIST-MASTER-4660 missing"
        result = all_results['results']["LIST-MASTER-4660"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-MASTER-4660 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-MASTER-4660 failed"


    def test_rule_list_master_4661(self, all_results):
        """
        Test LIST-MASTER-4661: List item: Metrics: Prometheus
        Priority: MEDIUM
        """
        assert "LIST-MASTER-4661" in all_results['results'], "Rule LIST-MASTER-4661 missing"
        result = all_results['results']["LIST-MASTER-4661"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-MASTER-4661 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-MASTER-4661 failed"


    def test_rule_list_master_4662(self, all_results):
        """
        Test LIST-MASTER-4662: List item: Tracing: Jaeger (OpenTelemetry)
        Priority: MEDIUM
        """
        assert "LIST-MASTER-4662" in all_results['results'], "Rule LIST-MASTER-4662 missing"
        result = all_results['results']["LIST-MASTER-4662"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-MASTER-4662 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-MASTER-4662 failed"


    def test_rule_list_master_4663(self, all_results):
        """
        Test LIST-MASTER-4663: List item: Logging: Loki (JSON-Format, PII-Redaction)
        Priority: MEDIUM
        """
        assert "LIST-MASTER-4663" in all_results['results'], "Rule LIST-MASTER-4663 missing"
        result = all_results['results']["LIST-MASTER-4663"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-MASTER-4663 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-MASTER-4663 failed"


    def test_rule_list_master_4664(self, all_results):
        """
        Test LIST-MASTER-4664: List item: Alerting: AlertManager
        Priority: MEDIUM
        """
        assert "LIST-MASTER-4664" in all_results['results'], "Rule LIST-MASTER-4664 missing"
        result = all_results['results']["LIST-MASTER-4664"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-MASTER-4664 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-MASTER-4664 failed"


    def test_rule_list_master_4665(self, all_results):
        """
        Test LIST-MASTER-4665: List item: *Regel:** Alle AI/ML-Modelle müssen auf Bias getestet werden.
        Priority: MEDIUM
        """
        assert "LIST-MASTER-4665" in all_results['results'], "Rule LIST-MASTER-4665 missing"
        result = all_results['results']["LIST-MASTER-4665"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-MASTER-4665 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-MASTER-4665 failed"


    def test_rule_list_master_4666(self, all_results):
        """
        Test LIST-MASTER-4666: List item: *Prozess:**
        Priority: MEDIUM
        """
        assert "LIST-MASTER-4666" in all_results['results'], "Rule LIST-MASTER-4666 missing"
        result = all_results['results']["LIST-MASTER-4666"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-MASTER-4666 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-MASTER-4666 failed"


    def test_rule_list_master_4667(self, all_results):
        """
        Test LIST-MASTER-4667: List item: Fairness-Metrics: Demographic Parity, Equal Opportunity
        Priority: MEDIUM
        """
        assert "LIST-MASTER-4667" in all_results['results'], "Rule LIST-MASTER-4667 missing"
        result = all_results['results']["LIST-MASTER-4667"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-MASTER-4667 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-MASTER-4667 failed"


    def test_rule_list_master_4668(self, all_results):
        """
        Test LIST-MASTER-4668: List item: Quarterly Bias Audits
        Priority: MEDIUM
        """
        assert "LIST-MASTER-4668" in all_results['results'], "Rule LIST-MASTER-4668 missing"
        result = all_results['results']["LIST-MASTER-4668"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-MASTER-4668 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-MASTER-4668 failed"


    def test_rule_list_master_4669(self, all_results):
        """
        Test LIST-MASTER-4669: List item: Transparent Model Cards
        Priority: MEDIUM
        """
        assert "LIST-MASTER-4669" in all_results['results'], "Rule LIST-MASTER-4669 missing"
        result = all_results['results']["LIST-MASTER-4669"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-MASTER-4669 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-MASTER-4669 failed"


    def test_rule_list_master_4670(self, all_results):
        """
        Test LIST-MASTER-4670: List item: Bias-Mitigation-Strategien verpflichtend
        Priority: CRITICAL
        """
        assert "LIST-MASTER-4670" in all_results['results'], "Rule LIST-MASTER-4670 missing"
        result = all_results['results']["LIST-MASTER-4670"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-MASTER-4670 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-MASTER-4670 failed"


    def test_rule_list_master_4671(self, all_results):
        """
        Test LIST-MASTER-4671: List item: *Regel:** Jeder Shard muss skalieren können.
        Priority: MEDIUM
        """
        assert "LIST-MASTER-4671" in all_results['results'], "Rule LIST-MASTER-4671 missing"
        result = all_results['results']["LIST-MASTER-4671"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-MASTER-4671 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-MASTER-4671 failed"


    def test_rule_list_master_4672(self, all_results):
        """
        Test LIST-MASTER-4672: List item: *Mechanismen:**
        Priority: MEDIUM
        """
        assert "LIST-MASTER-4672" in all_results['results'], "Rule LIST-MASTER-4672 missing"
        result = all_results['results']["LIST-MASTER-4672"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-MASTER-4672 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-MASTER-4672 failed"


    def test_rule_list_master_4673(self, all_results):
        """
        Test LIST-MASTER-4673: List item: Horizontal Pod Autoscaling (HPA)
        Priority: MEDIUM
        """
        assert "LIST-MASTER-4673" in all_results['results'], "Rule LIST-MASTER-4673 missing"
        result = all_results['results']["LIST-MASTER-4673"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-MASTER-4673 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-MASTER-4673 failed"


    def test_rule_list_master_4674(self, all_results):
        """
        Test LIST-MASTER-4674: List item: Load Balancing
        Priority: MEDIUM
        """
        assert "LIST-MASTER-4674" in all_results['results'], "Rule LIST-MASTER-4674 missing"
        result = all_results['results']["LIST-MASTER-4674"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-MASTER-4674 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-MASTER-4674 failed"


    def test_rule_list_master_4675(self, all_results):
        """
        Test LIST-MASTER-4675: List item: Caching-Strategien
        Priority: MEDIUM
        """
        assert "LIST-MASTER-4675" in all_results['results'], "Rule LIST-MASTER-4675 missing"
        result = all_results['results']["LIST-MASTER-4675"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-MASTER-4675 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-MASTER-4675 failed"


    def test_rule_list_master_4676(self, all_results):
        """
        Test LIST-MASTER-4676: List item: Performance-Benchmarks als Gates
        Priority: MEDIUM
        """
        assert "LIST-MASTER-4676" in all_results['results'], "Rule LIST-MASTER-4676 missing"
        result = all_results['results']["LIST-MASTER-4676"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-MASTER-4676 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-MASTER-4676 failed"


    def test_rule_list_master_4677(self, all_results):
        """
        Test LIST-MASTER-4677: List item: *Regel:** Dokumentation wird aus Code/Contracts generiert.
        Priority: MEDIUM
        """
        assert "LIST-MASTER-4677" in all_results['results'], "Rule LIST-MASTER-4677 missing"
        result = all_results['results']["LIST-MASTER-4677"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-MASTER-4677 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-MASTER-4677 failed"


    def test_rule_list_master_4678(self, all_results):
        """
        Test LIST-MASTER-4678: List item: OpenAPI → Swagger UI
        Priority: MEDIUM
        """
        assert "LIST-MASTER-4678" in all_results['results'], "Rule LIST-MASTER-4678 missing"
        result = all_results['results']["LIST-MASTER-4678"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-MASTER-4678 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-MASTER-4678 failed"


    def test_rule_list_master_4679(self, all_results):
        """
        Test LIST-MASTER-4679: List item: JSON-Schema → json-schema-for-humans
        Priority: MEDIUM
        """
        assert "LIST-MASTER-4679" in all_results['results'], "Rule LIST-MASTER-4679 missing"
        result = all_results['results']["LIST-MASTER-4679"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-MASTER-4679 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-MASTER-4679 failed"


    def test_rule_list_master_4680(self, all_results):
        """
        Test LIST-MASTER-4680: List item: chart.yaml → Jinja2-Templates → Markdown
        Priority: MEDIUM
        """
        assert "LIST-MASTER-4680" in all_results['results'], "Rule LIST-MASTER-4680 missing"
        result = all_results['results']["LIST-MASTER-4680"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-MASTER-4680 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-MASTER-4680 failed"


    def test_rule_list_master_4681(self, all_results):
        """
        Test LIST-MASTER-4681: List item: Publish to 05_documentation/
        Priority: MEDIUM
        """
        assert "LIST-MASTER-4681" in all_results['results'], "Rule LIST-MASTER-4681 missing"
        result = all_results['results']["LIST-MASTER-4681"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-MASTER-4681 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-MASTER-4681 failed"


    def test_rule_list_master_4682(self, all_results):
        """
        Test LIST-MASTER-4682: List item: **Dokumentation:** https://docs.ssid.org/
        Priority: MEDIUM
        """
        assert "LIST-MASTER-4682" in all_results['results'], "Rule LIST-MASTER-4682 missing"
        result = all_results['results']["LIST-MASTER-4682"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-MASTER-4682 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-MASTER-4682 failed"


    def test_rule_list_master_4683(self, all_results):
        """
        Test LIST-MASTER-4683: List item: **Repository:** https://github.com/ssid/
        Priority: MEDIUM
        """
        assert "LIST-MASTER-4683" in all_results['results'], "Rule LIST-MASTER-4683 missing"
        result = all_results['results']["LIST-MASTER-4683"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-MASTER-4683 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-MASTER-4683 failed"


    def test_rule_list_master_4684(self, all_results):
        """
        Test LIST-MASTER-4684: List item: **Issue Tracker:** https://github.com/ssid/issues
        Priority: MEDIUM
        """
        assert "LIST-MASTER-4684" in all_results['results'], "Rule LIST-MASTER-4684 missing"
        result = all_results['results']["LIST-MASTER-4684"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-MASTER-4684 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-MASTER-4684 failed"


    def test_rule_list_master_4685(self, all_results):
        """
        Test LIST-MASTER-4685: List item: **Slack:** #ssid-project
        Priority: MEDIUM
        """
        assert "LIST-MASTER-4685" in all_results['results'], "Rule LIST-MASTER-4685 missing"
        result = all_results['results']["LIST-MASTER-4685"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-MASTER-4685 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-MASTER-4685 failed"


    def test_rule_list_master_4686(self, all_results):
        """
        Test LIST-MASTER-4686: List item: W3C DID Core 1.0
        Priority: MEDIUM
        """
        assert "LIST-MASTER-4686" in all_results['results'], "Rule LIST-MASTER-4686 missing"
        result = all_results['results']["LIST-MASTER-4686"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-MASTER-4686 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-MASTER-4686 failed"


    def test_rule_list_master_4687(self, all_results):
        """
        Test LIST-MASTER-4687: List item: W3C Verifiable Credentials
        Priority: MEDIUM
        """
        assert "LIST-MASTER-4687" in all_results['results'], "Rule LIST-MASTER-4687 missing"
        result = all_results['results']["LIST-MASTER-4687"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-MASTER-4687 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-MASTER-4687 failed"


    def test_rule_list_master_4688(self, all_results):
        """
        Test LIST-MASTER-4688: List item: OpenAPI 3.1
        Priority: MEDIUM
        """
        assert "LIST-MASTER-4688" in all_results['results'], "Rule LIST-MASTER-4688 missing"
        result = all_results['results']["LIST-MASTER-4688"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-MASTER-4688 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-MASTER-4688 failed"


    def test_rule_list_master_4689(self, all_results):
        """
        Test LIST-MASTER-4689: List item: JSON-Schema Draft 2020-12
        Priority: MEDIUM
        """
        assert "LIST-MASTER-4689" in all_results['results'], "Rule LIST-MASTER-4689 missing"
        result = all_results['results']["LIST-MASTER-4689"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-MASTER-4689 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-MASTER-4689 failed"


    def test_rule_list_master_4690(self, all_results):
        """
        Test LIST-MASTER-4690: List item: ISO/IEC 27001
        Priority: MEDIUM
        """
        assert "LIST-MASTER-4690" in all_results['results'], "Rule LIST-MASTER-4690 missing"
        result = all_results['results']["LIST-MASTER-4690"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-MASTER-4690 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-MASTER-4690 failed"


    def test_rule_list_master_4691(self, all_results):
        """
        Test LIST-MASTER-4691: List item: GDPR (EU 2016/679)
        Priority: MEDIUM
        """
        assert "LIST-MASTER-4691" in all_results['results'], "Rule LIST-MASTER-4691 missing"
        result = all_results['results']["LIST-MASTER-4691"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-MASTER-4691 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-MASTER-4691 failed"


    def test_rule_list_master_4692(self, all_results):
        """
        Test LIST-MASTER-4692: List item: **Blockchain:** Ethereum, Polygon, Hyperledger
        Priority: MEDIUM
        """
        assert "LIST-MASTER-4692" in all_results['results'], "Rule LIST-MASTER-4692 missing"
        result = all_results['results']["LIST-MASTER-4692"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-MASTER-4692 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-MASTER-4692 failed"


    def test_rule_list_master_4693(self, all_results):
        """
        Test LIST-MASTER-4693: List item: **ML:** TensorFlow, PyTorch, Scikit-Learn
        Priority: MEDIUM
        """
        assert "LIST-MASTER-4693" in all_results['results'], "Rule LIST-MASTER-4693 missing"
        result = all_results['results']["LIST-MASTER-4693"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-MASTER-4693 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-MASTER-4693 failed"


    def test_rule_list_master_4694(self, all_results):
        """
        Test LIST-MASTER-4694: List item: **API:** gRPC, REST, GraphQL
        Priority: MEDIUM
        """
        assert "LIST-MASTER-4694" in all_results['results'], "Rule LIST-MASTER-4694 missing"
        result = all_results['results']["LIST-MASTER-4694"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-MASTER-4694 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-MASTER-4694 failed"


    def test_rule_list_master_4695(self, all_results):
        """
        Test LIST-MASTER-4695: List item: **Observability:** Prometheus, Jaeger, Loki
        Priority: MEDIUM
        """
        assert "LIST-MASTER-4695" in all_results['results'], "Rule LIST-MASTER-4695 missing"
        result = all_results['results']["LIST-MASTER-4695"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-MASTER-4695 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-MASTER-4695 failed"


    def test_rule_list_master_4696(self, all_results):
        """
        Test LIST-MASTER-4696: List item: **Testing:** pytest, schemathesis, locust
        Priority: MEDIUM
        """
        assert "LIST-MASTER-4696" in all_results['results'], "Rule LIST-MASTER-4696 missing"
        result = all_results['results']["LIST-MASTER-4696"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-MASTER-4696 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-MASTER-4696 failed"


    def test_rule_list_master_4697(self, all_results):
        """
        Test LIST-MASTER-4697: List item: **CI/CD:** GitHub Actions, ArgoCD
        Priority: MEDIUM
        """
        assert "LIST-MASTER-4697" in all_results['results'], "Rule LIST-MASTER-4697 missing"
        result = all_results['results']["LIST-MASTER-4697"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-MASTER-4697 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-MASTER-4697 failed"


    def test_rule_list_master_4698(self, all_results):
        """
        Test LIST-MASTER-4698: List item: **IaC:** Terraform, Helm
        Priority: MEDIUM
        """
        assert "LIST-MASTER-4698" in all_results['results'], "Rule LIST-MASTER-4698 missing"
        result = all_results['results']["LIST-MASTER-4698"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-MASTER-4698 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-MASTER-4698 failed"


    def test_rule_list_master_4699(self, all_results):
        """
        Test LIST-MASTER-4699: List item: *Ende des Master-Dokuments**
        Priority: MEDIUM
        """
        assert "LIST-MASTER-4699" in all_results['results'], "Rule LIST-MASTER-4699 missing"
        result = all_results['results']["LIST-MASTER-4699"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-MASTER-4699 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-MASTER-4699 failed"


    def test_rule_list_master_4700(self, all_results):
        """
        Test LIST-MASTER-4700: List item: *Version:** 1.0.0
        Priority: MEDIUM
        """
        assert "LIST-MASTER-4700" in all_results['results'], "Rule LIST-MASTER-4700 missing"
        result = all_results['results']["LIST-MASTER-4700"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-MASTER-4700 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-MASTER-4700 failed"


    def test_rule_list_master_4701(self, all_results):
        """
        Test LIST-MASTER-4701: List item: *Letzte Aktualisierung:** 2025-10-02
        Priority: MEDIUM
        """
        assert "LIST-MASTER-4701" in all_results['results'], "Rule LIST-MASTER-4701 missing"
        result = all_results['results']["LIST-MASTER-4701"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-MASTER-4701 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-MASTER-4701 failed"


    def test_rule_list_master_4702(self, all_results):
        """
        Test LIST-MASTER-4702: List item: *Nächste Review:** 2025-11-02
        Priority: MEDIUM
        """
        assert "LIST-MASTER-4702" in all_results['results'], "Rule LIST-MASTER-4702 missing"
        result = all_results['results']["LIST-MASTER-4702"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-MASTER-4702 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-MASTER-4702 failed"


    def test_rule_list_master_4703(self, all_results):
        """
        Test LIST-MASTER-4703: List item: *Für Fragen oder Änderungen:** team@ssid.org
        Priority: MEDIUM
        """
        assert "LIST-MASTER-4703" in all_results['results'], "Rule LIST-MASTER-4703 missing"
        result = all_results['results']["LIST-MASTER-4703"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-MASTER-4703 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-MASTER-4703 failed"


    def test_rule_text_master_4704(self, all_results):
        """
        Test TEXT-MASTER-4704: mandatory: true
        Priority: MEDIUM
        """
        assert "TEXT-MASTER-4704" in all_results['results'], "Rule TEXT-MASTER-4704 missing"
        result = all_results['results']["TEXT-MASTER-4704"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule TEXT-MASTER-4704 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule TEXT-MASTER-4704 failed"


    def test_rule_list_master_4705(self, all_results):
        """
        Test LIST-MASTER-4705: List item: dpa_2018_alignment: true
        Priority: MEDIUM
        """
        assert "LIST-MASTER-4705" in all_results['results'], "Rule LIST-MASTER-4705 missing"
        result = all_results['results']["LIST-MASTER-4705"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-MASTER-4705 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-MASTER-4705 failed"


    def test_rule_list_master_4706(self, all_results):
        """
        Test LIST-MASTER-4706: List item: dpo_contact_records: true
        Priority: MEDIUM
        """
        assert "LIST-MASTER-4706" in all_results['results'], "Rule LIST-MASTER-4706 missing"
        result = all_results['results']["LIST-MASTER-4706"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-MASTER-4706 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-MASTER-4706 failed"


    def test_rule_text_master_4707(self, all_results):
        """
        Test TEXT-MASTER-4707: mandatory: true
        Priority: MEDIUM
        """
        assert "TEXT-MASTER-4707" in all_results['results'], "Rule TEXT-MASTER-4707 missing"
        result = all_results['results']["TEXT-MASTER-4707"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule TEXT-MASTER-4707 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule TEXT-MASTER-4707 failed"


    def test_rule_list_master_4708(self, all_results):
        """
        Test LIST-MASTER-4708: List item: data_breach_notification: true
        Priority: MEDIUM
        """
        assert "LIST-MASTER-4708" in all_results['results'], "Rule LIST-MASTER-4708 missing"
        result = all_results['results']["LIST-MASTER-4708"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-MASTER-4708 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-MASTER-4708 failed"


    def test_rule_list_master_4709(self, all_results):
        """
        Test LIST-MASTER-4709: List item: consent_purposes_documented: true
        Priority: MEDIUM
        """
        assert "LIST-MASTER-4709" in all_results['results'], "Rule LIST-MASTER-4709 missing"
        result = all_results['results']["LIST-MASTER-4709"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-MASTER-4709 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-MASTER-4709 failed"


    def test_rule_text_master_4710(self, all_results):
        """
        Test TEXT-MASTER-4710: mandatory: true
        Priority: MEDIUM
        """
        assert "TEXT-MASTER-4710" in all_results['results'], "Rule TEXT-MASTER-4710 missing"
        result = all_results['results']["TEXT-MASTER-4710"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule TEXT-MASTER-4710 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule TEXT-MASTER-4710 failed"


    def test_rule_list_master_4711(self, all_results):
        """
        Test LIST-MASTER-4711: List item: cross_border_transfer_rules: true
        Priority: MEDIUM
        """
        assert "LIST-MASTER-4711" in all_results['results'], "Rule LIST-MASTER-4711 missing"
        result = all_results['results']["LIST-MASTER-4711"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-MASTER-4711 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-MASTER-4711 failed"


    def test_rule_text_master_4712(self, all_results):
        """
        Test TEXT-MASTER-4712: mandatory: true
        Priority: MEDIUM
        """
        assert "TEXT-MASTER-4712" in all_results['results'], "Rule TEXT-MASTER-4712 missing"
        result = all_results['results']["TEXT-MASTER-4712"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule TEXT-MASTER-4712 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule TEXT-MASTER-4712 failed"


    def test_rule_list_master_4713(self, all_results):
        """
        Test LIST-MASTER-4713: List item: app11_security_of_personal_information: true
        Priority: CRITICAL
        """
        assert "LIST-MASTER-4713" in all_results['results'], "Rule LIST-MASTER-4713 missing"
        result = all_results['results']["LIST-MASTER-4713"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-MASTER-4713 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-MASTER-4713 failed"


    def test_rule_list_master_4714(self, all_results):
        """
        Test LIST-MASTER-4714: List item: **Substring-Helper umbenannt:** `contains(haystack, needle)` → `has_s
        Priority: MEDIUM
        """
        assert "LIST-MASTER-4714" in all_results['results'], "Rule LIST-MASTER-4714 missing"
        result = all_results['results']["LIST-MASTER-4714"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-MASTER-4714 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-MASTER-4714 failed"


    def test_rule_list_master_4715(self, all_results):
        """
        Test LIST-MASTER-4715: List item: **Fuzzy-Matching aktiviert:** `string_similarity(a,b)` nutzt Token‑Ov
        Priority: MEDIUM
        """
        assert "LIST-MASTER-4715" in all_results['results'], "Rule LIST-MASTER-4715 missing"
        result = all_results['results']["LIST-MASTER-4715"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-MASTER-4715 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-MASTER-4715 failed"


    def test_rule_list_master_4716(self, all_results):
        """
        Test LIST-MASTER-4716: List item: cron: '15 3 * * *'      # daily sanctions
        Priority: MEDIUM
        """
        assert "LIST-MASTER-4716" in all_results['results'], "Rule LIST-MASTER-4716 missing"
        result = all_results['results']["LIST-MASTER-4716"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-MASTER-4716 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-MASTER-4716 failed"


    def test_rule_list_master_4717(self, all_results):
        """
        Test LIST-MASTER-4717: List item: cron: '0 0 1 */3 *'     # quarterly audit report
        Priority: MEDIUM
        """
        assert "LIST-MASTER-4717" in all_results['results'], "Rule LIST-MASTER-4717 missing"
        result = all_results['results']["LIST-MASTER-4717"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-MASTER-4717 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-MASTER-4717 failed"


    def test_rule_list_master_4718(self, all_results):
        """
        Test LIST-MASTER-4718: List item: **Artifacts:** Einheitlich `actions/upload-artifact@v4` in allen Work
        Priority: MEDIUM
        """
        assert "LIST-MASTER-4718" in all_results['results'], "Rule LIST-MASTER-4718 missing"
        result = all_results['results']["LIST-MASTER-4718"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-MASTER-4718 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-MASTER-4718 failed"


    def test_rule_list_master_4719(self, all_results):
        """
        Test LIST-MASTER-4719: List item: **Build‑Step vor OPA:** erzeugt `/tmp/entities_to_check.json` aus Reg
        Priority: MEDIUM
        """
        assert "LIST-MASTER-4719" in all_results['results'], "Rule LIST-MASTER-4719 missing"
        result = all_results['results']["LIST-MASTER-4719"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-MASTER-4719 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-MASTER-4719 failed"


    def test_rule_list_master_4720(self, all_results):
        """
        Test LIST-MASTER-4720: List item: name: Build entities_to_check.json
        Priority: MEDIUM
        """
        assert "LIST-MASTER-4720" in all_results['results'], "Rule LIST-MASTER-4720 missing"
        result = all_results['results']["LIST-MASTER-4720"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-MASTER-4720 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-MASTER-4720 failed"


    def test_rule_list_master_4721(self, all_results):
        """
        Test LIST-MASTER-4721: List item: **Freshness‑Quelle:** `23_compliance/evidence/sanctions/sources.yaml`
        Priority: CRITICAL
        """
        assert "LIST-MASTER-4721" in all_results['results'], "Rule LIST-MASTER-4721 missing"
        result = all_results['results']["LIST-MASTER-4721"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-MASTER-4721 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-MASTER-4721 failed"


    def test_rule_list_master_4722(self, all_results):
        """
        Test LIST-MASTER-4722: List item: Pro Root muss `docs/incident_response_plan.md` existieren. Vorlage:
        Priority: MEDIUM
        """
        assert "LIST-MASTER-4722" in all_results['results'], "Rule LIST-MASTER-4722 missing"
        result = all_results['results']["LIST-MASTER-4722"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-MASTER-4722 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-MASTER-4722 failed"


    def test_rule_list_master_4723(self, all_results):
        """
        Test LIST-MASTER-4723: List item: OPA‑Struktur‑ und Tiefen‑Checks verwenden **`24_meta_orchestration/re
        Priority: MEDIUM
        """
        assert "LIST-MASTER-4723" in all_results['results'], "Rule LIST-MASTER-4723 missing"
        result = all_results['results']["LIST-MASTER-4723"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule LIST-MASTER-4723 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule LIST-MASTER-4723 failed"


    def test_rule_enforcement_9001(self, all_results):
        """
        Test ENFORCEMENT-9001: Post-Quantum Crypto Backend (Kyber768/Dilithium3) MUST exist
        Priority: CRITICAL
        """
        assert "ENFORCEMENT-9001" in all_results['results'], "Rule ENFORCEMENT-9001 missing"
        result = all_results['results']["ENFORCEMENT-9001"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule ENFORCEMENT-9001 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule ENFORCEMENT-9001 failed"


    def test_rule_enforcement_9002(self, all_results):
        """
        Test ENFORCEMENT-9002: SHA-256 Hash-Ledger MUST exist for all SoT rules
        Priority: CRITICAL
        """
        assert "ENFORCEMENT-9002" in all_results['results'], "Rule ENFORCEMENT-9002 missing"
        result = all_results['results']["ENFORCEMENT-9002"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule ENFORCEMENT-9002 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule ENFORCEMENT-9002 failed"


    def test_rule_enforcement_9003(self, all_results):
        """
        Test ENFORCEMENT-9003: Merkle-Root anchoring configuration MUST be defined
        Priority: CRITICAL
        """
        assert "ENFORCEMENT-9003" in all_results['results'], "Rule ENFORCEMENT-9003 missing"
        result = all_results['results']["ENFORCEMENT-9003"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule ENFORCEMENT-9003 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule ENFORCEMENT-9003 failed"


    def test_rule_enforcement_9004(self, all_results):
        """
        Test ENFORCEMENT-9004: WORM storage path MUST exist for audit logs
        Priority: CRITICAL
        """
        assert "ENFORCEMENT-9004" in all_results['results'], "Rule ENFORCEMENT-9004 missing"
        result = all_results['results']["ENFORCEMENT-9004"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule ENFORCEMENT-9004 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule ENFORCEMENT-9004 failed"


    def test_rule_enforcement_9005(self, all_results):
        """
        Test ENFORCEMENT-9005: PQC signature verification MUST be available
        Priority: HIGH
        """
        assert "ENFORCEMENT-9005" in all_results['results'], "Rule ENFORCEMENT-9005 missing"
        result = all_results['results']["ENFORCEMENT-9005"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "HIGH" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule ENFORCEMENT-9005 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule ENFORCEMENT-9005 failed"


    def test_rule_enforcement_9006(self, all_results):
        """
        Test ENFORCEMENT-9006: Hash chain integrity MUST be verifiable
        Priority: HIGH
        """
        assert "ENFORCEMENT-9006" in all_results['results'], "Rule ENFORCEMENT-9006 missing"
        result = all_results['results']["ENFORCEMENT-9006"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "HIGH" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule ENFORCEMENT-9006 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule ENFORCEMENT-9006 failed"


    def test_rule_enforcement_9007(self, all_results):
        """
        Test ENFORCEMENT-9007: Blockchain anchoring frequency MUST be documented
        Priority: MEDIUM
        """
        assert "ENFORCEMENT-9007" in all_results['results'], "Rule ENFORCEMENT-9007 missing"
        result = all_results['results']["ENFORCEMENT-9007"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule ENFORCEMENT-9007 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule ENFORCEMENT-9007 failed"


    def test_rule_enforcement_9008(self, all_results):
        """
        Test ENFORCEMENT-9008: Encryption-at-rest MUST be configured for sensitive data
        Priority: MEDIUM
        """
        assert "ENFORCEMENT-9008" in all_results['results'], "Rule ENFORCEMENT-9008 missing"
        result = all_results['results']["ENFORCEMENT-9008"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule ENFORCEMENT-9008 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule ENFORCEMENT-9008 failed"


    def test_rule_enforcement_9009(self, all_results):
        """
        Test ENFORCEMENT-9009: Encryption-in-transit MUST use TLS 1.3
        Priority: MEDIUM
        """
        assert "ENFORCEMENT-9009" in all_results['results'], "Rule ENFORCEMENT-9009 missing"
        result = all_results['results']["ENFORCEMENT-9009"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule ENFORCEMENT-9009 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule ENFORCEMENT-9009 failed"


    def test_rule_enforcement_9010(self, all_results):
        """
        Test ENFORCEMENT-9010: Quantum-safe migration plan MUST be documented
        Priority: LOW
        """
        assert "ENFORCEMENT-9010" in all_results['results'], "Rule ENFORCEMENT-9010 missing"
        result = all_results['results']["ENFORCEMENT-9010"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "LOW" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule ENFORCEMENT-9010 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule ENFORCEMENT-9010 failed"


    def test_rule_enforcement_9011(self, all_results):
        """
        Test ENFORCEMENT-9011: OPA Rego policy MUST contain >= 4723 rules
        Priority: CRITICAL
        """
        assert "ENFORCEMENT-9011" in all_results['results'], "Rule ENFORCEMENT-9011 missing"
        result = all_results['results']["ENFORCEMENT-9011"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule ENFORCEMENT-9011 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule ENFORCEMENT-9011 failed"


    def test_rule_enforcement_9012(self, all_results):
        """
        Test ENFORCEMENT-9012: CI gates MUST exit with code 24 on structure violations
        Priority: CRITICAL
        """
        assert "ENFORCEMENT-9012" in all_results['results'], "Rule ENFORCEMENT-9012 missing"
        result = all_results['results']["ENFORCEMENT-9012"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule ENFORCEMENT-9012 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule ENFORCEMENT-9012 failed"


    def test_rule_enforcement_9013(self, all_results):
        """
        Test ENFORCEMENT-9013: Pre-commit hooks MUST validate structure before commit
        Priority: CRITICAL
        """
        assert "ENFORCEMENT-9013" in all_results['results'], "Rule ENFORCEMENT-9013 missing"
        result = all_results['results']["ENFORCEMENT-9013"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule ENFORCEMENT-9013 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule ENFORCEMENT-9013 failed"


    def test_rule_enforcement_9014(self, all_results):
        """
        Test ENFORCEMENT-9014: Root-24-LOCK enforcer MUST be active
        Priority: CRITICAL
        """
        assert "ENFORCEMENT-9014" in all_results['results'], "Rule ENFORCEMENT-9014 missing"
        result = all_results['results']["ENFORCEMENT-9014"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule ENFORCEMENT-9014 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule ENFORCEMENT-9014 failed"


    def test_rule_enforcement_9015(self, all_results):
        """
        Test ENFORCEMENT-9015: Static analysis hooks MUST scan for PII storage violations
        Priority: HIGH
        """
        assert "ENFORCEMENT-9015" in all_results['results'], "Rule ENFORCEMENT-9015 missing"
        result = all_results['results']["ENFORCEMENT-9015"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "HIGH" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule ENFORCEMENT-9015 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule ENFORCEMENT-9015 failed"


    def test_rule_enforcement_9016(self, all_results):
        """
        Test ENFORCEMENT-9016: Runtime PII detector MUST block storage of raw PII
        Priority: HIGH
        """
        assert "ENFORCEMENT-9016" in all_results['results'], "Rule ENFORCEMENT-9016 missing"
        result = all_results['results']["ENFORCEMENT-9016"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "HIGH" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule ENFORCEMENT-9016 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule ENFORCEMENT-9016 failed"


    def test_rule_enforcement_9017(self, all_results):
        """
        Test ENFORCEMENT-9017: Kubernetes Gatekeeper MUST enforce policies at deployment
        Priority: MEDIUM
        """
        assert "ENFORCEMENT-9017" in all_results['results'], "Rule ENFORCEMENT-9017 missing"
        result = all_results['results']["ENFORCEMENT-9017"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule ENFORCEMENT-9017 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule ENFORCEMENT-9017 failed"


    def test_rule_enforcement_9018(self, all_results):
        """
        Test ENFORCEMENT-9018: All 24 root modules MUST have dedicated OPA policies
        Priority: MEDIUM
        """
        assert "ENFORCEMENT-9018" in all_results['results'], "Rule ENFORCEMENT-9018 missing"
        result = all_results['results']["ENFORCEMENT-9018"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule ENFORCEMENT-9018 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule ENFORCEMENT-9018 failed"


    def test_rule_enforcement_9019(self, all_results):
        """
        Test ENFORCEMENT-9019: Policy test coverage MUST be >= 90%
        Priority: LOW
        """
        assert "ENFORCEMENT-9019" in all_results['results'], "Rule ENFORCEMENT-9019 missing"
        result = all_results['results']["ENFORCEMENT-9019"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "LOW" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule ENFORCEMENT-9019 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule ENFORCEMENT-9019 failed"


    def test_rule_enforcement_9020(self, all_results):
        """
        Test ENFORCEMENT-9020: Policy documentation MUST be up-to-date
        Priority: LOW
        """
        assert "ENFORCEMENT-9020" in all_results['results'], "Rule ENFORCEMENT-9020 missing"
        result = all_results['results']["ENFORCEMENT-9020"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "LOW" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule ENFORCEMENT-9020 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule ENFORCEMENT-9020 failed"


    def test_rule_enforcement_9021(self, all_results):
        """
        Test ENFORCEMENT-9021: Zero-Time-Auth MUST be implemented in all 16 shards
        Priority: CRITICAL
        """
        assert "ENFORCEMENT-9021" in all_results['results'], "Rule ENFORCEMENT-9021 missing"
        result = all_results['results']["ENFORCEMENT-9021"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule ENFORCEMENT-9021 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule ENFORCEMENT-9021 failed"


    def test_rule_enforcement_9022(self, all_results):
        """
        Test ENFORCEMENT-9022: Developer registry MUST exist with DID-based identities
        Priority: CRITICAL
        """
        assert "ENFORCEMENT-9022" in all_results['results'], "Rule ENFORCEMENT-9022 missing"
        result = all_results['results']["ENFORCEMENT-9022"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule ENFORCEMENT-9022 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule ENFORCEMENT-9022 failed"


    def test_rule_enforcement_9023(self, all_results):
        """
        Test ENFORCEMENT-9023: W3C DID standard MUST be implemented
        Priority: CRITICAL
        """
        assert "ENFORCEMENT-9023" in all_results['results'], "Rule ENFORCEMENT-9023 missing"
        result = all_results['results']["ENFORCEMENT-9023"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule ENFORCEMENT-9023 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule ENFORCEMENT-9023 failed"


    def test_rule_enforcement_9024(self, all_results):
        """
        Test ENFORCEMENT-9024: Verifiable Credentials MUST be supported
        Priority: CRITICAL
        """
        assert "ENFORCEMENT-9024" in all_results['results'], "Rule ENFORCEMENT-9024 missing"
        result = all_results['results']["ENFORCEMENT-9024"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule ENFORCEMENT-9024 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule ENFORCEMENT-9024 failed"


    def test_rule_enforcement_9025(self, all_results):
        """
        Test ENFORCEMENT-9025: mTLS MUST be configured for all internal connections
        Priority: HIGH
        """
        assert "ENFORCEMENT-9025" in all_results['results'], "Rule ENFORCEMENT-9025 missing"
        result = all_results['results']["ENFORCEMENT-9025"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "HIGH" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule ENFORCEMENT-9025 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule ENFORCEMENT-9025 failed"


    def test_rule_enforcement_9026(self, all_results):
        """
        Test ENFORCEMENT-9026: Non-custodial proof distribution MUST be peer-to-peer
        Priority: HIGH
        """
        assert "ENFORCEMENT-9026" in all_results['results'], "Rule ENFORCEMENT-9026 missing"
        result = all_results['results']["ENFORCEMENT-9026"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "HIGH" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule ENFORCEMENT-9026 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule ENFORCEMENT-9026 failed"


    def test_rule_enforcement_9027(self, all_results):
        """
        Test ENFORCEMENT-9027: DID-based commit signatures MUST be verified
        Priority: MEDIUM
        """
        assert "ENFORCEMENT-9027" in all_results['results'], "Rule ENFORCEMENT-9027 missing"
        result = all_results['results']["ENFORCEMENT-9027"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule ENFORCEMENT-9027 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule ENFORCEMENT-9027 failed"


    def test_rule_enforcement_9028(self, all_results):
        """
        Test ENFORCEMENT-9028: RBAC policies MUST be defined for all access points
        Priority: MEDIUM
        """
        assert "ENFORCEMENT-9028" in all_results['results'], "Rule ENFORCEMENT-9028 missing"
        result = all_results['results']["ENFORCEMENT-9028"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule ENFORCEMENT-9028 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule ENFORCEMENT-9028 failed"


    def test_rule_enforcement_9029(self, all_results):
        """
        Test ENFORCEMENT-9029: Zero-Trust architecture MUST be documented
        Priority: LOW
        """
        assert "ENFORCEMENT-9029" in all_results['results'], "Rule ENFORCEMENT-9029 missing"
        result = all_results['results']["ENFORCEMENT-9029"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "LOW" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule ENFORCEMENT-9029 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule ENFORCEMENT-9029 failed"


    def test_rule_enforcement_9030(self, all_results):
        """
        Test ENFORCEMENT-9030: Trust model MUST include threat modeling
        Priority: LOW
        """
        assert "ENFORCEMENT-9030" in all_results['results'], "Rule ENFORCEMENT-9030 missing"
        result = all_results['results']["ENFORCEMENT-9030"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "LOW" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule ENFORCEMENT-9030 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule ENFORCEMENT-9030 failed"


    def test_rule_enforcement_9031(self, all_results):
        """
        Test ENFORCEMENT-9031: SoT Health Monitor MUST be available
        Priority: CRITICAL
        """
        assert "ENFORCEMENT-9031" in all_results['results'], "Rule ENFORCEMENT-9031 missing"
        result = all_results['results']["ENFORCEMENT-9031"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule ENFORCEMENT-9031 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule ENFORCEMENT-9031 failed"


    def test_rule_enforcement_9032(self, all_results):
        """
        Test ENFORCEMENT-9032: Metrics collector MUST gather SoT-specific metrics
        Priority: CRITICAL
        """
        assert "ENFORCEMENT-9032" in all_results['results'], "Rule ENFORCEMENT-9032 missing"
        result = all_results['results']["ENFORCEMENT-9032"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule ENFORCEMENT-9032 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule ENFORCEMENT-9032 failed"


    def test_rule_enforcement_9033(self, all_results):
        """
        Test ENFORCEMENT-9033: SoT metrics module MUST be implemented
        Priority: CRITICAL
        """
        assert "ENFORCEMENT-9033" in all_results['results'], "Rule ENFORCEMENT-9033 missing"
        result = all_results['results']["ENFORCEMENT-9033"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule ENFORCEMENT-9033 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule ENFORCEMENT-9033 failed"


    def test_rule_enforcement_9034(self, all_results):
        """
        Test ENFORCEMENT-9034: Federation metrics schema MUST be defined
        Priority: CRITICAL
        """
        assert "ENFORCEMENT-9034" in all_results['results'], "Rule ENFORCEMENT-9034 missing"
        result = all_results['results']["ENFORCEMENT-9034"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule ENFORCEMENT-9034 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule ENFORCEMENT-9034 failed"


    def test_rule_enforcement_9035(self, all_results):
        """
        Test ENFORCEMENT-9035: Prometheus metrics MUST be exported
        Priority: HIGH
        """
        assert "ENFORCEMENT-9035" in all_results['results'], "Rule ENFORCEMENT-9035 missing"
        result = all_results['results']["ENFORCEMENT-9035"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "HIGH" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule ENFORCEMENT-9035 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule ENFORCEMENT-9035 failed"


    def test_rule_enforcement_9036(self, all_results):
        """
        Test ENFORCEMENT-9036: Jaeger tracing MUST be configured
        Priority: HIGH
        """
        assert "ENFORCEMENT-9036" in all_results['results'], "Rule ENFORCEMENT-9036 missing"
        result = all_results['results']["ENFORCEMENT-9036"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "HIGH" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule ENFORCEMENT-9036 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule ENFORCEMENT-9036 failed"


    def test_rule_enforcement_9037(self, all_results):
        """
        Test ENFORCEMENT-9037: Loki logging MUST include PII redaction
        Priority: HIGH
        """
        assert "ENFORCEMENT-9037" in all_results['results'], "Rule ENFORCEMENT-9037 missing"
        result = all_results['results']["ENFORCEMENT-9037"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "HIGH" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule ENFORCEMENT-9037 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule ENFORCEMENT-9037 failed"


    def test_rule_enforcement_9038(self, all_results):
        """
        Test ENFORCEMENT-9038: Audit pipeline MUST generate scorecard automatically
        Priority: MEDIUM
        """
        assert "ENFORCEMENT-9038" in all_results['results'], "Rule ENFORCEMENT-9038 missing"
        result = all_results['results']["ENFORCEMENT-9038"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule ENFORCEMENT-9038 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule ENFORCEMENT-9038 failed"


    def test_rule_enforcement_9039(self, all_results):
        """
        Test ENFORCEMENT-9039: Alert manager MUST be configured for critical events
        Priority: MEDIUM
        """
        assert "ENFORCEMENT-9039" in all_results['results'], "Rule ENFORCEMENT-9039 missing"
        result = all_results['results']["ENFORCEMENT-9039"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule ENFORCEMENT-9039 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule ENFORCEMENT-9039 failed"


    def test_rule_enforcement_9040(self, all_results):
        """
        Test ENFORCEMENT-9040: Observability dashboards MUST visualize SoT status
        Priority: LOW
        """
        assert "ENFORCEMENT-9040" in all_results['results'], "Rule ENFORCEMENT-9040 missing"
        result = all_results['results']["ENFORCEMENT-9040"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "LOW" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule ENFORCEMENT-9040 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule ENFORCEMENT-9040 failed"


    def test_rule_enforcement_9041(self, all_results):
        """
        Test ENFORCEMENT-9041: Immutable registry MUST exist with logs/locks/manifests
        Priority: CRITICAL
        """
        assert "ENFORCEMENT-9041" in all_results['results'], "Rule ENFORCEMENT-9041 missing"
        result = all_results['results']["ENFORCEMENT-9041"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule ENFORCEMENT-9041 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule ENFORCEMENT-9041 failed"


    def test_rule_enforcement_9042(self, all_results):
        """
        Test ENFORCEMENT-9042: Global governance matrix MUST be defined
        Priority: CRITICAL
        """
        assert "ENFORCEMENT-9042" in all_results['results'], "Rule ENFORCEMENT-9042 missing"
        result = all_results['results']["ENFORCEMENT-9042"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule ENFORCEMENT-9042 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule ENFORCEMENT-9042 failed"


    def test_rule_enforcement_9043(self, all_results):
        """
        Test ENFORCEMENT-9043: Autonomous governance node MUST be implemented
        Priority: CRITICAL
        """
        assert "ENFORCEMENT-9043" in all_results['results'], "Rule ENFORCEMENT-9043 missing"
        result = all_results['results']["ENFORCEMENT-9043"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule ENFORCEMENT-9043 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule ENFORCEMENT-9043 failed"


    def test_rule_enforcement_9044(self, all_results):
        """
        Test ENFORCEMENT-9044: Governance manifest MUST document decision framework
        Priority: CRITICAL
        """
        assert "ENFORCEMENT-9044" in all_results['results'], "Rule ENFORCEMENT-9044 missing"
        result = all_results['results']["ENFORCEMENT-9044"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "CRITICAL" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule ENFORCEMENT-9044 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule ENFORCEMENT-9044 failed"


    def test_rule_enforcement_9045(self, all_results):
        """
        Test ENFORCEMENT-9045: Governance decisions log MUST be maintained
        Priority: HIGH
        """
        assert "ENFORCEMENT-9045" in all_results['results'], "Rule ENFORCEMENT-9045 missing"
        result = all_results['results']["ENFORCEMENT-9045"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "HIGH" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule ENFORCEMENT-9045 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule ENFORCEMENT-9045 failed"


    def test_rule_enforcement_9046(self, all_results):
        """
        Test ENFORCEMENT-9046: DAO governance framework MUST be ready
        Priority: HIGH
        """
        assert "ENFORCEMENT-9046" in all_results['results'], "Rule ENFORCEMENT-9046 missing"
        result = all_results['results']["ENFORCEMENT-9046"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "HIGH" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule ENFORCEMENT-9046 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule ENFORCEMENT-9046 failed"


    def test_rule_enforcement_9047(self, all_results):
        """
        Test ENFORCEMENT-9047: eIDAS compliance MUST be documented
        Priority: MEDIUM
        """
        assert "ENFORCEMENT-9047" in all_results['results'], "Rule ENFORCEMENT-9047 missing"
        result = all_results['results']["ENFORCEMENT-9047"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule ENFORCEMENT-9047 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule ENFORCEMENT-9047 failed"


    def test_rule_enforcement_9048(self, all_results):
        """
        Test ENFORCEMENT-9048: GDPR Article 5 compliance MUST be verifiable
        Priority: MEDIUM
        """
        assert "ENFORCEMENT-9048" in all_results['results'], "Rule ENFORCEMENT-9048 missing"
        result = all_results['results']["ENFORCEMENT-9048"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "MEDIUM" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule ENFORCEMENT-9048 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule ENFORCEMENT-9048 failed"


    def test_rule_enforcement_9049(self, all_results):
        """
        Test ENFORCEMENT-9049: Dual review process MUST be enforced for SoT updates
        Priority: LOW
        """
        assert "ENFORCEMENT-9049" in all_results['results'], "Rule ENFORCEMENT-9049 missing"
        result = all_results['results']["ENFORCEMENT-9049"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "LOW" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule ENFORCEMENT-9049 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule ENFORCEMENT-9049 failed"


    def test_rule_enforcement_9050(self, all_results):
        """
        Test ENFORCEMENT-9050: Legal proof anchoring MUST be available
        Priority: LOW
        """
        assert "ENFORCEMENT-9050" in all_results['results'], "Rule ENFORCEMENT-9050 missing"
        result = all_results['results']["ENFORCEMENT-9050"]

        # CRITICAL/HIGH must PASS, MEDIUM/LOW can WARN
        if "LOW" in ['CRITICAL', 'HIGH']:
            assert result == ValidationResult.PASS, f"Rule ENFORCEMENT-9050 failed (expected PASS)"
        else:
            assert result in [ValidationResult.PASS, ValidationResult.WARN], f"Rule ENFORCEMENT-9050 failed"
