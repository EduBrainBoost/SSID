{
  "summary": {
    "total_validators": 194,
    "total_rules": 416,
    "covered_rules": 214,
    "uncovered_rules": 202,
    "coverage_percentage": 51.44
  },
  "coverage_by_category": {
    "shards": {
      "total": 39,
      "covered": 0,
      "uncovered": 39,
      "percentage": 0.0
    },
    "roadmap": {
      "total": 26,
      "covered": 0,
      "uncovered": 26,
      "percentage": 0.0
    },
    "structure": {
      "total": 7,
      "covered": 0,
      "uncovered": 7,
      "percentage": 0.0
    },
    "additions_v1_1_1": {
      "total": 34,
      "covered": 5,
      "uncovered": 29,
      "percentage": 14.71
    },
    "roots": {
      "total": 74,
      "covered": 0,
      "uncovered": 74,
      "percentage": 0.0
    },
    "policies": {
      "total": 32,
      "covered": 23,
      "uncovered": 9,
      "percentage": 71.88
    },
    "manifest_yaml": {
      "total": 45,
      "covered": 45,
      "uncovered": 0,
      "percentage": 100.0
    },
    "principles": {
      "total": 51,
      "covered": 51,
      "uncovered": 0,
      "percentage": 100.0
    },
    "standards": {
      "total": 8,
      "covered": 0,
      "uncovered": 8,
      "percentage": 0.0
    },
    "governance": {
      "total": 31,
      "covered": 31,
      "uncovered": 0,
      "percentage": 100.0
    },
    "architecture": {
      "total": 13,
      "covered": 13,
      "uncovered": 0,
      "percentage": 100.0
    },
    "naming": {
      "total": 10,
      "covered": 0,
      "uncovered": 10,
      "percentage": 0.0
    },
    "chart_yaml": {
      "total": 46,
      "covered": 46,
      "uncovered": 0,
      "percentage": 100.0
    }
  },
  "uncovered_rules_by_category": {
    "roots": [
      "ROOT-ai_layer-01: KI-Modelle (Training, Inferenz, Federated Learning)",
      "ROOT-ai_layer-02: Risk/Trust-Scoring, Bias- & Fairness-Kontrollen",
      "ROOT-ai_layer-03: AI Governance (EU AI Act, Drift Detection, Safety)",
      "ROOT-ai_layer-04: Multi-Modal (Text, Bild, Audio, Video)",
      "ROOT-audit_logging-05: Hash-Ledger, Evidence-Matrix, Blockchain Anchors",
      "ROOT-audit_logging-06: Audit-Trails, Logging, Retention, Quarantine",
      "ROOT-audit_logging-07: Compliance-Protokolle, DAO-Governance-Audits",
      "ROOT-core-08: Smart Contract Kernsystem (On-Chain-Regeln)",
      "ROOT-core-09: Dispatcher-Schnittstellen",
      "ROOT-core-10: Identity-Resolver, Core-APIs",
      "ROOT-core-11: Root-24-LOCK Enforcement",
      "ROOT-deployment-12: CI/CD-Pipelines, Rollouts, Cluster-Konfiguration",
      "ROOT-deployment-13: Deployment-Strategien (Canary, Blue/Green)",
      "ROOT-deployment-14: Container & Orchestrierung (K8s, Terraform)",
      "ROOT-documentation-15: Developer Guides, User Manuals, API Docs",
      "ROOT-documentation-16: Mehrsprachigkeit (I18N-Layer)",
      "ROOT-documentation-17: Strukturdateien, Docusaurus Export",
      "ROOT-data_pipeline-18: ETL/ELT-Prozesse, Datenströme",
      "ROOT-data_pipeline-19: Orchestrierung (Batch, Stream, Realtime)",
      "ROOT-data_pipeline-20: ML/AI Data-Feeds",
      "ROOT-governance_legal-21: eIDAS, MiCA, DSGVO, DORA",
      "ROOT-governance_legal-22: Juristische Policies, Verträge mit Providern",
      "ROOT-governance_legal-23: DAO-Governance-Regeln",
      "ROOT-identity_score-24: Identity Trust Levels, Reputationssysteme",
      "ROOT-identity_score-25: Scoring-Algorithmen für SSI/DIDs",
      "ROOT-identity_score-26: Verhaltensanalysen (nur Hash-Proofs, keine PII)",
      "ROOT-meta_identity-27: DID-Schemas, Identity Wallets",
      "ROOT-meta_identity-28: Selective Disclosure, Profile, Avatare",
      "ROOT-meta_identity-29: Identity Lifecycle Management",
      "ROOT-interoperability-30: DID-Resolver, Standards (DIF, W3C)",
      "ROOT-interoperability-31: Cross-Chain Bridges, Protokoll-Adapter",
      "ROOT-interoperability-32: API-Gateways",
      "ROOT-test_simulation-33: Testumgebungen, Simulationen, Mock-Chains",
      "ROOT-test_simulation-34: Chaos Engineering, Attack Simulations",
      "ROOT-test_simulation-35: Benchmarking & Performance-Tests",
      "ROOT-tooling-36: Developer Tools, CLI, SDKs",
      "ROOT-tooling-37: CI-Helper, Linter, Formatter",
      "ROOT-tooling-38: Automation Scripts",
      "ROOT-ui_layer-39: Frontend, Dashboards, Apps",
      "ROOT-ui_layer-40: Partner- & User-Portale",
      "ROOT-ui_layer-41: Admin-GUIs",
      "ROOT-zero_time_auth-42: Real-Time KYC/KYB über Anbieter",
      "ROOT-zero_time_auth-43: Zero-Time Login, Biometrie, MFA",
      "ROOT-zero_time_auth-44: DID-gebundene Session-Tokens",
      "ROOT-infra-45: Cloud, Bare-Metal, Netzwerke",
      "ROOT-infra-46: Storage, Compute, Load Balancing",
      "ROOT-infra-47: Secrets & Key Management",
      "ROOT-codex-48: Codex, Policies, Blaupausen",
      "ROOT-codex-49: Regelwerke für Module",
      "ROOT-codex-50: SSID-Bibeln (Manifeste, Strukturlevel3)",
      "ROOT-observability-51: Logging, Metrics, Tracing",
      "ROOT-observability-52: Alerts, Dashboards, SIEM",
      "ROOT-observability-53: AI-Ops Monitoring",
      "ROOT-data_layer-54: Datenbanken, GraphDBs, Time-Series",
      "ROOT-data_layer-55: Encryption-at-Rest, Backups",
      "ROOT-data_layer-56: Hash-Speicher",
      "ROOT-adapters-57: Adapter zu externen APIs/Chains",
      "ROOT-adapters-58: Payment-Provider-Connectoren",
      "ROOT-adapters-59: Identity Provider SDKs",
      "ROOT-foundation-60: SSID-Token (Utility, Governance, Rewards)",
      "ROOT-foundation-61: Tokenomics, Distribution, Rewards",
      "ROOT-foundation-62: Lizenzmodelle (NFT-Licenses)",
      "ROOT-post_quantum_crypto-63: PQC-Algorithmen (Kyber, Dilithium)",
      "ROOT-post_quantum_crypto-64: Quantum-Safe Migration",
      "ROOT-post_quantum_crypto-65: Hybrid-Signaturen",
      "ROOT-datasets-66: Public Datasets, Trainingsdaten",
      "ROOT-datasets-67: Hash-Referenzen statt PII",
      "ROOT-datasets-68: Zugriff via DID & Consent",
      "ROOT-compliance-69: Blacklists, Whitelists, Jurisdiktionsregeln",
      "ROOT-compliance-70: Policies (AML, KYC, GDPR)",
      "ROOT-compliance-71: Audit-Logs, Evidence-Registrierung",
      "ROOT-meta_orchestration-72: Dispatcher, Registry, Locks",
      "ROOT-meta_orchestration-73: Trigger & Gates",
      "ROOT-meta_orchestration-74: Versionierung, Global Hash-Ledger"
    ],
    "shards": [
      "SHARD-01-01: DIDs, Ausweise, Profile, Authentifizierung",
      "SHARD-01-02: Personen, Firmen, Organisationen, Behörden",
      "SHARD-02-03: Urkunden, Bescheinigungen, Zertifikate, Vollmachten",
      "SHARD-02-04: Digitale Signaturen, Notarisierungen",
      "SHARD-03-05: Rollen, Rechte, Mandanten, Delegationen",
      "SHARD-03-06: MFA, Zero-Trust, Session-Management",
      "SHARD-04-07: Nachrichten, E-Mail, Chat, Datenaustausch",
      "SHARD-04-08: APIs, Schnittstellen, Benachrichtigungen",
      "SHARD-04-09: ",
      "SHARD-05-10: Krankenakte, Rezepte, Impfpass, Behandlungen",
      "SHARD-05-11: Ärzte, Kliniken, Apotheken, Pflegedienste",
      "SHARD-06-12: Zeugnisse, Abschlüsse, Kurse, Weiterbildung",
      "SHARD-06-13: Schulen, Unis, Zertifizierungen, Skills",
      "SHARD-07-14: Geburt, Heirat, Scheidung, Adoption, Erbe",
      "SHARD-07-15: Vormundschaft, Betreuung, Sozialleistungen",
      "SHARD-07-16: Vereine, Mitgliedschaften, Ehrenamt",
      "SHARD-08-17: Führerschein, KFZ-Zulassung, Fahrzeugpapiere",
      "SHARD-08-18: TÜV/AU, Fahrzeugkauf/-verkauf, Parkausweise",
      "SHARD-08-19: Maut-Accounts, Kfz-Versicherung, Fahrzeughistorie",
      "SHARD-08-20: ",
      "SHARD-09-21: Arbeitsverträge, Gehalt, Bewerbungen, Referenzen",
      "SHARD-09-22: Freelancing, Honorare, Arbeitszeugnisse",
      "SHARD-10-23: Konten, Zahlungen, Überweisungen, Kredite",
      "SHARD-10-24: Investments, Portfolios, DeFi, Krypto",
      "SHARD-10-25: Abonnements, Loyalitäts-Programme",
      "SHARD-11-26: Alle Versicherungsarten (Kranken, Leben, Haftpflicht, etc.)",
      "SHARD-11-27: Schäden, Claims, Policen, Prämien",
      "SHARD-12-28: Eigentum, Miete, Pacht, Grundbuch",
      "SHARD-12-29: Hypotheken, Bewertungen, Nutzungsrechte",
      "SHARD-12-30: ",
      "SHARD-13-31: Firmendaten, Handelsregister, Lizenzen, B2B",
      "SHARD-13-32: Buchhaltung, Bilanzen, Jahresabschlüsse",
      "SHARD-14-33: Smart Contracts, Geschäftsverträge, AGBs",
      "SHARD-14-34: SLAs, Lieferantenverträge, Partnerschaften",
      "SHARD-15-35: Käufe, Verkäufe, Rechnungen, Garantien",
      "SHARD-15-36: Supply Chain, Logistik, Lieferscheine",
      "SHARD-15-37: Reisen, Events, Tickets",
      "SHARD-16-38: Ämter, Anträge, Genehmigungen, Steuern",
      "SHARD-16-39: Meldewesen, Gerichtsurteile, Ordnungswidrigkeiten"
    ],
    "structure": [
      "FOLDER-001: Required: chart.yaml - SoT (abstrakt, WAS)",
      "FOLDER-002: Required: contracts/ - API-Definitionen",
      "FOLDER-003: Required: implementations/ - Konkrete Umsetzungen",
      "FOLDER-004: Required: conformance/ - Contract-Tests",
      "FOLDER-005: Required: policies/ - Enforcement-Regeln",
      "FOLDER-006: Required: docs/ - Shard-spezifische Doku",
      "FOLDER-007: Required: CHANGELOG.md - Versionsverlauf"
    ],
    "naming": [
      "NAMING-001: Root-Ordner Format: {NR}_{NAME}",
      "NAMING-002: Shards Format: Shard_{NR}_{NAME}",
      "NAMING-003: chart.yaml - SoT (abstrakt)",
      "NAMING-004: manifest.yaml - Implementierung (konkret)",
      "NAMING-005: CHANGELOG.md - Versionsverlauf",
      "NAMING-006: README.md - Übersicht",
      "NAMING-007: Pfad: {ROOT}/shards/{SHARD}/chart.yaml",
      "NAMING-008: Pfad: {ROOT}/shards/{SHARD}/implementations/{IMPL_ID}/manife",
      "NAMING-009: Pfad: {ROOT}/shards/{SHARD}/contracts/{CONTRACT_NAME}.openap",
      "NAMING-010: Pfad: {ROOT}/shards/{SHARD}/contracts/schemas/{SCHEMA_NAME}."
    ],
    "policies": [
      "GDPR-001: Right to Erasure: Hash-Rotation",
      "GDPR-002: Data Portability: JSON-Export aller Hashes + Metadaten",
      "GDPR-003: Purpose Limitation: Nur definierte Zwecke erlaubt",
      "GDPR-004: PII Redaction: Automatisch in Logs & Traces",
      "EVIDENCE-001: Strategy: Hash-Ledger mit Blockchain-Anchoring",
      "EVIDENCE-002: Storage: WORM (Write-Once-Read-Many)",
      "EVIDENCE-003: Retention: 10 Jahre",
      "EVIDENCE-004: Chains: Ethereum Mainnet, Polygon",
      "EVIDENCE-005: Frequency: Hourly Anchoring"
    ],
    "roadmap": [
      "PHASE1-001: 16 Shards definiert",
      "PHASE1-002: 24 Roots definiert",
      "PHASE1-003: Matrix-Architektur festgelegt",
      "PHASE1-004: chart.yaml Struktur erstellt",
      "PHASE1-005: manifest.yaml Struktur erstellt",
      "PHASE1-006: Master-Dokument erstellt",
      "PHASE2-001: OpenAPI-Contracts erstellen",
      "PHASE2-002: JSON-Schemas erstellen",
      "PHASE2-003: Python-Implementation schreiben",
      "PHASE2-004: Contract-Tests implementieren",
      "PHASE2-005: Deployment-Manifeste",
      "PHASE2-006: Dokumentation",
      "PHASE3-001: Shard_02_Dokumente_Nachweise",
      "PHASE3-002: Shard_03_Zugang_Berechtigungen",
      "PHASE3-003: Shard_04_Kommunikation_Daten",
      "PHASE3-004: Shard_05 bis Shard_16",
      "PHASE4-001: 02_audit_logging (alle 16 Shards)",
      "PHASE4-002: 03_core (alle 16 Shards)",
      "PHASE4-003: 04 bis 24",
      "PHASE5-001: 24_meta_orchestration als Service Registry",
      "PHASE5-002: Workflow-Definitionen",
      "PHASE5-003: Saga-Pattern",
      "PHASE6-001: Load Testing",
      "PHASE6-002: Security Audits",
      "PHASE6-003: Compliance-Zertifizierung",
      "PHASE6-004: Production Deployment"
    ],
    "standards": [
      "STANDARD-001: Compliance with W3C DID Core 1.0",
      "STANDARD-002: Compliance with W3C Verifiable Credentials",
      "STANDARD-003: Compliance with OpenAPI 3.1",
      "STANDARD-004: Compliance with JSON-Schema Draft 2020-12",
      "STANDARD-005: Compliance with ISO/IEC 27001",
      "STANDARD-006: Compliance with GDPR (EU 2016/679)",
      "STANDARD-007: Compliance with eIDAS 2.0",
      "STANDARD-008: Compliance with EU AI Act"
    ],
    "additions_v1_1_1": [
      "REG-UK-001: UK: ico_uk_gdpr mandatory",
      "REG-UK-002: UK: dpa_2018_alignment: true",
      "REG-UK-003: UK: dpo_contact_records: true",
      "REG-SG-001: Singapore: mas_pdpa mandatory",
      "REG-SG-002: Singapore: data_breach_notification: true",
      "REG-SG-003: Singapore: consent_purposes_documented: true",
      "REG-JP-001: Japan: jfsa_appi mandatory",
      "REG-JP-002: Japan: cross_border_transfer_rules: true",
      "REG-AU-001: Australia: au_privacy_act_1988 mandatory",
      "REG-AU-002: Australia: app11_security_of_personal_information: true",
      "OPA-001: Substring-Helper umbenannt: has_substr()",
      "OPA-002: Fuzzy-Matching aktiviert: string_similarity()",
      "SANCTIONS-001: Build entities_to_check.json vor OPA",
      "SANCTIONS-002: Python script: build_entities_list.py",
      "SANCTIONS-003: Freshness-Quelle: sources.yaml",
      "SANCTIONS-004: sources.yaml: version field",
      "SANCTIONS-005: sources.yaml: last_updated field",
      "SANCTIONS-006: sources.yaml: ofac_sdn source",
      "SANCTIONS-007: sources.yaml: eu_consolidated source",
      "SANCTIONS-008: sources.yaml: sha256 hashes",
      "SANCTIONS-009: sources.yaml: freshness_policy",
      "SANCTIONS-010: sources.yaml: max_age_hours: 24",
      "DORA-001: Pro Root: docs/incident_response_plan.md",
      "DORA-002: Vorlage: TEMPLATE_INCIDENT_RESPONSE.md",
      "ROOT-STRUCT-001: Verboten: .ipynb Dateien",
      "ROOT-STRUCT-002: Verboten: .parquet Dateien",
      "ROOT-STRUCT-003: Verboten: .sqlite Dateien",
      "ROOT-STRUCT-004: Verboten: .db Dateien",
      "OPA-INPUT-001: Verwende repo_scan.json (nicht depth_report.json)"
    ]
  },
  "mapping": [
    {
      "validator": {
        "rule_id": "ALL",
        "module": "sot_validator_core",
        "file": "sot_validator_core.py",
        "class": "SoTValidator",
        "function": "validate_all",
        "description": "Validate all 327 SoT rules and generate report."
      },
      "matched_rules": [],
      "coverage_count": 0
    },
    {
      "validator": {
        "rule_id": "AR001",
        "module": "sot_validator_core",
        "file": "sot_validator_core.py",
        "class": "SoTValidator",
        "function": "validate_ar001",
        "description": "AR001: Das System MUSS aus exakt 24 Root-Ordnern bestehen."
      },
      "matched_rules": [
        "HYBRID-004",
        "MATRIX-004",
        "HYBRID-006",
        "MATRIX-003",
        "MATRIX-002",
        "MATRIX-001",
        "HYBRID-003",
        "HYBRID-002",
        "HYBRID-007",
        "MATRIX-006",
        "MATRIX-005",
        "HYBRID-001",
        "HYBRID-005"
      ],
      "coverage_count": 13
    },
    {
      "validator": {
        "rule_id": "AR002",
        "module": "sot_validator_core",
        "file": "sot_validator_core.py",
        "class": "SoTValidator",
        "function": "validate_ar002",
        "description": "AR002: Jeder Root-Ordner MUSS exakt 16 Shards enthalten."
      },
      "matched_rules": [
        "HYBRID-004",
        "MATRIX-004",
        "HYBRID-006",
        "MATRIX-003",
        "MATRIX-002",
        "MATRIX-001",
        "HYBRID-003",
        "HYBRID-002",
        "HYBRID-007",
        "MATRIX-006",
        "MATRIX-005",
        "HYBRID-001",
        "HYBRID-005"
      ],
      "coverage_count": 13
    },
    {
      "validator": {
        "rule_id": "AR003",
        "module": "sot_validator_core",
        "file": "sot_validator_core.py",
        "class": "SoTValidator",
        "function": "validate_ar003",
        "description": "AR003: Das System MUSS eine Matrix von 24×16=384 Shard-Ordnern bilden."
      },
      "matched_rules": [
        "HYBRID-004",
        "MATRIX-004",
        "HYBRID-006",
        "MATRIX-003",
        "MATRIX-002",
        "MATRIX-001",
        "HYBRID-003",
        "HYBRID-002",
        "HYBRID-007",
        "MATRIX-006",
        "MATRIX-005",
        "HYBRID-001",
        "HYBRID-005"
      ],
      "coverage_count": 13
    },
    {
      "validator": {
        "rule_id": "AR004",
        "module": "sot_validator_core",
        "file": "sot_validator_core.py",
        "class": "SoTValidator",
        "function": "validate_ar004",
        "description": "AR004: Jeder Shard MUSS ein Chart.yaml mit Chart-Definition enthalten."
      },
      "matched_rules": [
        "HYBRID-004",
        "MATRIX-004",
        "HYBRID-006",
        "MATRIX-003",
        "MATRIX-002",
        "MATRIX-001",
        "HYBRID-003",
        "HYBRID-002",
        "HYBRID-007",
        "MATRIX-006",
        "MATRIX-005",
        "HYBRID-001",
        "HYBRID-005"
      ],
      "coverage_count": 13
    },
    {
      "validator": {
        "rule_id": "AR005",
        "module": "sot_validator_core",
        "file": "sot_validator_core.py",
        "class": "SoTValidator",
        "function": "validate_ar005",
        "description": "AR005: Jeder Shard MUSS ein values.yaml mit Werte-Definitionen enthalten."
      },
      "matched_rules": [
        "HYBRID-004",
        "MATRIX-004",
        "HYBRID-006",
        "MATRIX-003",
        "MATRIX-002",
        "MATRIX-001",
        "HYBRID-003",
        "HYBRID-002",
        "HYBRID-007",
        "MATRIX-006",
        "MATRIX-005",
        "HYBRID-001",
        "HYBRID-005"
      ],
      "coverage_count": 13
    },
    {
      "validator": {
        "rule_id": "AR006",
        "module": "sot_validator_core",
        "file": "sot_validator_core.py",
        "class": "SoTValidator",
        "function": "validate_ar006",
        "description": "AR006: Jeder Root-Ordner MUSS eine README.md mit Modul-Dokumentation enthalten."
      },
      "matched_rules": [
        "HYBRID-004",
        "MATRIX-004",
        "HYBRID-006",
        "MATRIX-003",
        "MATRIX-002",
        "MATRIX-001",
        "HYBRID-003",
        "HYBRID-002",
        "HYBRID-007",
        "MATRIX-006",
        "MATRIX-005",
        "HYBRID-001",
        "HYBRID-005"
      ],
      "coverage_count": 13
    },
    {
      "validator": {
        "rule_id": "AR007",
        "module": "sot_validator_core",
        "file": "sot_validator_core.py",
        "class": "SoTValidator",
        "function": "validate_ar007",
        "description": "AR007: Die 16 Shards MÜSSEN identisch über alle Root-Ordner repliziert werden."
      },
      "matched_rules": [
        "HYBRID-004",
        "MATRIX-004",
        "HYBRID-006",
        "MATRIX-003",
        "MATRIX-002",
        "MATRIX-001",
        "HYBRID-003",
        "HYBRID-002",
        "HYBRID-007",
        "MATRIX-006",
        "MATRIX-005",
        "HYBRID-001",
        "HYBRID-005"
      ],
      "coverage_count": 13
    },
    {
      "validator": {
        "rule_id": "AR008",
        "module": "sot_validator_core",
        "file": "sot_validator_core.py",
        "class": "SoTValidator",
        "function": "validate_ar008",
        "description": "AR008: Shard-Namen MÜSSEN dem Pattern NN_name folgen (NN = 01-16)."
      },
      "matched_rules": [
        "HYBRID-004",
        "MATRIX-004",
        "HYBRID-006",
        "MATRIX-003",
        "MATRIX-002",
        "MATRIX-001",
        "HYBRID-003",
        "HYBRID-002",
        "HYBRID-007",
        "MATRIX-006",
        "MATRIX-005",
        "HYBRID-001",
        "HYBRID-005"
      ],
      "coverage_count": 13
    },
    {
      "validator": {
        "rule_id": "AR009",
        "module": "sot_validator_core",
        "file": "sot_validator_core.py",
        "class": "SoTValidator",
        "function": "validate_ar009",
        "description": "AR009: Root-Namen MÜSSEN dem Pattern NN_name folgen (NN = 01-24)."
      },
      "matched_rules": [
        "HYBRID-004",
        "MATRIX-004",
        "HYBRID-006",
        "MATRIX-003",
        "MATRIX-002",
        "MATRIX-001",
        "HYBRID-003",
        "HYBRID-002",
        "HYBRID-007",
        "MATRIX-006",
        "MATRIX-005",
        "HYBRID-001",
        "HYBRID-005"
      ],
      "coverage_count": 13
    },
    {
      "validator": {
        "rule_id": "AR010",
        "module": "sot_validator_core",
        "file": "sot_validator_core.py",
        "class": "SoTValidator",
        "function": "validate_ar010",
        "description": "AR010: Jeder Shard MUSS ein templates/ Verzeichnis mit Helm-Templates enthalten."
      },
      "matched_rules": [
        "HYBRID-004",
        "MATRIX-004",
        "HYBRID-006",
        "MATRIX-003",
        "MATRIX-002",
        "MATRIX-001",
        "HYBRID-003",
        "HYBRID-002",
        "HYBRID-007",
        "MATRIX-006",
        "MATRIX-005",
        "HYBRID-001",
        "HYBRID-005"
      ],
      "coverage_count": 13
    },
    {
      "validator": {
        "rule_id": "AUTH_METHOD",
        "module": "sot_validator_core",
        "file": "sot_validator_core.py",
        "class": "SoTValidator",
        "function": "validate_auth_method",
        "description": "AUTH_METHOD_001-006: Authentication method validation"
      },
      "matched_rules": [],
      "coverage_count": 0
    },
    {
      "validator": {
        "rule_id": "CE001",
        "module": "sot_validator_core",
        "file": "sot_validator_core.py",
        "class": "SoTValidator",
        "function": "validate_ce001",
        "description": "CE001: UK/APAC-spezifische Regeln MÜSSEN in country_specific definiert sein"
      },
      "matched_rules": [],
      "coverage_count": 0
    },
    {
      "validator": {
        "rule_id": "CE002",
        "module": "sot_validator_core",
        "file": "sot_validator_core.py",
        "class": "SoTValidator",
        "function": "validate_ce002",
        "description": "CE002: Substring-Helper MUSS has_substr() heißen (nicht contains())"
      },
      "matched_rules": [],
      "coverage_count": 0
    },
    {
      "validator": {
        "rule_id": "CE003",
        "module": "sot_validator_core",
        "file": "sot_validator_core.py",
        "class": "SoTValidator",
        "function": "validate_ce003",
        "description": "CE003: Sanctions-Workflow MUSS täglich laufen (cron: '15 3 * * *')"
      },
      "matched_rules": [],
      "coverage_count": 0
    },
    {
      "validator": {
        "rule_id": "CE004",
        "module": "sot_validator_core",
        "file": "sot_validator_core.py",
        "class": "SoTValidator",
        "function": "validate_ce004",
        "description": "CE004: Build-Step MUSS entities_to_check.json vor OPA-Check erstellen"
      },
      "matched_rules": [],
      "coverage_count": 0
    },
    {
      "validator": {
        "rule_id": "CE005",
        "module": "sot_validator_core",
        "file": "sot_validator_core.py",
        "class": "SoTValidator",
        "function": "validate_ce005",
        "description": "CE005: Sanctions-Daten MÜSSEN max_age_hours: 24 erfüllen"
      },
      "matched_rules": [],
      "coverage_count": 0
    },
    {
      "validator": {
        "rule_id": "CE006",
        "module": "sot_validator_core",
        "file": "sot_validator_core.py",
        "class": "SoTValidator",
        "function": "validate_ce006",
        "description": "CE006: Jeder Root MUSS docs/incident_response_plan.md haben"
      },
      "matched_rules": [],
      "coverage_count": 0
    },
    {
      "validator": {
        "rule_id": "CE007",
        "module": "sot_validator_core",
        "file": "sot_validator_core.py",
        "class": "SoTValidator",
        "function": "validate_ce007",
        "description": "CE007: NIEMALS .ipynb, .parquet, .sqlite, .db-Dateien committen"
      },
      "matched_rules": [],
      "coverage_count": 0
    },
    {
      "validator": {
        "rule_id": "CE008",
        "module": "sot_validator_core",
        "file": "sot_validator_core.py",
        "class": "SoTValidator",
        "function": "validate_ce008",
        "description": "CE008: OPA MUSS 24_meta_orchestration/registry/generated/repo_scan.json verwenden"
      },
      "matched_rules": [],
      "coverage_count": 0
    },
    {
      "validator": {
        "rule_id": "CP001",
        "module": "sot_validator_core",
        "file": "sot_validator_core.py",
        "class": "SoTValidator",
        "function": "validate_cp001",
        "description": "CP001: NIEMALS Rohdaten von PII oder biometrischen Daten speichern."
      },
      "matched_rules": [
        "NON-CUSTODIAL-006",
        "NON-CUSTODIAL-005",
        "NON-CUSTODIAL-004",
        "NON-CUSTODIAL-002",
        "NON-CUSTODIAL-001",
        "NON-CUSTODIAL-003"
      ],
      "coverage_count": 6
    },
    {
      "validator": {
        "rule_id": "CP002",
        "module": "sot_validator_core",
        "file": "sot_validator_core.py",
        "class": "SoTValidator",
        "function": "validate_cp002",
        "description": "CP002: Alle Daten MÜSSEN als SHA3-256 Hashes gespeichert werden."
      },
      "matched_rules": [
        "HASH-ONLY-003",
        "HASH-ONLY-005",
        "HASH-ONLY-001",
        "HASH-ONLY-004",
        "HASH-ONLY-002"
      ],
      "coverage_count": 5
    },
    {
      "validator": {
        "rule_id": "CP003",
        "module": "sot_validator_core",
        "file": "sot_validator_core.py",
        "class": "SoTValidator",
        "function": "validate_cp003",
        "description": "CP003: Tenant-spezifische Peppers MÜSSEN verwendet werden."
      },
      "matched_rules": [],
      "coverage_count": 0
    },
    {
      "validator": {
        "rule_id": "CP004",
        "module": "sot_validator_core",
        "file": "sot_validator_core.py",
        "class": "SoTValidator",
        "function": "validate_cp004",
        "description": "CP004: Raw Data Retention MUSS '0 seconds' sein (Immediate Discard)."
      },
      "matched_rules": [],
      "coverage_count": 0
    },
    {
      "validator": {
        "rule_id": "CP005",
        "module": "sot_validator_core",
        "file": "sot_validator_core.py",
        "class": "SoTValidator",
        "function": "validate_cp005",
        "description": "CP005: Right to Erasure MUSS via Hash-Rotation implementiert sein."
      },
      "matched_rules": [
        "HASH-ONLY-003",
        "HASH-ONLY-005",
        "HASH-ONLY-001",
        "HASH-ONLY-004",
        "HASH-ONLY-002"
      ],
      "coverage_count": 5
    },
    {
      "validator": {
        "rule_id": "CP006",
        "module": "sot_validator_core",
        "file": "sot_validator_core.py",
        "class": "SoTValidator",
        "function": "validate_cp006",
        "description": "CP006: Data Portability MUSS JSON-Export aller Hashes + Metadaten bieten."
      },
      "matched_rules": [
        "HASH-ONLY-003",
        "HASH-ONLY-005",
        "HASH-ONLY-001",
        "HASH-ONLY-004",
        "HASH-ONLY-002"
      ],
      "coverage_count": 5
    },
    {
      "validator": {
        "rule_id": "CP007",
        "module": "sot_validator_core",
        "file": "sot_validator_core.py",
        "class": "SoTValidator",
        "function": "validate_cp007",
        "description": "CP007: PII Redaction MUSS automatisch in Logs & Traces erfolgen."
      },
      "matched_rules": [
        "NON-CUSTODIAL-006",
        "NON-CUSTODIAL-005",
        "NON-CUSTODIAL-004",
        "NON-CUSTODIAL-002",
        "NON-CUSTODIAL-001",
        "NON-CUSTODIAL-003"
      ],
      "coverage_count": 6
    },
    {
      "validator": {
        "rule_id": "CP008",
        "module": "sot_validator_core",
        "file": "sot_validator_core.py",
        "class": "SoTValidator",
        "function": "validate_cp008",
        "description": "CP008: Alle AI/ML-Modelle MÜSSEN auf Bias getestet werden."
      },
      "matched_rules": [
        "BIAS-001",
        "BIAS-002",
        "BIAS-003",
        "BIAS-004"
      ],
      "coverage_count": 4
    },
    {
      "validator": {
        "rule_id": "CP009",
        "module": "sot_validator_core",
        "file": "sot_validator_core.py",
        "class": "SoTValidator",
        "function": "validate_cp009",
        "description": "CP009: Hash-Ledger mit Blockchain-Anchoring MUSS verwendet werden."
      },
      "matched_rules": [
        "HASH-ONLY-003",
        "HASH-ONLY-005",
        "HASH-ONLY-001",
        "HASH-ONLY-004",
        "HASH-ONLY-002"
      ],
      "coverage_count": 5
    },
    {
      "validator": {
        "rule_id": "CP010",
        "module": "sot_validator_core",
        "file": "sot_validator_core.py",
        "class": "SoTValidator",
        "function": "validate_cp010",
        "description": "CP010: WORM-Storage mit 10 Jahren Retention MUSS verwendet werden."
      },
      "matched_rules": [],
      "coverage_count": 0
    },
    {
      "validator": {
        "rule_id": "CP011",
        "module": "sot_validator_core",
        "file": "sot_validator_core.py",
        "class": "SoTValidator",
        "function": "validate_cp011",
        "description": "CP011: NIEMALS Secrets in Git committen."
      },
      "matched_rules": [
        "SECRETS-001",
        "SECRETS-002",
        "SECRETS-004",
        "SECRETS-003"
      ],
      "coverage_count": 4
    },
    {
      "validator": {
        "rule_id": "CP012",
        "module": "sot_validator_core",
        "file": "sot_validator_core.py",
        "class": "SoTValidator",
        "function": "validate_cp012",
        "description": "CP012: Secrets MÜSSEN alle 90 Tage rotiert werden."
      },
      "matched_rules": [
        "SECRETS-001",
        "SECRETS-002",
        "SECRETS-004",
        "SECRETS-003"
      ],
      "coverage_count": 4
    },
    {
      "validator": {
        "rule_id": "CS001",
        "module": "sot_validator_core",
        "file": "sot_validator_core.py",
        "class": "SoTValidator",
        "function": "validate_cs001",
        "description": "CS001: chart.yaml MUSS metadata.shard_id, version, status enthalten"
      },
      "matched_rules": [
        "CHART-038",
        "CHART-028",
        "CHART-019",
        "CHART-011",
        "CHART-003",
        "CHART-020",
        "CHART-008",
        "CHART-018",
        "CHART-013",
        "CHART-010",
        "CHART-025",
        "CHART-039",
        "CHART-045",
        "CHART-029",
        "CHART-046",
        "CHART-040",
        "CHART-035",
        "CHART-014",
        "CHART-015",
        "CHART-023",
        "CHART-041",
        "CHART-004",
        "CHART-012",
        "CHART-022",
        "CHART-024",
        "CHART-021",
        "CHART-037",
        "CHART-009",
        "CHART-017",
        "CHART-005",
        "CHART-001",
        "CHART-032",
        "CHART-031",
        "CHART-002",
        "CHART-044",
        "CHART-026",
        "CHART-036",
        "CHART-042",
        "CHART-030",
        "CHART-016",
        "CHART-043",
        "CHART-007",
        "CHART-034",
        "CHART-006",
        "CHART-027",
        "CHART-033"
      ],
      "coverage_count": 46
    },
    {
      "validator": {
        "rule_id": "CS002",
        "module": "sot_validator_core",
        "file": "sot_validator_core.py",
        "class": "SoTValidator",
        "function": "validate_cs002",
        "description": "CS002: chart.yaml MUSS governance.owner mit team, lead, contact haben"
      },
      "matched_rules": [
        "CHART-038",
        "CHART-028",
        "CHART-019",
        "CHART-011",
        "CHART-003",
        "CHART-020",
        "CHART-008",
        "CHART-018",
        "CHART-013",
        "CHART-010",
        "CHART-025",
        "CHART-039",
        "CHART-045",
        "CHART-029",
        "CHART-046",
        "CHART-040",
        "CHART-035",
        "CHART-014",
        "CHART-015",
        "CHART-023",
        "CHART-041",
        "CHART-004",
        "CHART-012",
        "CHART-022",
        "CHART-024",
        "CHART-021",
        "CHART-037",
        "CHART-009",
        "CHART-017",
        "CHART-005",
        "CHART-001",
        "CHART-032",
        "CHART-031",
        "CHART-002",
        "CHART-044",
        "CHART-026",
        "CHART-036",
        "CHART-042",
        "CHART-030",
        "CHART-016",
        "CHART-043",
        "CHART-007",
        "CHART-034",
        "CHART-006",
        "CHART-027",
        "CHART-033"
      ],
      "coverage_count": 46
    },
    {
      "validator": {
        "rule_id": "CS003",
        "module": "sot_validator_core",
        "file": "sot_validator_core.py",
        "class": "SoTValidator",
        "function": "validate_cs003",
        "description": "CS003: chart.yaml MUSS capabilities mit MUST/SHOULD/HAVE kategorisieren"
      },
      "matched_rules": [
        "CHART-038",
        "CHART-028",
        "CHART-019",
        "CHART-011",
        "CHART-003",
        "CHART-020",
        "CHART-008",
        "CHART-018",
        "CHART-013",
        "CHART-010",
        "CHART-025",
        "CHART-039",
        "CHART-045",
        "CHART-029",
        "CHART-046",
        "CHART-040",
        "CHART-035",
        "CHART-014",
        "CHART-015",
        "CHART-023",
        "CHART-041",
        "CHART-004",
        "CHART-012",
        "CHART-022",
        "CHART-024",
        "CHART-021",
        "CHART-037",
        "CHART-009",
        "CHART-017",
        "CHART-005",
        "CHART-001",
        "CHART-032",
        "CHART-031",
        "CHART-002",
        "CHART-044",
        "CHART-026",
        "CHART-036",
        "CHART-042",
        "CHART-030",
        "CHART-016",
        "CHART-043",
        "CHART-007",
        "CHART-034",
        "CHART-006",
        "CHART-027",
        "CHART-033"
      ],
      "coverage_count": 46
    },
    {
      "validator": {
        "rule_id": "CS004",
        "module": "sot_validator_core",
        "file": "sot_validator_core.py",
        "class": "SoTValidator",
        "function": "validate_cs004",
        "description": "CS004: chart.yaml MUSS constraints für pii_storage, data_policy, custody definieren"
      },
      "matched_rules": [
        "CHART-038",
        "CHART-028",
        "CHART-019",
        "CHART-011",
        "CHART-003",
        "CHART-020",
        "CHART-008",
        "CHART-018",
        "CHART-013",
        "CHART-010",
        "CHART-025",
        "CHART-039",
        "CHART-045",
        "CHART-029",
        "CHART-046",
        "CHART-040",
        "CHART-035",
        "CHART-014",
        "CHART-015",
        "CHART-023",
        "CHART-041",
        "CHART-004",
        "CHART-012",
        "CHART-022",
        "CHART-024",
        "CHART-021",
        "CHART-037",
        "CHART-009",
        "CHART-017",
        "CHART-005",
        "CHART-001",
        "CHART-032",
        "CHART-031",
        "CHART-002",
        "CHART-044",
        "CHART-026",
        "CHART-036",
        "CHART-042",
        "CHART-030",
        "CHART-016",
        "CHART-043",
        "CHART-007",
        "CHART-034",
        "CHART-006",
        "CHART-027",
        "CHART-033"
      ],
      "coverage_count": 46
    },
    {
      "validator": {
        "rule_id": "CS005",
        "module": "sot_validator_core",
        "file": "sot_validator_core.py",
        "class": "SoTValidator",
        "function": "validate_cs005",
        "description": "CS005: chart.yaml MUSS enforcement mit static_analysis, runtime_checks, audit haben"
      },
      "matched_rules": [
        "CHART-038",
        "CHART-028",
        "CHART-019",
        "CHART-011",
        "CHART-003",
        "CHART-020",
        "CHART-008",
        "CHART-018",
        "CHART-013",
        "CHART-010",
        "CHART-025",
        "CHART-039",
        "CHART-045",
        "CHART-029",
        "CHART-046",
        "CHART-040",
        "CHART-035",
        "CHART-014",
        "CHART-015",
        "CHART-023",
        "CHART-041",
        "CHART-004",
        "CHART-012",
        "CHART-022",
        "CHART-024",
        "CHART-021",
        "CHART-037",
        "CHART-009",
        "CHART-017",
        "CHART-005",
        "CHART-001",
        "CHART-032",
        "CHART-031",
        "CHART-002",
        "CHART-044",
        "CHART-026",
        "CHART-036",
        "CHART-042",
        "CHART-030",
        "CHART-016",
        "CHART-043",
        "CHART-007",
        "CHART-034",
        "CHART-006",
        "CHART-027",
        "CHART-033"
      ],
      "coverage_count": 46
    },
    {
      "validator": {
        "rule_id": "CS006",
        "module": "sot_validator_core",
        "file": "sot_validator_core.py",
        "class": "SoTValidator",
        "function": "validate_cs006",
        "description": "CS006: chart.yaml MUSS interfaces.contracts mit OpenAPI-Specs referenzieren"
      },
      "matched_rules": [
        "CHART-038",
        "CHART-028",
        "CHART-019",
        "CHART-011",
        "CHART-003",
        "CHART-020",
        "CHART-008",
        "CHART-018",
        "CHART-013",
        "CHART-010",
        "CHART-025",
        "CHART-039",
        "CHART-045",
        "CHART-029",
        "CHART-046",
        "CHART-040",
        "CHART-035",
        "CHART-014",
        "CHART-015",
        "CHART-023",
        "CHART-041",
        "CHART-004",
        "CHART-012",
        "CHART-022",
        "CHART-024",
        "CHART-021",
        "CHART-037",
        "CHART-009",
        "CHART-017",
        "CHART-005",
        "CHART-001",
        "CHART-032",
        "CHART-031",
        "CHART-002",
        "CHART-044",
        "CHART-026",
        "CHART-036",
        "CHART-042",
        "CHART-030",
        "CHART-016",
        "CHART-043",
        "CHART-007",
        "CHART-034",
        "CHART-006",
        "CHART-027",
        "CHART-033"
      ],
      "coverage_count": 46
    },
    {
      "validator": {
        "rule_id": "CS007",
        "module": "sot_validator_core",
        "file": "sot_validator_core.py",
        "class": "SoTValidator",
        "function": "validate_cs007",
        "description": "CS007: chart.yaml MUSS dependencies.required auflisten"
      },
      "matched_rules": [
        "CHART-038",
        "CHART-028",
        "CHART-019",
        "CHART-011",
        "CHART-003",
        "CHART-020",
        "CHART-008",
        "CHART-018",
        "CHART-013",
        "CHART-010",
        "CHART-025",
        "CHART-039",
        "CHART-045",
        "CHART-029",
        "CHART-046",
        "CHART-040",
        "CHART-035",
        "CHART-014",
        "CHART-015",
        "CHART-023",
        "CHART-041",
        "CHART-004",
        "CHART-012",
        "CHART-022",
        "CHART-024",
        "CHART-021",
        "CHART-037",
        "CHART-009",
        "CHART-017",
        "CHART-005",
        "CHART-001",
        "CHART-032",
        "CHART-031",
        "CHART-002",
        "CHART-044",
        "CHART-026",
        "CHART-036",
        "CHART-042",
        "CHART-030",
        "CHART-016",
        "CHART-043",
        "CHART-007",
        "CHART-034",
        "CHART-006",
        "CHART-027",
        "CHART-033"
      ],
      "coverage_count": 46
    },
    {
      "validator": {
        "rule_id": "CS008",
        "module": "sot_validator_core",
        "file": "sot_validator_core.py",
        "class": "SoTValidator",
        "function": "validate_cs008",
        "description": "CS008: chart.yaml MUSS implementations.default und available definieren"
      },
      "matched_rules": [
        "CHART-038",
        "CHART-028",
        "CHART-019",
        "CHART-011",
        "CHART-003",
        "CHART-020",
        "CHART-008",
        "CHART-018",
        "CHART-013",
        "CHART-010",
        "CHART-025",
        "CHART-039",
        "CHART-045",
        "CHART-029",
        "CHART-046",
        "CHART-040",
        "CHART-035",
        "CHART-014",
        "CHART-015",
        "CHART-023",
        "CHART-041",
        "CHART-004",
        "CHART-012",
        "CHART-022",
        "CHART-024",
        "CHART-021",
        "CHART-037",
        "CHART-009",
        "CHART-017",
        "CHART-005",
        "CHART-001",
        "CHART-032",
        "CHART-031",
        "CHART-002",
        "CHART-044",
        "CHART-026",
        "CHART-036",
        "CHART-042",
        "CHART-030",
        "CHART-016",
        "CHART-043",
        "CHART-007",
        "CHART-034",
        "CHART-006",
        "CHART-027",
        "CHART-033"
      ],
      "coverage_count": 46
    },
    {
      "validator": {
        "rule_id": "CS009",
        "module": "sot_validator_core",
        "file": "sot_validator_core.py",
        "class": "SoTValidator",
        "function": "validate_cs009",
        "description": "CS009: chart.yaml MUSS conformance.contract_tests definieren"
      },
      "matched_rules": [
        "CHART-038",
        "CHART-028",
        "CHART-019",
        "CHART-011",
        "CHART-003",
        "CHART-020",
        "CHART-008",
        "CHART-018",
        "CHART-013",
        "CHART-010",
        "CHART-025",
        "CHART-039",
        "CHART-045",
        "CHART-029",
        "CHART-046",
        "CHART-040",
        "CHART-035",
        "CHART-014",
        "CHART-015",
        "CHART-023",
        "CHART-041",
        "CHART-004",
        "CHART-012",
        "CHART-022",
        "CHART-024",
        "CHART-021",
        "CHART-037",
        "CHART-009",
        "CHART-017",
        "CHART-005",
        "CHART-001",
        "CHART-032",
        "CHART-031",
        "CHART-002",
        "CHART-044",
        "CHART-026",
        "CHART-036",
        "CHART-042",
        "CHART-030",
        "CHART-016",
        "CHART-043",
        "CHART-007",
        "CHART-034",
        "CHART-006",
        "CHART-027",
        "CHART-033"
      ],
      "coverage_count": 46
    },
    {
      "validator": {
        "rule_id": "CS010",
        "module": "sot_validator_core",
        "file": "sot_validator_core.py",
        "class": "SoTValidator",
        "function": "validate_cs010",
        "description": "CS010: chart.yaml MUSS observability mit metrics, tracing, logging definieren"
      },
      "matched_rules": [
        "CHART-038",
        "CHART-028",
        "CHART-019",
        "CHART-011",
        "CHART-003",
        "CHART-020",
        "CHART-008",
        "CHART-018",
        "CHART-013",
        "CHART-010",
        "CHART-025",
        "CHART-039",
        "CHART-045",
        "CHART-029",
        "CHART-046",
        "CHART-040",
        "CHART-035",
        "CHART-014",
        "CHART-015",
        "CHART-023",
        "CHART-041",
        "CHART-004",
        "CHART-012",
        "CHART-022",
        "CHART-024",
        "CHART-021",
        "CHART-037",
        "CHART-009",
        "CHART-017",
        "CHART-005",
        "CHART-001",
        "CHART-032",
        "CHART-031",
        "CHART-002",
        "CHART-044",
        "CHART-026",
        "CHART-036",
        "CHART-042",
        "CHART-030",
        "CHART-016",
        "CHART-043",
        "CHART-007",
        "CHART-034",
        "CHART-006",
        "CHART-027",
        "CHART-033"
      ],
      "coverage_count": 46
    },
    {
      "validator": {
        "rule_id": "CS011",
        "module": "sot_validator_core",
        "file": "sot_validator_core.py",
        "class": "SoTValidator",
        "function": "validate_cs011",
        "description": "CS011: chart.yaml MUSS security.threat_model referenzieren"
      },
      "matched_rules": [
        "CHART-038",
        "CHART-028",
        "CHART-019",
        "CHART-011",
        "CHART-003",
        "CHART-020",
        "CHART-008",
        "CHART-018",
        "CHART-013",
        "CHART-010",
        "CHART-025",
        "CHART-039",
        "CHART-045",
        "CHART-029",
        "CHART-046",
        "CHART-040",
        "CHART-035",
        "CHART-014",
        "CHART-015",
        "CHART-023",
        "CHART-041",
        "CHART-004",
        "CHART-012",
        "CHART-022",
        "CHART-024",
        "CHART-021",
        "CHART-037",
        "CHART-009",
        "CHART-017",
        "CHART-005",
        "CHART-001",
        "CHART-032",
        "CHART-031",
        "CHART-002",
        "CHART-044",
        "CHART-026",
        "CHART-036",
        "CHART-042",
        "CHART-030",
        "CHART-016",
        "CHART-043",
        "CHART-007",
        "CHART-034",
        "CHART-006",
        "CHART-027",
        "CHART-033"
      ],
      "coverage_count": 46
    },
    {
      "validator": {
        "rule_id": "DC001",
        "module": "sot_validator_core",
        "file": "sot_validator_core.py",
        "class": "SoTValidator",
        "function": "validate_dc001",
        "description": "DC001: Deployments MÜSSEN Blue-Green oder Canary-Strategie verwenden"
      },
      "matched_rules": [
        "CI-004",
        "CI-005",
        "CI-002",
        "CI-001",
        "CI-003"
      ],
      "coverage_count": 5
    },
    {
      "validator": {
        "rule_id": "DC002",
        "module": "sot_validator_core",
        "file": "sot_validator_core.py",
        "class": "SoTValidator",
        "function": "validate_dc002",
        "description": "DC002: Environments dev, staging, production MÜSSEN existieren"
      },
      "matched_rules": [
        "CI-004",
        "CI-005",
        "CI-002",
        "CI-001",
        "CI-003"
      ],
      "coverage_count": 5
    },
    {
      "validator": {
        "rule_id": "DC003",
        "module": "sot_validator_core",
        "file": "sot_validator_core.py",
        "class": "SoTValidator",
        "function": "validate_dc003",
        "description": "DC003: CI MUSS alle 7 Change-Process-Gates durchlaufen"
      },
      "matched_rules": [
        "CI-004",
        "CI-005",
        "CI-002",
        "CI-001",
        "CI-003"
      ],
      "coverage_count": 5
    },
    {
      "validator": {
        "rule_id": "DC004",
        "module": "sot_validator_core",
        "file": "sot_validator_core.py",
        "class": "SoTValidator",
        "function": "validate_dc004",
        "description": "DC004: Alle Tests MÜSSEN grün sein vor Deployment"
      },
      "matched_rules": [
        "CI-004",
        "CI-005",
        "CI-002",
        "CI-001",
        "CI-003"
      ],
      "coverage_count": 5
    },
    {
      "validator": {
        "rule_id": "DID_METHOD",
        "module": "sot_validator_core",
        "file": "sot_validator_core.py",
        "class": "SoTValidator",
        "function": "validate_did_method",
        "description": "DID_METHOD_001-004: DID method validation"
      },
      "matched_rules": [],
      "coverage_count": 0
    },
    {
      "validator": {
        "rule_id": "HASH_ALG",
        "module": "sot_validator_core",
        "file": "sot_validator_core.py",
        "class": "SoTValidator",
        "function": "validate_hash_alg",
        "description": "HASH_ALG_001-004: Hash algorithm validation"
      },
      "matched_rules": [],
      "coverage_count": 0
    },
    {
      "validator": {
        "rule_id": "JURIS_BL_001",
        "module": "sot_validator_core",
        "file": "sot_validator_core.py",
        "class": "SoTValidator",
        "function": "validate_juris_bl_001",
        "description": "JURIS_BL_001: System MUSS Transaktionen aus Iran (IR) blockieren."
      },
      "matched_rules": [],
      "coverage_count": 0
    },
    {
      "validator": {
        "rule_id": "JURIS_BL_002",
        "module": "sot_validator_core",
        "file": "sot_validator_core.py",
        "class": "SoTValidator",
        "function": "validate_juris_bl_002",
        "description": "JURIS_BL_002: System MUSS Transaktionen aus North Korea (KP) blockieren."
      },
      "matched_rules": [],
      "coverage_count": 0
    },
    {
      "validator": {
        "rule_id": "JURIS_BL_003",
        "module": "sot_validator_core",
        "file": "sot_validator_core.py",
        "class": "SoTValidator",
        "function": "validate_juris_bl_003",
        "description": "JURIS_BL_003: System MUSS Transaktionen aus Syria (SY) blockieren."
      },
      "matched_rules": [],
      "coverage_count": 0
    },
    {
      "validator": {
        "rule_id": "JURIS_BL_004",
        "module": "sot_validator_core",
        "file": "sot_validator_core.py",
        "class": "SoTValidator",
        "function": "validate_juris_bl_004",
        "description": "JURIS_BL_004: System MUSS Transaktionen aus Cuba (CU) blockieren."
      },
      "matched_rules": [],
      "coverage_count": 0
    },
    {
      "validator": {
        "rule_id": "JURIS_BL_005",
        "module": "sot_validator_core",
        "file": "sot_validator_core.py",
        "class": "SoTValidator",
        "function": "validate_juris_bl_005",
        "description": "JURIS_BL_005: System MUSS Transaktionen aus Sudan (SD) blockieren."
      },
      "matched_rules": [],
      "coverage_count": 0
    },
    {
      "validator": {
        "rule_id": "JURIS_BL_006",
        "module": "sot_validator_core",
        "file": "sot_validator_core.py",
        "class": "SoTValidator",
        "function": "validate_juris_bl_006",
        "description": "JURIS_BL_006: System MUSS Transaktionen aus Belarus (BY) blockieren."
      },
      "matched_rules": [],
      "coverage_count": 0
    },
    {
      "validator": {
        "rule_id": "JURIS_BL_007",
        "module": "sot_validator_core",
        "file": "sot_validator_core.py",
        "class": "SoTValidator",
        "function": "validate_juris_bl_007",
        "description": "JURIS_BL_007: System MUSS Transaktionen aus Venezuela (VE) blockieren."
      },
      "matched_rules": [],
      "coverage_count": 0
    },
    {
      "validator": {
        "rule_id": "KP001",
        "module": "sot_validator_core",
        "file": "sot_validator_core.py",
        "class": "SoTValidator",
        "function": "validate_kp001",
        "description": "KP001: API-Contract (OpenAPI/JSON-Schema) MUSS VOR Implementierung existieren"
      },
      "matched_rules": [
        "PRINC-DOCS-AS-CODE-050",
        "PRINC-DETERMINISTIC-020",
        "PRINC-DETERMINISTIC-018",
        "PRINC-ZERO-TRUST-027",
        "PRINC-CONTRACT-FIRST-005",
        "PRINC-DOCS-AS-CODE-047",
        "PRINC-CONTRACT-FIRST-002",
        "PRINC-SCALABILITY-043",
        "PRINC-SEPARATION-009",
        "PRINC-SEPARATION-006",
        "PRINC-OBSERVABILITY-034",
        "PRINC-BIAS-AWARE-037",
        "PRINC-BIAS-AWARE-039",
        "PRINC-DETERMINISTIC-019",
        "PRINC-MULTI-IMPL-015",
        "PRINC-DOCS-AS-CODE-048",
        "PRINC-EVIDENCE-BASED-025",
        "PRINC-SEPARATION-008",
        "PRINC-CONTRACT-FIRST-004",
        "PRINC-SCALABILITY-046",
        "PRINC-OBSERVABILITY-035",
        "PRINC-EVIDENCE-BASED-026",
        "PRINC-SEPARATION-007",
        "PRINC-DETERMINISTIC-017",
        "PRINC-ZERO-TRUST-028",
        "PRINC-EVIDENCE-BASED-023",
        "PRINC-SEPARATION-011",
        "PRINC-ZERO-TRUST-030",
        "PRINC-MULTI-IMPL-014",
        "PRINC-MULTI-IMPL-013",
        "PRINC-BIAS-AWARE-040",
        "PRINC-BIAS-AWARE-038",
        "PRINC-DOCS-AS-CODE-051",
        "PRINC-DETERMINISTIC-021",
        "PRINC-CONTRACT-FIRST-003",
        "PRINC-SCALABILITY-045",
        "PRINC-DOCS-AS-CODE-049",
        "PRINC-OBSERVABILITY-033",
        "PRINC-CONTRACT-FIRST-001",
        "PRINC-OBSERVABILITY-032",
        "PRINC-SEPARATION-010",
        "PRINC-OBSERVABILITY-036",
        "PRINC-EVIDENCE-BASED-024",
        "PRINC-SCALABILITY-044",
        "PRINC-ZERO-TRUST-031",
        "PRINC-MULTI-IMPL-016",
        "PRINC-MULTI-IMPL-012",
        "PRINC-ZERO-TRUST-029",
        "PRINC-SCALABILITY-042",
        "PRINC-EVIDENCE-BASED-022",
        "PRINC-BIAS-AWARE-041"
      ],
      "coverage_count": 51
    },
    {
      "validator": {
        "rule_id": "KP002",
        "module": "sot_validator_core",
        "file": "sot_validator_core.py",
        "class": "SoTValidator",
        "function": "validate_kp002",
        "description": "KP002: SoT (chart.yaml) und Implementierung (manifest.yaml) MÜSSEN getrennt sein"
      },
      "matched_rules": [
        "PRINC-DOCS-AS-CODE-050",
        "PRINC-DETERMINISTIC-020",
        "PRINC-DETERMINISTIC-018",
        "PRINC-ZERO-TRUST-027",
        "PRINC-CONTRACT-FIRST-005",
        "PRINC-DOCS-AS-CODE-047",
        "PRINC-CONTRACT-FIRST-002",
        "PRINC-SCALABILITY-043",
        "PRINC-SEPARATION-009",
        "PRINC-SEPARATION-006",
        "PRINC-OBSERVABILITY-034",
        "PRINC-BIAS-AWARE-037",
        "PRINC-BIAS-AWARE-039",
        "PRINC-DETERMINISTIC-019",
        "PRINC-MULTI-IMPL-015",
        "PRINC-DOCS-AS-CODE-048",
        "PRINC-EVIDENCE-BASED-025",
        "PRINC-SEPARATION-008",
        "PRINC-CONTRACT-FIRST-004",
        "PRINC-SCALABILITY-046",
        "PRINC-OBSERVABILITY-035",
        "PRINC-EVIDENCE-BASED-026",
        "PRINC-SEPARATION-007",
        "PRINC-DETERMINISTIC-017",
        "PRINC-ZERO-TRUST-028",
        "PRINC-EVIDENCE-BASED-023",
        "PRINC-SEPARATION-011",
        "PRINC-ZERO-TRUST-030",
        "PRINC-MULTI-IMPL-014",
        "PRINC-MULTI-IMPL-013",
        "PRINC-BIAS-AWARE-040",
        "PRINC-BIAS-AWARE-038",
        "PRINC-DOCS-AS-CODE-051",
        "PRINC-DETERMINISTIC-021",
        "PRINC-CONTRACT-FIRST-003",
        "PRINC-SCALABILITY-045",
        "PRINC-DOCS-AS-CODE-049",
        "PRINC-OBSERVABILITY-033",
        "PRINC-CONTRACT-FIRST-001",
        "PRINC-OBSERVABILITY-032",
        "PRINC-SEPARATION-010",
        "PRINC-OBSERVABILITY-036",
        "PRINC-EVIDENCE-BASED-024",
        "PRINC-SCALABILITY-044",
        "PRINC-ZERO-TRUST-031",
        "PRINC-MULTI-IMPL-016",
        "PRINC-MULTI-IMPL-012",
        "PRINC-ZERO-TRUST-029",
        "PRINC-SCALABILITY-042",
        "PRINC-EVIDENCE-BASED-022",
        "PRINC-BIAS-AWARE-041"
      ],
      "coverage_count": 51
    },
    {
      "validator": {
        "rule_id": "KP003",
        "module": "sot_validator_core",
        "file": "sot_validator_core.py",
        "class": "SoTValidator",
        "function": "validate_kp003",
        "description": "KP003: Ein Shard MUSS mehrere Implementierungen unterstützen können"
      },
      "matched_rules": [
        "PRINC-DOCS-AS-CODE-050",
        "PRINC-DETERMINISTIC-020",
        "PRINC-DETERMINISTIC-018",
        "PRINC-ZERO-TRUST-027",
        "PRINC-CONTRACT-FIRST-005",
        "PRINC-DOCS-AS-CODE-047",
        "PRINC-CONTRACT-FIRST-002",
        "PRINC-SCALABILITY-043",
        "PRINC-SEPARATION-009",
        "PRINC-SEPARATION-006",
        "PRINC-OBSERVABILITY-034",
        "PRINC-BIAS-AWARE-037",
        "PRINC-BIAS-AWARE-039",
        "PRINC-DETERMINISTIC-019",
        "PRINC-MULTI-IMPL-015",
        "PRINC-DOCS-AS-CODE-048",
        "PRINC-EVIDENCE-BASED-025",
        "PRINC-SEPARATION-008",
        "PRINC-CONTRACT-FIRST-004",
        "PRINC-SCALABILITY-046",
        "PRINC-OBSERVABILITY-035",
        "PRINC-EVIDENCE-BASED-026",
        "PRINC-SEPARATION-007",
        "PRINC-DETERMINISTIC-017",
        "PRINC-ZERO-TRUST-028",
        "PRINC-EVIDENCE-BASED-023",
        "PRINC-SEPARATION-011",
        "PRINC-ZERO-TRUST-030",
        "PRINC-MULTI-IMPL-014",
        "PRINC-MULTI-IMPL-013",
        "PRINC-BIAS-AWARE-040",
        "PRINC-BIAS-AWARE-038",
        "PRINC-DOCS-AS-CODE-051",
        "PRINC-DETERMINISTIC-021",
        "PRINC-CONTRACT-FIRST-003",
        "PRINC-SCALABILITY-045",
        "PRINC-DOCS-AS-CODE-049",
        "PRINC-OBSERVABILITY-033",
        "PRINC-CONTRACT-FIRST-001",
        "PRINC-OBSERVABILITY-032",
        "PRINC-SEPARATION-010",
        "PRINC-OBSERVABILITY-036",
        "PRINC-EVIDENCE-BASED-024",
        "PRINC-SCALABILITY-044",
        "PRINC-ZERO-TRUST-031",
        "PRINC-MULTI-IMPL-016",
        "PRINC-MULTI-IMPL-012",
        "PRINC-ZERO-TRUST-029",
        "PRINC-SCALABILITY-042",
        "PRINC-EVIDENCE-BASED-022",
        "PRINC-BIAS-AWARE-041"
      ],
      "coverage_count": 51
    },
    {
      "validator": {
        "rule_id": "KP004",
        "module": "sot_validator_core",
        "file": "sot_validator_core.py",
        "class": "SoTValidator",
        "function": "validate_kp004",
        "description": "KP004: 24×16 = 384 Chart-Dateien, keine Ausnahmen"
      },
      "matched_rules": [
        "PRINC-DOCS-AS-CODE-050",
        "PRINC-DETERMINISTIC-020",
        "PRINC-DETERMINISTIC-018",
        "PRINC-ZERO-TRUST-027",
        "PRINC-CONTRACT-FIRST-005",
        "PRINC-DOCS-AS-CODE-047",
        "PRINC-CONTRACT-FIRST-002",
        "PRINC-SCALABILITY-043",
        "PRINC-SEPARATION-009",
        "PRINC-SEPARATION-006",
        "PRINC-OBSERVABILITY-034",
        "PRINC-BIAS-AWARE-037",
        "PRINC-BIAS-AWARE-039",
        "PRINC-DETERMINISTIC-019",
        "PRINC-MULTI-IMPL-015",
        "PRINC-DOCS-AS-CODE-048",
        "PRINC-EVIDENCE-BASED-025",
        "PRINC-SEPARATION-008",
        "PRINC-CONTRACT-FIRST-004",
        "PRINC-SCALABILITY-046",
        "PRINC-OBSERVABILITY-035",
        "PRINC-EVIDENCE-BASED-026",
        "PRINC-SEPARATION-007",
        "PRINC-DETERMINISTIC-017",
        "PRINC-ZERO-TRUST-028",
        "PRINC-EVIDENCE-BASED-023",
        "PRINC-SEPARATION-011",
        "PRINC-ZERO-TRUST-030",
        "PRINC-MULTI-IMPL-014",
        "PRINC-MULTI-IMPL-013",
        "PRINC-BIAS-AWARE-040",
        "PRINC-BIAS-AWARE-038",
        "PRINC-DOCS-AS-CODE-051",
        "PRINC-DETERMINISTIC-021",
        "PRINC-CONTRACT-FIRST-003",
        "PRINC-SCALABILITY-045",
        "PRINC-DOCS-AS-CODE-049",
        "PRINC-OBSERVABILITY-033",
        "PRINC-CONTRACT-FIRST-001",
        "PRINC-OBSERVABILITY-032",
        "PRINC-SEPARATION-010",
        "PRINC-OBSERVABILITY-036",
        "PRINC-EVIDENCE-BASED-024",
        "PRINC-SCALABILITY-044",
        "PRINC-ZERO-TRUST-031",
        "PRINC-MULTI-IMPL-016",
        "PRINC-MULTI-IMPL-012",
        "PRINC-ZERO-TRUST-029",
        "PRINC-SCALABILITY-042",
        "PRINC-EVIDENCE-BASED-022",
        "PRINC-BIAS-AWARE-041"
      ],
      "coverage_count": 51
    },
    {
      "validator": {
        "rule_id": "KP005",
        "module": "sot_validator_core",
        "file": "sot_validator_core.py",
        "class": "SoTValidator",
        "function": "validate_kp005",
        "description": "KP005: Alles relevante MUSS gehasht, geloggt und geanchort werden"
      },
      "matched_rules": [
        "PRINC-DOCS-AS-CODE-050",
        "PRINC-DETERMINISTIC-020",
        "PRINC-DETERMINISTIC-018",
        "PRINC-ZERO-TRUST-027",
        "PRINC-CONTRACT-FIRST-005",
        "PRINC-DOCS-AS-CODE-047",
        "PRINC-CONTRACT-FIRST-002",
        "PRINC-SCALABILITY-043",
        "PRINC-SEPARATION-009",
        "PRINC-SEPARATION-006",
        "PRINC-OBSERVABILITY-034",
        "PRINC-BIAS-AWARE-037",
        "PRINC-BIAS-AWARE-039",
        "PRINC-DETERMINISTIC-019",
        "PRINC-MULTI-IMPL-015",
        "PRINC-DOCS-AS-CODE-048",
        "PRINC-EVIDENCE-BASED-025",
        "PRINC-SEPARATION-008",
        "PRINC-CONTRACT-FIRST-004",
        "PRINC-SCALABILITY-046",
        "PRINC-OBSERVABILITY-035",
        "PRINC-EVIDENCE-BASED-026",
        "PRINC-SEPARATION-007",
        "PRINC-DETERMINISTIC-017",
        "PRINC-ZERO-TRUST-028",
        "PRINC-EVIDENCE-BASED-023",
        "PRINC-SEPARATION-011",
        "PRINC-ZERO-TRUST-030",
        "PRINC-MULTI-IMPL-014",
        "PRINC-MULTI-IMPL-013",
        "PRINC-BIAS-AWARE-040",
        "PRINC-BIAS-AWARE-038",
        "PRINC-DOCS-AS-CODE-051",
        "PRINC-DETERMINISTIC-021",
        "PRINC-CONTRACT-FIRST-003",
        "PRINC-SCALABILITY-045",
        "PRINC-DOCS-AS-CODE-049",
        "PRINC-OBSERVABILITY-033",
        "PRINC-CONTRACT-FIRST-001",
        "PRINC-OBSERVABILITY-032",
        "PRINC-SEPARATION-010",
        "PRINC-OBSERVABILITY-036",
        "PRINC-EVIDENCE-BASED-024",
        "PRINC-SCALABILITY-044",
        "PRINC-ZERO-TRUST-031",
        "PRINC-MULTI-IMPL-016",
        "PRINC-MULTI-IMPL-012",
        "PRINC-ZERO-TRUST-029",
        "PRINC-SCALABILITY-042",
        "PRINC-EVIDENCE-BASED-022",
        "PRINC-BIAS-AWARE-041"
      ],
      "coverage_count": 51
    },
    {
      "validator": {
        "rule_id": "KP006",
        "module": "sot_validator_core",
        "file": "sot_validator_core.py",
        "class": "SoTValidator",
        "function": "validate_kp006",
        "description": "KP006: mTLS MUSS für alle internen Verbindungen verwendet werden"
      },
      "matched_rules": [
        "PRINC-DOCS-AS-CODE-050",
        "PRINC-DETERMINISTIC-020",
        "PRINC-DETERMINISTIC-018",
        "PRINC-ZERO-TRUST-027",
        "PRINC-CONTRACT-FIRST-005",
        "PRINC-DOCS-AS-CODE-047",
        "PRINC-CONTRACT-FIRST-002",
        "PRINC-SCALABILITY-043",
        "PRINC-SEPARATION-009",
        "PRINC-SEPARATION-006",
        "PRINC-OBSERVABILITY-034",
        "PRINC-BIAS-AWARE-037",
        "PRINC-BIAS-AWARE-039",
        "PRINC-DETERMINISTIC-019",
        "PRINC-MULTI-IMPL-015",
        "PRINC-DOCS-AS-CODE-048",
        "PRINC-EVIDENCE-BASED-025",
        "PRINC-SEPARATION-008",
        "PRINC-CONTRACT-FIRST-004",
        "PRINC-SCALABILITY-046",
        "PRINC-OBSERVABILITY-035",
        "PRINC-EVIDENCE-BASED-026",
        "PRINC-SEPARATION-007",
        "PRINC-DETERMINISTIC-017",
        "PRINC-ZERO-TRUST-028",
        "PRINC-EVIDENCE-BASED-023",
        "PRINC-SEPARATION-011",
        "PRINC-ZERO-TRUST-030",
        "PRINC-MULTI-IMPL-014",
        "PRINC-MULTI-IMPL-013",
        "PRINC-BIAS-AWARE-040",
        "PRINC-BIAS-AWARE-038",
        "PRINC-DOCS-AS-CODE-051",
        "PRINC-DETERMINISTIC-021",
        "PRINC-CONTRACT-FIRST-003",
        "PRINC-SCALABILITY-045",
        "PRINC-DOCS-AS-CODE-049",
        "PRINC-OBSERVABILITY-033",
        "PRINC-CONTRACT-FIRST-001",
        "PRINC-OBSERVABILITY-032",
        "PRINC-SEPARATION-010",
        "PRINC-OBSERVABILITY-036",
        "PRINC-EVIDENCE-BASED-024",
        "PRINC-SCALABILITY-044",
        "PRINC-ZERO-TRUST-031",
        "PRINC-MULTI-IMPL-016",
        "PRINC-MULTI-IMPL-012",
        "PRINC-ZERO-TRUST-029",
        "PRINC-SCALABILITY-042",
        "PRINC-EVIDENCE-BASED-022",
        "PRINC-BIAS-AWARE-041"
      ],
      "coverage_count": 51
    },
    {
      "validator": {
        "rule_id": "KP007",
        "module": "sot_validator_core",
        "file": "sot_validator_core.py",
        "class": "SoTValidator",
        "function": "validate_kp007",
        "description": "KP007: Metrics, Tracing, Logging MÜSSEN von Anfang an eingebaut sein"
      },
      "matched_rules": [
        "PRINC-DOCS-AS-CODE-050",
        "PRINC-DETERMINISTIC-020",
        "PRINC-DETERMINISTIC-018",
        "PRINC-ZERO-TRUST-027",
        "PRINC-CONTRACT-FIRST-005",
        "PRINC-DOCS-AS-CODE-047",
        "PRINC-CONTRACT-FIRST-002",
        "PRINC-SCALABILITY-043",
        "PRINC-SEPARATION-009",
        "PRINC-SEPARATION-006",
        "PRINC-OBSERVABILITY-034",
        "PRINC-BIAS-AWARE-037",
        "PRINC-BIAS-AWARE-039",
        "PRINC-DETERMINISTIC-019",
        "PRINC-MULTI-IMPL-015",
        "PRINC-DOCS-AS-CODE-048",
        "PRINC-EVIDENCE-BASED-025",
        "PRINC-SEPARATION-008",
        "PRINC-CONTRACT-FIRST-004",
        "PRINC-SCALABILITY-046",
        "PRINC-OBSERVABILITY-035",
        "PRINC-EVIDENCE-BASED-026",
        "PRINC-SEPARATION-007",
        "PRINC-DETERMINISTIC-017",
        "PRINC-ZERO-TRUST-028",
        "PRINC-EVIDENCE-BASED-023",
        "PRINC-SEPARATION-011",
        "PRINC-ZERO-TRUST-030",
        "PRINC-MULTI-IMPL-014",
        "PRINC-MULTI-IMPL-013",
        "PRINC-BIAS-AWARE-040",
        "PRINC-BIAS-AWARE-038",
        "PRINC-DOCS-AS-CODE-051",
        "PRINC-DETERMINISTIC-021",
        "PRINC-CONTRACT-FIRST-003",
        "PRINC-SCALABILITY-045",
        "PRINC-DOCS-AS-CODE-049",
        "PRINC-OBSERVABILITY-033",
        "PRINC-CONTRACT-FIRST-001",
        "PRINC-OBSERVABILITY-032",
        "PRINC-SEPARATION-010",
        "PRINC-OBSERVABILITY-036",
        "PRINC-EVIDENCE-BASED-024",
        "PRINC-SCALABILITY-044",
        "PRINC-ZERO-TRUST-031",
        "PRINC-MULTI-IMPL-016",
        "PRINC-MULTI-IMPL-012",
        "PRINC-ZERO-TRUST-029",
        "PRINC-SCALABILITY-042",
        "PRINC-EVIDENCE-BASED-022",
        "PRINC-BIAS-AWARE-041"
      ],
      "coverage_count": 51
    },
    {
      "validator": {
        "rule_id": "KP008",
        "module": "sot_validator_core",
        "file": "sot_validator_core.py",
        "class": "SoTValidator",
        "function": "validate_kp008",
        "description": "KP008: Alle AI/ML-Modelle MÜSSEN auf Bias getestet werden"
      },
      "matched_rules": [
        "PRINC-DOCS-AS-CODE-050",
        "PRINC-DETERMINISTIC-020",
        "PRINC-DETERMINISTIC-018",
        "PRINC-ZERO-TRUST-027",
        "PRINC-CONTRACT-FIRST-005",
        "PRINC-DOCS-AS-CODE-047",
        "PRINC-CONTRACT-FIRST-002",
        "PRINC-SCALABILITY-043",
        "PRINC-SEPARATION-009",
        "PRINC-SEPARATION-006",
        "PRINC-OBSERVABILITY-034",
        "PRINC-BIAS-AWARE-037",
        "PRINC-BIAS-AWARE-039",
        "PRINC-DETERMINISTIC-019",
        "PRINC-MULTI-IMPL-015",
        "PRINC-DOCS-AS-CODE-048",
        "PRINC-EVIDENCE-BASED-025",
        "PRINC-SEPARATION-008",
        "PRINC-CONTRACT-FIRST-004",
        "PRINC-SCALABILITY-046",
        "PRINC-OBSERVABILITY-035",
        "PRINC-EVIDENCE-BASED-026",
        "PRINC-SEPARATION-007",
        "PRINC-DETERMINISTIC-017",
        "PRINC-ZERO-TRUST-028",
        "PRINC-EVIDENCE-BASED-023",
        "PRINC-SEPARATION-011",
        "PRINC-ZERO-TRUST-030",
        "PRINC-MULTI-IMPL-014",
        "PRINC-MULTI-IMPL-013",
        "PRINC-BIAS-AWARE-040",
        "PRINC-BIAS-AWARE-038",
        "PRINC-DOCS-AS-CODE-051",
        "PRINC-DETERMINISTIC-021",
        "PRINC-CONTRACT-FIRST-003",
        "PRINC-SCALABILITY-045",
        "PRINC-DOCS-AS-CODE-049",
        "PRINC-OBSERVABILITY-033",
        "PRINC-CONTRACT-FIRST-001",
        "PRINC-OBSERVABILITY-032",
        "PRINC-SEPARATION-010",
        "PRINC-OBSERVABILITY-036",
        "PRINC-EVIDENCE-BASED-024",
        "PRINC-SCALABILITY-044",
        "PRINC-ZERO-TRUST-031",
        "PRINC-MULTI-IMPL-016",
        "PRINC-MULTI-IMPL-012",
        "PRINC-ZERO-TRUST-029",
        "PRINC-SCALABILITY-042",
        "PRINC-EVIDENCE-BASED-022",
        "PRINC-BIAS-AWARE-041"
      ],
      "coverage_count": 51
    },
    {
      "validator": {
        "rule_id": "KP009",
        "module": "sot_validator_core",
        "file": "sot_validator_core.py",
        "class": "SoTValidator",
        "function": "validate_kp009",
        "description": "KP009: Jeder Shard MUSS horizontal skalieren können"
      },
      "matched_rules": [
        "PRINC-DOCS-AS-CODE-050",
        "PRINC-DETERMINISTIC-020",
        "PRINC-DETERMINISTIC-018",
        "PRINC-ZERO-TRUST-027",
        "PRINC-CONTRACT-FIRST-005",
        "PRINC-DOCS-AS-CODE-047",
        "PRINC-CONTRACT-FIRST-002",
        "PRINC-SCALABILITY-043",
        "PRINC-SEPARATION-009",
        "PRINC-SEPARATION-006",
        "PRINC-OBSERVABILITY-034",
        "PRINC-BIAS-AWARE-037",
        "PRINC-BIAS-AWARE-039",
        "PRINC-DETERMINISTIC-019",
        "PRINC-MULTI-IMPL-015",
        "PRINC-DOCS-AS-CODE-048",
        "PRINC-EVIDENCE-BASED-025",
        "PRINC-SEPARATION-008",
        "PRINC-CONTRACT-FIRST-004",
        "PRINC-SCALABILITY-046",
        "PRINC-OBSERVABILITY-035",
        "PRINC-EVIDENCE-BASED-026",
        "PRINC-SEPARATION-007",
        "PRINC-DETERMINISTIC-017",
        "PRINC-ZERO-TRUST-028",
        "PRINC-EVIDENCE-BASED-023",
        "PRINC-SEPARATION-011",
        "PRINC-ZERO-TRUST-030",
        "PRINC-MULTI-IMPL-014",
        "PRINC-MULTI-IMPL-013",
        "PRINC-BIAS-AWARE-040",
        "PRINC-BIAS-AWARE-038",
        "PRINC-DOCS-AS-CODE-051",
        "PRINC-DETERMINISTIC-021",
        "PRINC-CONTRACT-FIRST-003",
        "PRINC-SCALABILITY-045",
        "PRINC-DOCS-AS-CODE-049",
        "PRINC-OBSERVABILITY-033",
        "PRINC-CONTRACT-FIRST-001",
        "PRINC-OBSERVABILITY-032",
        "PRINC-SEPARATION-010",
        "PRINC-OBSERVABILITY-036",
        "PRINC-EVIDENCE-BASED-024",
        "PRINC-SCALABILITY-044",
        "PRINC-ZERO-TRUST-031",
        "PRINC-MULTI-IMPL-016",
        "PRINC-MULTI-IMPL-012",
        "PRINC-ZERO-TRUST-029",
        "PRINC-SCALABILITY-042",
        "PRINC-EVIDENCE-BASED-022",
        "PRINC-BIAS-AWARE-041"
      ],
      "coverage_count": 51
    },
    {
      "validator": {
        "rule_id": "KP010",
        "module": "sot_validator_core",
        "file": "sot_validator_core.py",
        "class": "SoTValidator",
        "function": "validate_kp010",
        "description": "KP010: Dokumentation MUSS aus Code/Contracts generiert werden"
      },
      "matched_rules": [
        "PRINC-DOCS-AS-CODE-050",
        "PRINC-DETERMINISTIC-020",
        "PRINC-DETERMINISTIC-018",
        "PRINC-ZERO-TRUST-027",
        "PRINC-CONTRACT-FIRST-005",
        "PRINC-DOCS-AS-CODE-047",
        "PRINC-CONTRACT-FIRST-002",
        "PRINC-SCALABILITY-043",
        "PRINC-SEPARATION-009",
        "PRINC-SEPARATION-006",
        "PRINC-OBSERVABILITY-034",
        "PRINC-BIAS-AWARE-037",
        "PRINC-BIAS-AWARE-039",
        "PRINC-DETERMINISTIC-019",
        "PRINC-MULTI-IMPL-015",
        "PRINC-DOCS-AS-CODE-048",
        "PRINC-EVIDENCE-BASED-025",
        "PRINC-SEPARATION-008",
        "PRINC-CONTRACT-FIRST-004",
        "PRINC-SCALABILITY-046",
        "PRINC-OBSERVABILITY-035",
        "PRINC-EVIDENCE-BASED-026",
        "PRINC-SEPARATION-007",
        "PRINC-DETERMINISTIC-017",
        "PRINC-ZERO-TRUST-028",
        "PRINC-EVIDENCE-BASED-023",
        "PRINC-SEPARATION-011",
        "PRINC-ZERO-TRUST-030",
        "PRINC-MULTI-IMPL-014",
        "PRINC-MULTI-IMPL-013",
        "PRINC-BIAS-AWARE-040",
        "PRINC-BIAS-AWARE-038",
        "PRINC-DOCS-AS-CODE-051",
        "PRINC-DETERMINISTIC-021",
        "PRINC-CONTRACT-FIRST-003",
        "PRINC-SCALABILITY-045",
        "PRINC-DOCS-AS-CODE-049",
        "PRINC-OBSERVABILITY-033",
        "PRINC-CONTRACT-FIRST-001",
        "PRINC-OBSERVABILITY-032",
        "PRINC-SEPARATION-010",
        "PRINC-OBSERVABILITY-036",
        "PRINC-EVIDENCE-BASED-024",
        "PRINC-SCALABILITY-044",
        "PRINC-ZERO-TRUST-031",
        "PRINC-MULTI-IMPL-016",
        "PRINC-MULTI-IMPL-012",
        "PRINC-ZERO-TRUST-029",
        "PRINC-SCALABILITY-042",
        "PRINC-EVIDENCE-BASED-022",
        "PRINC-BIAS-AWARE-041"
      ],
      "coverage_count": 51
    },
    {
      "validator": {
        "rule_id": "MD_CHART_024",
        "module": "sot_validator_core",
        "file": "sot_validator_core.py",
        "class": "SoTValidator",
        "function": "validate_md_chart_024",
        "description": "MD-CHART-024: chart.yaml MUSS compatibility.core_min_version definieren"
      },
      "matched_rules": [
        "CHART-038",
        "CHART-028",
        "CHART-019",
        "CHART-011",
        "CHART-003",
        "CHART-020",
        "CHART-008",
        "CHART-018",
        "CHART-013",
        "CHART-010",
        "CHART-025",
        "CHART-039",
        "CHART-045",
        "CHART-029",
        "CHART-046",
        "CHART-040",
        "CHART-035",
        "CHART-014",
        "CHART-015",
        "CHART-023",
        "CHART-041",
        "CHART-004",
        "CHART-012",
        "CHART-022",
        "CHART-024",
        "CHART-021",
        "CHART-037",
        "CHART-009",
        "CHART-017",
        "CHART-005",
        "CHART-001",
        "CHART-032",
        "CHART-031",
        "CHART-002",
        "CHART-044",
        "CHART-026",
        "CHART-036",
        "CHART-042",
        "CHART-030",
        "CHART-016",
        "CHART-043",
        "CHART-007",
        "CHART-034",
        "CHART-006",
        "CHART-027",
        "CHART-033"
      ],
      "coverage_count": 46
    },
    {
      "validator": {
        "rule_id": "MD_CHART_029",
        "module": "sot_validator_core",
        "file": "sot_validator_core.py",
        "class": "SoTValidator",
        "function": "validate_md_chart_029",
        "description": "MD-CHART-029: chart.yaml SOLLTE orchestration.workflows definieren"
      },
      "matched_rules": [
        "CHART-038",
        "CHART-028",
        "CHART-019",
        "CHART-011",
        "CHART-003",
        "CHART-020",
        "CHART-008",
        "CHART-018",
        "CHART-013",
        "CHART-010",
        "CHART-025",
        "CHART-039",
        "CHART-045",
        "CHART-029",
        "CHART-046",
        "CHART-040",
        "CHART-035",
        "CHART-014",
        "CHART-015",
        "CHART-023",
        "CHART-041",
        "CHART-004",
        "CHART-012",
        "CHART-022",
        "CHART-024",
        "CHART-021",
        "CHART-037",
        "CHART-009",
        "CHART-017",
        "CHART-005",
        "CHART-001",
        "CHART-032",
        "CHART-031",
        "CHART-002",
        "CHART-044",
        "CHART-026",
        "CHART-036",
        "CHART-042",
        "CHART-030",
        "CHART-016",
        "CHART-043",
        "CHART-007",
        "CHART-034",
        "CHART-006",
        "CHART-027",
        "CHART-033"
      ],
      "coverage_count": 46
    },
    {
      "validator": {
        "rule_id": "MD_CHART_045",
        "module": "sot_validator_core",
        "file": "sot_validator_core.py",
        "class": "SoTValidator",
        "function": "validate_md_chart_045",
        "description": "MD-CHART-045: chart.yaml MUSS security.encryption (at_rest, in_transit) definieren"
      },
      "matched_rules": [
        "CHART-038",
        "CHART-028",
        "CHART-019",
        "CHART-011",
        "CHART-003",
        "CHART-020",
        "CHART-008",
        "CHART-018",
        "CHART-013",
        "CHART-010",
        "CHART-025",
        "CHART-039",
        "CHART-045",
        "CHART-029",
        "CHART-046",
        "CHART-040",
        "CHART-035",
        "CHART-014",
        "CHART-015",
        "CHART-023",
        "CHART-041",
        "CHART-004",
        "CHART-012",
        "CHART-022",
        "CHART-024",
        "CHART-021",
        "CHART-037",
        "CHART-009",
        "CHART-017",
        "CHART-005",
        "CHART-001",
        "CHART-032",
        "CHART-031",
        "CHART-002",
        "CHART-044",
        "CHART-026",
        "CHART-036",
        "CHART-042",
        "CHART-030",
        "CHART-016",
        "CHART-043",
        "CHART-007",
        "CHART-034",
        "CHART-006",
        "CHART-027",
        "CHART-033"
      ],
      "coverage_count": 46
    },
    {
      "validator": {
        "rule_id": "MD_CHART_048",
        "module": "sot_validator_core",
        "file": "sot_validator_core.py",
        "class": "SoTValidator",
        "function": "validate_md_chart_048",
        "description": "MD-CHART-048: chart.yaml MUSS resources.compute definieren"
      },
      "matched_rules": [
        "CHART-038",
        "CHART-028",
        "CHART-019",
        "CHART-011",
        "CHART-003",
        "CHART-020",
        "CHART-008",
        "CHART-018",
        "CHART-013",
        "CHART-010",
        "CHART-025",
        "CHART-039",
        "CHART-045",
        "CHART-029",
        "CHART-046",
        "CHART-040",
        "CHART-035",
        "CHART-014",
        "CHART-015",
        "CHART-023",
        "CHART-041",
        "CHART-004",
        "CHART-012",
        "CHART-022",
        "CHART-024",
        "CHART-021",
        "CHART-037",
        "CHART-009",
        "CHART-017",
        "CHART-005",
        "CHART-001",
        "CHART-032",
        "CHART-031",
        "CHART-002",
        "CHART-044",
        "CHART-026",
        "CHART-036",
        "CHART-042",
        "CHART-030",
        "CHART-016",
        "CHART-043",
        "CHART-007",
        "CHART-034",
        "CHART-006",
        "CHART-027",
        "CHART-033"
      ],
      "coverage_count": 46
    },
    {
      "validator": {
        "rule_id": "MD_CHART_050",
        "module": "sot_validator_core",
        "file": "sot_validator_core.py",
        "class": "SoTValidator",
        "function": "validate_md_chart_050",
        "description": "MD-CHART-050: chart.yaml SOLLTE roadmap.upcoming definieren"
      },
      "matched_rules": [
        "CHART-038",
        "CHART-028",
        "CHART-019",
        "CHART-011",
        "CHART-003",
        "CHART-020",
        "CHART-008",
        "CHART-018",
        "CHART-013",
        "CHART-010",
        "CHART-025",
        "CHART-039",
        "CHART-045",
        "CHART-029",
        "CHART-046",
        "CHART-040",
        "CHART-035",
        "CHART-014",
        "CHART-015",
        "CHART-023",
        "CHART-041",
        "CHART-004",
        "CHART-012",
        "CHART-022",
        "CHART-024",
        "CHART-021",
        "CHART-037",
        "CHART-009",
        "CHART-017",
        "CHART-005",
        "CHART-001",
        "CHART-032",
        "CHART-031",
        "CHART-002",
        "CHART-044",
        "CHART-026",
        "CHART-036",
        "CHART-042",
        "CHART-030",
        "CHART-016",
        "CHART-043",
        "CHART-007",
        "CHART-034",
        "CHART-006",
        "CHART-027",
        "CHART-033"
      ],
      "coverage_count": 46
    },
    {
      "validator": {
        "rule_id": "MD_EXT_012",
        "module": "sot_validator_core",
        "file": "sot_validator_core.py",
        "class": "SoTValidator",
        "function": "validate_md_ext_012",
        "description": "MD-EXT-012: OPA MUSS string_similarity() helper function haben"
      },
      "matched_rules": [],
      "coverage_count": 0
    },
    {
      "validator": {
        "rule_id": "MD_EXT_014",
        "module": "sot_validator_core",
        "file": "sot_validator_core.py",
        "class": "SoTValidator",
        "function": "validate_md_ext_014",
        "description": "MD-EXT-014: CI MUSS schedule 0 0 1 */3 * quarterly audit haben"
      },
      "matched_rules": [],
      "coverage_count": 0
    },
    {
      "validator": {
        "rule_id": "MD_EXT_015",
        "module": "sot_validator_core",
        "file": "sot_validator_core.py",
        "class": "SoTValidator",
        "function": "validate_md_ext_015",
        "description": "MD-EXT-015: CI MUSS actions/upload-artifact@v4 verwenden"
      },
      "matched_rules": [],
      "coverage_count": 0
    },
    {
      "validator": {
        "rule_id": "MD_EXT_018",
        "module": "sot_validator_core",
        "file": "sot_validator_core.py",
        "class": "SoTValidator",
        "function": "validate_md_ext_018",
        "description": "MD-EXT-018: Sanctions MUSS sha256 Hash verwenden"
      },
      "matched_rules": [],
      "coverage_count": 0
    },
    {
      "validator": {
        "rule_id": "MD_GOV_005",
        "module": "sot_validator_core",
        "file": "sot_validator_core.py",
        "class": "SoTValidator",
        "function": "validate_md_gov_005",
        "description": "MD-GOV-005: Compliance Team MUSS Policies prüfen"
      },
      "matched_rules": [],
      "coverage_count": 0
    },
    {
      "validator": {
        "rule_id": "MD_GOV_006",
        "module": "sot_validator_core",
        "file": "sot_validator_core.py",
        "class": "SoTValidator",
        "function": "validate_md_gov_006",
        "description": "MD-GOV-006: Compliance Team MUSS Constraints genehmigen"
      },
      "matched_rules": [],
      "coverage_count": 0
    },
    {
      "validator": {
        "rule_id": "MD_GOV_007",
        "module": "sot_validator_core",
        "file": "sot_validator_core.py",
        "class": "SoTValidator",
        "function": "validate_md_gov_007",
        "description": "MD-GOV-007: Security Team MUSS Threat Modeling durchführen"
      },
      "matched_rules": [],
      "coverage_count": 0
    },
    {
      "validator": {
        "rule_id": "MD_GOV_008",
        "module": "sot_validator_core",
        "file": "sot_validator_core.py",
        "class": "SoTValidator",
        "function": "validate_md_gov_008",
        "description": "MD-GOV-008: Change-Prozess MUSS 7 Schritte haben"
      },
      "matched_rules": [],
      "coverage_count": 0
    },
    {
      "validator": {
        "rule_id": "MD_GOV_009",
        "module": "sot_validator_core",
        "file": "sot_validator_core.py",
        "class": "SoTValidator",
        "function": "validate_md_gov_009",
        "description": "MD-GOV-009: SHOULD->MUST promotion MUSS 90d + 99.5% SLA erfüllen"
      },
      "matched_rules": [],
      "coverage_count": 0
    },
    {
      "validator": {
        "rule_id": "MD_GOV_010",
        "module": "sot_validator_core",
        "file": "sot_validator_core.py",
        "class": "SoTValidator",
        "function": "validate_md_gov_010",
        "description": "MD-GOV-010: SHOULD->MUST promotion MUSS 95% Contract Test Coverage erfüllen"
      },
      "matched_rules": [],
      "coverage_count": 0
    },
    {
      "validator": {
        "rule_id": "MD_GOV_011",
        "module": "sot_validator_core",
        "file": "sot_validator_core.py",
        "class": "SoTValidator",
        "function": "validate_md_gov_011",
        "description": "MD-GOV-011: HAVE->SHOULD promotion MUSS Feature complete + Beta + Doku erfüllen"
      },
      "matched_rules": [],
      "coverage_count": 0
    },
    {
      "validator": {
        "rule_id": "MD_MANIFEST_004",
        "module": "sot_validator_core",
        "file": "sot_validator_core.py",
        "class": "SoTValidator",
        "function": "validate_md_manifest_004",
        "description": "MD-MANIFEST-004: manifest.yaml MUSS metadata.maturity definieren"
      },
      "matched_rules": [
        "MANIFEST-009",
        "MANIFEST-010",
        "MANIFEST-003",
        "MANIFEST-026",
        "MANIFEST-002",
        "MANIFEST-012",
        "MANIFEST-011",
        "MANIFEST-036",
        "MANIFEST-040",
        "MANIFEST-027",
        "MANIFEST-015",
        "MANIFEST-032",
        "MANIFEST-034",
        "MANIFEST-038",
        "MANIFEST-008",
        "MANIFEST-033",
        "MANIFEST-014",
        "MANIFEST-028",
        "MANIFEST-045",
        "MANIFEST-001",
        "MANIFEST-020",
        "MANIFEST-035",
        "MANIFEST-007",
        "MANIFEST-024",
        "MANIFEST-021",
        "MANIFEST-013",
        "MANIFEST-017",
        "MANIFEST-019",
        "MANIFEST-005",
        "MANIFEST-022",
        "MANIFEST-018",
        "MANIFEST-041",
        "MANIFEST-016",
        "MANIFEST-044",
        "MANIFEST-025",
        "MANIFEST-031",
        "MANIFEST-037",
        "MANIFEST-006",
        "MANIFEST-030",
        "MANIFEST-029",
        "MANIFEST-004",
        "MANIFEST-039",
        "MANIFEST-042",
        "MANIFEST-043",
        "MANIFEST-023"
      ],
      "coverage_count": 45
    },
    {
      "validator": {
        "rule_id": "MD_MANIFEST_009",
        "module": "sot_validator_core",
        "file": "sot_validator_core.py",
        "class": "SoTValidator",
        "function": "validate_md_manifest_009",
        "description": "MD-MANIFEST-009: manifest.yaml MUSS technology_stack.linting_formatting definieren"
      },
      "matched_rules": [
        "MANIFEST-009",
        "MANIFEST-010",
        "MANIFEST-003",
        "MANIFEST-026",
        "MANIFEST-002",
        "MANIFEST-012",
        "MANIFEST-011",
        "MANIFEST-036",
        "MANIFEST-040",
        "MANIFEST-027",
        "MANIFEST-015",
        "MANIFEST-032",
        "MANIFEST-034",
        "MANIFEST-038",
        "MANIFEST-008",
        "MANIFEST-033",
        "MANIFEST-014",
        "MANIFEST-028",
        "MANIFEST-045",
        "MANIFEST-001",
        "MANIFEST-020",
        "MANIFEST-035",
        "MANIFEST-007",
        "MANIFEST-024",
        "MANIFEST-021",
        "MANIFEST-013",
        "MANIFEST-017",
        "MANIFEST-019",
        "MANIFEST-005",
        "MANIFEST-022",
        "MANIFEST-018",
        "MANIFEST-041",
        "MANIFEST-016",
        "MANIFEST-044",
        "MANIFEST-025",
        "MANIFEST-031",
        "MANIFEST-037",
        "MANIFEST-006",
        "MANIFEST-030",
        "MANIFEST-029",
        "MANIFEST-004",
        "MANIFEST-039",
        "MANIFEST-042",
        "MANIFEST-043",
        "MANIFEST-023"
      ],
      "coverage_count": 45
    },
    {
      "validator": {
        "rule_id": "MD_MANIFEST_012",
        "module": "sot_validator_core",
        "file": "sot_validator_core.py",
        "class": "SoTValidator",
        "function": "validate_md_manifest_012",
        "description": "MD-MANIFEST-012: manifest.yaml MUSS artifacts.configuration.location definieren"
      },
      "matched_rules": [
        "MANIFEST-009",
        "MANIFEST-010",
        "MANIFEST-003",
        "MANIFEST-026",
        "MANIFEST-002",
        "MANIFEST-012",
        "MANIFEST-011",
        "MANIFEST-036",
        "MANIFEST-040",
        "MANIFEST-027",
        "MANIFEST-015",
        "MANIFEST-032",
        "MANIFEST-034",
        "MANIFEST-038",
        "MANIFEST-008",
        "MANIFEST-033",
        "MANIFEST-014",
        "MANIFEST-028",
        "MANIFEST-045",
        "MANIFEST-001",
        "MANIFEST-020",
        "MANIFEST-035",
        "MANIFEST-007",
        "MANIFEST-024",
        "MANIFEST-021",
        "MANIFEST-013",
        "MANIFEST-017",
        "MANIFEST-019",
        "MANIFEST-005",
        "MANIFEST-022",
        "MANIFEST-018",
        "MANIFEST-041",
        "MANIFEST-016",
        "MANIFEST-044",
        "MANIFEST-025",
        "MANIFEST-031",
        "MANIFEST-037",
        "MANIFEST-006",
        "MANIFEST-030",
        "MANIFEST-029",
        "MANIFEST-004",
        "MANIFEST-039",
        "MANIFEST-042",
        "MANIFEST-043",
        "MANIFEST-023"
      ],
      "coverage_count": 45
    },
    {
      "validator": {
        "rule_id": "MD_MANIFEST_013",
        "module": "sot_validator_core",
        "file": "sot_validator_core.py",
        "class": "SoTValidator",
        "function": "validate_md_manifest_013",
        "description": "MD-MANIFEST-013: manifest.yaml SOLLTE artifacts.models.location definieren (AI/ML)"
      },
      "matched_rules": [
        "MANIFEST-009",
        "MANIFEST-010",
        "MANIFEST-003",
        "MANIFEST-026",
        "MANIFEST-002",
        "MANIFEST-012",
        "MANIFEST-011",
        "MANIFEST-036",
        "MANIFEST-040",
        "MANIFEST-027",
        "MANIFEST-015",
        "MANIFEST-032",
        "MANIFEST-034",
        "MANIFEST-038",
        "MANIFEST-008",
        "MANIFEST-033",
        "MANIFEST-014",
        "MANIFEST-028",
        "MANIFEST-045",
        "MANIFEST-001",
        "MANIFEST-020",
        "MANIFEST-035",
        "MANIFEST-007",
        "MANIFEST-024",
        "MANIFEST-021",
        "MANIFEST-013",
        "MANIFEST-017",
        "MANIFEST-019",
        "MANIFEST-005",
        "MANIFEST-022",
        "MANIFEST-018",
        "MANIFEST-041",
        "MANIFEST-016",
        "MANIFEST-044",
        "MANIFEST-025",
        "MANIFEST-031",
        "MANIFEST-037",
        "MANIFEST-006",
        "MANIFEST-030",
        "MANIFEST-029",
        "MANIFEST-004",
        "MANIFEST-039",
        "MANIFEST-042",
        "MANIFEST-043",
        "MANIFEST-023"
      ],
      "coverage_count": 45
    },
    {
      "validator": {
        "rule_id": "MD_MANIFEST_014",
        "module": "sot_validator_core",
        "file": "sot_validator_core.py",
        "class": "SoTValidator",
        "function": "validate_md_manifest_014",
        "description": "MD-MANIFEST-014: manifest.yaml SOLLTE artifacts.protocols.location definieren (gRPC)"
      },
      "matched_rules": [
        "MANIFEST-009",
        "MANIFEST-010",
        "MANIFEST-003",
        "MANIFEST-026",
        "MANIFEST-002",
        "MANIFEST-012",
        "MANIFEST-011",
        "MANIFEST-036",
        "MANIFEST-040",
        "MANIFEST-027",
        "MANIFEST-015",
        "MANIFEST-032",
        "MANIFEST-034",
        "MANIFEST-038",
        "MANIFEST-008",
        "MANIFEST-033",
        "MANIFEST-014",
        "MANIFEST-028",
        "MANIFEST-045",
        "MANIFEST-001",
        "MANIFEST-020",
        "MANIFEST-035",
        "MANIFEST-007",
        "MANIFEST-024",
        "MANIFEST-021",
        "MANIFEST-013",
        "MANIFEST-017",
        "MANIFEST-019",
        "MANIFEST-005",
        "MANIFEST-022",
        "MANIFEST-018",
        "MANIFEST-041",
        "MANIFEST-016",
        "MANIFEST-044",
        "MANIFEST-025",
        "MANIFEST-031",
        "MANIFEST-037",
        "MANIFEST-006",
        "MANIFEST-030",
        "MANIFEST-029",
        "MANIFEST-004",
        "MANIFEST-039",
        "MANIFEST-042",
        "MANIFEST-043",
        "MANIFEST-023"
      ],
      "coverage_count": 45
    },
    {
      "validator": {
        "rule_id": "MD_MANIFEST_015",
        "module": "sot_validator_core",
        "file": "sot_validator_core.py",
        "class": "SoTValidator",
        "function": "validate_md_manifest_015",
        "description": "MD-MANIFEST-015: manifest.yaml MUSS artifacts.tests.location definieren"
      },
      "matched_rules": [
        "MANIFEST-009",
        "MANIFEST-010",
        "MANIFEST-003",
        "MANIFEST-026",
        "MANIFEST-002",
        "MANIFEST-012",
        "MANIFEST-011",
        "MANIFEST-036",
        "MANIFEST-040",
        "MANIFEST-027",
        "MANIFEST-015",
        "MANIFEST-032",
        "MANIFEST-034",
        "MANIFEST-038",
        "MANIFEST-008",
        "MANIFEST-033",
        "MANIFEST-014",
        "MANIFEST-028",
        "MANIFEST-045",
        "MANIFEST-001",
        "MANIFEST-020",
        "MANIFEST-035",
        "MANIFEST-007",
        "MANIFEST-024",
        "MANIFEST-021",
        "MANIFEST-013",
        "MANIFEST-017",
        "MANIFEST-019",
        "MANIFEST-005",
        "MANIFEST-022",
        "MANIFEST-018",
        "MANIFEST-041",
        "MANIFEST-016",
        "MANIFEST-044",
        "MANIFEST-025",
        "MANIFEST-031",
        "MANIFEST-037",
        "MANIFEST-006",
        "MANIFEST-030",
        "MANIFEST-029",
        "MANIFEST-004",
        "MANIFEST-039",
        "MANIFEST-042",
        "MANIFEST-043",
        "MANIFEST-023"
      ],
      "coverage_count": 45
    },
    {
      "validator": {
        "rule_id": "MD_MANIFEST_016",
        "module": "sot_validator_core",
        "file": "sot_validator_core.py",
        "class": "SoTValidator",
        "function": "validate_md_manifest_016",
        "description": "MD-MANIFEST-016: manifest.yaml MUSS artifacts.documentation.location definieren"
      },
      "matched_rules": [
        "MANIFEST-009",
        "MANIFEST-010",
        "MANIFEST-003",
        "MANIFEST-026",
        "MANIFEST-002",
        "MANIFEST-012",
        "MANIFEST-011",
        "MANIFEST-036",
        "MANIFEST-040",
        "MANIFEST-027",
        "MANIFEST-015",
        "MANIFEST-032",
        "MANIFEST-034",
        "MANIFEST-038",
        "MANIFEST-008",
        "MANIFEST-033",
        "MANIFEST-014",
        "MANIFEST-028",
        "MANIFEST-045",
        "MANIFEST-001",
        "MANIFEST-020",
        "MANIFEST-035",
        "MANIFEST-007",
        "MANIFEST-024",
        "MANIFEST-021",
        "MANIFEST-013",
        "MANIFEST-017",
        "MANIFEST-019",
        "MANIFEST-005",
        "MANIFEST-022",
        "MANIFEST-018",
        "MANIFEST-041",
        "MANIFEST-016",
        "MANIFEST-044",
        "MANIFEST-025",
        "MANIFEST-031",
        "MANIFEST-037",
        "MANIFEST-006",
        "MANIFEST-030",
        "MANIFEST-029",
        "MANIFEST-004",
        "MANIFEST-039",
        "MANIFEST-042",
        "MANIFEST-043",
        "MANIFEST-023"
      ],
      "coverage_count": 45
    },
    {
      "validator": {
        "rule_id": "MD_MANIFEST_017",
        "module": "sot_validator_core",
        "file": "sot_validator_core.py",
        "class": "SoTValidator",
        "function": "validate_md_manifest_017",
        "description": "MD-MANIFEST-017: manifest.yaml MUSS artifacts.scripts.location definieren"
      },
      "matched_rules": [
        "MANIFEST-009",
        "MANIFEST-010",
        "MANIFEST-003",
        "MANIFEST-026",
        "MANIFEST-002",
        "MANIFEST-012",
        "MANIFEST-011",
        "MANIFEST-036",
        "MANIFEST-040",
        "MANIFEST-027",
        "MANIFEST-015",
        "MANIFEST-032",
        "MANIFEST-034",
        "MANIFEST-038",
        "MANIFEST-008",
        "MANIFEST-033",
        "MANIFEST-014",
        "MANIFEST-028",
        "MANIFEST-045",
        "MANIFEST-001",
        "MANIFEST-020",
        "MANIFEST-035",
        "MANIFEST-007",
        "MANIFEST-024",
        "MANIFEST-021",
        "MANIFEST-013",
        "MANIFEST-017",
        "MANIFEST-019",
        "MANIFEST-005",
        "MANIFEST-022",
        "MANIFEST-018",
        "MANIFEST-041",
        "MANIFEST-016",
        "MANIFEST-044",
        "MANIFEST-025",
        "MANIFEST-031",
        "MANIFEST-037",
        "MANIFEST-006",
        "MANIFEST-030",
        "MANIFEST-029",
        "MANIFEST-004",
        "MANIFEST-039",
        "MANIFEST-042",
        "MANIFEST-043",
        "MANIFEST-023"
      ],
      "coverage_count": 45
    },
    {
      "validator": {
        "rule_id": "MD_MANIFEST_018",
        "module": "sot_validator_core",
        "file": "sot_validator_core.py",
        "class": "SoTValidator",
        "function": "validate_md_manifest_018",
        "description": "MD-MANIFEST-018: manifest.yaml MUSS artifacts.docker.files=[Dockerfile,docker-compose.yml] definiere"
      },
      "matched_rules": [
        "MANIFEST-009",
        "MANIFEST-010",
        "MANIFEST-003",
        "MANIFEST-026",
        "MANIFEST-002",
        "MANIFEST-012",
        "MANIFEST-011",
        "MANIFEST-036",
        "MANIFEST-040",
        "MANIFEST-027",
        "MANIFEST-015",
        "MANIFEST-032",
        "MANIFEST-034",
        "MANIFEST-038",
        "MANIFEST-008",
        "MANIFEST-033",
        "MANIFEST-014",
        "MANIFEST-028",
        "MANIFEST-045",
        "MANIFEST-001",
        "MANIFEST-020",
        "MANIFEST-035",
        "MANIFEST-007",
        "MANIFEST-024",
        "MANIFEST-021",
        "MANIFEST-013",
        "MANIFEST-017",
        "MANIFEST-019",
        "MANIFEST-005",
        "MANIFEST-022",
        "MANIFEST-018",
        "MANIFEST-041",
        "MANIFEST-016",
        "MANIFEST-044",
        "MANIFEST-025",
        "MANIFEST-031",
        "MANIFEST-037",
        "MANIFEST-006",
        "MANIFEST-030",
        "MANIFEST-029",
        "MANIFEST-004",
        "MANIFEST-039",
        "MANIFEST-042",
        "MANIFEST-043",
        "MANIFEST-023"
      ],
      "coverage_count": 45
    },
    {
      "validator": {
        "rule_id": "MD_MANIFEST_023",
        "module": "sot_validator_core",
        "file": "sot_validator_core.py",
        "class": "SoTValidator",
        "function": "validate_md_manifest_023",
        "description": "MD-MANIFEST-023: manifest.yaml MUSS build.commands definieren"
      },
      "matched_rules": [
        "MANIFEST-009",
        "MANIFEST-010",
        "MANIFEST-003",
        "MANIFEST-026",
        "MANIFEST-002",
        "MANIFEST-012",
        "MANIFEST-011",
        "MANIFEST-036",
        "MANIFEST-040",
        "MANIFEST-027",
        "MANIFEST-015",
        "MANIFEST-032",
        "MANIFEST-034",
        "MANIFEST-038",
        "MANIFEST-008",
        "MANIFEST-033",
        "MANIFEST-014",
        "MANIFEST-028",
        "MANIFEST-045",
        "MANIFEST-001",
        "MANIFEST-020",
        "MANIFEST-035",
        "MANIFEST-007",
        "MANIFEST-024",
        "MANIFEST-021",
        "MANIFEST-013",
        "MANIFEST-017",
        "MANIFEST-019",
        "MANIFEST-005",
        "MANIFEST-022",
        "MANIFEST-018",
        "MANIFEST-041",
        "MANIFEST-016",
        "MANIFEST-044",
        "MANIFEST-025",
        "MANIFEST-031",
        "MANIFEST-037",
        "MANIFEST-006",
        "MANIFEST-030",
        "MANIFEST-029",
        "MANIFEST-004",
        "MANIFEST-039",
        "MANIFEST-042",
        "MANIFEST-043",
        "MANIFEST-023"
      ],
      "coverage_count": 45
    },
    {
      "validator": {
        "rule_id": "MD_MANIFEST_024",
        "module": "sot_validator_core",
        "file": "sot_validator_core.py",
        "class": "SoTValidator",
        "function": "validate_md_manifest_024",
        "description": "MD-MANIFEST-024: manifest.yaml MUSS build.docker definieren"
      },
      "matched_rules": [
        "MANIFEST-009",
        "MANIFEST-010",
        "MANIFEST-003",
        "MANIFEST-026",
        "MANIFEST-002",
        "MANIFEST-012",
        "MANIFEST-011",
        "MANIFEST-036",
        "MANIFEST-040",
        "MANIFEST-027",
        "MANIFEST-015",
        "MANIFEST-032",
        "MANIFEST-034",
        "MANIFEST-038",
        "MANIFEST-008",
        "MANIFEST-033",
        "MANIFEST-014",
        "MANIFEST-028",
        "MANIFEST-045",
        "MANIFEST-001",
        "MANIFEST-020",
        "MANIFEST-035",
        "MANIFEST-007",
        "MANIFEST-024",
        "MANIFEST-021",
        "MANIFEST-013",
        "MANIFEST-017",
        "MANIFEST-019",
        "MANIFEST-005",
        "MANIFEST-022",
        "MANIFEST-018",
        "MANIFEST-041",
        "MANIFEST-016",
        "MANIFEST-044",
        "MANIFEST-025",
        "MANIFEST-031",
        "MANIFEST-037",
        "MANIFEST-006",
        "MANIFEST-030",
        "MANIFEST-029",
        "MANIFEST-004",
        "MANIFEST-039",
        "MANIFEST-042",
        "MANIFEST-043",
        "MANIFEST-023"
      ],
      "coverage_count": 45
    },
    {
      "validator": {
        "rule_id": "MD_MANIFEST_025",
        "module": "sot_validator_core",
        "file": "sot_validator_core.py",
        "class": "SoTValidator",
        "function": "validate_md_manifest_025",
        "description": "MD-MANIFEST-025: manifest.yaml MUSS deployment.kubernetes.manifests_location definieren"
      },
      "matched_rules": [
        "MANIFEST-009",
        "MANIFEST-010",
        "MANIFEST-003",
        "MANIFEST-026",
        "MANIFEST-002",
        "MANIFEST-012",
        "MANIFEST-011",
        "MANIFEST-036",
        "MANIFEST-040",
        "MANIFEST-027",
        "MANIFEST-015",
        "MANIFEST-032",
        "MANIFEST-034",
        "MANIFEST-038",
        "MANIFEST-008",
        "MANIFEST-033",
        "MANIFEST-014",
        "MANIFEST-028",
        "MANIFEST-045",
        "MANIFEST-001",
        "MANIFEST-020",
        "MANIFEST-035",
        "MANIFEST-007",
        "MANIFEST-024",
        "MANIFEST-021",
        "MANIFEST-013",
        "MANIFEST-017",
        "MANIFEST-019",
        "MANIFEST-005",
        "MANIFEST-022",
        "MANIFEST-018",
        "MANIFEST-041",
        "MANIFEST-016",
        "MANIFEST-044",
        "MANIFEST-025",
        "MANIFEST-031",
        "MANIFEST-037",
        "MANIFEST-006",
        "MANIFEST-030",
        "MANIFEST-029",
        "MANIFEST-004",
        "MANIFEST-039",
        "MANIFEST-042",
        "MANIFEST-043",
        "MANIFEST-023"
      ],
      "coverage_count": 45
    },
    {
      "validator": {
        "rule_id": "MD_MANIFEST_026",
        "module": "sot_validator_core",
        "file": "sot_validator_core.py",
        "class": "SoTValidator",
        "function": "validate_md_manifest_026",
        "description": "MD-MANIFEST-026: manifest.yaml MUSS deployment.helm.chart_location definieren"
      },
      "matched_rules": [
        "MANIFEST-009",
        "MANIFEST-010",
        "MANIFEST-003",
        "MANIFEST-026",
        "MANIFEST-002",
        "MANIFEST-012",
        "MANIFEST-011",
        "MANIFEST-036",
        "MANIFEST-040",
        "MANIFEST-027",
        "MANIFEST-015",
        "MANIFEST-032",
        "MANIFEST-034",
        "MANIFEST-038",
        "MANIFEST-008",
        "MANIFEST-033",
        "MANIFEST-014",
        "MANIFEST-028",
        "MANIFEST-045",
        "MANIFEST-001",
        "MANIFEST-020",
        "MANIFEST-035",
        "MANIFEST-007",
        "MANIFEST-024",
        "MANIFEST-021",
        "MANIFEST-013",
        "MANIFEST-017",
        "MANIFEST-019",
        "MANIFEST-005",
        "MANIFEST-022",
        "MANIFEST-018",
        "MANIFEST-041",
        "MANIFEST-016",
        "MANIFEST-044",
        "MANIFEST-025",
        "MANIFEST-031",
        "MANIFEST-037",
        "MANIFEST-006",
        "MANIFEST-030",
        "MANIFEST-029",
        "MANIFEST-004",
        "MANIFEST-039",
        "MANIFEST-042",
        "MANIFEST-043",
        "MANIFEST-023"
      ],
      "coverage_count": 45
    },
    {
      "validator": {
        "rule_id": "MD_MANIFEST_027",
        "module": "sot_validator_core",
        "file": "sot_validator_core.py",
        "class": "SoTValidator",
        "function": "validate_md_manifest_027",
        "description": "MD-MANIFEST-027: manifest.yaml MUSS deployment.environment_variables definieren"
      },
      "matched_rules": [
        "MANIFEST-009",
        "MANIFEST-010",
        "MANIFEST-003",
        "MANIFEST-026",
        "MANIFEST-002",
        "MANIFEST-012",
        "MANIFEST-011",
        "MANIFEST-036",
        "MANIFEST-040",
        "MANIFEST-027",
        "MANIFEST-015",
        "MANIFEST-032",
        "MANIFEST-034",
        "MANIFEST-038",
        "MANIFEST-008",
        "MANIFEST-033",
        "MANIFEST-014",
        "MANIFEST-028",
        "MANIFEST-045",
        "MANIFEST-001",
        "MANIFEST-020",
        "MANIFEST-035",
        "MANIFEST-007",
        "MANIFEST-024",
        "MANIFEST-021",
        "MANIFEST-013",
        "MANIFEST-017",
        "MANIFEST-019",
        "MANIFEST-005",
        "MANIFEST-022",
        "MANIFEST-018",
        "MANIFEST-041",
        "MANIFEST-016",
        "MANIFEST-044",
        "MANIFEST-025",
        "MANIFEST-031",
        "MANIFEST-037",
        "MANIFEST-006",
        "MANIFEST-030",
        "MANIFEST-029",
        "MANIFEST-004",
        "MANIFEST-039",
        "MANIFEST-042",
        "MANIFEST-043",
        "MANIFEST-023"
      ],
      "coverage_count": 45
    },
    {
      "validator": {
        "rule_id": "MD_MANIFEST_029",
        "module": "sot_validator_core",
        "file": "sot_validator_core.py",
        "class": "SoTValidator",
        "function": "validate_md_manifest_029",
        "description": "MD-MANIFEST-029: manifest.yaml MUSS testing.unit_tests.coverage_target>=80 definieren"
      },
      "matched_rules": [
        "MANIFEST-009",
        "MANIFEST-010",
        "MANIFEST-003",
        "MANIFEST-026",
        "MANIFEST-002",
        "MANIFEST-012",
        "MANIFEST-011",
        "MANIFEST-036",
        "MANIFEST-040",
        "MANIFEST-027",
        "MANIFEST-015",
        "MANIFEST-032",
        "MANIFEST-034",
        "MANIFEST-038",
        "MANIFEST-008",
        "MANIFEST-033",
        "MANIFEST-014",
        "MANIFEST-028",
        "MANIFEST-045",
        "MANIFEST-001",
        "MANIFEST-020",
        "MANIFEST-035",
        "MANIFEST-007",
        "MANIFEST-024",
        "MANIFEST-021",
        "MANIFEST-013",
        "MANIFEST-017",
        "MANIFEST-019",
        "MANIFEST-005",
        "MANIFEST-022",
        "MANIFEST-018",
        "MANIFEST-041",
        "MANIFEST-016",
        "MANIFEST-044",
        "MANIFEST-025",
        "MANIFEST-031",
        "MANIFEST-037",
        "MANIFEST-006",
        "MANIFEST-030",
        "MANIFEST-029",
        "MANIFEST-004",
        "MANIFEST-039",
        "MANIFEST-042",
        "MANIFEST-043",
        "MANIFEST-023"
      ],
      "coverage_count": 45
    },
    {
      "validator": {
        "rule_id": "MD_MANIFEST_032",
        "module": "sot_validator_core",
        "file": "sot_validator_core.py",
        "class": "SoTValidator",
        "function": "validate_md_manifest_032",
        "description": "MD-MANIFEST-032: manifest.yaml MUSS testing.security_tests definieren"
      },
      "matched_rules": [
        "MANIFEST-009",
        "MANIFEST-010",
        "MANIFEST-003",
        "MANIFEST-026",
        "MANIFEST-002",
        "MANIFEST-012",
        "MANIFEST-011",
        "MANIFEST-036",
        "MANIFEST-040",
        "MANIFEST-027",
        "MANIFEST-015",
        "MANIFEST-032",
        "MANIFEST-034",
        "MANIFEST-038",
        "MANIFEST-008",
        "MANIFEST-033",
        "MANIFEST-014",
        "MANIFEST-028",
        "MANIFEST-045",
        "MANIFEST-001",
        "MANIFEST-020",
        "MANIFEST-035",
        "MANIFEST-007",
        "MANIFEST-024",
        "MANIFEST-021",
        "MANIFEST-013",
        "MANIFEST-017",
        "MANIFEST-019",
        "MANIFEST-005",
        "MANIFEST-022",
        "MANIFEST-018",
        "MANIFEST-041",
        "MANIFEST-016",
        "MANIFEST-044",
        "MANIFEST-025",
        "MANIFEST-031",
        "MANIFEST-037",
        "MANIFEST-006",
        "MANIFEST-030",
        "MANIFEST-029",
        "MANIFEST-004",
        "MANIFEST-039",
        "MANIFEST-042",
        "MANIFEST-043",
        "MANIFEST-023"
      ],
      "coverage_count": 45
    },
    {
      "validator": {
        "rule_id": "MD_MANIFEST_033",
        "module": "sot_validator_core",
        "file": "sot_validator_core.py",
        "class": "SoTValidator",
        "function": "validate_md_manifest_033",
        "description": "MD-MANIFEST-033: manifest.yaml MUSS testing.performance_tests definieren"
      },
      "matched_rules": [
        "MANIFEST-009",
        "MANIFEST-010",
        "MANIFEST-003",
        "MANIFEST-026",
        "MANIFEST-002",
        "MANIFEST-012",
        "MANIFEST-011",
        "MANIFEST-036",
        "MANIFEST-040",
        "MANIFEST-027",
        "MANIFEST-015",
        "MANIFEST-032",
        "MANIFEST-034",
        "MANIFEST-038",
        "MANIFEST-008",
        "MANIFEST-033",
        "MANIFEST-014",
        "MANIFEST-028",
        "MANIFEST-045",
        "MANIFEST-001",
        "MANIFEST-020",
        "MANIFEST-035",
        "MANIFEST-007",
        "MANIFEST-024",
        "MANIFEST-021",
        "MANIFEST-013",
        "MANIFEST-017",
        "MANIFEST-019",
        "MANIFEST-005",
        "MANIFEST-022",
        "MANIFEST-018",
        "MANIFEST-041",
        "MANIFEST-016",
        "MANIFEST-044",
        "MANIFEST-025",
        "MANIFEST-031",
        "MANIFEST-037",
        "MANIFEST-006",
        "MANIFEST-030",
        "MANIFEST-029",
        "MANIFEST-004",
        "MANIFEST-039",
        "MANIFEST-042",
        "MANIFEST-043",
        "MANIFEST-023"
      ],
      "coverage_count": 45
    },
    {
      "validator": {
        "rule_id": "MD_MANIFEST_036",
        "module": "sot_validator_core",
        "file": "sot_validator_core.py",
        "class": "SoTValidator",
        "function": "validate_md_manifest_036",
        "description": "MD-MANIFEST-036: manifest.yaml MUSS observability.logging.format=json definieren"
      },
      "matched_rules": [
        "MANIFEST-009",
        "MANIFEST-010",
        "MANIFEST-003",
        "MANIFEST-026",
        "MANIFEST-002",
        "MANIFEST-012",
        "MANIFEST-011",
        "MANIFEST-036",
        "MANIFEST-040",
        "MANIFEST-027",
        "MANIFEST-015",
        "MANIFEST-032",
        "MANIFEST-034",
        "MANIFEST-038",
        "MANIFEST-008",
        "MANIFEST-033",
        "MANIFEST-014",
        "MANIFEST-028",
        "MANIFEST-045",
        "MANIFEST-001",
        "MANIFEST-020",
        "MANIFEST-035",
        "MANIFEST-007",
        "MANIFEST-024",
        "MANIFEST-021",
        "MANIFEST-013",
        "MANIFEST-017",
        "MANIFEST-019",
        "MANIFEST-005",
        "MANIFEST-022",
        "MANIFEST-018",
        "MANIFEST-041",
        "MANIFEST-016",
        "MANIFEST-044",
        "MANIFEST-025",
        "MANIFEST-031",
        "MANIFEST-037",
        "MANIFEST-006",
        "MANIFEST-030",
        "MANIFEST-029",
        "MANIFEST-004",
        "MANIFEST-039",
        "MANIFEST-042",
        "MANIFEST-043",
        "MANIFEST-023"
      ],
      "coverage_count": 45
    },
    {
      "validator": {
        "rule_id": "MD_MANIFEST_038",
        "module": "sot_validator_core",
        "file": "sot_validator_core.py",
        "class": "SoTValidator",
        "function": "validate_md_manifest_038",
        "description": "MD-MANIFEST-038: manifest.yaml MUSS observability.health_checks.liveness definieren"
      },
      "matched_rules": [
        "MANIFEST-009",
        "MANIFEST-010",
        "MANIFEST-003",
        "MANIFEST-026",
        "MANIFEST-002",
        "MANIFEST-012",
        "MANIFEST-011",
        "MANIFEST-036",
        "MANIFEST-040",
        "MANIFEST-027",
        "MANIFEST-015",
        "MANIFEST-032",
        "MANIFEST-034",
        "MANIFEST-038",
        "MANIFEST-008",
        "MANIFEST-033",
        "MANIFEST-014",
        "MANIFEST-028",
        "MANIFEST-045",
        "MANIFEST-001",
        "MANIFEST-020",
        "MANIFEST-035",
        "MANIFEST-007",
        "MANIFEST-024",
        "MANIFEST-021",
        "MANIFEST-013",
        "MANIFEST-017",
        "MANIFEST-019",
        "MANIFEST-005",
        "MANIFEST-022",
        "MANIFEST-018",
        "MANIFEST-041",
        "MANIFEST-016",
        "MANIFEST-044",
        "MANIFEST-025",
        "MANIFEST-031",
        "MANIFEST-037",
        "MANIFEST-006",
        "MANIFEST-030",
        "MANIFEST-029",
        "MANIFEST-004",
        "MANIFEST-039",
        "MANIFEST-042",
        "MANIFEST-043",
        "MANIFEST-023"
      ],
      "coverage_count": 45
    },
    {
      "validator": {
        "rule_id": "MD_MANIFEST_039",
        "module": "sot_validator_core",
        "file": "sot_validator_core.py",
        "class": "SoTValidator",
        "function": "validate_md_manifest_039",
        "description": "MD-MANIFEST-039: manifest.yaml MUSS observability.health_checks.readiness definieren"
      },
      "matched_rules": [
        "MANIFEST-009",
        "MANIFEST-010",
        "MANIFEST-003",
        "MANIFEST-026",
        "MANIFEST-002",
        "MANIFEST-012",
        "MANIFEST-011",
        "MANIFEST-036",
        "MANIFEST-040",
        "MANIFEST-027",
        "MANIFEST-015",
        "MANIFEST-032",
        "MANIFEST-034",
        "MANIFEST-038",
        "MANIFEST-008",
        "MANIFEST-033",
        "MANIFEST-014",
        "MANIFEST-028",
        "MANIFEST-045",
        "MANIFEST-001",
        "MANIFEST-020",
        "MANIFEST-035",
        "MANIFEST-007",
        "MANIFEST-024",
        "MANIFEST-021",
        "MANIFEST-013",
        "MANIFEST-017",
        "MANIFEST-019",
        "MANIFEST-005",
        "MANIFEST-022",
        "MANIFEST-018",
        "MANIFEST-041",
        "MANIFEST-016",
        "MANIFEST-044",
        "MANIFEST-025",
        "MANIFEST-031",
        "MANIFEST-037",
        "MANIFEST-006",
        "MANIFEST-030",
        "MANIFEST-029",
        "MANIFEST-004",
        "MANIFEST-039",
        "MANIFEST-042",
        "MANIFEST-043",
        "MANIFEST-023"
      ],
      "coverage_count": 45
    },
    {
      "validator": {
        "rule_id": "MD_MANIFEST_040",
        "module": "sot_validator_core",
        "file": "sot_validator_core.py",
        "class": "SoTValidator",
        "function": "validate_md_manifest_040",
        "description": "MD-MANIFEST-040: manifest.yaml MUSS development.setup definieren"
      },
      "matched_rules": [
        "MANIFEST-009",
        "MANIFEST-010",
        "MANIFEST-003",
        "MANIFEST-026",
        "MANIFEST-002",
        "MANIFEST-012",
        "MANIFEST-011",
        "MANIFEST-036",
        "MANIFEST-040",
        "MANIFEST-027",
        "MANIFEST-015",
        "MANIFEST-032",
        "MANIFEST-034",
        "MANIFEST-038",
        "MANIFEST-008",
        "MANIFEST-033",
        "MANIFEST-014",
        "MANIFEST-028",
        "MANIFEST-045",
        "MANIFEST-001",
        "MANIFEST-020",
        "MANIFEST-035",
        "MANIFEST-007",
        "MANIFEST-024",
        "MANIFEST-021",
        "MANIFEST-013",
        "MANIFEST-017",
        "MANIFEST-019",
        "MANIFEST-005",
        "MANIFEST-022",
        "MANIFEST-018",
        "MANIFEST-041",
        "MANIFEST-016",
        "MANIFEST-044",
        "MANIFEST-025",
        "MANIFEST-031",
        "MANIFEST-037",
        "MANIFEST-006",
        "MANIFEST-030",
        "MANIFEST-029",
        "MANIFEST-004",
        "MANIFEST-039",
        "MANIFEST-042",
        "MANIFEST-043",
        "MANIFEST-023"
      ],
      "coverage_count": 45
    },
    {
      "validator": {
        "rule_id": "MD_MANIFEST_041",
        "module": "sot_validator_core",
        "file": "sot_validator_core.py",
        "class": "SoTValidator",
        "function": "validate_md_manifest_041",
        "description": "MD-MANIFEST-041: manifest.yaml MUSS development.local_development definieren"
      },
      "matched_rules": [
        "MANIFEST-009",
        "MANIFEST-010",
        "MANIFEST-003",
        "MANIFEST-026",
        "MANIFEST-002",
        "MANIFEST-012",
        "MANIFEST-011",
        "MANIFEST-036",
        "MANIFEST-040",
        "MANIFEST-027",
        "MANIFEST-015",
        "MANIFEST-032",
        "MANIFEST-034",
        "MANIFEST-038",
        "MANIFEST-008",
        "MANIFEST-033",
        "MANIFEST-014",
        "MANIFEST-028",
        "MANIFEST-045",
        "MANIFEST-001",
        "MANIFEST-020",
        "MANIFEST-035",
        "MANIFEST-007",
        "MANIFEST-024",
        "MANIFEST-021",
        "MANIFEST-013",
        "MANIFEST-017",
        "MANIFEST-019",
        "MANIFEST-005",
        "MANIFEST-022",
        "MANIFEST-018",
        "MANIFEST-041",
        "MANIFEST-016",
        "MANIFEST-044",
        "MANIFEST-025",
        "MANIFEST-031",
        "MANIFEST-037",
        "MANIFEST-006",
        "MANIFEST-030",
        "MANIFEST-029",
        "MANIFEST-004",
        "MANIFEST-039",
        "MANIFEST-042",
        "MANIFEST-043",
        "MANIFEST-023"
      ],
      "coverage_count": 45
    },
    {
      "validator": {
        "rule_id": "MD_MANIFEST_042",
        "module": "sot_validator_core",
        "file": "sot_validator_core.py",
        "class": "SoTValidator",
        "function": "validate_md_manifest_042",
        "description": "MD-MANIFEST-042: manifest.yaml MUSS development.pre_commit_hooks definieren"
      },
      "matched_rules": [
        "MANIFEST-009",
        "MANIFEST-010",
        "MANIFEST-003",
        "MANIFEST-026",
        "MANIFEST-002",
        "MANIFEST-012",
        "MANIFEST-011",
        "MANIFEST-036",
        "MANIFEST-040",
        "MANIFEST-027",
        "MANIFEST-015",
        "MANIFEST-032",
        "MANIFEST-034",
        "MANIFEST-038",
        "MANIFEST-008",
        "MANIFEST-033",
        "MANIFEST-014",
        "MANIFEST-028",
        "MANIFEST-045",
        "MANIFEST-001",
        "MANIFEST-020",
        "MANIFEST-035",
        "MANIFEST-007",
        "MANIFEST-024",
        "MANIFEST-021",
        "MANIFEST-013",
        "MANIFEST-017",
        "MANIFEST-019",
        "MANIFEST-005",
        "MANIFEST-022",
        "MANIFEST-018",
        "MANIFEST-041",
        "MANIFEST-016",
        "MANIFEST-044",
        "MANIFEST-025",
        "MANIFEST-031",
        "MANIFEST-037",
        "MANIFEST-006",
        "MANIFEST-030",
        "MANIFEST-029",
        "MANIFEST-004",
        "MANIFEST-039",
        "MANIFEST-042",
        "MANIFEST-043",
        "MANIFEST-023"
      ],
      "coverage_count": 45
    },
    {
      "validator": {
        "rule_id": "MD_MANIFEST_046",
        "module": "sot_validator_core",
        "file": "sot_validator_core.py",
        "class": "SoTValidator",
        "function": "validate_md_manifest_046",
        "description": "MD-MANIFEST-046: manifest.yaml MUSS performance.baseline_benchmarks definieren"
      },
      "matched_rules": [
        "MANIFEST-009",
        "MANIFEST-010",
        "MANIFEST-003",
        "MANIFEST-026",
        "MANIFEST-002",
        "MANIFEST-012",
        "MANIFEST-011",
        "MANIFEST-036",
        "MANIFEST-040",
        "MANIFEST-027",
        "MANIFEST-015",
        "MANIFEST-032",
        "MANIFEST-034",
        "MANIFEST-038",
        "MANIFEST-008",
        "MANIFEST-033",
        "MANIFEST-014",
        "MANIFEST-028",
        "MANIFEST-045",
        "MANIFEST-001",
        "MANIFEST-020",
        "MANIFEST-035",
        "MANIFEST-007",
        "MANIFEST-024",
        "MANIFEST-021",
        "MANIFEST-013",
        "MANIFEST-017",
        "MANIFEST-019",
        "MANIFEST-005",
        "MANIFEST-022",
        "MANIFEST-018",
        "MANIFEST-041",
        "MANIFEST-016",
        "MANIFEST-044",
        "MANIFEST-025",
        "MANIFEST-031",
        "MANIFEST-037",
        "MANIFEST-006",
        "MANIFEST-030",
        "MANIFEST-029",
        "MANIFEST-004",
        "MANIFEST-039",
        "MANIFEST-042",
        "MANIFEST-043",
        "MANIFEST-023"
      ],
      "coverage_count": 45
    },
    {
      "validator": {
        "rule_id": "MD_MANIFEST_047",
        "module": "sot_validator_core",
        "file": "sot_validator_core.py",
        "class": "SoTValidator",
        "function": "validate_md_manifest_047",
        "description": "MD-MANIFEST-047: manifest.yaml MUSS performance.optimization_targets definieren"
      },
      "matched_rules": [
        "MANIFEST-009",
        "MANIFEST-010",
        "MANIFEST-003",
        "MANIFEST-026",
        "MANIFEST-002",
        "MANIFEST-012",
        "MANIFEST-011",
        "MANIFEST-036",
        "MANIFEST-040",
        "MANIFEST-027",
        "MANIFEST-015",
        "MANIFEST-032",
        "MANIFEST-034",
        "MANIFEST-038",
        "MANIFEST-008",
        "MANIFEST-033",
        "MANIFEST-014",
        "MANIFEST-028",
        "MANIFEST-045",
        "MANIFEST-001",
        "MANIFEST-020",
        "MANIFEST-035",
        "MANIFEST-007",
        "MANIFEST-024",
        "MANIFEST-021",
        "MANIFEST-013",
        "MANIFEST-017",
        "MANIFEST-019",
        "MANIFEST-005",
        "MANIFEST-022",
        "MANIFEST-018",
        "MANIFEST-041",
        "MANIFEST-016",
        "MANIFEST-044",
        "MANIFEST-025",
        "MANIFEST-031",
        "MANIFEST-037",
        "MANIFEST-006",
        "MANIFEST-030",
        "MANIFEST-029",
        "MANIFEST-004",
        "MANIFEST-039",
        "MANIFEST-042",
        "MANIFEST-043",
        "MANIFEST-023"
      ],
      "coverage_count": 45
    },
    {
      "validator": {
        "rule_id": "MD_MANIFEST_048",
        "module": "sot_validator_core",
        "file": "sot_validator_core.py",
        "class": "SoTValidator",
        "function": "validate_md_manifest_048",
        "description": "MD-MANIFEST-048: manifest.yaml MUSS performance.resource_requirements definieren"
      },
      "matched_rules": [
        "MANIFEST-009",
        "MANIFEST-010",
        "MANIFEST-003",
        "MANIFEST-026",
        "MANIFEST-002",
        "MANIFEST-012",
        "MANIFEST-011",
        "MANIFEST-036",
        "MANIFEST-040",
        "MANIFEST-027",
        "MANIFEST-015",
        "MANIFEST-032",
        "MANIFEST-034",
        "MANIFEST-038",
        "MANIFEST-008",
        "MANIFEST-033",
        "MANIFEST-014",
        "MANIFEST-028",
        "MANIFEST-045",
        "MANIFEST-001",
        "MANIFEST-020",
        "MANIFEST-035",
        "MANIFEST-007",
        "MANIFEST-024",
        "MANIFEST-021",
        "MANIFEST-013",
        "MANIFEST-017",
        "MANIFEST-019",
        "MANIFEST-005",
        "MANIFEST-022",
        "MANIFEST-018",
        "MANIFEST-041",
        "MANIFEST-016",
        "MANIFEST-044",
        "MANIFEST-025",
        "MANIFEST-031",
        "MANIFEST-037",
        "MANIFEST-006",
        "MANIFEST-030",
        "MANIFEST-029",
        "MANIFEST-004",
        "MANIFEST-039",
        "MANIFEST-042",
        "MANIFEST-043",
        "MANIFEST-023"
      ],
      "coverage_count": 45
    },
    {
      "validator": {
        "rule_id": "MD_MANIFEST_049",
        "module": "sot_validator_core",
        "file": "sot_validator_core.py",
        "class": "SoTValidator",
        "function": "validate_md_manifest_049",
        "description": "MD-MANIFEST-049: manifest.yaml MUSS changelog.location=CHANGELOG.md definieren"
      },
      "matched_rules": [
        "MANIFEST-009",
        "MANIFEST-010",
        "MANIFEST-003",
        "MANIFEST-026",
        "MANIFEST-002",
        "MANIFEST-012",
        "MANIFEST-011",
        "MANIFEST-036",
        "MANIFEST-040",
        "MANIFEST-027",
        "MANIFEST-015",
        "MANIFEST-032",
        "MANIFEST-034",
        "MANIFEST-038",
        "MANIFEST-008",
        "MANIFEST-033",
        "MANIFEST-014",
        "MANIFEST-028",
        "MANIFEST-045",
        "MANIFEST-001",
        "MANIFEST-020",
        "MANIFEST-035",
        "MANIFEST-007",
        "MANIFEST-024",
        "MANIFEST-021",
        "MANIFEST-013",
        "MANIFEST-017",
        "MANIFEST-019",
        "MANIFEST-005",
        "MANIFEST-022",
        "MANIFEST-018",
        "MANIFEST-041",
        "MANIFEST-016",
        "MANIFEST-044",
        "MANIFEST-025",
        "MANIFEST-031",
        "MANIFEST-037",
        "MANIFEST-006",
        "MANIFEST-030",
        "MANIFEST-029",
        "MANIFEST-004",
        "MANIFEST-039",
        "MANIFEST-042",
        "MANIFEST-043",
        "MANIFEST-023"
      ],
      "coverage_count": 45
    },
    {
      "validator": {
        "rule_id": "MD_MANIFEST_050",
        "module": "sot_validator_core",
        "file": "sot_validator_core.py",
        "class": "SoTValidator",
        "function": "validate_md_manifest_050",
        "description": "MD-MANIFEST-050: manifest.yaml MUSS support.contacts definieren"
      },
      "matched_rules": [
        "MANIFEST-009",
        "MANIFEST-010",
        "MANIFEST-003",
        "MANIFEST-026",
        "MANIFEST-002",
        "MANIFEST-012",
        "MANIFEST-011",
        "MANIFEST-036",
        "MANIFEST-040",
        "MANIFEST-027",
        "MANIFEST-015",
        "MANIFEST-032",
        "MANIFEST-034",
        "MANIFEST-038",
        "MANIFEST-008",
        "MANIFEST-033",
        "MANIFEST-014",
        "MANIFEST-028",
        "MANIFEST-045",
        "MANIFEST-001",
        "MANIFEST-020",
        "MANIFEST-035",
        "MANIFEST-007",
        "MANIFEST-024",
        "MANIFEST-021",
        "MANIFEST-013",
        "MANIFEST-017",
        "MANIFEST-019",
        "MANIFEST-005",
        "MANIFEST-022",
        "MANIFEST-018",
        "MANIFEST-041",
        "MANIFEST-016",
        "MANIFEST-044",
        "MANIFEST-025",
        "MANIFEST-031",
        "MANIFEST-037",
        "MANIFEST-006",
        "MANIFEST-030",
        "MANIFEST-029",
        "MANIFEST-004",
        "MANIFEST-039",
        "MANIFEST-042",
        "MANIFEST-043",
        "MANIFEST-023"
      ],
      "coverage_count": 45
    },
    {
      "validator": {
        "rule_id": "MD_POLICY_009",
        "module": "sot_validator_core",
        "file": "sot_validator_core.py",
        "class": "SoTValidator",
        "function": "validate_md_policy_009",
        "description": "MD-POLICY-009: Hashing MUSS deterministisch sein"
      },
      "matched_rules": [],
      "coverage_count": 0
    },
    {
      "validator": {
        "rule_id": "MD_POLICY_012",
        "module": "sot_validator_core",
        "file": "sot_validator_core.py",
        "class": "SoTValidator",
        "function": "validate_md_policy_012",
        "description": "MD-POLICY-012: Purpose Limitation MUSS erzwungen werden"
      },
      "matched_rules": [],
      "coverage_count": 0
    },
    {
      "validator": {
        "rule_id": "MD_POLICY_023",
        "module": "sot_validator_core",
        "file": "sot_validator_core.py",
        "class": "SoTValidator",
        "function": "validate_md_policy_023",
        "description": "MD-POLICY-023: Hourly Anchoring MUSS implementiert sein"
      },
      "matched_rules": [],
      "coverage_count": 0
    },
    {
      "validator": {
        "rule_id": "MD_POLICY_027",
        "module": "sot_validator_core",
        "file": "sot_validator_core.py",
        "class": "SoTValidator",
        "function": "validate_md_policy_027",
        "description": "MD-POLICY-027: Encryption MUSS AES-256-GCM verwenden"
      },
      "matched_rules": [],
      "coverage_count": 0
    },
    {
      "validator": {
        "rule_id": "MD_POLICY_028",
        "module": "sot_validator_core",
        "file": "sot_validator_core.py",
        "class": "SoTValidator",
        "function": "validate_md_policy_028",
        "description": "MD-POLICY-028: TLS 1.3 MUSS für in-transit encryption verwendet werden"
      },
      "matched_rules": [],
      "coverage_count": 0
    },
    {
      "validator": {
        "rule_id": "MD_PRINC_007",
        "module": "sot_validator_core",
        "file": "sot_validator_core.py",
        "class": "SoTValidator",
        "function": "validate_md_princ_007",
        "description": "MD-PRINC-007: RBAC MUSS für alle Zugriffe implementiert sein"
      },
      "matched_rules": [
        "PRINC-DOCS-AS-CODE-050",
        "PRINC-DETERMINISTIC-020",
        "PRINC-DETERMINISTIC-018",
        "PRINC-ZERO-TRUST-027",
        "PRINC-CONTRACT-FIRST-005",
        "PRINC-DOCS-AS-CODE-047",
        "PRINC-CONTRACT-FIRST-002",
        "PRINC-SCALABILITY-043",
        "PRINC-SEPARATION-009",
        "PRINC-SEPARATION-006",
        "PRINC-OBSERVABILITY-034",
        "PRINC-BIAS-AWARE-037",
        "PRINC-BIAS-AWARE-039",
        "PRINC-DETERMINISTIC-019",
        "PRINC-MULTI-IMPL-015",
        "PRINC-DOCS-AS-CODE-048",
        "PRINC-EVIDENCE-BASED-025",
        "PRINC-SEPARATION-008",
        "PRINC-CONTRACT-FIRST-004",
        "PRINC-SCALABILITY-046",
        "PRINC-OBSERVABILITY-035",
        "PRINC-EVIDENCE-BASED-026",
        "PRINC-SEPARATION-007",
        "PRINC-DETERMINISTIC-017",
        "PRINC-ZERO-TRUST-028",
        "PRINC-EVIDENCE-BASED-023",
        "PRINC-SEPARATION-011",
        "PRINC-ZERO-TRUST-030",
        "PRINC-MULTI-IMPL-014",
        "PRINC-MULTI-IMPL-013",
        "PRINC-BIAS-AWARE-040",
        "PRINC-BIAS-AWARE-038",
        "PRINC-DOCS-AS-CODE-051",
        "PRINC-DETERMINISTIC-021",
        "PRINC-CONTRACT-FIRST-003",
        "PRINC-SCALABILITY-045",
        "PRINC-DOCS-AS-CODE-049",
        "PRINC-OBSERVABILITY-033",
        "PRINC-CONTRACT-FIRST-001",
        "PRINC-OBSERVABILITY-032",
        "PRINC-SEPARATION-010",
        "PRINC-OBSERVABILITY-036",
        "PRINC-EVIDENCE-BASED-024",
        "PRINC-SCALABILITY-044",
        "PRINC-ZERO-TRUST-031",
        "PRINC-MULTI-IMPL-016",
        "PRINC-MULTI-IMPL-012",
        "PRINC-ZERO-TRUST-029",
        "PRINC-SCALABILITY-042",
        "PRINC-EVIDENCE-BASED-022",
        "PRINC-BIAS-AWARE-041"
      ],
      "coverage_count": 51
    },
    {
      "validator": {
        "rule_id": "MD_PRINC_009",
        "module": "sot_validator_core",
        "file": "sot_validator_core.py",
        "class": "SoTValidator",
        "function": "validate_md_princ_009",
        "description": "MD-PRINC-009: Continuous Vulnerability Scanning MUSS implementiert sein"
      },
      "matched_rules": [
        "PRINC-DOCS-AS-CODE-050",
        "PRINC-DETERMINISTIC-020",
        "PRINC-DETERMINISTIC-018",
        "PRINC-ZERO-TRUST-027",
        "PRINC-CONTRACT-FIRST-005",
        "PRINC-DOCS-AS-CODE-047",
        "PRINC-CONTRACT-FIRST-002",
        "PRINC-SCALABILITY-043",
        "PRINC-SEPARATION-009",
        "PRINC-SEPARATION-006",
        "PRINC-OBSERVABILITY-034",
        "PRINC-BIAS-AWARE-037",
        "PRINC-BIAS-AWARE-039",
        "PRINC-DETERMINISTIC-019",
        "PRINC-MULTI-IMPL-015",
        "PRINC-DOCS-AS-CODE-048",
        "PRINC-EVIDENCE-BASED-025",
        "PRINC-SEPARATION-008",
        "PRINC-CONTRACT-FIRST-004",
        "PRINC-SCALABILITY-046",
        "PRINC-OBSERVABILITY-035",
        "PRINC-EVIDENCE-BASED-026",
        "PRINC-SEPARATION-007",
        "PRINC-DETERMINISTIC-017",
        "PRINC-ZERO-TRUST-028",
        "PRINC-EVIDENCE-BASED-023",
        "PRINC-SEPARATION-011",
        "PRINC-ZERO-TRUST-030",
        "PRINC-MULTI-IMPL-014",
        "PRINC-MULTI-IMPL-013",
        "PRINC-BIAS-AWARE-040",
        "PRINC-BIAS-AWARE-038",
        "PRINC-DOCS-AS-CODE-051",
        "PRINC-DETERMINISTIC-021",
        "PRINC-CONTRACT-FIRST-003",
        "PRINC-SCALABILITY-045",
        "PRINC-DOCS-AS-CODE-049",
        "PRINC-OBSERVABILITY-033",
        "PRINC-CONTRACT-FIRST-001",
        "PRINC-OBSERVABILITY-032",
        "PRINC-SEPARATION-010",
        "PRINC-OBSERVABILITY-036",
        "PRINC-EVIDENCE-BASED-024",
        "PRINC-SCALABILITY-044",
        "PRINC-ZERO-TRUST-031",
        "PRINC-MULTI-IMPL-016",
        "PRINC-MULTI-IMPL-012",
        "PRINC-ZERO-TRUST-029",
        "PRINC-SCALABILITY-042",
        "PRINC-EVIDENCE-BASED-022",
        "PRINC-BIAS-AWARE-041"
      ],
      "coverage_count": 51
    },
    {
      "validator": {
        "rule_id": "MD_PRINC_013",
        "module": "sot_validator_core",
        "file": "sot_validator_core.py",
        "class": "SoTValidator",
        "function": "validate_md_princ_013",
        "description": "MD-PRINC-013: AlertManager MUSS für Alerting integriert sein"
      },
      "matched_rules": [
        "PRINC-DOCS-AS-CODE-050",
        "PRINC-DETERMINISTIC-020",
        "PRINC-DETERMINISTIC-018",
        "PRINC-ZERO-TRUST-027",
        "PRINC-CONTRACT-FIRST-005",
        "PRINC-DOCS-AS-CODE-047",
        "PRINC-CONTRACT-FIRST-002",
        "PRINC-SCALABILITY-043",
        "PRINC-SEPARATION-009",
        "PRINC-SEPARATION-006",
        "PRINC-OBSERVABILITY-034",
        "PRINC-BIAS-AWARE-037",
        "PRINC-BIAS-AWARE-039",
        "PRINC-DETERMINISTIC-019",
        "PRINC-MULTI-IMPL-015",
        "PRINC-DOCS-AS-CODE-048",
        "PRINC-EVIDENCE-BASED-025",
        "PRINC-SEPARATION-008",
        "PRINC-CONTRACT-FIRST-004",
        "PRINC-SCALABILITY-046",
        "PRINC-OBSERVABILITY-035",
        "PRINC-EVIDENCE-BASED-026",
        "PRINC-SEPARATION-007",
        "PRINC-DETERMINISTIC-017",
        "PRINC-ZERO-TRUST-028",
        "PRINC-EVIDENCE-BASED-023",
        "PRINC-SEPARATION-011",
        "PRINC-ZERO-TRUST-030",
        "PRINC-MULTI-IMPL-014",
        "PRINC-MULTI-IMPL-013",
        "PRINC-BIAS-AWARE-040",
        "PRINC-BIAS-AWARE-038",
        "PRINC-DOCS-AS-CODE-051",
        "PRINC-DETERMINISTIC-021",
        "PRINC-CONTRACT-FIRST-003",
        "PRINC-SCALABILITY-045",
        "PRINC-DOCS-AS-CODE-049",
        "PRINC-OBSERVABILITY-033",
        "PRINC-CONTRACT-FIRST-001",
        "PRINC-OBSERVABILITY-032",
        "PRINC-SEPARATION-010",
        "PRINC-OBSERVABILITY-036",
        "PRINC-EVIDENCE-BASED-024",
        "PRINC-SCALABILITY-044",
        "PRINC-ZERO-TRUST-031",
        "PRINC-MULTI-IMPL-016",
        "PRINC-MULTI-IMPL-012",
        "PRINC-ZERO-TRUST-029",
        "PRINC-SCALABILITY-042",
        "PRINC-EVIDENCE-BASED-022",
        "PRINC-BIAS-AWARE-041"
      ],
      "coverage_count": 51
    },
    {
      "validator": {
        "rule_id": "MD_PRINC_018",
        "module": "sot_validator_core",
        "file": "sot_validator_core.py",
        "class": "SoTValidator",
        "function": "validate_md_princ_018",
        "description": "MD-PRINC-018: Load Balancing MUSS konfiguriert sein"
      },
      "matched_rules": [
        "PRINC-DOCS-AS-CODE-050",
        "PRINC-DETERMINISTIC-020",
        "PRINC-DETERMINISTIC-018",
        "PRINC-ZERO-TRUST-027",
        "PRINC-CONTRACT-FIRST-005",
        "PRINC-DOCS-AS-CODE-047",
        "PRINC-CONTRACT-FIRST-002",
        "PRINC-SCALABILITY-043",
        "PRINC-SEPARATION-009",
        "PRINC-SEPARATION-006",
        "PRINC-OBSERVABILITY-034",
        "PRINC-BIAS-AWARE-037",
        "PRINC-BIAS-AWARE-039",
        "PRINC-DETERMINISTIC-019",
        "PRINC-MULTI-IMPL-015",
        "PRINC-DOCS-AS-CODE-048",
        "PRINC-EVIDENCE-BASED-025",
        "PRINC-SEPARATION-008",
        "PRINC-CONTRACT-FIRST-004",
        "PRINC-SCALABILITY-046",
        "PRINC-OBSERVABILITY-035",
        "PRINC-EVIDENCE-BASED-026",
        "PRINC-SEPARATION-007",
        "PRINC-DETERMINISTIC-017",
        "PRINC-ZERO-TRUST-028",
        "PRINC-EVIDENCE-BASED-023",
        "PRINC-SEPARATION-011",
        "PRINC-ZERO-TRUST-030",
        "PRINC-MULTI-IMPL-014",
        "PRINC-MULTI-IMPL-013",
        "PRINC-BIAS-AWARE-040",
        "PRINC-BIAS-AWARE-038",
        "PRINC-DOCS-AS-CODE-051",
        "PRINC-DETERMINISTIC-021",
        "PRINC-CONTRACT-FIRST-003",
        "PRINC-SCALABILITY-045",
        "PRINC-DOCS-AS-CODE-049",
        "PRINC-OBSERVABILITY-033",
        "PRINC-CONTRACT-FIRST-001",
        "PRINC-OBSERVABILITY-032",
        "PRINC-SEPARATION-010",
        "PRINC-OBSERVABILITY-036",
        "PRINC-EVIDENCE-BASED-024",
        "PRINC-SCALABILITY-044",
        "PRINC-ZERO-TRUST-031",
        "PRINC-MULTI-IMPL-016",
        "PRINC-MULTI-IMPL-012",
        "PRINC-ZERO-TRUST-029",
        "PRINC-SCALABILITY-042",
        "PRINC-EVIDENCE-BASED-022",
        "PRINC-BIAS-AWARE-041"
      ],
      "coverage_count": 51
    },
    {
      "validator": {
        "rule_id": "MD_PRINC_019",
        "module": "sot_validator_core",
        "file": "sot_validator_core.py",
        "class": "SoTValidator",
        "function": "validate_md_princ_019",
        "description": "MD-PRINC-019: Caching-Strategien MÜSSEN definiert sein"
      },
      "matched_rules": [
        "PRINC-DOCS-AS-CODE-050",
        "PRINC-DETERMINISTIC-020",
        "PRINC-DETERMINISTIC-018",
        "PRINC-ZERO-TRUST-027",
        "PRINC-CONTRACT-FIRST-005",
        "PRINC-DOCS-AS-CODE-047",
        "PRINC-CONTRACT-FIRST-002",
        "PRINC-SCALABILITY-043",
        "PRINC-SEPARATION-009",
        "PRINC-SEPARATION-006",
        "PRINC-OBSERVABILITY-034",
        "PRINC-BIAS-AWARE-037",
        "PRINC-BIAS-AWARE-039",
        "PRINC-DETERMINISTIC-019",
        "PRINC-MULTI-IMPL-015",
        "PRINC-DOCS-AS-CODE-048",
        "PRINC-EVIDENCE-BASED-025",
        "PRINC-SEPARATION-008",
        "PRINC-CONTRACT-FIRST-004",
        "PRINC-SCALABILITY-046",
        "PRINC-OBSERVABILITY-035",
        "PRINC-EVIDENCE-BASED-026",
        "PRINC-SEPARATION-007",
        "PRINC-DETERMINISTIC-017",
        "PRINC-ZERO-TRUST-028",
        "PRINC-EVIDENCE-BASED-023",
        "PRINC-SEPARATION-011",
        "PRINC-ZERO-TRUST-030",
        "PRINC-MULTI-IMPL-014",
        "PRINC-MULTI-IMPL-013",
        "PRINC-BIAS-AWARE-040",
        "PRINC-BIAS-AWARE-038",
        "PRINC-DOCS-AS-CODE-051",
        "PRINC-DETERMINISTIC-021",
        "PRINC-CONTRACT-FIRST-003",
        "PRINC-SCALABILITY-045",
        "PRINC-DOCS-AS-CODE-049",
        "PRINC-OBSERVABILITY-033",
        "PRINC-CONTRACT-FIRST-001",
        "PRINC-OBSERVABILITY-032",
        "PRINC-SEPARATION-010",
        "PRINC-OBSERVABILITY-036",
        "PRINC-EVIDENCE-BASED-024",
        "PRINC-SCALABILITY-044",
        "PRINC-ZERO-TRUST-031",
        "PRINC-MULTI-IMPL-016",
        "PRINC-MULTI-IMPL-012",
        "PRINC-ZERO-TRUST-029",
        "PRINC-SCALABILITY-042",
        "PRINC-EVIDENCE-BASED-022",
        "PRINC-BIAS-AWARE-041"
      ],
      "coverage_count": 51
    },
    {
      "validator": {
        "rule_id": "MD_PRINC_020",
        "module": "sot_validator_core",
        "file": "sot_validator_core.py",
        "class": "SoTValidator",
        "function": "validate_md_princ_020",
        "description": "MD-PRINC-020: Performance-Benchmarks MÜSSEN als Gates definiert sein"
      },
      "matched_rules": [
        "PRINC-DOCS-AS-CODE-050",
        "PRINC-DETERMINISTIC-020",
        "PRINC-DETERMINISTIC-018",
        "PRINC-ZERO-TRUST-027",
        "PRINC-CONTRACT-FIRST-005",
        "PRINC-DOCS-AS-CODE-047",
        "PRINC-CONTRACT-FIRST-002",
        "PRINC-SCALABILITY-043",
        "PRINC-SEPARATION-009",
        "PRINC-SEPARATION-006",
        "PRINC-OBSERVABILITY-034",
        "PRINC-BIAS-AWARE-037",
        "PRINC-BIAS-AWARE-039",
        "PRINC-DETERMINISTIC-019",
        "PRINC-MULTI-IMPL-015",
        "PRINC-DOCS-AS-CODE-048",
        "PRINC-EVIDENCE-BASED-025",
        "PRINC-SEPARATION-008",
        "PRINC-CONTRACT-FIRST-004",
        "PRINC-SCALABILITY-046",
        "PRINC-OBSERVABILITY-035",
        "PRINC-EVIDENCE-BASED-026",
        "PRINC-SEPARATION-007",
        "PRINC-DETERMINISTIC-017",
        "PRINC-ZERO-TRUST-028",
        "PRINC-EVIDENCE-BASED-023",
        "PRINC-SEPARATION-011",
        "PRINC-ZERO-TRUST-030",
        "PRINC-MULTI-IMPL-014",
        "PRINC-MULTI-IMPL-013",
        "PRINC-BIAS-AWARE-040",
        "PRINC-BIAS-AWARE-038",
        "PRINC-DOCS-AS-CODE-051",
        "PRINC-DETERMINISTIC-021",
        "PRINC-CONTRACT-FIRST-003",
        "PRINC-SCALABILITY-045",
        "PRINC-DOCS-AS-CODE-049",
        "PRINC-OBSERVABILITY-033",
        "PRINC-CONTRACT-FIRST-001",
        "PRINC-OBSERVABILITY-032",
        "PRINC-SEPARATION-010",
        "PRINC-OBSERVABILITY-036",
        "PRINC-EVIDENCE-BASED-024",
        "PRINC-SCALABILITY-044",
        "PRINC-ZERO-TRUST-031",
        "PRINC-MULTI-IMPL-016",
        "PRINC-MULTI-IMPL-012",
        "PRINC-ZERO-TRUST-029",
        "PRINC-SCALABILITY-042",
        "PRINC-EVIDENCE-BASED-022",
        "PRINC-BIAS-AWARE-041"
      ],
      "coverage_count": 51
    },
    {
      "validator": {
        "rule_id": "MD_STRUCT_009",
        "module": "sot_validator_core",
        "file": "sot_validator_core.py",
        "class": "SoTValidator",
        "function": "validate_md_struct_009",
        "description": "MD-STRUCT-009: Pfad {ROOT}/shards/{SHARD}/chart.yaml MUSS existieren"
      },
      "matched_rules": [],
      "coverage_count": 0
    },
    {
      "validator": {
        "rule_id": "MD_STRUCT_010",
        "module": "sot_validator_core",
        "file": "sot_validator_core.py",
        "class": "SoTValidator",
        "function": "validate_md_struct_010",
        "description": "MD-STRUCT-010: Pfad .../implementations/{IMPL}/manifest.yaml MUSS existieren"
      },
      "matched_rules": [],
      "coverage_count": 0
    },
    {
      "validator": {
        "rule_id": "MR001",
        "module": "sot_validator_core",
        "file": "sot_validator_core.py",
        "class": "SoTValidator",
        "function": "validate_mr001",
        "description": "MR001: Jede Root-Shard-Kombination MUSS eindeutig adressierbar sein"
      },
      "matched_rules": [],
      "coverage_count": 0
    },
    {
      "validator": {
        "rule_id": "MR002",
        "module": "sot_validator_core",
        "file": "sot_validator_core.py",
        "class": "SoTValidator",
        "function": "validate_mr002",
        "description": "MR002: Hash-Ledger MUSS über alle 384 Felder geführt werden"
      },
      "matched_rules": [],
      "coverage_count": 0
    },
    {
      "validator": {
        "rule_id": "MR003",
        "module": "sot_validator_core",
        "file": "sot_validator_core.py",
        "class": "SoTValidator",
        "function": "validate_mr003",
        "description": "MR003: Jedes Root-Shard-Paar MUSS isoliert entwickelbar sein"
      },
      "matched_rules": [],
      "coverage_count": 0
    },
    {
      "validator": {
        "rule_id": "MS001",
        "module": "sot_validator_core",
        "file": "sot_validator_core.py",
        "class": "SoTValidator",
        "function": "validate_ms001",
        "description": "MS001: manifest.yaml MUSS implementation_id, implementation_version, chart_version haben"
      },
      "matched_rules": [
        "MANIFEST-009",
        "MANIFEST-010",
        "MANIFEST-003",
        "MANIFEST-026",
        "MANIFEST-002",
        "MANIFEST-012",
        "MANIFEST-011",
        "MANIFEST-036",
        "MANIFEST-040",
        "MANIFEST-027",
        "MANIFEST-015",
        "MANIFEST-032",
        "MANIFEST-034",
        "MANIFEST-038",
        "MANIFEST-008",
        "MANIFEST-033",
        "MANIFEST-014",
        "MANIFEST-028",
        "MANIFEST-045",
        "MANIFEST-001",
        "MANIFEST-020",
        "MANIFEST-035",
        "MANIFEST-007",
        "MANIFEST-024",
        "MANIFEST-021",
        "MANIFEST-013",
        "MANIFEST-017",
        "MANIFEST-019",
        "MANIFEST-005",
        "MANIFEST-022",
        "MANIFEST-018",
        "MANIFEST-041",
        "MANIFEST-016",
        "MANIFEST-044",
        "MANIFEST-025",
        "MANIFEST-031",
        "MANIFEST-037",
        "MANIFEST-006",
        "MANIFEST-030",
        "MANIFEST-029",
        "MANIFEST-004",
        "MANIFEST-039",
        "MANIFEST-042",
        "MANIFEST-043",
        "MANIFEST-023"
      ],
      "coverage_count": 45
    },
    {
      "validator": {
        "rule_id": "MS002",
        "module": "sot_validator_core",
        "file": "sot_validator_core.py",
        "class": "SoTValidator",
        "function": "validate_ms002",
        "description": "MS002: manifest.yaml MUSS technology_stack.language mit name und version definieren"
      },
      "matched_rules": [
        "MANIFEST-009",
        "MANIFEST-010",
        "MANIFEST-003",
        "MANIFEST-026",
        "MANIFEST-002",
        "MANIFEST-012",
        "MANIFEST-011",
        "MANIFEST-036",
        "MANIFEST-040",
        "MANIFEST-027",
        "MANIFEST-015",
        "MANIFEST-032",
        "MANIFEST-034",
        "MANIFEST-038",
        "MANIFEST-008",
        "MANIFEST-033",
        "MANIFEST-014",
        "MANIFEST-028",
        "MANIFEST-045",
        "MANIFEST-001",
        "MANIFEST-020",
        "MANIFEST-035",
        "MANIFEST-007",
        "MANIFEST-024",
        "MANIFEST-021",
        "MANIFEST-013",
        "MANIFEST-017",
        "MANIFEST-019",
        "MANIFEST-005",
        "MANIFEST-022",
        "MANIFEST-018",
        "MANIFEST-041",
        "MANIFEST-016",
        "MANIFEST-044",
        "MANIFEST-025",
        "MANIFEST-031",
        "MANIFEST-037",
        "MANIFEST-006",
        "MANIFEST-030",
        "MANIFEST-029",
        "MANIFEST-004",
        "MANIFEST-039",
        "MANIFEST-042",
        "MANIFEST-043",
        "MANIFEST-023"
      ],
      "coverage_count": 45
    },
    {
      "validator": {
        "rule_id": "MS003",
        "module": "sot_validator_core",
        "file": "sot_validator_core.py",
        "class": "SoTValidator",
        "function": "validate_ms003",
        "description": "MS003: manifest.yaml MUSS artifacts.source_code.location definieren"
      },
      "matched_rules": [
        "MANIFEST-009",
        "MANIFEST-010",
        "MANIFEST-003",
        "MANIFEST-026",
        "MANIFEST-002",
        "MANIFEST-012",
        "MANIFEST-011",
        "MANIFEST-036",
        "MANIFEST-040",
        "MANIFEST-027",
        "MANIFEST-015",
        "MANIFEST-032",
        "MANIFEST-034",
        "MANIFEST-038",
        "MANIFEST-008",
        "MANIFEST-033",
        "MANIFEST-014",
        "MANIFEST-028",
        "MANIFEST-045",
        "MANIFEST-001",
        "MANIFEST-020",
        "MANIFEST-035",
        "MANIFEST-007",
        "MANIFEST-024",
        "MANIFEST-021",
        "MANIFEST-013",
        "MANIFEST-017",
        "MANIFEST-019",
        "MANIFEST-005",
        "MANIFEST-022",
        "MANIFEST-018",
        "MANIFEST-041",
        "MANIFEST-016",
        "MANIFEST-044",
        "MANIFEST-025",
        "MANIFEST-031",
        "MANIFEST-037",
        "MANIFEST-006",
        "MANIFEST-030",
        "MANIFEST-029",
        "MANIFEST-004",
        "MANIFEST-039",
        "MANIFEST-042",
        "MANIFEST-043",
        "MANIFEST-023"
      ],
      "coverage_count": 45
    },
    {
      "validator": {
        "rule_id": "MS004",
        "module": "sot_validator_core",
        "file": "sot_validator_core.py",
        "class": "SoTValidator",
        "function": "validate_ms004",
        "description": "MS004: manifest.yaml MUSS dependencies mit Packages und Services auflisten"
      },
      "matched_rules": [
        "MANIFEST-009",
        "MANIFEST-010",
        "MANIFEST-003",
        "MANIFEST-026",
        "MANIFEST-002",
        "MANIFEST-012",
        "MANIFEST-011",
        "MANIFEST-036",
        "MANIFEST-040",
        "MANIFEST-027",
        "MANIFEST-015",
        "MANIFEST-032",
        "MANIFEST-034",
        "MANIFEST-038",
        "MANIFEST-008",
        "MANIFEST-033",
        "MANIFEST-014",
        "MANIFEST-028",
        "MANIFEST-045",
        "MANIFEST-001",
        "MANIFEST-020",
        "MANIFEST-035",
        "MANIFEST-007",
        "MANIFEST-024",
        "MANIFEST-021",
        "MANIFEST-013",
        "MANIFEST-017",
        "MANIFEST-019",
        "MANIFEST-005",
        "MANIFEST-022",
        "MANIFEST-018",
        "MANIFEST-041",
        "MANIFEST-016",
        "MANIFEST-044",
        "MANIFEST-025",
        "MANIFEST-031",
        "MANIFEST-037",
        "MANIFEST-006",
        "MANIFEST-030",
        "MANIFEST-029",
        "MANIFEST-004",
        "MANIFEST-039",
        "MANIFEST-042",
        "MANIFEST-043",
        "MANIFEST-023"
      ],
      "coverage_count": 45
    },
    {
      "validator": {
        "rule_id": "MS005",
        "module": "sot_validator_core",
        "file": "sot_validator_core.py",
        "class": "SoTValidator",
        "function": "validate_ms005",
        "description": "MS005: manifest.yaml MUSS testing mit unit, integration, contract Tests definieren"
      },
      "matched_rules": [
        "MANIFEST-009",
        "MANIFEST-010",
        "MANIFEST-003",
        "MANIFEST-026",
        "MANIFEST-002",
        "MANIFEST-012",
        "MANIFEST-011",
        "MANIFEST-036",
        "MANIFEST-040",
        "MANIFEST-027",
        "MANIFEST-015",
        "MANIFEST-032",
        "MANIFEST-034",
        "MANIFEST-038",
        "MANIFEST-008",
        "MANIFEST-033",
        "MANIFEST-014",
        "MANIFEST-028",
        "MANIFEST-045",
        "MANIFEST-001",
        "MANIFEST-020",
        "MANIFEST-035",
        "MANIFEST-007",
        "MANIFEST-024",
        "MANIFEST-021",
        "MANIFEST-013",
        "MANIFEST-017",
        "MANIFEST-019",
        "MANIFEST-005",
        "MANIFEST-022",
        "MANIFEST-018",
        "MANIFEST-041",
        "MANIFEST-016",
        "MANIFEST-044",
        "MANIFEST-025",
        "MANIFEST-031",
        "MANIFEST-037",
        "MANIFEST-006",
        "MANIFEST-030",
        "MANIFEST-029",
        "MANIFEST-004",
        "MANIFEST-039",
        "MANIFEST-042",
        "MANIFEST-043",
        "MANIFEST-023"
      ],
      "coverage_count": 45
    },
    {
      "validator": {
        "rule_id": "MS006",
        "module": "sot_validator_core",
        "file": "sot_validator_core.py",
        "class": "SoTValidator",
        "function": "validate_ms006",
        "description": "MS006: manifest.yaml MUSS observability.logging.pii_redaction: true setzen"
      },
      "matched_rules": [
        "MANIFEST-009",
        "MANIFEST-010",
        "MANIFEST-003",
        "MANIFEST-026",
        "MANIFEST-002",
        "MANIFEST-012",
        "MANIFEST-011",
        "MANIFEST-036",
        "MANIFEST-040",
        "MANIFEST-027",
        "MANIFEST-015",
        "MANIFEST-032",
        "MANIFEST-034",
        "MANIFEST-038",
        "MANIFEST-008",
        "MANIFEST-033",
        "MANIFEST-014",
        "MANIFEST-028",
        "MANIFEST-045",
        "MANIFEST-001",
        "MANIFEST-020",
        "MANIFEST-035",
        "MANIFEST-007",
        "MANIFEST-024",
        "MANIFEST-021",
        "MANIFEST-013",
        "MANIFEST-017",
        "MANIFEST-019",
        "MANIFEST-005",
        "MANIFEST-022",
        "MANIFEST-018",
        "MANIFEST-041",
        "MANIFEST-016",
        "MANIFEST-044",
        "MANIFEST-025",
        "MANIFEST-031",
        "MANIFEST-037",
        "MANIFEST-006",
        "MANIFEST-030",
        "MANIFEST-029",
        "MANIFEST-004",
        "MANIFEST-039",
        "MANIFEST-042",
        "MANIFEST-043",
        "MANIFEST-023"
      ],
      "coverage_count": 45
    },
    {
      "validator": {
        "rule_id": "NETWORK",
        "module": "sot_validator_core",
        "file": "sot_validator_core.py",
        "class": "SoTValidator",
        "function": "validate_network",
        "description": "NETWORK_001-006: Blockchain network validation"
      },
      "matched_rules": [],
      "coverage_count": 0
    },
    {
      "validator": {
        "rule_id": "PII_CAT",
        "module": "sot_validator_core",
        "file": "sot_validator_core.py",
        "class": "SoTValidator",
        "function": "validate_pii_cat",
        "description": "PII_CAT_001-010: PII category validation"
      },
      "matched_rules": [],
      "coverage_count": 0
    },
    {
      "validator": {
        "rule_id": "PROP_TYPE",
        "module": "sot_validator_core",
        "file": "sot_validator_core.py",
        "class": "SoTValidator",
        "function": "validate_prop_type",
        "description": "PROP_TYPE_001-007: Proposal type validation"
      },
      "matched_rules": [],
      "coverage_count": 0
    },
    {
      "validator": {
        "rule_id": "RETENTION",
        "module": "sot_validator_core",
        "file": "sot_validator_core.py",
        "class": "SoTValidator",
        "function": "validate_retention",
        "description": "RETENTION_001-005: Retention period validation"
      },
      "matched_rules": [],
      "coverage_count": 0
    },
    {
      "validator": {
        "rule_id": "REWARD_POOL",
        "module": "sot_validator_core",
        "file": "sot_validator_core.py",
        "class": "SoTValidator",
        "function": "validate_reward_pool",
        "description": "REWARD_POOL_001-005: Reward pool validation"
      },
      "matched_rules": [],
      "coverage_count": 0
    },
    {
      "validator": {
        "rule_id": "SOT_V2",
        "module": "sot_validator_core",
        "file": "sot_validator_core.py",
        "class": "SoTValidator",
        "function": "validate_sot_v2",
        "description": "SOT-V2-0001 to SOT-V2-0189: Contract validation rules."
      },
      "matched_rules": [],
      "coverage_count": 0
    },
    {
      "validator": {
        "rule_id": "SOT_V2_0091",
        "module": "sot_validator_core",
        "file": "sot_validator_core.py",
        "class": "SoTValidator",
        "function": "validate_sot_v2_0091",
        "description": "SOT-V2-0091: grundprinzipien.ausnahmen.allowed_root_files"
      },
      "matched_rules": [],
      "coverage_count": 0
    },
    {
      "validator": {
        "rule_id": "SOT_V2_0092",
        "module": "sot_validator_core",
        "file": "sot_validator_core.py",
        "class": "SoTValidator",
        "function": "validate_sot_v2_0092",
        "description": "SOT-V2-0092: grundprinzipien.critical.structure_exceptions_yaml"
      },
      "matched_rules": [],
      "coverage_count": 0
    },
    {
      "validator": {
        "rule_id": "SOT_V2_0093",
        "module": "sot_validator_core",
        "file": "sot_validator_core.py",
        "class": "SoTValidator",
        "function": "validate_sot_v2_0093",
        "description": "SOT-V2-0093: grundprinzipien.root_level_ausnahmen"
      },
      "matched_rules": [],
      "coverage_count": 0
    },
    {
      "validator": {
        "rule_id": "SOT_V2_0094",
        "module": "sot_validator_core",
        "file": "sot_validator_core.py",
        "class": "SoTValidator",
        "function": "validate_sot_v2_0094",
        "description": "SOT-V2-0094: grundprinzipien.verbindliche_root_module"
      },
      "matched_rules": [],
      "coverage_count": 0
    },
    {
      "validator": {
        "rule_id": "TIER1_MKT",
        "module": "sot_validator_core",
        "file": "sot_validator_core.py",
        "class": "SoTValidator",
        "function": "validate_tier1_mkt",
        "description": "TIER1_MKT_001-007: Tier 1 market validation"
      },
      "matched_rules": [],
      "coverage_count": 0
    },
    {
      "validator": {
        "rule_id": "TS001",
        "module": "sot_validator_core",
        "file": "sot_validator_core.py",
        "class": "SoTValidator",
        "function": "validate_ts001",
        "description": "TS001: Hash-Anchoring MUSS Ethereum Mainnet + Polygon verwenden"
      },
      "matched_rules": [],
      "coverage_count": 0
    },
    {
      "validator": {
        "rule_id": "TS002",
        "module": "sot_validator_core",
        "file": "sot_validator_core.py",
        "class": "SoTValidator",
        "function": "validate_ts002",
        "description": "TS002: System MUSS W3C DID + Verifiable Credentials implementieren"
      },
      "matched_rules": [],
      "coverage_count": 0
    },
    {
      "validator": {
        "rule_id": "TS003",
        "module": "sot_validator_core",
        "file": "sot_validator_core.py",
        "class": "SoTValidator",
        "function": "validate_ts003",
        "description": "TS003: System MUSS IPFS für dezentralen Storage verwenden"
      },
      "matched_rules": [],
      "coverage_count": 0
    },
    {
      "validator": {
        "rule_id": "TS004",
        "module": "sot_validator_core",
        "file": "sot_validator_core.py",
        "class": "SoTValidator",
        "function": "validate_ts004",
        "description": "TS004: Smart Contracts MÜSSEN in Solidity oder Rust geschrieben sein"
      },
      "matched_rules": [],
      "coverage_count": 0
    },
    {
      "validator": {
        "rule_id": "TS005",
        "module": "sot_validator_core",
        "file": "sot_validator_core.py",
        "class": "SoTValidator",
        "function": "validate_ts005",
        "description": "TS005: System MUSS GDPR, eIDAS 2.0, EU AI Act, MiCA erfüllen"
      },
      "matched_rules": [],
      "coverage_count": 0
    },
    {
      "validator": {
        "rule_id": "VG001",
        "module": "sot_validator_core",
        "file": "sot_validator_core.py",
        "class": "SoTValidator",
        "function": "validate_vg001",
        "description": "VG001: Alle Versionen MÜSSEN Semver (MAJOR.MINOR.PATCH) verwenden"
      },
      "matched_rules": [
        "VERSIONING-003",
        "VERSIONING-004",
        "VERSIONING-002",
        "VERSIONING-001"
      ],
      "coverage_count": 4
    },
    {
      "validator": {
        "rule_id": "VG002",
        "module": "sot_validator_core",
        "file": "sot_validator_core.py",
        "class": "SoTValidator",
        "function": "validate_vg002",
        "description": "VG002: Breaking Changes MÜSSEN Migration Guide + Compatibility Layer haben"
      },
      "matched_rules": [
        "GOV-ROLE-008",
        "GOV-ROLE-002",
        "GOV-ROLE-012",
        "GOV-PROCESS-004",
        "GOV-PROMO-002",
        "GOV-PROMO-009",
        "GOV-ROLE-010",
        "GOV-ROLE-001",
        "GOV-ROLE-005",
        "GOV-ROLE-003",
        "GOV-PROMO-010",
        "GOV-PROMO-001",
        "GOV-ROLE-009",
        "GOV-ROLE-007",
        "GOV-PROMO-008",
        "GOV-PROMO-011",
        "GOV-ROLE-011",
        "GOV-PROMO-003",
        "GOV-PROCESS-001",
        "GOV-ROLE-006",
        "GOV-PROCESS-007",
        "GOV-PROMO-006",
        "GOV-PROCESS-005",
        "GOV-ROLE-004",
        "GOV-PROMO-012",
        "GOV-PROCESS-002",
        "GOV-PROMO-007",
        "GOV-PROCESS-003",
        "GOV-PROCESS-006",
        "GOV-PROMO-005",
        "GOV-PROMO-004"
      ],
      "coverage_count": 31
    },
    {
      "validator": {
        "rule_id": "VG003",
        "module": "sot_validator_core",
        "file": "sot_validator_core.py",
        "class": "SoTValidator",
        "function": "validate_vg003",
        "description": "VG003: Deprecations MÜSSEN 180 Tage Notice Period haben"
      },
      "matched_rules": [
        "GOV-ROLE-008",
        "GOV-ROLE-002",
        "GOV-ROLE-012",
        "GOV-PROCESS-004",
        "GOV-PROMO-002",
        "GOV-PROMO-009",
        "GOV-ROLE-010",
        "GOV-ROLE-001",
        "GOV-ROLE-005",
        "GOV-ROLE-003",
        "GOV-PROMO-010",
        "GOV-PROMO-001",
        "GOV-ROLE-009",
        "GOV-ROLE-007",
        "GOV-PROMO-008",
        "GOV-PROMO-011",
        "GOV-ROLE-011",
        "GOV-PROMO-003",
        "GOV-PROCESS-001",
        "GOV-ROLE-006",
        "GOV-PROCESS-007",
        "GOV-PROMO-006",
        "GOV-PROCESS-005",
        "GOV-ROLE-004",
        "GOV-PROMO-012",
        "GOV-PROCESS-002",
        "GOV-PROMO-007",
        "GOV-PROCESS-003",
        "GOV-PROCESS-006",
        "GOV-PROMO-005",
        "GOV-PROMO-004"
      ],
      "coverage_count": 31
    },
    {
      "validator": {
        "rule_id": "VG004",
        "module": "sot_validator_core",
        "file": "sot_validator_core.py",
        "class": "SoTValidator",
        "function": "validate_vg004",
        "description": "VG004: Alle MUST-Capability-Änderungen MÜSSEN RFC-Prozess durchlaufen"
      },
      "matched_rules": [],
      "coverage_count": 0
    },
    {
      "validator": {
        "rule_id": "VG005",
        "module": "sot_validator_core",
        "file": "sot_validator_core.py",
        "class": "SoTValidator",
        "function": "validate_vg005",
        "description": "VG005: Jeder Shard MUSS einen Owner haben"
      },
      "matched_rules": [],
      "coverage_count": 0
    },
    {
      "validator": {
        "rule_id": "VG006",
        "module": "sot_validator_core",
        "file": "sot_validator_core.py",
        "class": "SoTValidator",
        "function": "validate_vg006",
        "description": "VG006: Architecture Board MUSS alle chart.yaml-Änderungen reviewen"
      },
      "matched_rules": [],
      "coverage_count": 0
    },
    {
      "validator": {
        "rule_id": "VG007",
        "module": "sot_validator_core",
        "file": "sot_validator_core.py",
        "class": "SoTValidator",
        "function": "validate_vg007",
        "description": "VG007: Architecture Board Approval-Pflicht"
      },
      "matched_rules": [],
      "coverage_count": 0
    },
    {
      "validator": {
        "rule_id": "VG008",
        "module": "sot_validator_core",
        "file": "sot_validator_core.py",
        "class": "SoTValidator",
        "function": "validate_vg008",
        "description": "VG008: Governance Roles Definition"
      },
      "matched_rules": [],
      "coverage_count": 0
    },
    {
      "validator": {
        "rule_id": "ALL_ENHANCED",
        "module": "enhanced_validators",
        "file": "enhanced_validators.py",
        "class": "EnhancedValidators",
        "function": "validate_all_enhanced",
        "description": "Run all enhanced validations and return results"
      },
      "matched_rules": [],
      "coverage_count": 0
    },
    {
      "validator": {
        "rule_id": "DC003_CANARY_ENHANCED",
        "module": "enhanced_validators",
        "file": "enhanced_validators.py",
        "class": "EnhancedValidators",
        "function": "validate_dc003_canary_enhanced",
        "description": "DC003 ENHANCED: Canary Deployment MUSS 5% → 25% → 50% → 100% Stages verwenden"
      },
      "matched_rules": [
        "CI-004",
        "CI-005",
        "CI-002",
        "CI-001",
        "CI-003"
      ],
      "coverage_count": 5
    },
    {
      "validator": {
        "rule_id": "MD_PRINC_020_ENHANCED",
        "module": "enhanced_validators",
        "file": "enhanced_validators.py",
        "class": "EnhancedValidators",
        "function": "validate_md_princ_020_enhanced",
        "description": "MD-PRINC-020 ENHANCED: Auto-Generate Documentation vollständig implementieren"
      },
      "matched_rules": [
        "PRINC-DOCS-AS-CODE-050",
        "PRINC-DETERMINISTIC-020",
        "PRINC-DETERMINISTIC-018",
        "PRINC-ZERO-TRUST-027",
        "PRINC-CONTRACT-FIRST-005",
        "PRINC-DOCS-AS-CODE-047",
        "PRINC-CONTRACT-FIRST-002",
        "PRINC-SCALABILITY-043",
        "PRINC-SEPARATION-009",
        "PRINC-SEPARATION-006",
        "PRINC-OBSERVABILITY-034",
        "PRINC-BIAS-AWARE-037",
        "PRINC-BIAS-AWARE-039",
        "PRINC-DETERMINISTIC-019",
        "PRINC-MULTI-IMPL-015",
        "PRINC-DOCS-AS-CODE-048",
        "PRINC-EVIDENCE-BASED-025",
        "PRINC-SEPARATION-008",
        "PRINC-CONTRACT-FIRST-004",
        "PRINC-SCALABILITY-046",
        "PRINC-OBSERVABILITY-035",
        "PRINC-EVIDENCE-BASED-026",
        "PRINC-SEPARATION-007",
        "PRINC-DETERMINISTIC-017",
        "PRINC-ZERO-TRUST-028",
        "PRINC-EVIDENCE-BASED-023",
        "PRINC-SEPARATION-011",
        "PRINC-ZERO-TRUST-030",
        "PRINC-MULTI-IMPL-014",
        "PRINC-MULTI-IMPL-013",
        "PRINC-BIAS-AWARE-040",
        "PRINC-BIAS-AWARE-038",
        "PRINC-DOCS-AS-CODE-051",
        "PRINC-DETERMINISTIC-021",
        "PRINC-CONTRACT-FIRST-003",
        "PRINC-SCALABILITY-045",
        "PRINC-DOCS-AS-CODE-049",
        "PRINC-OBSERVABILITY-033",
        "PRINC-CONTRACT-FIRST-001",
        "PRINC-OBSERVABILITY-032",
        "PRINC-SEPARATION-010",
        "PRINC-OBSERVABILITY-036",
        "PRINC-EVIDENCE-BASED-024",
        "PRINC-SCALABILITY-044",
        "PRINC-ZERO-TRUST-031",
        "PRINC-MULTI-IMPL-016",
        "PRINC-MULTI-IMPL-012",
        "PRINC-ZERO-TRUST-029",
        "PRINC-SCALABILITY-042",
        "PRINC-EVIDENCE-BASED-022",
        "PRINC-BIAS-AWARE-041"
      ],
      "coverage_count": 51
    },
    {
      "validator": {
        "rule_id": "TS005_MTLS_ENFORCED",
        "module": "enhanced_validators",
        "file": "enhanced_validators.py",
        "class": "EnhancedValidators",
        "function": "validate_ts005_mtls_enforced",
        "description": "TS005 ENHANCED: mTLS MUSS in JEDEM chart.yaml enforced sein"
      },
      "matched_rules": [],
      "coverage_count": 0
    },
    {
      "validator": {
        "rule_id": "VG002_ENHANCED",
        "module": "enhanced_validators",
        "file": "enhanced_validators.py",
        "class": "EnhancedValidators",
        "function": "validate_vg002_enhanced",
        "description": "VG002 ENHANCED: Breaking Changes MÜSSEN Migration Guide + Compatibility Layer haben"
      },
      "matched_rules": [
        "GOV-ROLE-008",
        "GOV-ROLE-002",
        "GOV-ROLE-012",
        "GOV-PROCESS-004",
        "GOV-PROMO-002",
        "GOV-PROMO-009",
        "GOV-ROLE-010",
        "GOV-ROLE-001",
        "GOV-ROLE-005",
        "GOV-ROLE-003",
        "GOV-PROMO-010",
        "GOV-PROMO-001",
        "GOV-ROLE-009",
        "GOV-ROLE-007",
        "GOV-PROMO-008",
        "GOV-PROMO-011",
        "GOV-ROLE-011",
        "GOV-PROMO-003",
        "GOV-PROCESS-001",
        "GOV-ROLE-006",
        "GOV-PROCESS-007",
        "GOV-PROMO-006",
        "GOV-PROCESS-005",
        "GOV-ROLE-004",
        "GOV-PROMO-012",
        "GOV-PROCESS-002",
        "GOV-PROMO-007",
        "GOV-PROCESS-003",
        "GOV-PROCESS-006",
        "GOV-PROMO-005",
        "GOV-PROMO-004"
      ],
      "coverage_count": 31
    },
    {
      "validator": {
        "rule_id": "VG003_ENHANCED",
        "module": "enhanced_validators",
        "file": "enhanced_validators.py",
        "class": "EnhancedValidators",
        "function": "validate_vg003_enhanced",
        "description": "VG003 ENHANCED: Deprecations MÜSSEN 180 Tage Notice Period haben"
      },
      "matched_rules": [
        "GOV-ROLE-008",
        "GOV-ROLE-002",
        "GOV-ROLE-012",
        "GOV-PROCESS-004",
        "GOV-PROMO-002",
        "GOV-PROMO-009",
        "GOV-ROLE-010",
        "GOV-ROLE-001",
        "GOV-ROLE-005",
        "GOV-ROLE-003",
        "GOV-PROMO-010",
        "GOV-PROMO-001",
        "GOV-ROLE-009",
        "GOV-ROLE-007",
        "GOV-PROMO-008",
        "GOV-PROMO-011",
        "GOV-ROLE-011",
        "GOV-PROMO-003",
        "GOV-PROCESS-001",
        "GOV-ROLE-006",
        "GOV-PROCESS-007",
        "GOV-PROMO-006",
        "GOV-PROCESS-005",
        "GOV-ROLE-004",
        "GOV-PROMO-012",
        "GOV-PROCESS-002",
        "GOV-PROMO-007",
        "GOV-PROCESS-003",
        "GOV-PROCESS-006",
        "GOV-PROMO-005",
        "GOV-PROMO-004"
      ],
      "coverage_count": 31
    },
    {
      "validator": {
        "rule_id": "VG004_ENHANCED",
        "module": "enhanced_validators",
        "file": "enhanced_validators.py",
        "class": "EnhancedValidators",
        "function": "validate_vg004_enhanced",
        "description": "VG004 ENHANCED: Alle MUST-Capability-Änderungen MÜSSEN RFC-Prozess durchlaufen"
      },
      "matched_rules": [],
      "coverage_count": 0
    },
    {
      "validator": {
        "rule_id": "ALL_ADDITIONAL",
        "module": "additional_validators",
        "file": "additional_validators.py",
        "class": "AdditionalValidators",
        "function": "validate_all_additional",
        "description": "Run all additional validations and return results"
      },
      "matched_rules": [],
      "coverage_count": 0
    },
    {
      "validator": {
        "rule_id": "CONFORMANCE_FRAMEWORK_SPECIFIC",
        "module": "additional_validators",
        "file": "additional_validators.py",
        "class": "AdditionalValidators",
        "function": "validate_conformance_framework_specific",
        "description": "CS009 ENHANCED: Schemathesis Framework prüfen"
      },
      "matched_rules": [],
      "coverage_count": 0
    },
    {
      "validator": {
        "rule_id": "CS003_CAPABILITY_SEMANTICS",
        "module": "additional_validators",
        "file": "additional_validators.py",
        "class": "AdditionalValidators",
        "function": "validate_cs003_capability_semantics",
        "description": "CS003 ENHANCED: Capability-Semantik prüfen"
      },
      "matched_rules": [
        "CHART-038",
        "CHART-028",
        "CHART-019",
        "CHART-011",
        "CHART-003",
        "CHART-020",
        "CHART-008",
        "CHART-018",
        "CHART-013",
        "CHART-010",
        "CHART-025",
        "CHART-039",
        "CHART-045",
        "CHART-029",
        "CHART-046",
        "CHART-040",
        "CHART-035",
        "CHART-014",
        "CHART-015",
        "CHART-023",
        "CHART-041",
        "CHART-004",
        "CHART-012",
        "CHART-022",
        "CHART-024",
        "CHART-021",
        "CHART-037",
        "CHART-009",
        "CHART-017",
        "CHART-005",
        "CHART-001",
        "CHART-032",
        "CHART-031",
        "CHART-002",
        "CHART-044",
        "CHART-026",
        "CHART-036",
        "CHART-042",
        "CHART-030",
        "CHART-016",
        "CHART-043",
        "CHART-007",
        "CHART-034",
        "CHART-006",
        "CHART-027",
        "CHART-033"
      ],
      "coverage_count": 46
    },
    {
      "validator": {
        "rule_id": "LINTING_TOOLS_SPECIFIC",
        "module": "additional_validators",
        "file": "additional_validators.py",
        "class": "AdditionalValidators",
        "function": "validate_linting_tools_specific",
        "description": "MD-MANIFEST-009 ENHANCED: Spezifische Linting-Tools prüfen"
      },
      "matched_rules": [],
      "coverage_count": 0
    },
    {
      "validator": {
        "rule_id": "TESTING_COVERAGE_COMPLETE",
        "module": "additional_validators",
        "file": "additional_validators.py",
        "class": "AdditionalValidators",
        "function": "validate_testing_coverage_complete",
        "description": "MD-MANIFEST-029 ENHANCED: Vollständige Coverage-Anforderungen"
      },
      "matched_rules": [],
      "coverage_count": 0
    },
    {
      "validator": {
        "rule_id": "ALERTMANAGER_CONFIG",
        "module": "maximalstand_validators",
        "file": "maximalstand_validators.py",
        "class": "MaximalstandValidators",
        "function": "validate_alertmanager_config",
        "description": "OBS-005 [MEDIUM]: AlertManager MUSS konfiguriert sein"
      },
      "matched_rules": [],
      "coverage_count": 0
    },
    {
      "validator": {
        "rule_id": "ALL_MAXIMALSTAND",
        "module": "maximalstand_validators",
        "file": "maximalstand_validators.py",
        "class": "MaximalstandValidators",
        "function": "validate_all_maximalstand",
        "description": "Run ALL 25 maximalstand validations"
      },
      "matched_rules": [],
      "coverage_count": 0
    },
    {
      "validator": {
        "rule_id": "BIAS_AUDIT_WORKFLOW",
        "module": "maximalstand_validators",
        "file": "maximalstand_validators.py",
        "class": "MaximalstandValidators",
        "function": "validate_bias_audit_workflow",
        "description": "AI-001 [MEDIUM]: Quarterly Bias Audit (AI/ML Shards) PFLICHT"
      },
      "matched_rules": [],
      "coverage_count": 0
    },
    {
      "validator": {
        "rule_id": "CAPABILITY_PROMOTION_AUTOMATION",
        "module": "maximalstand_validators",
        "file": "maximalstand_validators.py",
        "class": "MaximalstandValidators",
        "function": "validate_capability_promotion_automation",
        "description": "GOV-004 [MEDIUM]: Capability Promotion MUSS automatisiert sein"
      },
      "matched_rules": [],
      "coverage_count": 0
    },
    {
      "validator": {
        "rule_id": "CHANGELOG_REQUIRED",
        "module": "maximalstand_validators",
        "file": "maximalstand_validators.py",
        "class": "MaximalstandValidators",
        "function": "validate_changelog_required",
        "description": "FILE-001 [CRITICAL]: Jeder Shard MUSS CHANGELOG.md haben"
      },
      "matched_rules": [],
      "coverage_count": 0
    },
    {
      "validator": {
        "rule_id": "COMPLIANCE_REPORTS",
        "module": "maximalstand_validators",
        "file": "maximalstand_validators.py",
        "class": "MaximalstandValidators",
        "function": "validate_compliance_reports",
        "description": "ARTIFACT-004 [MEDIUM]: Quarterly Compliance Reports PFLICHT"
      },
      "matched_rules": [],
      "coverage_count": 0
    },
    {
      "validator": {
        "rule_id": "CONFORMANCE_README",
        "module": "maximalstand_validators",
        "file": "maximalstand_validators.py",
        "class": "MaximalstandValidators",
        "function": "validate_conformance_readme",
        "description": "FILE-005 [MEDIUM]: conformance/README.md PFLICHT"
      },
      "matched_rules": [],
      "coverage_count": 0
    },
    {
      "validator": {
        "rule_id": "CONTAINER_REGISTRY",
        "module": "maximalstand_validators",
        "file": "maximalstand_validators.py",
        "class": "MaximalstandValidators",
        "function": "validate_container_registry",
        "description": "ARTIFACT-001 [MEDIUM]: Container Images → ghcr.io/ssid"
      },
      "matched_rules": [],
      "coverage_count": 0
    },
    {
      "validator": {
        "rule_id": "CSV_PII_DETECTION",
        "module": "maximalstand_validators",
        "file": "maximalstand_validators.py",
        "class": "MaximalstandValidators",
        "function": "validate_csv_pii_detection",
        "description": "SEC-007 [LOW]: .csv mit PII MUSS erkannt werden (komplex)"
      },
      "matched_rules": [
        "CHART-038",
        "CHART-028",
        "CHART-019",
        "CHART-011",
        "CHART-003",
        "CHART-020",
        "CHART-008",
        "CHART-018",
        "CHART-013",
        "CHART-010",
        "CHART-025",
        "CHART-039",
        "CHART-045",
        "CHART-029",
        "CHART-046",
        "CHART-040",
        "CHART-035",
        "CHART-014",
        "CHART-015",
        "CHART-023",
        "CHART-041",
        "CHART-004",
        "CHART-012",
        "CHART-022",
        "CHART-024",
        "CHART-021",
        "CHART-037",
        "CHART-009",
        "CHART-017",
        "CHART-005",
        "CHART-001",
        "CHART-032",
        "CHART-031",
        "CHART-002",
        "CHART-044",
        "CHART-026",
        "CHART-036",
        "CHART-042",
        "CHART-030",
        "CHART-016",
        "CHART-043",
        "CHART-007",
        "CHART-034",
        "CHART-006",
        "CHART-027",
        "CHART-033"
      ],
      "coverage_count": 46
    },
    {
      "validator": {
        "rule_id": "DAILY_CHECKS_WORKFLOW",
        "module": "maximalstand_validators",
        "file": "maximalstand_validators.py",
        "class": "MaximalstandValidators",
        "function": "validate_daily_checks_workflow",
        "description": "CI-001 [HIGH]: Daily Checks (Sanctions, Dependencies) PFLICHT"
      },
      "matched_rules": [],
      "coverage_count": 0
    },
    {
      "validator": {
        "rule_id": "DOCKERFILE_REQUIRED",
        "module": "maximalstand_validators",
        "file": "maximalstand_validators.py",
        "class": "MaximalstandValidators",
        "function": "validate_dockerfile_required",
        "description": "FILE-003 [CRITICAL]: Jede Implementation MUSS Dockerfile haben"
      },
      "matched_rules": [],
      "coverage_count": 0
    },
    {
      "validator": {
        "rule_id": "E2E_TESTS_REQUIRED",
        "module": "maximalstand_validators",
        "file": "maximalstand_validators.py",
        "class": "MaximalstandValidators",
        "function": "validate_e2e_tests_required",
        "description": "TEST-004 [HIGH]: E2E Tests für Key User Journeys PFLICHT"
      },
      "matched_rules": [],
      "coverage_count": 0
    },
    {
      "validator": {
        "rule_id": "EIDAS_ENFORCEMENT",
        "module": "maximalstand_validators",
        "file": "maximalstand_validators.py",
        "class": "MaximalstandValidators",
        "function": "validate_eidas_enforcement",
        "description": "COMP-002 [LOW]: eIDAS 2.0 Enforcement"
      },
      "matched_rules": [],
      "coverage_count": 0
    },
    {
      "validator": {
        "rule_id": "ENV_KEY_BLOCKING",
        "module": "maximalstand_validators",
        "file": "maximalstand_validators.py",
        "class": "MaximalstandValidators",
        "function": "validate_env_key_blocking",
        "description": "SEC-006 [MEDIUM]: .env/.key Dateien MÜSSEN blockiert sein"
      },
      "matched_rules": [],
      "coverage_count": 0
    },
    {
      "validator": {
        "rule_id": "ETHICS_BOARD_REVIEW",
        "module": "maximalstand_validators",
        "file": "maximalstand_validators.py",
        "class": "MaximalstandValidators",
        "function": "validate_ethics_board_review",
        "description": "AI-003 [LOW]: Ethics Board Review PFLICHT für AI/ML"
      },
      "matched_rules": [],
      "coverage_count": 0
    },
    {
      "validator": {
        "rule_id": "GETTING_STARTED_REQUIRED",
        "module": "maximalstand_validators",
        "file": "maximalstand_validators.py",
        "class": "MaximalstandValidators",
        "function": "validate_getting_started_required",
        "description": "FILE-004 [HIGH]: Jeder Shard MUSS docs/getting-started.md haben"
      },
      "matched_rules": [],
      "coverage_count": 0
    },
    {
      "validator": {
        "rule_id": "MICA_ENFORCEMENT",
        "module": "maximalstand_validators",
        "file": "maximalstand_validators.py",
        "class": "MaximalstandValidators",
        "function": "validate_mica_enforcement",
        "description": "COMP-003 [LOW]: MiCA Enforcement (Finanz-Shards)"
      },
      "matched_rules": [],
      "coverage_count": 0
    },
    {
      "validator": {
        "rule_id": "MODEL_CARDS_REQUIRED",
        "module": "maximalstand_validators",
        "file": "maximalstand_validators.py",
        "class": "MaximalstandValidators",
        "function": "validate_model_cards_required",
        "description": "AI-002 [MEDIUM]: Model Cards PFLICHT für AI/ML Shards"
      },
      "matched_rules": [],
      "coverage_count": 0
    },
    {
      "validator": {
        "rule_id": "OAUTH21_ENFORCEMENT",
        "module": "maximalstand_validators",
        "file": "maximalstand_validators.py",
        "class": "MaximalstandValidators",
        "function": "validate_oauth21_enforcement",
        "description": "STD-001 [LOW]: OAuth 2.1 MUSS verwendet werden"
      },
      "matched_rules": [],
      "coverage_count": 0
    },
    {
      "validator": {
        "rule_id": "OIDC_ENFORCEMENT",
        "module": "maximalstand_validators",
        "file": "maximalstand_validators.py",
        "class": "MaximalstandValidators",
        "function": "validate_oidc_enforcement",
        "description": "STD-002 [LOW]: OpenID Connect MUSS verwendet werden"
      },
      "matched_rules": [],
      "coverage_count": 0
    },
    {
      "validator": {
        "rule_id": "QUARTERLY_AUDIT_WORKFLOW",
        "module": "maximalstand_validators",
        "file": "maximalstand_validators.py",
        "class": "MaximalstandValidators",
        "function": "validate_quarterly_audit_workflow",
        "description": "CI-004 [HIGH]: Quarterly Audit Workflow PFLICHT"
      },
      "matched_rules": [],
      "coverage_count": 0
    },
    {
      "validator": {
        "rule_id": "README_REQUIRED",
        "module": "maximalstand_validators",
        "file": "maximalstand_validators.py",
        "class": "MaximalstandValidators",
        "function": "validate_readme_required",
        "description": "FILE-002 [CRITICAL]: Jeder Shard MUSS README.md haben"
      },
      "matched_rules": [],
      "coverage_count": 0
    },
    {
      "validator": {
        "rule_id": "SECURITY_AUDIT_WORKFLOW",
        "module": "maximalstand_validators",
        "file": "maximalstand_validators.py",
        "class": "MaximalstandValidators",
        "function": "validate_security_audit_workflow",
        "description": "CI-003 [HIGH]: Quarterly Security Audit Workflow PFLICHT"
      },
      "matched_rules": [],
      "coverage_count": 0
    },
    {
      "validator": {
        "rule_id": "TEST_REPORTS_OUTPUT",
        "module": "maximalstand_validators",
        "file": "maximalstand_validators.py",
        "class": "MaximalstandValidators",
        "function": "validate_test_reports_output",
        "description": "TEST-005 [MEDIUM]: Test Reports MÜSSEN generiert werden"
      },
      "matched_rules": [],
      "coverage_count": 0
    },
    {
      "validator": {
        "rule_id": "W3C_DID_VC_ENFORCEMENT",
        "module": "maximalstand_validators",
        "file": "maximalstand_validators.py",
        "class": "MaximalstandValidators",
        "function": "validate_w3c_did_vc_enforcement",
        "description": "STD-003 [LOW]: W3C DID/VC Standards MÜSSEN verwendet werden"
      },
      "matched_rules": [],
      "coverage_count": 0
    },
    {
      "validator": {
        "rule_id": "WORM_STORAGE_ENFORCEMENT",
        "module": "maximalstand_validators",
        "file": "maximalstand_validators.py",
        "class": "MaximalstandValidators",
        "function": "validate_worm_storage_enforcement",
        "description": "STORAGE-001 [MEDIUM]: WORM Storage (10 Jahre) MUSS enforced sein"
      },
      "matched_rules": [],
      "coverage_count": 0
    }
  ]
}