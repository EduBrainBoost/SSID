{
  "total_validators": 194,
  "total_rules_to_cover": 3889,
  "coverage_percentage": 4.99,
  "validators_by_module": {
    "sot_validator_core": 156,
    "enhanced_validators": 7,
    "additional_validators": 5,
    "maximalstand_validators": 26
  },
  "validators": [
    {
      "rule_id": "ALL",
      "module": "sot_validator_core",
      "file": "sot_validator_core.py",
      "class": "SoTValidator",
      "function": "validate_all",
      "description": "Validate all 327 SoT rules and generate report."
    },
    {
      "rule_id": "AR001",
      "module": "sot_validator_core",
      "file": "sot_validator_core.py",
      "class": "SoTValidator",
      "function": "validate_ar001",
      "description": "AR001: Das System MUSS aus exakt 24 Root-Ordnern bestehen."
    },
    {
      "rule_id": "AR002",
      "module": "sot_validator_core",
      "file": "sot_validator_core.py",
      "class": "SoTValidator",
      "function": "validate_ar002",
      "description": "AR002: Jeder Root-Ordner MUSS exakt 16 Shards enthalten."
    },
    {
      "rule_id": "AR003",
      "module": "sot_validator_core",
      "file": "sot_validator_core.py",
      "class": "SoTValidator",
      "function": "validate_ar003",
      "description": "AR003: Das System MUSS eine Matrix von 24×16=384 Shard-Ordnern bilden."
    },
    {
      "rule_id": "AR004",
      "module": "sot_validator_core",
      "file": "sot_validator_core.py",
      "class": "SoTValidator",
      "function": "validate_ar004",
      "description": "AR004: Jeder Shard MUSS ein Chart.yaml mit Chart-Definition enthalten."
    },
    {
      "rule_id": "AR005",
      "module": "sot_validator_core",
      "file": "sot_validator_core.py",
      "class": "SoTValidator",
      "function": "validate_ar005",
      "description": "AR005: Jeder Shard MUSS ein values.yaml mit Werte-Definitionen enthalten."
    },
    {
      "rule_id": "AR006",
      "module": "sot_validator_core",
      "file": "sot_validator_core.py",
      "class": "SoTValidator",
      "function": "validate_ar006",
      "description": "AR006: Jeder Root-Ordner MUSS eine README.md mit Modul-Dokumentation enthalten."
    },
    {
      "rule_id": "AR007",
      "module": "sot_validator_core",
      "file": "sot_validator_core.py",
      "class": "SoTValidator",
      "function": "validate_ar007",
      "description": "AR007: Die 16 Shards MÜSSEN identisch über alle Root-Ordner repliziert werden."
    },
    {
      "rule_id": "AR008",
      "module": "sot_validator_core",
      "file": "sot_validator_core.py",
      "class": "SoTValidator",
      "function": "validate_ar008",
      "description": "AR008: Shard-Namen MÜSSEN dem Pattern NN_name folgen (NN = 01-16)."
    },
    {
      "rule_id": "AR009",
      "module": "sot_validator_core",
      "file": "sot_validator_core.py",
      "class": "SoTValidator",
      "function": "validate_ar009",
      "description": "AR009: Root-Namen MÜSSEN dem Pattern NN_name folgen (NN = 01-24)."
    },
    {
      "rule_id": "AR010",
      "module": "sot_validator_core",
      "file": "sot_validator_core.py",
      "class": "SoTValidator",
      "function": "validate_ar010",
      "description": "AR010: Jeder Shard MUSS ein templates/ Verzeichnis mit Helm-Templates enthalten."
    },
    {
      "rule_id": "AUTH_METHOD",
      "module": "sot_validator_core",
      "file": "sot_validator_core.py",
      "class": "SoTValidator",
      "function": "validate_auth_method",
      "description": "AUTH_METHOD_001-006: Authentication method validation"
    },
    {
      "rule_id": "CE001",
      "module": "sot_validator_core",
      "file": "sot_validator_core.py",
      "class": "SoTValidator",
      "function": "validate_ce001",
      "description": "CE001: UK/APAC-spezifische Regeln MÜSSEN in country_specific definiert sein"
    },
    {
      "rule_id": "CE002",
      "module": "sot_validator_core",
      "file": "sot_validator_core.py",
      "class": "SoTValidator",
      "function": "validate_ce002",
      "description": "CE002: Substring-Helper MUSS has_substr() heißen (nicht contains())"
    },
    {
      "rule_id": "CE003",
      "module": "sot_validator_core",
      "file": "sot_validator_core.py",
      "class": "SoTValidator",
      "function": "validate_ce003",
      "description": "CE003: Sanctions-Workflow MUSS täglich laufen (cron: '15 3 * * *')"
    },
    {
      "rule_id": "CE004",
      "module": "sot_validator_core",
      "file": "sot_validator_core.py",
      "class": "SoTValidator",
      "function": "validate_ce004",
      "description": "CE004: Build-Step MUSS entities_to_check.json vor OPA-Check erstellen"
    },
    {
      "rule_id": "CE005",
      "module": "sot_validator_core",
      "file": "sot_validator_core.py",
      "class": "SoTValidator",
      "function": "validate_ce005",
      "description": "CE005: Sanctions-Daten MÜSSEN max_age_hours: 24 erfüllen"
    },
    {
      "rule_id": "CE006",
      "module": "sot_validator_core",
      "file": "sot_validator_core.py",
      "class": "SoTValidator",
      "function": "validate_ce006",
      "description": "CE006: Jeder Root MUSS docs/incident_response_plan.md haben"
    },
    {
      "rule_id": "CE007",
      "module": "sot_validator_core",
      "file": "sot_validator_core.py",
      "class": "SoTValidator",
      "function": "validate_ce007",
      "description": "CE007: NIEMALS .ipynb, .parquet, .sqlite, .db-Dateien committen"
    },
    {
      "rule_id": "CE008",
      "module": "sot_validator_core",
      "file": "sot_validator_core.py",
      "class": "SoTValidator",
      "function": "validate_ce008",
      "description": "CE008: OPA MUSS 24_meta_orchestration/registry/generated/repo_scan.json verwenden"
    },
    {
      "rule_id": "CP001",
      "module": "sot_validator_core",
      "file": "sot_validator_core.py",
      "class": "SoTValidator",
      "function": "validate_cp001",
      "description": "CP001: NIEMALS Rohdaten von PII oder biometrischen Daten speichern."
    },
    {
      "rule_id": "CP002",
      "module": "sot_validator_core",
      "file": "sot_validator_core.py",
      "class": "SoTValidator",
      "function": "validate_cp002",
      "description": "CP002: Alle Daten MÜSSEN als SHA3-256 Hashes gespeichert werden."
    },
    {
      "rule_id": "CP003",
      "module": "sot_validator_core",
      "file": "sot_validator_core.py",
      "class": "SoTValidator",
      "function": "validate_cp003",
      "description": "CP003: Tenant-spezifische Peppers MÜSSEN verwendet werden."
    },
    {
      "rule_id": "CP004",
      "module": "sot_validator_core",
      "file": "sot_validator_core.py",
      "class": "SoTValidator",
      "function": "validate_cp004",
      "description": "CP004: Raw Data Retention MUSS '0 seconds' sein (Immediate Discard)."
    },
    {
      "rule_id": "CP005",
      "module": "sot_validator_core",
      "file": "sot_validator_core.py",
      "class": "SoTValidator",
      "function": "validate_cp005",
      "description": "CP005: Right to Erasure MUSS via Hash-Rotation implementiert sein."
    },
    {
      "rule_id": "CP006",
      "module": "sot_validator_core",
      "file": "sot_validator_core.py",
      "class": "SoTValidator",
      "function": "validate_cp006",
      "description": "CP006: Data Portability MUSS JSON-Export aller Hashes + Metadaten bieten."
    },
    {
      "rule_id": "CP007",
      "module": "sot_validator_core",
      "file": "sot_validator_core.py",
      "class": "SoTValidator",
      "function": "validate_cp007",
      "description": "CP007: PII Redaction MUSS automatisch in Logs & Traces erfolgen."
    },
    {
      "rule_id": "CP008",
      "module": "sot_validator_core",
      "file": "sot_validator_core.py",
      "class": "SoTValidator",
      "function": "validate_cp008",
      "description": "CP008: Alle AI/ML-Modelle MÜSSEN auf Bias getestet werden."
    },
    {
      "rule_id": "CP009",
      "module": "sot_validator_core",
      "file": "sot_validator_core.py",
      "class": "SoTValidator",
      "function": "validate_cp009",
      "description": "CP009: Hash-Ledger mit Blockchain-Anchoring MUSS verwendet werden."
    },
    {
      "rule_id": "CP010",
      "module": "sot_validator_core",
      "file": "sot_validator_core.py",
      "class": "SoTValidator",
      "function": "validate_cp010",
      "description": "CP010: WORM-Storage mit 10 Jahren Retention MUSS verwendet werden."
    },
    {
      "rule_id": "CP011",
      "module": "sot_validator_core",
      "file": "sot_validator_core.py",
      "class": "SoTValidator",
      "function": "validate_cp011",
      "description": "CP011: NIEMALS Secrets in Git committen."
    },
    {
      "rule_id": "CP012",
      "module": "sot_validator_core",
      "file": "sot_validator_core.py",
      "class": "SoTValidator",
      "function": "validate_cp012",
      "description": "CP012: Secrets MÜSSEN alle 90 Tage rotiert werden."
    },
    {
      "rule_id": "CS001",
      "module": "sot_validator_core",
      "file": "sot_validator_core.py",
      "class": "SoTValidator",
      "function": "validate_cs001",
      "description": "CS001: chart.yaml MUSS metadata.shard_id, version, status enthalten"
    },
    {
      "rule_id": "CS002",
      "module": "sot_validator_core",
      "file": "sot_validator_core.py",
      "class": "SoTValidator",
      "function": "validate_cs002",
      "description": "CS002: chart.yaml MUSS governance.owner mit team, lead, contact haben"
    },
    {
      "rule_id": "CS003",
      "module": "sot_validator_core",
      "file": "sot_validator_core.py",
      "class": "SoTValidator",
      "function": "validate_cs003",
      "description": "CS003: chart.yaml MUSS capabilities mit MUST/SHOULD/HAVE kategorisieren"
    },
    {
      "rule_id": "CS004",
      "module": "sot_validator_core",
      "file": "sot_validator_core.py",
      "class": "SoTValidator",
      "function": "validate_cs004",
      "description": "CS004: chart.yaml MUSS constraints für pii_storage, data_policy, custody definieren"
    },
    {
      "rule_id": "CS005",
      "module": "sot_validator_core",
      "file": "sot_validator_core.py",
      "class": "SoTValidator",
      "function": "validate_cs005",
      "description": "CS005: chart.yaml MUSS enforcement mit static_analysis, runtime_checks, audit haben"
    },
    {
      "rule_id": "CS006",
      "module": "sot_validator_core",
      "file": "sot_validator_core.py",
      "class": "SoTValidator",
      "function": "validate_cs006",
      "description": "CS006: chart.yaml MUSS interfaces.contracts mit OpenAPI-Specs referenzieren"
    },
    {
      "rule_id": "CS007",
      "module": "sot_validator_core",
      "file": "sot_validator_core.py",
      "class": "SoTValidator",
      "function": "validate_cs007",
      "description": "CS007: chart.yaml MUSS dependencies.required auflisten"
    },
    {
      "rule_id": "CS008",
      "module": "sot_validator_core",
      "file": "sot_validator_core.py",
      "class": "SoTValidator",
      "function": "validate_cs008",
      "description": "CS008: chart.yaml MUSS implementations.default und available definieren"
    },
    {
      "rule_id": "CS009",
      "module": "sot_validator_core",
      "file": "sot_validator_core.py",
      "class": "SoTValidator",
      "function": "validate_cs009",
      "description": "CS009: chart.yaml MUSS conformance.contract_tests definieren"
    },
    {
      "rule_id": "CS010",
      "module": "sot_validator_core",
      "file": "sot_validator_core.py",
      "class": "SoTValidator",
      "function": "validate_cs010",
      "description": "CS010: chart.yaml MUSS observability mit metrics, tracing, logging definieren"
    },
    {
      "rule_id": "CS011",
      "module": "sot_validator_core",
      "file": "sot_validator_core.py",
      "class": "SoTValidator",
      "function": "validate_cs011",
      "description": "CS011: chart.yaml MUSS security.threat_model referenzieren"
    },
    {
      "rule_id": "DC001",
      "module": "sot_validator_core",
      "file": "sot_validator_core.py",
      "class": "SoTValidator",
      "function": "validate_dc001",
      "description": "DC001: Deployments MÜSSEN Blue-Green oder Canary-Strategie verwenden"
    },
    {
      "rule_id": "DC002",
      "module": "sot_validator_core",
      "file": "sot_validator_core.py",
      "class": "SoTValidator",
      "function": "validate_dc002",
      "description": "DC002: Environments dev, staging, production MÜSSEN existieren"
    },
    {
      "rule_id": "DC003",
      "module": "sot_validator_core",
      "file": "sot_validator_core.py",
      "class": "SoTValidator",
      "function": "validate_dc003",
      "description": "DC003: CI MUSS alle 7 Change-Process-Gates durchlaufen"
    },
    {
      "rule_id": "DC004",
      "module": "sot_validator_core",
      "file": "sot_validator_core.py",
      "class": "SoTValidator",
      "function": "validate_dc004",
      "description": "DC004: Alle Tests MÜSSEN grün sein vor Deployment"
    },
    {
      "rule_id": "DID_METHOD",
      "module": "sot_validator_core",
      "file": "sot_validator_core.py",
      "class": "SoTValidator",
      "function": "validate_did_method",
      "description": "DID_METHOD_001-004: DID method validation"
    },
    {
      "rule_id": "HASH_ALG",
      "module": "sot_validator_core",
      "file": "sot_validator_core.py",
      "class": "SoTValidator",
      "function": "validate_hash_alg",
      "description": "HASH_ALG_001-004: Hash algorithm validation"
    },
    {
      "rule_id": "JURIS_BL_001",
      "module": "sot_validator_core",
      "file": "sot_validator_core.py",
      "class": "SoTValidator",
      "function": "validate_juris_bl_001",
      "description": "JURIS_BL_001: System MUSS Transaktionen aus Iran (IR) blockieren."
    },
    {
      "rule_id": "JURIS_BL_002",
      "module": "sot_validator_core",
      "file": "sot_validator_core.py",
      "class": "SoTValidator",
      "function": "validate_juris_bl_002",
      "description": "JURIS_BL_002: System MUSS Transaktionen aus North Korea (KP) blockieren."
    },
    {
      "rule_id": "JURIS_BL_003",
      "module": "sot_validator_core",
      "file": "sot_validator_core.py",
      "class": "SoTValidator",
      "function": "validate_juris_bl_003",
      "description": "JURIS_BL_003: System MUSS Transaktionen aus Syria (SY) blockieren."
    },
    {
      "rule_id": "JURIS_BL_004",
      "module": "sot_validator_core",
      "file": "sot_validator_core.py",
      "class": "SoTValidator",
      "function": "validate_juris_bl_004",
      "description": "JURIS_BL_004: System MUSS Transaktionen aus Cuba (CU) blockieren."
    },
    {
      "rule_id": "JURIS_BL_005",
      "module": "sot_validator_core",
      "file": "sot_validator_core.py",
      "class": "SoTValidator",
      "function": "validate_juris_bl_005",
      "description": "JURIS_BL_005: System MUSS Transaktionen aus Sudan (SD) blockieren."
    },
    {
      "rule_id": "JURIS_BL_006",
      "module": "sot_validator_core",
      "file": "sot_validator_core.py",
      "class": "SoTValidator",
      "function": "validate_juris_bl_006",
      "description": "JURIS_BL_006: System MUSS Transaktionen aus Belarus (BY) blockieren."
    },
    {
      "rule_id": "JURIS_BL_007",
      "module": "sot_validator_core",
      "file": "sot_validator_core.py",
      "class": "SoTValidator",
      "function": "validate_juris_bl_007",
      "description": "JURIS_BL_007: System MUSS Transaktionen aus Venezuela (VE) blockieren."
    },
    {
      "rule_id": "KP001",
      "module": "sot_validator_core",
      "file": "sot_validator_core.py",
      "class": "SoTValidator",
      "function": "validate_kp001",
      "description": "KP001: API-Contract (OpenAPI/JSON-Schema) MUSS VOR Implementierung existieren"
    },
    {
      "rule_id": "KP002",
      "module": "sot_validator_core",
      "file": "sot_validator_core.py",
      "class": "SoTValidator",
      "function": "validate_kp002",
      "description": "KP002: SoT (chart.yaml) und Implementierung (manifest.yaml) MÜSSEN getrennt sein"
    },
    {
      "rule_id": "KP003",
      "module": "sot_validator_core",
      "file": "sot_validator_core.py",
      "class": "SoTValidator",
      "function": "validate_kp003",
      "description": "KP003: Ein Shard MUSS mehrere Implementierungen unterstützen können"
    },
    {
      "rule_id": "KP004",
      "module": "sot_validator_core",
      "file": "sot_validator_core.py",
      "class": "SoTValidator",
      "function": "validate_kp004",
      "description": "KP004: 24×16 = 384 Chart-Dateien, keine Ausnahmen"
    },
    {
      "rule_id": "KP005",
      "module": "sot_validator_core",
      "file": "sot_validator_core.py",
      "class": "SoTValidator",
      "function": "validate_kp005",
      "description": "KP005: Alles relevante MUSS gehasht, geloggt und geanchort werden"
    },
    {
      "rule_id": "KP006",
      "module": "sot_validator_core",
      "file": "sot_validator_core.py",
      "class": "SoTValidator",
      "function": "validate_kp006",
      "description": "KP006: mTLS MUSS für alle internen Verbindungen verwendet werden"
    },
    {
      "rule_id": "KP007",
      "module": "sot_validator_core",
      "file": "sot_validator_core.py",
      "class": "SoTValidator",
      "function": "validate_kp007",
      "description": "KP007: Metrics, Tracing, Logging MÜSSEN von Anfang an eingebaut sein"
    },
    {
      "rule_id": "KP008",
      "module": "sot_validator_core",
      "file": "sot_validator_core.py",
      "class": "SoTValidator",
      "function": "validate_kp008",
      "description": "KP008: Alle AI/ML-Modelle MÜSSEN auf Bias getestet werden"
    },
    {
      "rule_id": "KP009",
      "module": "sot_validator_core",
      "file": "sot_validator_core.py",
      "class": "SoTValidator",
      "function": "validate_kp009",
      "description": "KP009: Jeder Shard MUSS horizontal skalieren können"
    },
    {
      "rule_id": "KP010",
      "module": "sot_validator_core",
      "file": "sot_validator_core.py",
      "class": "SoTValidator",
      "function": "validate_kp010",
      "description": "KP010: Dokumentation MUSS aus Code/Contracts generiert werden"
    },
    {
      "rule_id": "MD_CHART_024",
      "module": "sot_validator_core",
      "file": "sot_validator_core.py",
      "class": "SoTValidator",
      "function": "validate_md_chart_024",
      "description": "MD-CHART-024: chart.yaml MUSS compatibility.core_min_version definieren"
    },
    {
      "rule_id": "MD_CHART_029",
      "module": "sot_validator_core",
      "file": "sot_validator_core.py",
      "class": "SoTValidator",
      "function": "validate_md_chart_029",
      "description": "MD-CHART-029: chart.yaml SOLLTE orchestration.workflows definieren"
    },
    {
      "rule_id": "MD_CHART_045",
      "module": "sot_validator_core",
      "file": "sot_validator_core.py",
      "class": "SoTValidator",
      "function": "validate_md_chart_045",
      "description": "MD-CHART-045: chart.yaml MUSS security.encryption (at_rest, in_transit) definieren"
    },
    {
      "rule_id": "MD_CHART_048",
      "module": "sot_validator_core",
      "file": "sot_validator_core.py",
      "class": "SoTValidator",
      "function": "validate_md_chart_048",
      "description": "MD-CHART-048: chart.yaml MUSS resources.compute definieren"
    },
    {
      "rule_id": "MD_CHART_050",
      "module": "sot_validator_core",
      "file": "sot_validator_core.py",
      "class": "SoTValidator",
      "function": "validate_md_chart_050",
      "description": "MD-CHART-050: chart.yaml SOLLTE roadmap.upcoming definieren"
    },
    {
      "rule_id": "MD_EXT_012",
      "module": "sot_validator_core",
      "file": "sot_validator_core.py",
      "class": "SoTValidator",
      "function": "validate_md_ext_012",
      "description": "MD-EXT-012: OPA MUSS string_similarity() helper function haben"
    },
    {
      "rule_id": "MD_EXT_014",
      "module": "sot_validator_core",
      "file": "sot_validator_core.py",
      "class": "SoTValidator",
      "function": "validate_md_ext_014",
      "description": "MD-EXT-014: CI MUSS schedule 0 0 1 */3 * quarterly audit haben"
    },
    {
      "rule_id": "MD_EXT_015",
      "module": "sot_validator_core",
      "file": "sot_validator_core.py",
      "class": "SoTValidator",
      "function": "validate_md_ext_015",
      "description": "MD-EXT-015: CI MUSS actions/upload-artifact@v4 verwenden"
    },
    {
      "rule_id": "MD_EXT_018",
      "module": "sot_validator_core",
      "file": "sot_validator_core.py",
      "class": "SoTValidator",
      "function": "validate_md_ext_018",
      "description": "MD-EXT-018: Sanctions MUSS sha256 Hash verwenden"
    },
    {
      "rule_id": "MD_GOV_005",
      "module": "sot_validator_core",
      "file": "sot_validator_core.py",
      "class": "SoTValidator",
      "function": "validate_md_gov_005",
      "description": "MD-GOV-005: Compliance Team MUSS Policies prüfen"
    },
    {
      "rule_id": "MD_GOV_006",
      "module": "sot_validator_core",
      "file": "sot_validator_core.py",
      "class": "SoTValidator",
      "function": "validate_md_gov_006",
      "description": "MD-GOV-006: Compliance Team MUSS Constraints genehmigen"
    },
    {
      "rule_id": "MD_GOV_007",
      "module": "sot_validator_core",
      "file": "sot_validator_core.py",
      "class": "SoTValidator",
      "function": "validate_md_gov_007",
      "description": "MD-GOV-007: Security Team MUSS Threat Modeling durchführen"
    },
    {
      "rule_id": "MD_GOV_008",
      "module": "sot_validator_core",
      "file": "sot_validator_core.py",
      "class": "SoTValidator",
      "function": "validate_md_gov_008",
      "description": "MD-GOV-008: Change-Prozess MUSS 7 Schritte haben"
    },
    {
      "rule_id": "MD_GOV_009",
      "module": "sot_validator_core",
      "file": "sot_validator_core.py",
      "class": "SoTValidator",
      "function": "validate_md_gov_009",
      "description": "MD-GOV-009: SHOULD->MUST promotion MUSS 90d + 99.5% SLA erfüllen"
    },
    {
      "rule_id": "MD_GOV_010",
      "module": "sot_validator_core",
      "file": "sot_validator_core.py",
      "class": "SoTValidator",
      "function": "validate_md_gov_010",
      "description": "MD-GOV-010: SHOULD->MUST promotion MUSS 95% Contract Test Coverage erfüllen"
    },
    {
      "rule_id": "MD_GOV_011",
      "module": "sot_validator_core",
      "file": "sot_validator_core.py",
      "class": "SoTValidator",
      "function": "validate_md_gov_011",
      "description": "MD-GOV-011: HAVE->SHOULD promotion MUSS Feature complete + Beta + Doku erfüllen"
    },
    {
      "rule_id": "MD_MANIFEST_004",
      "module": "sot_validator_core",
      "file": "sot_validator_core.py",
      "class": "SoTValidator",
      "function": "validate_md_manifest_004",
      "description": "MD-MANIFEST-004: manifest.yaml MUSS metadata.maturity definieren"
    },
    {
      "rule_id": "MD_MANIFEST_009",
      "module": "sot_validator_core",
      "file": "sot_validator_core.py",
      "class": "SoTValidator",
      "function": "validate_md_manifest_009",
      "description": "MD-MANIFEST-009: manifest.yaml MUSS technology_stack.linting_formatting definieren"
    },
    {
      "rule_id": "MD_MANIFEST_012",
      "module": "sot_validator_core",
      "file": "sot_validator_core.py",
      "class": "SoTValidator",
      "function": "validate_md_manifest_012",
      "description": "MD-MANIFEST-012: manifest.yaml MUSS artifacts.configuration.location definieren"
    },
    {
      "rule_id": "MD_MANIFEST_013",
      "module": "sot_validator_core",
      "file": "sot_validator_core.py",
      "class": "SoTValidator",
      "function": "validate_md_manifest_013",
      "description": "MD-MANIFEST-013: manifest.yaml SOLLTE artifacts.models.location definieren (AI/ML)"
    },
    {
      "rule_id": "MD_MANIFEST_014",
      "module": "sot_validator_core",
      "file": "sot_validator_core.py",
      "class": "SoTValidator",
      "function": "validate_md_manifest_014",
      "description": "MD-MANIFEST-014: manifest.yaml SOLLTE artifacts.protocols.location definieren (gRPC)"
    },
    {
      "rule_id": "MD_MANIFEST_015",
      "module": "sot_validator_core",
      "file": "sot_validator_core.py",
      "class": "SoTValidator",
      "function": "validate_md_manifest_015",
      "description": "MD-MANIFEST-015: manifest.yaml MUSS artifacts.tests.location definieren"
    },
    {
      "rule_id": "MD_MANIFEST_016",
      "module": "sot_validator_core",
      "file": "sot_validator_core.py",
      "class": "SoTValidator",
      "function": "validate_md_manifest_016",
      "description": "MD-MANIFEST-016: manifest.yaml MUSS artifacts.documentation.location definieren"
    },
    {
      "rule_id": "MD_MANIFEST_017",
      "module": "sot_validator_core",
      "file": "sot_validator_core.py",
      "class": "SoTValidator",
      "function": "validate_md_manifest_017",
      "description": "MD-MANIFEST-017: manifest.yaml MUSS artifacts.scripts.location definieren"
    },
    {
      "rule_id": "MD_MANIFEST_018",
      "module": "sot_validator_core",
      "file": "sot_validator_core.py",
      "class": "SoTValidator",
      "function": "validate_md_manifest_018",
      "description": "MD-MANIFEST-018: manifest.yaml MUSS artifacts.docker.files=[Dockerfile,docker-compose.yml] definiere"
    },
    {
      "rule_id": "MD_MANIFEST_023",
      "module": "sot_validator_core",
      "file": "sot_validator_core.py",
      "class": "SoTValidator",
      "function": "validate_md_manifest_023",
      "description": "MD-MANIFEST-023: manifest.yaml MUSS build.commands definieren"
    },
    {
      "rule_id": "MD_MANIFEST_024",
      "module": "sot_validator_core",
      "file": "sot_validator_core.py",
      "class": "SoTValidator",
      "function": "validate_md_manifest_024",
      "description": "MD-MANIFEST-024: manifest.yaml MUSS build.docker definieren"
    },
    {
      "rule_id": "MD_MANIFEST_025",
      "module": "sot_validator_core",
      "file": "sot_validator_core.py",
      "class": "SoTValidator",
      "function": "validate_md_manifest_025",
      "description": "MD-MANIFEST-025: manifest.yaml MUSS deployment.kubernetes.manifests_location definieren"
    },
    {
      "rule_id": "MD_MANIFEST_026",
      "module": "sot_validator_core",
      "file": "sot_validator_core.py",
      "class": "SoTValidator",
      "function": "validate_md_manifest_026",
      "description": "MD-MANIFEST-026: manifest.yaml MUSS deployment.helm.chart_location definieren"
    },
    {
      "rule_id": "MD_MANIFEST_027",
      "module": "sot_validator_core",
      "file": "sot_validator_core.py",
      "class": "SoTValidator",
      "function": "validate_md_manifest_027",
      "description": "MD-MANIFEST-027: manifest.yaml MUSS deployment.environment_variables definieren"
    },
    {
      "rule_id": "MD_MANIFEST_029",
      "module": "sot_validator_core",
      "file": "sot_validator_core.py",
      "class": "SoTValidator",
      "function": "validate_md_manifest_029",
      "description": "MD-MANIFEST-029: manifest.yaml MUSS testing.unit_tests.coverage_target>=80 definieren"
    },
    {
      "rule_id": "MD_MANIFEST_032",
      "module": "sot_validator_core",
      "file": "sot_validator_core.py",
      "class": "SoTValidator",
      "function": "validate_md_manifest_032",
      "description": "MD-MANIFEST-032: manifest.yaml MUSS testing.security_tests definieren"
    },
    {
      "rule_id": "MD_MANIFEST_033",
      "module": "sot_validator_core",
      "file": "sot_validator_core.py",
      "class": "SoTValidator",
      "function": "validate_md_manifest_033",
      "description": "MD-MANIFEST-033: manifest.yaml MUSS testing.performance_tests definieren"
    },
    {
      "rule_id": "MD_MANIFEST_036",
      "module": "sot_validator_core",
      "file": "sot_validator_core.py",
      "class": "SoTValidator",
      "function": "validate_md_manifest_036",
      "description": "MD-MANIFEST-036: manifest.yaml MUSS observability.logging.format=json definieren"
    },
    {
      "rule_id": "MD_MANIFEST_038",
      "module": "sot_validator_core",
      "file": "sot_validator_core.py",
      "class": "SoTValidator",
      "function": "validate_md_manifest_038",
      "description": "MD-MANIFEST-038: manifest.yaml MUSS observability.health_checks.liveness definieren"
    },
    {
      "rule_id": "MD_MANIFEST_039",
      "module": "sot_validator_core",
      "file": "sot_validator_core.py",
      "class": "SoTValidator",
      "function": "validate_md_manifest_039",
      "description": "MD-MANIFEST-039: manifest.yaml MUSS observability.health_checks.readiness definieren"
    },
    {
      "rule_id": "MD_MANIFEST_040",
      "module": "sot_validator_core",
      "file": "sot_validator_core.py",
      "class": "SoTValidator",
      "function": "validate_md_manifest_040",
      "description": "MD-MANIFEST-040: manifest.yaml MUSS development.setup definieren"
    },
    {
      "rule_id": "MD_MANIFEST_041",
      "module": "sot_validator_core",
      "file": "sot_validator_core.py",
      "class": "SoTValidator",
      "function": "validate_md_manifest_041",
      "description": "MD-MANIFEST-041: manifest.yaml MUSS development.local_development definieren"
    },
    {
      "rule_id": "MD_MANIFEST_042",
      "module": "sot_validator_core",
      "file": "sot_validator_core.py",
      "class": "SoTValidator",
      "function": "validate_md_manifest_042",
      "description": "MD-MANIFEST-042: manifest.yaml MUSS development.pre_commit_hooks definieren"
    },
    {
      "rule_id": "MD_MANIFEST_046",
      "module": "sot_validator_core",
      "file": "sot_validator_core.py",
      "class": "SoTValidator",
      "function": "validate_md_manifest_046",
      "description": "MD-MANIFEST-046: manifest.yaml MUSS performance.baseline_benchmarks definieren"
    },
    {
      "rule_id": "MD_MANIFEST_047",
      "module": "sot_validator_core",
      "file": "sot_validator_core.py",
      "class": "SoTValidator",
      "function": "validate_md_manifest_047",
      "description": "MD-MANIFEST-047: manifest.yaml MUSS performance.optimization_targets definieren"
    },
    {
      "rule_id": "MD_MANIFEST_048",
      "module": "sot_validator_core",
      "file": "sot_validator_core.py",
      "class": "SoTValidator",
      "function": "validate_md_manifest_048",
      "description": "MD-MANIFEST-048: manifest.yaml MUSS performance.resource_requirements definieren"
    },
    {
      "rule_id": "MD_MANIFEST_049",
      "module": "sot_validator_core",
      "file": "sot_validator_core.py",
      "class": "SoTValidator",
      "function": "validate_md_manifest_049",
      "description": "MD-MANIFEST-049: manifest.yaml MUSS changelog.location=CHANGELOG.md definieren"
    },
    {
      "rule_id": "MD_MANIFEST_050",
      "module": "sot_validator_core",
      "file": "sot_validator_core.py",
      "class": "SoTValidator",
      "function": "validate_md_manifest_050",
      "description": "MD-MANIFEST-050: manifest.yaml MUSS support.contacts definieren"
    },
    {
      "rule_id": "MD_POLICY_009",
      "module": "sot_validator_core",
      "file": "sot_validator_core.py",
      "class": "SoTValidator",
      "function": "validate_md_policy_009",
      "description": "MD-POLICY-009: Hashing MUSS deterministisch sein"
    },
    {
      "rule_id": "MD_POLICY_012",
      "module": "sot_validator_core",
      "file": "sot_validator_core.py",
      "class": "SoTValidator",
      "function": "validate_md_policy_012",
      "description": "MD-POLICY-012: Purpose Limitation MUSS erzwungen werden"
    },
    {
      "rule_id": "MD_POLICY_023",
      "module": "sot_validator_core",
      "file": "sot_validator_core.py",
      "class": "SoTValidator",
      "function": "validate_md_policy_023",
      "description": "MD-POLICY-023: Hourly Anchoring MUSS implementiert sein"
    },
    {
      "rule_id": "MD_POLICY_027",
      "module": "sot_validator_core",
      "file": "sot_validator_core.py",
      "class": "SoTValidator",
      "function": "validate_md_policy_027",
      "description": "MD-POLICY-027: Encryption MUSS AES-256-GCM verwenden"
    },
    {
      "rule_id": "MD_POLICY_028",
      "module": "sot_validator_core",
      "file": "sot_validator_core.py",
      "class": "SoTValidator",
      "function": "validate_md_policy_028",
      "description": "MD-POLICY-028: TLS 1.3 MUSS für in-transit encryption verwendet werden"
    },
    {
      "rule_id": "MD_PRINC_007",
      "module": "sot_validator_core",
      "file": "sot_validator_core.py",
      "class": "SoTValidator",
      "function": "validate_md_princ_007",
      "description": "MD-PRINC-007: RBAC MUSS für alle Zugriffe implementiert sein"
    },
    {
      "rule_id": "MD_PRINC_009",
      "module": "sot_validator_core",
      "file": "sot_validator_core.py",
      "class": "SoTValidator",
      "function": "validate_md_princ_009",
      "description": "MD-PRINC-009: Continuous Vulnerability Scanning MUSS implementiert sein"
    },
    {
      "rule_id": "MD_PRINC_013",
      "module": "sot_validator_core",
      "file": "sot_validator_core.py",
      "class": "SoTValidator",
      "function": "validate_md_princ_013",
      "description": "MD-PRINC-013: AlertManager MUSS für Alerting integriert sein"
    },
    {
      "rule_id": "MD_PRINC_018",
      "module": "sot_validator_core",
      "file": "sot_validator_core.py",
      "class": "SoTValidator",
      "function": "validate_md_princ_018",
      "description": "MD-PRINC-018: Load Balancing MUSS konfiguriert sein"
    },
    {
      "rule_id": "MD_PRINC_019",
      "module": "sot_validator_core",
      "file": "sot_validator_core.py",
      "class": "SoTValidator",
      "function": "validate_md_princ_019",
      "description": "MD-PRINC-019: Caching-Strategien MÜSSEN definiert sein"
    },
    {
      "rule_id": "MD_PRINC_020",
      "module": "sot_validator_core",
      "file": "sot_validator_core.py",
      "class": "SoTValidator",
      "function": "validate_md_princ_020",
      "description": "MD-PRINC-020: Performance-Benchmarks MÜSSEN als Gates definiert sein"
    },
    {
      "rule_id": "MD_STRUCT_009",
      "module": "sot_validator_core",
      "file": "sot_validator_core.py",
      "class": "SoTValidator",
      "function": "validate_md_struct_009",
      "description": "MD-STRUCT-009: Pfad {ROOT}/shards/{SHARD}/chart.yaml MUSS existieren"
    },
    {
      "rule_id": "MD_STRUCT_010",
      "module": "sot_validator_core",
      "file": "sot_validator_core.py",
      "class": "SoTValidator",
      "function": "validate_md_struct_010",
      "description": "MD-STRUCT-010: Pfad .../implementations/{IMPL}/manifest.yaml MUSS existieren"
    },
    {
      "rule_id": "MR001",
      "module": "sot_validator_core",
      "file": "sot_validator_core.py",
      "class": "SoTValidator",
      "function": "validate_mr001",
      "description": "MR001: Jede Root-Shard-Kombination MUSS eindeutig adressierbar sein"
    },
    {
      "rule_id": "MR002",
      "module": "sot_validator_core",
      "file": "sot_validator_core.py",
      "class": "SoTValidator",
      "function": "validate_mr002",
      "description": "MR002: Hash-Ledger MUSS über alle 384 Felder geführt werden"
    },
    {
      "rule_id": "MR003",
      "module": "sot_validator_core",
      "file": "sot_validator_core.py",
      "class": "SoTValidator",
      "function": "validate_mr003",
      "description": "MR003: Jedes Root-Shard-Paar MUSS isoliert entwickelbar sein"
    },
    {
      "rule_id": "MS001",
      "module": "sot_validator_core",
      "file": "sot_validator_core.py",
      "class": "SoTValidator",
      "function": "validate_ms001",
      "description": "MS001: manifest.yaml MUSS implementation_id, implementation_version, chart_version haben"
    },
    {
      "rule_id": "MS002",
      "module": "sot_validator_core",
      "file": "sot_validator_core.py",
      "class": "SoTValidator",
      "function": "validate_ms002",
      "description": "MS002: manifest.yaml MUSS technology_stack.language mit name und version definieren"
    },
    {
      "rule_id": "MS003",
      "module": "sot_validator_core",
      "file": "sot_validator_core.py",
      "class": "SoTValidator",
      "function": "validate_ms003",
      "description": "MS003: manifest.yaml MUSS artifacts.source_code.location definieren"
    },
    {
      "rule_id": "MS004",
      "module": "sot_validator_core",
      "file": "sot_validator_core.py",
      "class": "SoTValidator",
      "function": "validate_ms004",
      "description": "MS004: manifest.yaml MUSS dependencies mit Packages und Services auflisten"
    },
    {
      "rule_id": "MS005",
      "module": "sot_validator_core",
      "file": "sot_validator_core.py",
      "class": "SoTValidator",
      "function": "validate_ms005",
      "description": "MS005: manifest.yaml MUSS testing mit unit, integration, contract Tests definieren"
    },
    {
      "rule_id": "MS006",
      "module": "sot_validator_core",
      "file": "sot_validator_core.py",
      "class": "SoTValidator",
      "function": "validate_ms006",
      "description": "MS006: manifest.yaml MUSS observability.logging.pii_redaction: true setzen"
    },
    {
      "rule_id": "NETWORK",
      "module": "sot_validator_core",
      "file": "sot_validator_core.py",
      "class": "SoTValidator",
      "function": "validate_network",
      "description": "NETWORK_001-006: Blockchain network validation"
    },
    {
      "rule_id": "PII_CAT",
      "module": "sot_validator_core",
      "file": "sot_validator_core.py",
      "class": "SoTValidator",
      "function": "validate_pii_cat",
      "description": "PII_CAT_001-010: PII category validation"
    },
    {
      "rule_id": "PROP_TYPE",
      "module": "sot_validator_core",
      "file": "sot_validator_core.py",
      "class": "SoTValidator",
      "function": "validate_prop_type",
      "description": "PROP_TYPE_001-007: Proposal type validation"
    },
    {
      "rule_id": "RETENTION",
      "module": "sot_validator_core",
      "file": "sot_validator_core.py",
      "class": "SoTValidator",
      "function": "validate_retention",
      "description": "RETENTION_001-005: Retention period validation"
    },
    {
      "rule_id": "REWARD_POOL",
      "module": "sot_validator_core",
      "file": "sot_validator_core.py",
      "class": "SoTValidator",
      "function": "validate_reward_pool",
      "description": "REWARD_POOL_001-005: Reward pool validation"
    },
    {
      "rule_id": "SOT_V2",
      "module": "sot_validator_core",
      "file": "sot_validator_core.py",
      "class": "SoTValidator",
      "function": "validate_sot_v2",
      "description": "SOT-V2-0001 to SOT-V2-0189: Contract validation rules."
    },
    {
      "rule_id": "SOT_V2_0091",
      "module": "sot_validator_core",
      "file": "sot_validator_core.py",
      "class": "SoTValidator",
      "function": "validate_sot_v2_0091",
      "description": "SOT-V2-0091: grundprinzipien.ausnahmen.allowed_root_files"
    },
    {
      "rule_id": "SOT_V2_0092",
      "module": "sot_validator_core",
      "file": "sot_validator_core.py",
      "class": "SoTValidator",
      "function": "validate_sot_v2_0092",
      "description": "SOT-V2-0092: grundprinzipien.critical.structure_exceptions_yaml"
    },
    {
      "rule_id": "SOT_V2_0093",
      "module": "sot_validator_core",
      "file": "sot_validator_core.py",
      "class": "SoTValidator",
      "function": "validate_sot_v2_0093",
      "description": "SOT-V2-0093: grundprinzipien.root_level_ausnahmen"
    },
    {
      "rule_id": "SOT_V2_0094",
      "module": "sot_validator_core",
      "file": "sot_validator_core.py",
      "class": "SoTValidator",
      "function": "validate_sot_v2_0094",
      "description": "SOT-V2-0094: grundprinzipien.verbindliche_root_module"
    },
    {
      "rule_id": "TIER1_MKT",
      "module": "sot_validator_core",
      "file": "sot_validator_core.py",
      "class": "SoTValidator",
      "function": "validate_tier1_mkt",
      "description": "TIER1_MKT_001-007: Tier 1 market validation"
    },
    {
      "rule_id": "TS001",
      "module": "sot_validator_core",
      "file": "sot_validator_core.py",
      "class": "SoTValidator",
      "function": "validate_ts001",
      "description": "TS001: Hash-Anchoring MUSS Ethereum Mainnet + Polygon verwenden"
    },
    {
      "rule_id": "TS002",
      "module": "sot_validator_core",
      "file": "sot_validator_core.py",
      "class": "SoTValidator",
      "function": "validate_ts002",
      "description": "TS002: System MUSS W3C DID + Verifiable Credentials implementieren"
    },
    {
      "rule_id": "TS003",
      "module": "sot_validator_core",
      "file": "sot_validator_core.py",
      "class": "SoTValidator",
      "function": "validate_ts003",
      "description": "TS003: System MUSS IPFS für dezentralen Storage verwenden"
    },
    {
      "rule_id": "TS004",
      "module": "sot_validator_core",
      "file": "sot_validator_core.py",
      "class": "SoTValidator",
      "function": "validate_ts004",
      "description": "TS004: Smart Contracts MÜSSEN in Solidity oder Rust geschrieben sein"
    },
    {
      "rule_id": "TS005",
      "module": "sot_validator_core",
      "file": "sot_validator_core.py",
      "class": "SoTValidator",
      "function": "validate_ts005",
      "description": "TS005: System MUSS GDPR, eIDAS 2.0, EU AI Act, MiCA erfüllen"
    },
    {
      "rule_id": "VG001",
      "module": "sot_validator_core",
      "file": "sot_validator_core.py",
      "class": "SoTValidator",
      "function": "validate_vg001",
      "description": "VG001: Alle Versionen MÜSSEN Semver (MAJOR.MINOR.PATCH) verwenden"
    },
    {
      "rule_id": "VG002",
      "module": "sot_validator_core",
      "file": "sot_validator_core.py",
      "class": "SoTValidator",
      "function": "validate_vg002",
      "description": "VG002: Breaking Changes MÜSSEN Migration Guide + Compatibility Layer haben"
    },
    {
      "rule_id": "VG003",
      "module": "sot_validator_core",
      "file": "sot_validator_core.py",
      "class": "SoTValidator",
      "function": "validate_vg003",
      "description": "VG003: Deprecations MÜSSEN 180 Tage Notice Period haben"
    },
    {
      "rule_id": "VG004",
      "module": "sot_validator_core",
      "file": "sot_validator_core.py",
      "class": "SoTValidator",
      "function": "validate_vg004",
      "description": "VG004: Alle MUST-Capability-Änderungen MÜSSEN RFC-Prozess durchlaufen"
    },
    {
      "rule_id": "VG005",
      "module": "sot_validator_core",
      "file": "sot_validator_core.py",
      "class": "SoTValidator",
      "function": "validate_vg005",
      "description": "VG005: Jeder Shard MUSS einen Owner haben"
    },
    {
      "rule_id": "VG006",
      "module": "sot_validator_core",
      "file": "sot_validator_core.py",
      "class": "SoTValidator",
      "function": "validate_vg006",
      "description": "VG006: Architecture Board MUSS alle chart.yaml-Änderungen reviewen"
    },
    {
      "rule_id": "VG007",
      "module": "sot_validator_core",
      "file": "sot_validator_core.py",
      "class": "SoTValidator",
      "function": "validate_vg007",
      "description": "VG007: Architecture Board Approval-Pflicht"
    },
    {
      "rule_id": "VG008",
      "module": "sot_validator_core",
      "file": "sot_validator_core.py",
      "class": "SoTValidator",
      "function": "validate_vg008",
      "description": "VG008: Governance Roles Definition"
    },
    {
      "rule_id": "ALL_ENHANCED",
      "module": "enhanced_validators",
      "file": "enhanced_validators.py",
      "class": "EnhancedValidators",
      "function": "validate_all_enhanced",
      "description": "Run all enhanced validations and return results"
    },
    {
      "rule_id": "DC003_CANARY_ENHANCED",
      "module": "enhanced_validators",
      "file": "enhanced_validators.py",
      "class": "EnhancedValidators",
      "function": "validate_dc003_canary_enhanced",
      "description": "DC003 ENHANCED: Canary Deployment MUSS 5% → 25% → 50% → 100% Stages verwenden"
    },
    {
      "rule_id": "MD_PRINC_020_ENHANCED",
      "module": "enhanced_validators",
      "file": "enhanced_validators.py",
      "class": "EnhancedValidators",
      "function": "validate_md_princ_020_enhanced",
      "description": "MD-PRINC-020 ENHANCED: Auto-Generate Documentation vollständig implementieren"
    },
    {
      "rule_id": "TS005_MTLS_ENFORCED",
      "module": "enhanced_validators",
      "file": "enhanced_validators.py",
      "class": "EnhancedValidators",
      "function": "validate_ts005_mtls_enforced",
      "description": "TS005 ENHANCED: mTLS MUSS in JEDEM chart.yaml enforced sein"
    },
    {
      "rule_id": "VG002_ENHANCED",
      "module": "enhanced_validators",
      "file": "enhanced_validators.py",
      "class": "EnhancedValidators",
      "function": "validate_vg002_enhanced",
      "description": "VG002 ENHANCED: Breaking Changes MÜSSEN Migration Guide + Compatibility Layer haben"
    },
    {
      "rule_id": "VG003_ENHANCED",
      "module": "enhanced_validators",
      "file": "enhanced_validators.py",
      "class": "EnhancedValidators",
      "function": "validate_vg003_enhanced",
      "description": "VG003 ENHANCED: Deprecations MÜSSEN 180 Tage Notice Period haben"
    },
    {
      "rule_id": "VG004_ENHANCED",
      "module": "enhanced_validators",
      "file": "enhanced_validators.py",
      "class": "EnhancedValidators",
      "function": "validate_vg004_enhanced",
      "description": "VG004 ENHANCED: Alle MUST-Capability-Änderungen MÜSSEN RFC-Prozess durchlaufen"
    },
    {
      "rule_id": "ALL_ADDITIONAL",
      "module": "additional_validators",
      "file": "additional_validators.py",
      "class": "AdditionalValidators",
      "function": "validate_all_additional",
      "description": "Run all additional validations and return results"
    },
    {
      "rule_id": "CONFORMANCE_FRAMEWORK_SPECIFIC",
      "module": "additional_validators",
      "file": "additional_validators.py",
      "class": "AdditionalValidators",
      "function": "validate_conformance_framework_specific",
      "description": "CS009 ENHANCED: Schemathesis Framework prüfen"
    },
    {
      "rule_id": "CS003_CAPABILITY_SEMANTICS",
      "module": "additional_validators",
      "file": "additional_validators.py",
      "class": "AdditionalValidators",
      "function": "validate_cs003_capability_semantics",
      "description": "CS003 ENHANCED: Capability-Semantik prüfen"
    },
    {
      "rule_id": "LINTING_TOOLS_SPECIFIC",
      "module": "additional_validators",
      "file": "additional_validators.py",
      "class": "AdditionalValidators",
      "function": "validate_linting_tools_specific",
      "description": "MD-MANIFEST-009 ENHANCED: Spezifische Linting-Tools prüfen"
    },
    {
      "rule_id": "TESTING_COVERAGE_COMPLETE",
      "module": "additional_validators",
      "file": "additional_validators.py",
      "class": "AdditionalValidators",
      "function": "validate_testing_coverage_complete",
      "description": "MD-MANIFEST-029 ENHANCED: Vollständige Coverage-Anforderungen"
    },
    {
      "rule_id": "ALERTMANAGER_CONFIG",
      "module": "maximalstand_validators",
      "file": "maximalstand_validators.py",
      "class": "MaximalstandValidators",
      "function": "validate_alertmanager_config",
      "description": "OBS-005 [MEDIUM]: AlertManager MUSS konfiguriert sein"
    },
    {
      "rule_id": "ALL_MAXIMALSTAND",
      "module": "maximalstand_validators",
      "file": "maximalstand_validators.py",
      "class": "MaximalstandValidators",
      "function": "validate_all_maximalstand",
      "description": "Run ALL 25 maximalstand validations"
    },
    {
      "rule_id": "BIAS_AUDIT_WORKFLOW",
      "module": "maximalstand_validators",
      "file": "maximalstand_validators.py",
      "class": "MaximalstandValidators",
      "function": "validate_bias_audit_workflow",
      "description": "AI-001 [MEDIUM]: Quarterly Bias Audit (AI/ML Shards) PFLICHT"
    },
    {
      "rule_id": "CAPABILITY_PROMOTION_AUTOMATION",
      "module": "maximalstand_validators",
      "file": "maximalstand_validators.py",
      "class": "MaximalstandValidators",
      "function": "validate_capability_promotion_automation",
      "description": "GOV-004 [MEDIUM]: Capability Promotion MUSS automatisiert sein"
    },
    {
      "rule_id": "CHANGELOG_REQUIRED",
      "module": "maximalstand_validators",
      "file": "maximalstand_validators.py",
      "class": "MaximalstandValidators",
      "function": "validate_changelog_required",
      "description": "FILE-001 [CRITICAL]: Jeder Shard MUSS CHANGELOG.md haben"
    },
    {
      "rule_id": "COMPLIANCE_REPORTS",
      "module": "maximalstand_validators",
      "file": "maximalstand_validators.py",
      "class": "MaximalstandValidators",
      "function": "validate_compliance_reports",
      "description": "ARTIFACT-004 [MEDIUM]: Quarterly Compliance Reports PFLICHT"
    },
    {
      "rule_id": "CONFORMANCE_README",
      "module": "maximalstand_validators",
      "file": "maximalstand_validators.py",
      "class": "MaximalstandValidators",
      "function": "validate_conformance_readme",
      "description": "FILE-005 [MEDIUM]: conformance/README.md PFLICHT"
    },
    {
      "rule_id": "CONTAINER_REGISTRY",
      "module": "maximalstand_validators",
      "file": "maximalstand_validators.py",
      "class": "MaximalstandValidators",
      "function": "validate_container_registry",
      "description": "ARTIFACT-001 [MEDIUM]: Container Images → ghcr.io/ssid"
    },
    {
      "rule_id": "CSV_PII_DETECTION",
      "module": "maximalstand_validators",
      "file": "maximalstand_validators.py",
      "class": "MaximalstandValidators",
      "function": "validate_csv_pii_detection",
      "description": "SEC-007 [LOW]: .csv mit PII MUSS erkannt werden (komplex)"
    },
    {
      "rule_id": "DAILY_CHECKS_WORKFLOW",
      "module": "maximalstand_validators",
      "file": "maximalstand_validators.py",
      "class": "MaximalstandValidators",
      "function": "validate_daily_checks_workflow",
      "description": "CI-001 [HIGH]: Daily Checks (Sanctions, Dependencies) PFLICHT"
    },
    {
      "rule_id": "DOCKERFILE_REQUIRED",
      "module": "maximalstand_validators",
      "file": "maximalstand_validators.py",
      "class": "MaximalstandValidators",
      "function": "validate_dockerfile_required",
      "description": "FILE-003 [CRITICAL]: Jede Implementation MUSS Dockerfile haben"
    },
    {
      "rule_id": "E2E_TESTS_REQUIRED",
      "module": "maximalstand_validators",
      "file": "maximalstand_validators.py",
      "class": "MaximalstandValidators",
      "function": "validate_e2e_tests_required",
      "description": "TEST-004 [HIGH]: E2E Tests für Key User Journeys PFLICHT"
    },
    {
      "rule_id": "EIDAS_ENFORCEMENT",
      "module": "maximalstand_validators",
      "file": "maximalstand_validators.py",
      "class": "MaximalstandValidators",
      "function": "validate_eidas_enforcement",
      "description": "COMP-002 [LOW]: eIDAS 2.0 Enforcement"
    },
    {
      "rule_id": "ENV_KEY_BLOCKING",
      "module": "maximalstand_validators",
      "file": "maximalstand_validators.py",
      "class": "MaximalstandValidators",
      "function": "validate_env_key_blocking",
      "description": "SEC-006 [MEDIUM]: .env/.key Dateien MÜSSEN blockiert sein"
    },
    {
      "rule_id": "ETHICS_BOARD_REVIEW",
      "module": "maximalstand_validators",
      "file": "maximalstand_validators.py",
      "class": "MaximalstandValidators",
      "function": "validate_ethics_board_review",
      "description": "AI-003 [LOW]: Ethics Board Review PFLICHT für AI/ML"
    },
    {
      "rule_id": "GETTING_STARTED_REQUIRED",
      "module": "maximalstand_validators",
      "file": "maximalstand_validators.py",
      "class": "MaximalstandValidators",
      "function": "validate_getting_started_required",
      "description": "FILE-004 [HIGH]: Jeder Shard MUSS docs/getting-started.md haben"
    },
    {
      "rule_id": "MICA_ENFORCEMENT",
      "module": "maximalstand_validators",
      "file": "maximalstand_validators.py",
      "class": "MaximalstandValidators",
      "function": "validate_mica_enforcement",
      "description": "COMP-003 [LOW]: MiCA Enforcement (Finanz-Shards)"
    },
    {
      "rule_id": "MODEL_CARDS_REQUIRED",
      "module": "maximalstand_validators",
      "file": "maximalstand_validators.py",
      "class": "MaximalstandValidators",
      "function": "validate_model_cards_required",
      "description": "AI-002 [MEDIUM]: Model Cards PFLICHT für AI/ML Shards"
    },
    {
      "rule_id": "OAUTH21_ENFORCEMENT",
      "module": "maximalstand_validators",
      "file": "maximalstand_validators.py",
      "class": "MaximalstandValidators",
      "function": "validate_oauth21_enforcement",
      "description": "STD-001 [LOW]: OAuth 2.1 MUSS verwendet werden"
    },
    {
      "rule_id": "OIDC_ENFORCEMENT",
      "module": "maximalstand_validators",
      "file": "maximalstand_validators.py",
      "class": "MaximalstandValidators",
      "function": "validate_oidc_enforcement",
      "description": "STD-002 [LOW]: OpenID Connect MUSS verwendet werden"
    },
    {
      "rule_id": "QUARTERLY_AUDIT_WORKFLOW",
      "module": "maximalstand_validators",
      "file": "maximalstand_validators.py",
      "class": "MaximalstandValidators",
      "function": "validate_quarterly_audit_workflow",
      "description": "CI-004 [HIGH]: Quarterly Audit Workflow PFLICHT"
    },
    {
      "rule_id": "README_REQUIRED",
      "module": "maximalstand_validators",
      "file": "maximalstand_validators.py",
      "class": "MaximalstandValidators",
      "function": "validate_readme_required",
      "description": "FILE-002 [CRITICAL]: Jeder Shard MUSS README.md haben"
    },
    {
      "rule_id": "SECURITY_AUDIT_WORKFLOW",
      "module": "maximalstand_validators",
      "file": "maximalstand_validators.py",
      "class": "MaximalstandValidators",
      "function": "validate_security_audit_workflow",
      "description": "CI-003 [HIGH]: Quarterly Security Audit Workflow PFLICHT"
    },
    {
      "rule_id": "TEST_REPORTS_OUTPUT",
      "module": "maximalstand_validators",
      "file": "maximalstand_validators.py",
      "class": "MaximalstandValidators",
      "function": "validate_test_reports_output",
      "description": "TEST-005 [MEDIUM]: Test Reports MÜSSEN generiert werden"
    },
    {
      "rule_id": "W3C_DID_VC_ENFORCEMENT",
      "module": "maximalstand_validators",
      "file": "maximalstand_validators.py",
      "class": "MaximalstandValidators",
      "function": "validate_w3c_did_vc_enforcement",
      "description": "STD-003 [LOW]: W3C DID/VC Standards MÜSSEN verwendet werden"
    },
    {
      "rule_id": "WORM_STORAGE_ENFORCEMENT",
      "module": "maximalstand_validators",
      "file": "maximalstand_validators.py",
      "class": "MaximalstandValidators",
      "function": "validate_worm_storage_enforcement",
      "description": "STORAGE-001 [MEDIUM]: WORM Storage (10 Jahre) MUSS enforced sein"
    }
  ]
}