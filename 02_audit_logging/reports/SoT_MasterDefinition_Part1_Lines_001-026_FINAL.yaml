# ====================================================================================
# SoT MASTER-DEFINITION EXTRACTION - PART 1, LINES 1-26
# ====================================================================================
# Quelle: SSID_structure_level3_part1_MAX.md
# Zeilen: 1-26 (Grundprinzipien)
# Datum: 2025-10-18
# Extraktionsmethode: MANUELLE, ZEILENBASIERTE ANALYSE
# Status: PRODUCTION-READY AUDIT ARTIFACT
# ====================================================================================

metadata:
  source_file: "16_codex/structure/SSID_structure_level3_part1_MAX.md"
  extraction_method: "manual_line_by_line"
  extraction_date: "2025-10-18"
  line_range: "1-26"
  section: "Grundprinzipien"
  total_rules_extracted: 4
  zero_tolerance_policy: true
  audit_ready: true

# ====================================================================================
# REGEL 1: Verbindliche Root-Module (24) - Bindende Liste
# ====================================================================================

rules:
  - rule_id: SOT-MD-001
    line_number: 20
    section: "Grundprinzipien"
    subsection: "root_structure"
    title: "Verbindliche Root-Module (24) - Bindende v4.1-Liste"

    original_text: |
      **Verbindliche Root-Module (24):** Die obige v4.1-Liste ist bindend.
      Abweichende historische Namen sind ungültig und führen zu FAIL.

    category: "root_structure"
    priority: "must"

    description: |
      Die 24 Root-Module aus der v4.1-Liste sind BINDEND und UNVERÄNDERLICH.
      Jede Abweichung von den exakten Namen führt zu einem FAIL im CI/CD.
      Historische Namen (alte Versionen) sind UNGÜLTIG.

    enforcement: |
      CI MUSS exakte Übereinstimmung mit der v4.1-Liste prüfen.
      KEIN Root-Ordner darf abweichende Namen haben.
      KEINE historischen Varianten erlaubt.

    evidence_schema:
      type: "directory_existence_check"
      validation_method: "exact_match_with_v4.1_list"
      expected_roots:
        - "01_ai_layer"
        - "02_audit_logging"
        - "03_core"
        - "04_deployment"
        - "05_documentation"
        - "06_data_pipeline"
        - "07_governance_legal"
        - "08_identity_score"
        - "09_meta_identity"
        - "10_interoperability"
        - "11_test_simulation"
        - "12_tooling"
        - "13_ui_layer"
        - "14_zero_time_auth"
        - "15_infra"
        - "16_codex"
        - "17_observability"
        - "18_data_layer"
        - "19_adapters"
        - "20_foundation"
        - "21_post_quantum_crypto"
        - "22_datasets"
        - "23_compliance"
        - "24_meta_orchestration"
      validation_rules:
        - "Alle 24 MÜSSEN existieren"
        - "Namen MÜSSEN exakt sein (case-sensitive)"
        - "Keine historischen Varianten erlaubt"
        - "Keine zusätzlichen Root-Ordner ohne Exception"
      ci_enforcement: true
      failure_mode: "HARD FAIL bei Abweichung"

# ====================================================================================
# REGEL 2: Root-Level Ausnahmen - Kanonische Definition
# ====================================================================================

  - rule_id: SOT-MD-002
    line_number: 22
    section: "Grundprinzipien"
    subsection: "root_structure"
    title: "Root-Level Ausnahmen - Kanonische Definition in root_level_exceptions.yaml"

    original_text: |
      **Root-Level Ausnahmen:** Siehe kanonische Definition in
      `23_compliance/exceptions/root_level_exceptions.yaml` (CI-Guard-Enforcement)

    category: "root_structure"
    priority: "must"

    description: |
      Root-Level Ausnahmen sind AUSSCHLIESSLICH in der Datei
      23_compliance/exceptions/root_level_exceptions.yaml definiert.
      Diese Datei ist die EINZIGE gültige Quelle für Root-Level Ausnahmen.
      CI-Guard-Enforcement ist aktiviert.

    enforcement: |
      CI MUSS root_level_exceptions.yaml als einzige Quelle verwenden.
      KEINE anderen Dateien dürfen Root-Level Ausnahmen definieren.
      KEINE Kopien erlaubt.

    evidence_schema:
      type: "file_existence_and_authority"
      canonical_file: "23_compliance/exceptions/root_level_exceptions.yaml"
      validation_rules:
        - "Diese Datei ist die EINZIGE gültige Quelle"
        - "KEINE Duplikate erlaubt"
        - "CI MUSS diese Datei beim Root-Check einlesen"
        - "KEINE alternative Exception-Files erlaubt"
      ci_enforcement: true
      ci_guard: "CI-Guard-Enforcement aktiv"
      failure_mode: "FAIL bei fehlender Datei oder Duplikaten"

# ====================================================================================
# REGEL 3: Standard-Ausnahmen - Git und Basisdateien
# ====================================================================================

  - rule_id: SOT-MD-003
    line_number: 24
    section: "Grundprinzipien"
    subsection: "root_structure"
    title: "Standard-Ausnahmen - .git/, .github/, LICENSE, README.md"

    original_text: |
      **Ausnahmen:** .git/, .github/, LICENSE, README.md

    category: "root_structure"
    priority: "must"

    description: |
      Standard-Ausnahmen im Root-Level:
      - .git/ (Git repository metadata)
      - .github/ (GitHub workflows und configs)
      - LICENSE (Lizenz-Datei)
      - README.md (Root-README)

      Diese 4 Items sind IMMER erlaubt im Root, ohne weitere Prüfung.

    enforcement: |
      Diese Dateien/Ordner sind IMMER erlaubt im Root.
      CI DARF diese Items NICHT als Struktur-Violations melden.
      KEINE weitere Prüfung für diese Items erforderlich.

    evidence_schema:
      type: "exception_whitelist"
      allowed_items:
        - ".git/"
        - ".github/"
        - "LICENSE"
        - "README.md"
      validation_rules:
        - "Diese Items blockieren NICHT die Root-Struktur-Validierung"
        - "CI MUSS diese Items ignorieren bei Root-Check"
        - "Diese Items sind IMMER erlaubt"
      ci_enforcement: true
      failure_mode: "KEIN FAIL - immer erlaubt"

# ====================================================================================
# REGEL 4: KRITISCH - Einzige gültige Struktur-Exception Datei
# ====================================================================================

  - rule_id: SOT-MD-004
    line_number: 25
    section: "Grundprinzipien"
    subsection: "root_structure"
    title: "KRITISCH - structure_exceptions.yaml ist die EINZIGE gültige Struktur-Exception"

    original_text: |
      **KRITISCH:** `23_compliance/exceptions/structure_exceptions.yaml` ist die
      einzige gültige Struktur-Exception. Keine Kopie im Root oder modulnah.

    category: "root_structure"
    priority: "must"
    criticality: "CRITICAL"

    description: |
      KRITISCHE REGEL:
      NUR 23_compliance/exceptions/structure_exceptions.yaml ist die gültige
      Struktur-Exception-Quelle.

      VERBOTEN:
      - Kopien dieser Datei im Root-Level
      - Kopien dieser Datei modulnah (in einzelnen Root-Ordnern)
      - Alternative structure_exceptions.yaml Dateien

      Es darf EXAKT 1 Datei mit diesem Namen existieren, an genau diesem Pfad.

    enforcement: |
      CI MUSS prüfen:
      1. structure_exceptions.yaml existiert an 23_compliance/exceptions/
      2. KEINE Kopien von structure_exceptions.yaml in Root
      3. KEINE Kopien von structure_exceptions.yaml in modulnahen Ordnern

      FAIL bei:
      - Duplikaten
      - Falscher Location
      - Fehlender Datei

    evidence_schema:
      type: "singleton_file_enforcement"
      canonical_file: "23_compliance/exceptions/structure_exceptions.yaml"
      forbidden_duplicates:
        - "structure_exceptions.yaml"
        - "*/structure_exceptions.yaml"
        - "**/structure_exceptions.yaml"
      validation_rules:
        - "EXAKT 1 Datei mit diesem Namen MUSS existieren"
        - "MUSS an genau diesem Pfad liegen: 23_compliance/exceptions/"
        - "KEINE Kopien erlaubt (weder Root noch modulnah)"
        - "KEINE alternativen Locations erlaubt"
      ci_enforcement: true
      failure_mode: "HARD FAIL bei Duplikat oder falscher Location"
      criticality: "CRITICAL - Zero Tolerance"

# ====================================================================================
# INTEGRATION STATUS
# ====================================================================================

integration_status:
  extracted: true
  date: "2025-10-18"
  rules_count: 4
  audit_ready: true

  pending_integration:
    - "16_codex/contracts/sot/sot_contract.yaml"
    - "03_core/validators/sot/sot_validator_core.py"
    - "23_compliance/policies/sot/sot_policy.rego"
    - "12_tooling/cli/sot_validator.py"
    - "11_test_simulation/tests_compliance/test_sot_validator.py"

  next_step: "Integration in alle 5 SoT-Artefakte + Coverage-Check"

# ====================================================================================
# AUDIT TRAIL
# ====================================================================================

audit_trail:
  extraction_completed: "2025-10-18"
  extraction_method: "manual_line_by_line"
  zero_tolerance_compliance: true
  ready_for_sha256: true
  ready_for_registry_update: true
  ready_for_ci_integration: true

# ====================================================================================
# REGEL-MAPPING FÜR 5 SOT-ARTEFAKTE
# ====================================================================================

artifact_mapping:
  contract: "16_codex/contracts/sot/sot_contract.yaml"
  validator: "03_core/validators/sot/sot_validator_core.py"
  policy: "23_compliance/policies/sot/sot_policy.rego"
  cli: "12_tooling/cli/sot_validator.py"
  tests: "11_test_simulation/tests_compliance/test_sot_validator.py"

  integration_requirement: "ALLE 4 Regeln MÜSSEN in ALLEN 5 Artefakten vorhanden sein"
  coverage_target: "100%"
  zero_shadow_rules: true
