{
  "blueprint_version": "v4.4",
  "manifest_version": "1.0.0",
  "description": "Federation Manifest - Tracks federated SSID nodes for decentralized governance synchronization",
  "created_at": "2025-10-11T20:00:00Z",
  "last_updated": "2025-10-11T20:00:00Z",
  "federation": {
    "enabled": false,
    "mode": "participant",
    "consensus_threshold": 0.66,
    "sync_interval_minutes": 60,
    "last_sync": null
  },
  "nodes": [],
  "local_node": {
    "node_id": "",
    "node_name": "",
    "organization": "",
    "git_remote": "",
    "api_endpoint": "",
    "public_key_fingerprint": "",
    "registered_at": null,
    "status": "inactive"
  },
  "consensus_history": [],
  "statistics": {
    "total_nodes": 0,
    "active_nodes": 0,
    "total_syncs": 0,
    "successful_syncs": 0,
    "failed_syncs": 0,
    "consensus_agreements": 0,
    "consensus_disagreements": 0,
    "last_consensus_check": null
  },
  "compliance": {
    "gdpr_compliant": true,
    "eidas_compliant": true,
    "mica_compliant": true,
    "no_pii": true,
    "metadata_only": true,
    "distributed_trust": true,
    "description": "Federated sync uses only cryptographic hashes and metadata, no personal data. Trust is distributed via hash-majority consensus."
  },
  "node_schema": {
    "description": "Schema for federated node records",
    "fields": {
      "node_id": "Unique identifier (SHA256 of node metadata)",
      "node_name": "Human-readable node name",
      "organization": "Organization operating this node",
      "git_remote": "Git repository URL for this node",
      "api_endpoint": "REST API endpoint for federation sync (optional)",
      "public_key_fingerprint": "SSH/GPG public key fingerprint for verification",
      "added_at": "ISO 8601 timestamp when node joined federation",
      "last_seen": "ISO 8601 timestamp of last successful sync",
      "status": "Node status: active, inactive, suspended",
      "compliance_score": "Latest compliance score from this node",
      "blueprint_version": "Blueprint version running on this node",
      "trust_score": "Calculated trust score based on consensus participation (0-100)"
    }
  },
  "consensus_schema": {
    "description": "Schema for consensus validation records",
    "fields": {
      "event_hash": "SHA256 hash of the event being validated",
      "event_type": "Type of governance event",
      "event_version": "Version of the event",
      "initiated_at": "Timestamp when consensus check started",
      "completed_at": "Timestamp when consensus was achieved",
      "participating_nodes": "List of node_ids that participated",
      "node_hashes": "Map of node_id to their computed hash",
      "consensus_hash": "The agreed-upon hash (majority)",
      "agreement_percentage": "Percentage of nodes agreeing (0-100)",
      "consensus_achieved": "Boolean: true if threshold met",
      "disagreeing_nodes": "List of node_ids with different hashes",
      "resolution": "How disagreement was resolved (if any)"
    }
  },
  "sync_protocol": {
    "version": "1.0.0",
    "description": "Federation synchronization protocol specification",
    "steps": [
      "1. Fetch remote node's registry events log",
      "2. Compare event hashes with local events",
      "3. Identify new/divergent events",
      "4. Initiate consensus validation for divergent events",
      "5. Apply consensus-approved events to local registry",
      "6. Update federation manifest with sync results"
    ],
    "conflict_resolution": {
      "strategy": "hash_majority_voting",
      "threshold": 0.66,
      "tie_breaking": "timestamp_priority",
      "description": "If â‰¥66% of nodes agree on a hash, it's accepted. Ties use earliest timestamp."
    }
  },
  "verification": {
    "local_verification": "python3 12_tooling/scripts/consensus_validator.py --verify",
    "sync_command": "python3 12_tooling/scripts/federation_sync_manager.py --sync",
    "add_node_command": "python3 12_tooling/scripts/federation_sync_manager.py --add-node <git_url>",
    "consensus_check": "python3 12_tooling/scripts/consensus_validator.py --check-event <event_hash>"
  },
  "usage": {
    "enable_federation": "Update federation.enabled to true and configure local_node",
    "sync_manually": "python3 12_tooling/scripts/federation_sync_manager.py --sync",
    "view_consensus": "python3 12_tooling/scripts/consensus_validator.py --show-history",
    "automated_sync": "Enable CI/CD workflow: .github/workflows/federated_sync.yml"
  },
  "documentation": {
    "operations_guide": "05_documentation/OPERATIONS_GUIDE.md",
    "federation_guide": "05_documentation/FEDERATION_GUIDE.md",
    "blueprint_proposal": "05_documentation/blueprints/Blueprint_v4.4_Proposal.md"
  },
  "security": {
    "authentication": "Public key fingerprint verification",
    "integrity": "SHA256 hash validation on all events",
    "trust_model": "Distributed trust via consensus (no single point of failure)",
    "audit_trail": "All consensus decisions logged in consensus_history",
    "isolation": "Each node maintains independent registry, sync is append-only"
  }
}
